import Auth from "../auth/auth.js";
class Reload {
  constructor({
    appId,
    creationTime,
    endTime,
    engineTime,
    id,
    links,
    log,
    partial,
    startTime,
    status,
    tenantId,
    type,
    userId,
    ...rest
  }, auth) {
    this.auth = auth;
    this.appId = appId;
    this.creationTime = creationTime;
    this.endTime = endTime;
    this.engineTime = engineTime;
    this.id = id;
    if (links !== void 0 && links !== null) {
      if (links instanceof ReloadLinks) {
        this.links = links;
      } else {
        this.links = new ReloadLinks(links, this.auth);
      }
    }
    this.log = log;
    this.partial = partial;
    this.startTime = startTime;
    this.status = status;
    this.tenantId = tenantId;
    this.type = type;
    this.userId = userId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  async cancel() {
    await this.auth.rest(
      "/reloads/{reloadId}/actions/cancel".replace("{reloadId}", this.id ?? ""),
      {
        method: "POST"
      }
    );
  }
}
class Href {
  constructor({
    href,
    ...rest
  }, auth) {
    this.auth = auth;
    this.href = href;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ReloadLinks {
  constructor({
    self,
    ...rest
  }, auth) {
    this.auth = auth;
    if (self !== void 0 && self !== null) {
      if (self instanceof Href) {
        this.self = self;
      } else {
        this.self = new Href(self, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ReloadRequest {
  constructor({
    appId,
    partial,
    ...rest
  }, auth) {
    this.auth = auth;
    this.appId = appId;
    this.partial = partial;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ReloadsClass {
  constructor({
    data,
    links,
    ...rest
  }, auth) {
    this.auth = auth;
    if (data.length > 0 && data[0] instanceof Reload) {
      this.data = data;
    } else {
      this.data = data.map((element) => new Reload(element, this.auth));
    }
    if (links instanceof ReloadsLinks) {
      this.links = links;
    } else {
      this.links = new ReloadsLinks(links, this.auth);
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ReloadsLinks {
  constructor({
    self,
    next,
    prev,
    ...rest
  }, auth) {
    this.auth = auth;
    if (self !== void 0 && self !== null) {
      if (self instanceof Href) {
        this.self = self;
      } else {
        this.self = new Href(self, this.auth);
      }
    }
    if (next !== void 0 && next !== null) {
      if (next instanceof Href) {
        this.next = next;
      } else {
        this.next = new Href(next, this.auth);
      }
    }
    if (prev !== void 0 && prev !== null) {
      if (prev instanceof Href) {
        this.prev = prev;
      } else {
        this.prev = new Href(prev, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Reloads {
  constructor(config) {
    this.config = config instanceof Auth ? config.config : config;
    this.auth = config instanceof Auth ? config : new Auth(config);
  }
  async get(reloadId) {
    const response = await this.auth.rest(
      "/reloads/{reloadId}".replace("{reloadId}", reloadId),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new Reload(responseJson, this.auth);
  }
  async getReloads(queryParams) {
    const response = await this.auth.rest(
      `/reloads?${Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => `${k}=${v}`).join("&")}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new ReloadsClass(responseJson, this.auth);
  }
  async create(data) {
    const response = await this.auth.rest(
      "/reloads",
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    return new Reload(responseJson, this.auth);
  }
}
export {
  Href,
  Reload,
  ReloadLinks,
  ReloadRequest,
  Reloads,
  ReloadsClass,
  ReloadsLinks
};
