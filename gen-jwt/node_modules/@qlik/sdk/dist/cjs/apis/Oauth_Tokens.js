var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Oauth_Tokens_exports = {};
__export(Oauth_Tokens_exports, {
  Link: () => Link,
  OauthToken: () => OauthToken,
  OauthTokenPage: () => OauthTokenPage,
  OauthTokenPageLinks: () => OauthTokenPageLinks,
  OauthTokens: () => OauthTokens
});
module.exports = __toCommonJS(Oauth_Tokens_exports);
var import_auth = __toESM(require("../auth/auth.js"));
class Link {
  constructor({
    href,
    ...rest
  }, auth) {
    this.auth = auth;
    this.href = href;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class OauthToken {
  constructor({
    description,
    deviceType,
    id,
    lastUsed,
    tenantId,
    userId,
    ...rest
  }, auth) {
    this.auth = auth;
    this.description = description;
    this.deviceType = deviceType;
    this.id = id;
    this.lastUsed = lastUsed;
    this.tenantId = tenantId;
    this.userId = userId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class OauthTokenPage {
  constructor({
    data,
    links,
    ...rest
  }, auth) {
    this.auth = auth;
    if (data.length > 0 && data[0] instanceof OauthToken) {
      this.data = data;
    } else {
      this.data = data.map((element) => new OauthToken(element, this.auth));
    }
    if (links instanceof OauthTokenPageLinks) {
      this.links = links;
    } else {
      this.links = new OauthTokenPageLinks(links, this.auth);
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class OauthTokenPageLinks {
  constructor({
    next,
    prev,
    self,
    ...rest
  }, auth) {
    this.auth = auth;
    if (next !== void 0 && next !== null) {
      if (next instanceof Link) {
        this.next = next;
      } else {
        this.next = new Link(next, this.auth);
      }
    }
    if (prev !== void 0 && prev !== null) {
      if (prev instanceof Link) {
        this.prev = prev;
      } else {
        this.prev = new Link(prev, this.auth);
      }
    }
    if (self instanceof Link) {
      this.self = self;
    } else {
      this.self = new Link(self, this.auth);
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class OauthTokens {
  constructor(config) {
    this.config = config instanceof import_auth.default ? config.config : config;
    this.auth = config instanceof import_auth.default ? config : new import_auth.default(config);
  }
  async delete(tokenId) {
    await this.auth.rest(
      "/oauth-tokens/{tokenId}".replace("{tokenId}", tokenId),
      {
        method: "DELETE"
      }
    );
  }
  async getOauthTokens(queryParams = { sort: "userId" }) {
    const response = await this.auth.rest(
      `/oauth-tokens?${Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => `${k}=${v}`).join("&")}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new OauthTokenPage(responseJson, this.auth);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Link,
  OauthToken,
  OauthTokenPage,
  OauthTokenPageLinks,
  OauthTokens
});
