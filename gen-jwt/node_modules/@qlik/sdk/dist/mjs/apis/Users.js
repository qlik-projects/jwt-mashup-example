import Auth from "../auth/auth.js";
class User {
  constructor({
    assignedGroups,
    assignedRoles,
    created,
    createdAt,
    email,
    id,
    inviteExpiry,
    lastUpdated,
    lastUpdatedAt,
    links,
    locale,
    name,
    picture,
    preferredLocale,
    preferredZoneinfo,
    roles,
    status,
    subject,
    tenantId,
    zoneinfo,
    ...rest
  }, auth) {
    this.auth = auth;
    if (assignedGroups !== void 0 && assignedGroups !== null) {
      if (assignedGroups.length > 0 && assignedGroups[0] instanceof UserAssignedGroups) {
        this.assignedGroups = assignedGroups;
      } else {
        this.assignedGroups = assignedGroups.map((element) => new UserAssignedGroups(element, this.auth));
      }
    }
    if (assignedRoles !== void 0 && assignedRoles !== null) {
      if (assignedRoles.length > 0 && assignedRoles[0] instanceof UserAssignedRoles) {
        this.assignedRoles = assignedRoles;
      } else {
        this.assignedRoles = assignedRoles.map((element) => new UserAssignedRoles(element, this.auth));
      }
    }
    this.created = created;
    this.createdAt = createdAt;
    this.email = email;
    this.id = id;
    this.inviteExpiry = inviteExpiry;
    this.lastUpdated = lastUpdated;
    this.lastUpdatedAt = lastUpdatedAt;
    if (links !== void 0 && links !== null) {
      if (links instanceof UserLinks) {
        this.links = links;
      } else {
        this.links = new UserLinks(links, this.auth);
      }
    }
    this.locale = locale;
    this.name = name;
    this.picture = picture;
    this.preferredLocale = preferredLocale;
    this.preferredZoneinfo = preferredZoneinfo;
    this.roles = roles;
    this.status = status;
    this.subject = subject;
    this.tenantId = tenantId;
    this.zoneinfo = zoneinfo;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  async delete() {
    await this.auth.rest(
      "/users/{userId}".replace("{userId}", this.id ?? ""),
      {
        method: "DELETE"
      }
    );
  }
  async patch(data) {
    await this.auth.rest(
      "/users/{userId}".replace("{userId}", this.id ?? ""),
      {
        method: "PATCH",
        body: JSON.stringify(data)
      }
    );
  }
}
class Filter {
  constructor({
    filter,
    ...rest
  }, auth) {
    this.auth = auth;
    this.filter = filter;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class JSONPatch {
  constructor({
    op,
    path,
    value,
    ...rest
  }, auth) {
    this.auth = auth;
    this.op = op;
    this.path = path;
    this.value = value;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class JSONPatchArray extends Array {
  constructor(arr, auth) {
    super();
    this.auth = auth;
    for (const e of arr) {
      this.push(new JSONPatch(e, this.auth));
    }
  }
}
class Metadata {
  constructor({
    valid_roles,
    ...rest
  }, auth) {
    this.auth = auth;
    this.valid_roles = valid_roles;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class UserAssignedGroups {
  constructor({
    assignedRoles,
    id,
    name,
    ...rest
  }, auth) {
    this.auth = auth;
    if (assignedRoles !== void 0 && assignedRoles !== null) {
      if (assignedRoles.length > 0 && assignedRoles[0] instanceof UserAssignedGroupsAssignedRoles) {
        this.assignedRoles = assignedRoles;
      } else {
        this.assignedRoles = assignedRoles.map((element) => new UserAssignedGroupsAssignedRoles(element, this.auth));
      }
    }
    this.id = id;
    this.name = name;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class UserAssignedGroupsAssignedRoles {
  constructor({
    id,
    level,
    name,
    permissions,
    type,
    ...rest
  }, auth) {
    this.auth = auth;
    this.id = id;
    this.level = level;
    this.name = name;
    this.permissions = permissions;
    this.type = type;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class UserAssignedRoles {
  constructor({
    id,
    level,
    name,
    permissions,
    type,
    ...rest
  }, auth) {
    this.auth = auth;
    this.id = id;
    this.level = level;
    this.name = name;
    this.permissions = permissions;
    this.type = type;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class UserCount {
  constructor({
    total,
    ...rest
  }, auth) {
    this.auth = auth;
    this.total = total;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class UserLinks {
  constructor({
    self,
    ...rest
  }, auth) {
    this.auth = auth;
    if (self instanceof UserLinksSelf) {
      this.self = self;
    } else {
      this.self = new UserLinksSelf(self, this.auth);
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class UserLinksSelf {
  constructor({
    href,
    ...rest
  }, auth) {
    this.auth = auth;
    this.href = href;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class UserPostSchema {
  constructor({
    assignedRoles,
    email,
    name,
    picture,
    roles,
    status,
    subject,
    tenantId,
    ...rest
  }, auth) {
    this.auth = auth;
    if (assignedRoles !== void 0 && assignedRoles !== null) {
      if (assignedRoles.length > 0 && assignedRoles[0] instanceof UserPostSchemaAssignedRolesRefIDs) {
        this.assignedRoles = assignedRoles;
      } else {
        this.assignedRoles = assignedRoles.map((element) => new UserPostSchemaAssignedRolesRefIDs(element, this.auth));
      }
    }
    this.email = email;
    this.name = name;
    this.picture = picture;
    this.roles = roles;
    this.status = status;
    this.subject = subject;
    this.tenantId = tenantId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class UserPostSchemaAssignedRolesRefIDs {
  constructor({
    id,
    ...rest
  }, auth) {
    this.auth = auth;
    this.id = id;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class UsersClass {
  constructor({
    data,
    links,
    ...rest
  }, auth) {
    this.auth = auth;
    if (data !== void 0 && data !== null) {
      if (data.length > 0 && data[0] instanceof User) {
        this.data = data;
      } else {
        this.data = data.map((element) => new User(element, this.auth));
      }
    }
    if (links !== void 0 && links !== null) {
      if (links instanceof UsersLinks) {
        this.links = links;
      } else {
        this.links = new UsersLinks(links, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class UsersLinks {
  constructor({
    next,
    prev,
    self,
    ...rest
  }, auth) {
    this.auth = auth;
    if (next !== void 0 && next !== null) {
      if (next instanceof UsersLinksNext) {
        this.next = next;
      } else {
        this.next = new UsersLinksNext(next, this.auth);
      }
    }
    if (prev !== void 0 && prev !== null) {
      if (prev instanceof UsersLinksPrev) {
        this.prev = prev;
      } else {
        this.prev = new UsersLinksPrev(prev, this.auth);
      }
    }
    if (self instanceof UsersLinksSelf) {
      this.self = self;
    } else {
      this.self = new UsersLinksSelf(self, this.auth);
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class UsersLinksNext {
  constructor({
    href,
    ...rest
  }, auth) {
    this.auth = auth;
    this.href = href;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class UsersLinksPrev {
  constructor({
    href,
    ...rest
  }, auth) {
    this.auth = auth;
    this.href = href;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class UsersLinksSelf {
  constructor({
    href,
    ...rest
  }, auth) {
    this.auth = auth;
    this.href = href;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Users {
  constructor(config) {
    this.config = config instanceof Auth ? config.config : config;
    this.auth = config instanceof Auth ? config : new Auth(config);
  }
  async count(queryParams = {}) {
    const response = await this.auth.rest(
      `/users/actions/count?${Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => `${k}=${v}`).join("&")}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new UserCount(responseJson, this.auth);
  }
  async filter(data, queryParams = { limit: 20, sort: "+name" }) {
    const response = await this.auth.rest(
      `/users/actions/filter?${Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => `${k}=${v}`).join("&")}`,
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    return new UsersClass(responseJson, this.auth);
  }
  async getMe() {
    const response = await this.auth.rest(
      "/users/me",
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new User(responseJson, this.auth);
  }
  async getMetadata() {
    const response = await this.auth.rest(
      "/users/metadata",
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new Metadata(responseJson, this.auth);
  }
  async get(userId) {
    const response = await this.auth.rest(
      "/users/{userId}".replace("{userId}", userId),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new User(responseJson, this.auth);
  }
  async getUsers(queryParams = {
    limit: 20,
    sort: "+name",
    sortBy: "name",
    sortOrder: "asc",
    status: "active"
  }) {
    const response = await this.auth.rest(
      `/users?${Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => `${k}=${v}`).join("&")}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new UsersClass(responseJson, this.auth);
  }
  async create(data) {
    const response = await this.auth.rest(
      "/users",
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    return new User(responseJson, this.auth);
  }
}
export {
  Filter,
  JSONPatch,
  JSONPatchArray,
  Metadata,
  User,
  UserAssignedGroups,
  UserAssignedGroupsAssignedRoles,
  UserAssignedRoles,
  UserCount,
  UserLinks,
  UserLinksSelf,
  UserPostSchema,
  UserPostSchemaAssignedRolesRefIDs,
  Users,
  UsersClass,
  UsersLinks,
  UsersLinksNext,
  UsersLinksPrev,
  UsersLinksSelf
};
