
import { createRequire } from 'module';
const require = createRequire(import.meta.url);
import enigma from "enigma.js";
import {
  AuthType
} from "../types/types.js";
import RestClient from "./restClient.js";
import { generateWebsocketUrl, isBrowser } from "../utils/utils.js";
const WS = true ? require("ws") : WebSocket;
function use(intercept) {
  const interceptArr = Array.isArray(intercept) ? intercept : [intercept];
  this.handlers = this.handlers.concat(interceptArr);
}
class RpcClient {
  constructor(config, rest) {
    this.interceptors = {
      request: {
        handlers: [],
        use
      },
      response: {
        handlers: [],
        use
      }
    };
    this.sessions = {};
    this.config = config;
    this.rest = rest ?? new RestClient(config).restClientInstance;
  }
  async rpc(appId) {
    const { url, createSocket } = await this.buildUrlAndCreateSocket(appId);
    const createSession = () => {
      const session = enigma.create({
        schema: {
          structs: {
            Global: {},
            Doc: {},
            GenericMeasure: {},
            GenericVariable: {},
            GenericBookmark: {},
            GenericDimension: {},
            GenericObject: {},
            Field: {}
          }
        },
        url,
        createSocket,
        protocol: { delta: false }
      });
      session.intercept.response = this.interceptors.response.handlers;
      session.intercept.request = this.interceptors.request.handlers;
      return session;
    };
    this.sessions[url.toString()] = this.sessions[url.toString()] || createSession();
    return this.sessions[url.toString()];
  }
  async buildUrlAndCreateSocket(appId) {
    const url = await generateWebsocketUrl(appId, this.rest, this.config);
    let createSocket;
    if (this.config.authType === AuthType.APIKey || this.config.authType === AuthType.OAuth2 && !isBrowser) {
      createSocket = (wsUrl) => new WS(wsUrl, {
        headers: { Authorization: `Bearer ${this.config.apiKey}` }
      });
    } else {
      createSocket = (wsUrl) => new WS(wsUrl);
    }
    return { url, createSocket };
  }
}
export {
  RpcClient as default
};
