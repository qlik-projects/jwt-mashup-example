import Auth from "../auth/auth.js";
class Link {
  constructor({
    href,
    ...rest
  }, auth) {
    this.auth = auth;
    this.href = href;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class OauthToken {
  constructor({
    description,
    deviceType,
    id,
    lastUsed,
    tenantId,
    userId,
    ...rest
  }, auth) {
    this.auth = auth;
    this.description = description;
    this.deviceType = deviceType;
    this.id = id;
    this.lastUsed = lastUsed;
    this.tenantId = tenantId;
    this.userId = userId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class OauthTokenPage {
  constructor({
    data,
    links,
    ...rest
  }, auth) {
    this.auth = auth;
    if (data.length > 0 && data[0] instanceof OauthToken) {
      this.data = data;
    } else {
      this.data = data.map((element) => new OauthToken(element, this.auth));
    }
    if (links instanceof OauthTokenPageLinks) {
      this.links = links;
    } else {
      this.links = new OauthTokenPageLinks(links, this.auth);
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class OauthTokenPageLinks {
  constructor({
    next,
    prev,
    self,
    ...rest
  }, auth) {
    this.auth = auth;
    if (next !== void 0 && next !== null) {
      if (next instanceof Link) {
        this.next = next;
      } else {
        this.next = new Link(next, this.auth);
      }
    }
    if (prev !== void 0 && prev !== null) {
      if (prev instanceof Link) {
        this.prev = prev;
      } else {
        this.prev = new Link(prev, this.auth);
      }
    }
    if (self instanceof Link) {
      this.self = self;
    } else {
      this.self = new Link(self, this.auth);
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class OauthTokens {
  constructor(config) {
    this.config = config instanceof Auth ? config.config : config;
    this.auth = config instanceof Auth ? config : new Auth(config);
  }
  async delete(tokenId) {
    await this.auth.rest(
      "/oauth-tokens/{tokenId}".replace("{tokenId}", tokenId),
      {
        method: "DELETE"
      }
    );
  }
  async getOauthTokens(queryParams = { sort: "userId" }) {
    const response = await this.auth.rest(
      `/oauth-tokens?${Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => `${k}=${v}`).join("&")}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new OauthTokenPage(responseJson, this.auth);
  }
}
export {
  Link,
  OauthToken,
  OauthTokenPage,
  OauthTokenPageLinks,
  OauthTokens
};
