var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Apps_exports = {};
__export(Apps_exports, {
  AppAttributes: () => AppAttributes,
  AppContentList: () => AppContentList,
  AppContentListItem: () => AppContentListItem,
  AppUpdateAttributes: () => AppUpdateAttributes,
  Apps: () => Apps,
  Cmpbool: () => Cmpbool,
  Cmpfloat: () => Cmpfloat,
  Cmpint: () => Cmpint,
  Comparison: () => Comparison,
  CreateApp: () => CreateApp,
  DataModelMetadata: () => DataModelMetadata,
  Evaluation: () => Evaluation,
  EvaluationDetails: () => EvaluationDetails,
  Evaluations: () => Evaluations,
  EvaluationsLinks: () => EvaluationsLinks,
  EvaluationsLinksNext: () => EvaluationsLinksNext,
  EvaluationsLinksPrev: () => EvaluationsLinksPrev,
  Event: () => Event,
  FieldAttributes: () => FieldAttributes,
  FieldInTableProfilingData: () => FieldInTableProfilingData,
  FieldMetadata: () => FieldMetadata,
  FileData: () => FileData,
  FrequencyDistributionData: () => FrequencyDistributionData,
  HardwareMeta: () => HardwareMeta,
  JsonObject: () => JsonObject,
  LastReloadMetadata: () => LastReloadMetadata,
  LineageInfoRest: () => LineageInfoRest,
  Log: () => Log,
  Metadata: () => Metadata,
  MetadataReloadmeta: () => MetadataReloadmeta,
  NxApp: () => NxApp,
  NxAppCreatePrivileges: () => NxAppCreatePrivileges,
  NxAttributes: () => NxAttributes,
  Objectspec: () => Objectspec,
  PublishApp: () => PublishApp,
  RepublishApp: () => RepublishApp,
  Result: () => Result,
  Resultmetadatatopfields: () => Resultmetadatatopfields,
  Resultmetadatatoptables: () => Resultmetadatatoptables,
  Resultobjresponsetime: () => Resultobjresponsetime,
  Resultobjsheet: () => Resultobjsheet,
  Resultobjsinglethreaded: () => Resultobjsinglethreaded,
  Resultsingle: () => Resultsingle,
  ScriptLogList: () => ScriptLogList,
  ScriptLogMeta: () => ScriptLogMeta,
  Sortedcomparisonfields: () => Sortedcomparisonfields,
  Sortedcomparisonobjresponsetime: () => Sortedcomparisonobjresponsetime,
  Sortedcomparisonoobjheavy: () => Sortedcomparisonoobjheavy,
  Sortedcomparisontables: () => Sortedcomparisontables,
  SymbolFrequency: () => SymbolFrequency,
  SymbolValue: () => SymbolValue,
  TableMetadata: () => TableMetadata,
  TableProfilingData: () => TableProfilingData,
  UpdateApp: () => UpdateApp,
  UpdateOwner: () => UpdateOwner,
  UpdateSpace: () => UpdateSpace
});
module.exports = __toCommonJS(Apps_exports);
var import_auth = __toESM(require("../auth/auth.js"));
var import_Qix = require("./Qix.js");
class NxApp extends import_Qix.Doc {
  constructor({
    attributes,
    create,
    privileges,
    ...rest
  }, auth) {
    super({
      qGenericId: "",
      qGenericType: "",
      qHandle: 0,
      qType: ""
    });
    this.auth = auth;
    if (attributes !== void 0 && attributes !== null) {
      if (attributes instanceof NxAttributes) {
        this.attributes = attributes;
      } else {
        this.attributes = new NxAttributes(attributes, this.auth);
      }
    }
    if (create !== void 0 && create !== null) {
      if (create.length > 0 && create[0] instanceof NxAppCreatePrivileges) {
        this.create = create;
      } else {
        this.create = create.map((element) => new NxAppCreatePrivileges(element, this.auth));
      }
    }
    this.privileges = privileges;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  async createCopy(data) {
    const response = await this.auth.rest(
      "/apps/{appId}/copy".replace("{appId}", this.attributes?.id ?? ""),
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    return new NxApp(responseJson, this.auth);
  }
  async getDataLineages() {
    const response = await this.auth.rest(
      "/apps/{appId}/data/lineage".replace("{appId}", this.attributes?.id ?? ""),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return responseJson.map((r) => new LineageInfoRest(r, this.auth));
  }
  async getDataMetadata() {
    const response = await this.auth.rest(
      "/apps/{appId}/data/metadata".replace("{appId}", this.attributes?.id ?? ""),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new DataModelMetadata(responseJson, this.auth);
  }
  async export(queryParams = {}) {
    const response = await this.auth.rest(
      `${"/apps/{appId}/export".replace("{appId}", this.attributes?.id ?? "")}?${Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => `${k}=${v}`).join("&")}`,
      {
        method: "POST"
      }
    );
    return response.headers.get("Location");
  }
  async getMediaThumbnail() {
    const response = await this.auth.rest(
      "/apps/{appId}/media/thumbnail".replace("{appId}", this.attributes?.id ?? ""),
      {
        method: "GET"
      }
    );
    return response.arrayBuffer();
  }
  async setOwner(data) {
    const response = await this.auth.rest(
      "/apps/{appId}/owner".replace("{appId}", this.attributes?.id ?? ""),
      {
        method: "PUT",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    Object.keys(responseJson).forEach((key) => {
      if (this[key]) {
        this[key] = responseJson[key];
      }
    });
    return this;
  }
  async publish(data) {
    const response = await this.auth.rest(
      "/apps/{appId}/publish".replace("{appId}", this.attributes?.id ?? ""),
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    return new NxApp(responseJson, this.auth);
  }
  async setPublish(data) {
    const response = await this.auth.rest(
      "/apps/{appId}/publish".replace("{appId}", this.attributes?.id ?? ""),
      {
        method: "PUT",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    Object.keys(responseJson).forEach((key) => {
      if (this[key]) {
        this[key] = responseJson[key];
      }
    });
    return this;
  }
  async getReloadsLogs() {
    const response = await this.auth.rest(
      "/apps/{appId}/reloads/logs".replace("{appId}", this.attributes?.id ?? ""),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new ScriptLogList(responseJson, this.auth);
  }
  async deleteSpace() {
    const response = await this.auth.rest(
      "/apps/{appId}/space".replace("{appId}", this.attributes?.id ?? ""),
      {
        method: "DELETE"
      }
    );
    const responseJson = await response.json();
    Object.keys(responseJson).forEach((key) => {
      if (this[key]) {
        this[key] = responseJson[key];
      }
    });
    return this;
  }
  async setSpace(data) {
    const response = await this.auth.rest(
      "/apps/{appId}/space".replace("{appId}", this.attributes?.id ?? ""),
      {
        method: "PUT",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    Object.keys(responseJson).forEach((key) => {
      if (this[key]) {
        this[key] = responseJson[key];
      }
    });
    return this;
  }
  async delete() {
    await this.auth.rest(
      "/apps/{appId}".replace("{appId}", this.attributes?.id ?? ""),
      {
        method: "DELETE"
      }
    );
  }
  async set(data) {
    const response = await this.auth.rest(
      "/apps/{appId}".replace("{appId}", this.attributes?.id ?? ""),
      {
        method: "PUT",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    Object.keys(responseJson).forEach((key) => {
      if (this[key]) {
        this[key] = responseJson[key];
      }
    });
    return this;
  }
}
class AppAttributes {
  constructor({
    description,
    locale,
    name,
    spaceId,
    ...rest
  }, auth) {
    this.auth = auth;
    this.description = description;
    this.locale = locale;
    this.name = name;
    this.spaceId = spaceId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class AppContentList {
  constructor({
    data,
    library,
    subpath,
    ...rest
  }, auth) {
    this.auth = auth;
    if (data !== void 0 && data !== null) {
      if (data.length > 0 && data[0] instanceof AppContentListItem) {
        this.data = data;
      } else {
        this.data = data.map((element) => new AppContentListItem(element, this.auth));
      }
    }
    this.library = library;
    this.subpath = subpath;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class AppContentListItem {
  constructor({
    id,
    link,
    name,
    type,
    ...rest
  }, auth) {
    this.auth = auth;
    this.id = id;
    this.link = link;
    this.name = name;
    this.type = type;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class AppUpdateAttributes {
  constructor({
    description,
    name,
    ...rest
  }, auth) {
    this.auth = auth;
    this.description = description;
    this.name = name;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class CreateApp {
  constructor({
    attributes,
    ...rest
  }, auth) {
    this.auth = auth;
    if (attributes !== void 0 && attributes !== null) {
      if (attributes instanceof AppAttributes) {
        this.attributes = attributes;
      } else {
        this.attributes = new AppAttributes(attributes, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class DataModelMetadata {
  constructor({
    fields,
    has_section_access,
    is_direct_query_mode,
    reload_meta,
    static_byte_size,
    tables,
    tables_profiling_data,
    ...rest
  }, auth) {
    this.auth = auth;
    if (fields !== void 0 && fields !== null) {
      if (fields.length > 0 && fields[0] instanceof FieldMetadata) {
        this.fields = fields;
      } else {
        this.fields = fields.map((element) => new FieldMetadata(element, this.auth));
      }
    }
    this.has_section_access = has_section_access;
    this.is_direct_query_mode = is_direct_query_mode;
    if (reload_meta !== void 0 && reload_meta !== null) {
      if (reload_meta instanceof LastReloadMetadata) {
        this.reload_meta = reload_meta;
      } else {
        this.reload_meta = new LastReloadMetadata(reload_meta, this.auth);
      }
    }
    this.static_byte_size = static_byte_size;
    if (tables !== void 0 && tables !== null) {
      if (tables.length > 0 && tables[0] instanceof TableMetadata) {
        this.tables = tables;
      } else {
        this.tables = tables.map((element) => new TableMetadata(element, this.auth));
      }
    }
    if (tables_profiling_data !== void 0 && tables_profiling_data !== null) {
      if (tables_profiling_data.length > 0 && tables_profiling_data[0] instanceof TableProfilingData) {
        this.tables_profiling_data = tables_profiling_data;
      } else {
        this.tables_profiling_data = tables_profiling_data.map((element) => new TableProfilingData(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class FieldAttributes {
  constructor({
    Dec,
    Fmt,
    Thou,
    Type,
    UseThou,
    nDec,
    ...rest
  }, auth) {
    this.nDec = 10;
    this.auth = auth;
    this.Dec = Dec;
    this.Fmt = Fmt;
    this.Thou = Thou;
    this.Type = Type;
    this.UseThou = UseThou;
    this.nDec = nDec;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class FieldInTableProfilingData {
  constructor({
    Average,
    AvgStringLen,
    DistinctNumericValues,
    DistinctTextValues,
    DistinctValues,
    EmptyStrings,
    FieldTags,
    FirstSorted,
    Fractiles,
    FrequencyDistribution,
    Kurtosis,
    LastSorted,
    Max,
    MaxStringLen,
    Median,
    Min,
    MinStringLen,
    MostFrequent,
    Name,
    NegValues,
    NullValues,
    NumberFormat,
    NumericValues,
    PosValues,
    Skewness,
    Std,
    Sum,
    Sum2,
    SumStringLen,
    TextValues,
    ZeroValues,
    ...rest
  }, auth) {
    this.auth = auth;
    this.Average = Average;
    this.AvgStringLen = AvgStringLen;
    this.DistinctNumericValues = DistinctNumericValues;
    this.DistinctTextValues = DistinctTextValues;
    this.DistinctValues = DistinctValues;
    this.EmptyStrings = EmptyStrings;
    this.FieldTags = FieldTags;
    this.FirstSorted = FirstSorted;
    this.Fractiles = Fractiles;
    if (FrequencyDistribution !== void 0 && FrequencyDistribution !== null) {
      if (FrequencyDistribution instanceof FrequencyDistributionData) {
        this.FrequencyDistribution = FrequencyDistribution;
      } else {
        this.FrequencyDistribution = new FrequencyDistributionData(FrequencyDistribution, this.auth);
      }
    }
    this.Kurtosis = Kurtosis;
    this.LastSorted = LastSorted;
    this.Max = Max;
    this.MaxStringLen = MaxStringLen;
    this.Median = Median;
    this.Min = Min;
    this.MinStringLen = MinStringLen;
    if (MostFrequent !== void 0 && MostFrequent !== null) {
      if (MostFrequent.length > 0 && MostFrequent[0] instanceof SymbolFrequency) {
        this.MostFrequent = MostFrequent;
      } else {
        this.MostFrequent = MostFrequent.map((element) => new SymbolFrequency(element, this.auth));
      }
    }
    this.Name = Name;
    this.NegValues = NegValues;
    this.NullValues = NullValues;
    if (NumberFormat !== void 0 && NumberFormat !== null) {
      if (NumberFormat instanceof FieldAttributes) {
        this.NumberFormat = NumberFormat;
      } else {
        this.NumberFormat = new FieldAttributes(NumberFormat, this.auth);
      }
    }
    this.NumericValues = NumericValues;
    this.PosValues = PosValues;
    this.Skewness = Skewness;
    this.Std = Std;
    this.Sum = Sum;
    this.Sum2 = Sum2;
    this.SumStringLen = SumStringLen;
    this.TextValues = TextValues;
    this.ZeroValues = ZeroValues;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class FieldMetadata {
  constructor({
    always_one_selected,
    byte_size,
    cardinal,
    comment,
    distinct_only,
    hash,
    is_hidden,
    is_locked,
    is_numeric,
    is_semantic,
    is_system,
    name,
    src_tables,
    tags,
    total_count,
    ...rest
  }, auth) {
    this.auth = auth;
    this.always_one_selected = always_one_selected;
    this.byte_size = byte_size;
    this.cardinal = cardinal;
    this.comment = comment;
    this.distinct_only = distinct_only;
    this.hash = hash;
    this.is_hidden = is_hidden;
    this.is_locked = is_locked;
    this.is_numeric = is_numeric;
    this.is_semantic = is_semantic;
    this.is_system = is_system;
    this.name = name;
    this.src_tables = src_tables;
    this.tags = tags;
    this.total_count = total_count;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class FileData {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class FrequencyDistributionData {
  constructor({
    BinsEdges,
    Frequencies,
    NumberOfBins,
    ...rest
  }, auth) {
    this.auth = auth;
    this.BinsEdges = BinsEdges;
    this.Frequencies = Frequencies;
    this.NumberOfBins = NumberOfBins;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class HardwareMeta {
  constructor({
    logical_cores,
    total_memory,
    ...rest
  }, auth) {
    this.auth = auth;
    this.logical_cores = logical_cores;
    this.total_memory = total_memory;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class JsonObject {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class LastReloadMetadata {
  constructor({
    cpu_time_spent_ms,
    hardware,
    peak_memory_bytes,
    ...rest
  }, auth) {
    this.auth = auth;
    this.cpu_time_spent_ms = cpu_time_spent_ms;
    if (hardware !== void 0 && hardware !== null) {
      if (hardware instanceof HardwareMeta) {
        this.hardware = hardware;
      } else {
        this.hardware = new HardwareMeta(hardware, this.auth);
      }
    }
    this.peak_memory_bytes = peak_memory_bytes;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class LineageInfoRest {
  constructor({
    discriminator,
    statement,
    ...rest
  }, auth) {
    this.auth = auth;
    this.discriminator = discriminator;
    this.statement = statement;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Log {
  constructor({
    log,
    ...rest
  }, auth) {
    this.auth = auth;
    this.log = log;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxAppCreatePrivileges {
  constructor({
    canCreate,
    resource,
    ...rest
  }, auth) {
    this.auth = auth;
    this.canCreate = canCreate;
    this.resource = resource;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxAttributes {
  constructor({
    createdDate,
    custom,
    description,
    dynamicColor,
    encrypted,
    hasSectionAccess,
    id,
    isDirectQueryMode,
    lastReloadTime,
    modifiedDate,
    name,
    originAppId,
    owner,
    ownerId,
    publishTime,
    published,
    thumbnail,
    ...rest
  }, auth) {
    this.auth = auth;
    this.createdDate = createdDate;
    if (custom !== void 0 && custom !== null) {
      if (custom instanceof JsonObject) {
        this.custom = custom;
      } else {
        this.custom = new JsonObject(custom, this.auth);
      }
    }
    this.description = description;
    this.dynamicColor = dynamicColor;
    this.encrypted = encrypted;
    this.hasSectionAccess = hasSectionAccess;
    this.id = id;
    this.isDirectQueryMode = isDirectQueryMode;
    this.lastReloadTime = lastReloadTime;
    this.modifiedDate = modifiedDate;
    this.name = name;
    this.originAppId = originAppId;
    this.owner = owner;
    this.ownerId = ownerId;
    this.publishTime = publishTime;
    this.published = published;
    this.thumbnail = thumbnail;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class PublishApp {
  constructor({
    attributes,
    data,
    spaceId,
    ...rest
  }, auth) {
    this.auth = auth;
    if (attributes !== void 0 && attributes !== null) {
      if (attributes instanceof AppUpdateAttributes) {
        this.attributes = attributes;
      } else {
        this.attributes = new AppUpdateAttributes(attributes, this.auth);
      }
    }
    this.data = data;
    this.spaceId = spaceId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class RepublishApp {
  constructor({
    attributes,
    checkOriginAppId,
    data,
    targetId,
    ...rest
  }, auth) {
    this.checkOriginAppId = true;
    this.auth = auth;
    if (attributes !== void 0 && attributes !== null) {
      if (attributes instanceof AppUpdateAttributes) {
        this.attributes = attributes;
      } else {
        this.attributes = new AppUpdateAttributes(attributes, this.auth);
      }
    }
    this.checkOriginAppId = checkOriginAppId;
    this.data = data;
    this.targetId = targetId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ScriptLogList {
  constructor({
    data,
    ...rest
  }, auth) {
    this.auth = auth;
    if (data !== void 0 && data !== null) {
      if (data.length > 0 && data[0] instanceof ScriptLogMeta) {
        this.data = data;
      } else {
        this.data = data.map((element) => new ScriptLogMeta(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ScriptLogMeta {
  constructor({
    duration,
    endTime,
    links,
    reloadId,
    success,
    ...rest
  }, auth) {
    this.auth = auth;
    this.duration = duration;
    this.endTime = endTime;
    if (links !== void 0 && links !== null) {
      if (links instanceof Log) {
        this.links = links;
      } else {
        this.links = new Log(links, this.auth);
      }
    }
    this.reloadId = reloadId;
    this.success = success;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SymbolFrequency {
  constructor({
    Frequency,
    Symbol: Symbol2,
    ...rest
  }, auth) {
    this.auth = auth;
    this.Frequency = Frequency;
    if (Symbol2 !== void 0 && Symbol2 !== null) {
      if (Symbol2 instanceof SymbolValue) {
        this.Symbol = Symbol2;
      } else {
        this.Symbol = new SymbolValue(Symbol2, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SymbolValue {
  constructor({
    Number,
    Text,
    ...rest
  }, auth) {
    this.auth = auth;
    this.Number = Number;
    this.Text = Text;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class TableMetadata {
  constructor({
    byte_size,
    comment,
    is_loose,
    is_semantic,
    is_system,
    name,
    no_of_fields,
    no_of_key_fields,
    no_of_rows,
    ...rest
  }, auth) {
    this.auth = auth;
    this.byte_size = byte_size;
    this.comment = comment;
    this.is_loose = is_loose;
    this.is_semantic = is_semantic;
    this.is_system = is_system;
    this.name = name;
    this.no_of_fields = no_of_fields;
    this.no_of_key_fields = no_of_key_fields;
    this.no_of_rows = no_of_rows;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class TableProfilingData {
  constructor({
    FieldProfiling,
    NoOfRows,
    ...rest
  }, auth) {
    this.auth = auth;
    if (FieldProfiling !== void 0 && FieldProfiling !== null) {
      if (FieldProfiling.length > 0 && FieldProfiling[0] instanceof FieldInTableProfilingData) {
        this.FieldProfiling = FieldProfiling;
      } else {
        this.FieldProfiling = FieldProfiling.map((element) => new FieldInTableProfilingData(element, this.auth));
      }
    }
    this.NoOfRows = NoOfRows;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class UpdateApp {
  constructor({
    attributes,
    ...rest
  }, auth) {
    this.auth = auth;
    if (attributes !== void 0 && attributes !== null) {
      if (attributes instanceof AppUpdateAttributes) {
        this.attributes = attributes;
      } else {
        this.attributes = new AppUpdateAttributes(attributes, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class UpdateOwner {
  constructor({
    ownerId,
    ...rest
  }, auth) {
    this.auth = auth;
    this.ownerId = ownerId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class UpdateSpace {
  constructor({
    spaceId,
    ...rest
  }, auth) {
    this.auth = auth;
    this.spaceId = spaceId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Cmpbool {
  constructor({
    absoluteDiff,
    diff,
    trend,
    baseline,
    comparison,
    ...rest
  }, auth) {
    this.auth = auth;
    this.absoluteDiff = absoluteDiff;
    this.diff = diff;
    this.trend = trend;
    this.baseline = baseline;
    this.comparison = comparison;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Cmpfloat {
  constructor({
    absoluteDiff,
    diff,
    trend,
    baseline,
    comparison,
    ...rest
  }, auth) {
    this.auth = auth;
    this.absoluteDiff = absoluteDiff;
    this.diff = diff;
    this.trend = trend;
    this.baseline = baseline;
    this.comparison = comparison;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Cmpint {
  constructor({
    absoluteDiff,
    diff,
    trend,
    baseline,
    comparison,
    ...rest
  }, auth) {
    this.auth = auth;
    this.absoluteDiff = absoluteDiff;
    this.diff = diff;
    this.trend = trend;
    this.baseline = baseline;
    this.comparison = comparison;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Comparison {
  constructor({
    appOpenTimeSeconds,
    dataModelSizeMib,
    documentSizeMib,
    fileSizeMib,
    hasSectionAccess,
    maxMemoryMib,
    objHeavy,
    objNoCache,
    objSingleThreaded,
    objSlowCached,
    objSlowUncached,
    objectCount,
    rowCount,
    sheetCount,
    sheetsCached,
    sheetsUncached,
    topFieldsByBytes,
    topTablesByBytes,
    ...rest
  }, auth) {
    this.auth = auth;
    if (appOpenTimeSeconds !== void 0 && appOpenTimeSeconds !== null) {
      if (appOpenTimeSeconds instanceof Cmpfloat) {
        this.appOpenTimeSeconds = appOpenTimeSeconds;
      } else {
        this.appOpenTimeSeconds = new Cmpfloat(appOpenTimeSeconds, this.auth);
      }
    }
    if (dataModelSizeMib !== void 0 && dataModelSizeMib !== null) {
      if (dataModelSizeMib instanceof Cmpfloat) {
        this.dataModelSizeMib = dataModelSizeMib;
      } else {
        this.dataModelSizeMib = new Cmpfloat(dataModelSizeMib, this.auth);
      }
    }
    if (documentSizeMib !== void 0 && documentSizeMib !== null) {
      if (documentSizeMib instanceof Cmpfloat) {
        this.documentSizeMib = documentSizeMib;
      } else {
        this.documentSizeMib = new Cmpfloat(documentSizeMib, this.auth);
      }
    }
    if (fileSizeMib !== void 0 && fileSizeMib !== null) {
      if (fileSizeMib instanceof Cmpfloat) {
        this.fileSizeMib = fileSizeMib;
      } else {
        this.fileSizeMib = new Cmpfloat(fileSizeMib, this.auth);
      }
    }
    if (hasSectionAccess !== void 0 && hasSectionAccess !== null) {
      if (hasSectionAccess instanceof Cmpbool) {
        this.hasSectionAccess = hasSectionAccess;
      } else {
        this.hasSectionAccess = new Cmpbool(hasSectionAccess, this.auth);
      }
    }
    if (maxMemoryMib !== void 0 && maxMemoryMib !== null) {
      if (maxMemoryMib instanceof Cmpfloat) {
        this.maxMemoryMib = maxMemoryMib;
      } else {
        this.maxMemoryMib = new Cmpfloat(maxMemoryMib, this.auth);
      }
    }
    if (objHeavy !== void 0 && objHeavy !== null) {
      if (objHeavy instanceof Sortedcomparisonoobjheavy) {
        this.objHeavy = objHeavy;
      } else {
        this.objHeavy = new Sortedcomparisonoobjheavy(objHeavy, this.auth);
      }
    }
    if (objNoCache !== void 0 && objNoCache !== null) {
      if (objNoCache instanceof Sortedcomparisonobjresponsetime) {
        this.objNoCache = objNoCache;
      } else {
        this.objNoCache = new Sortedcomparisonobjresponsetime(objNoCache, this.auth);
      }
    }
    if (objSingleThreaded !== void 0 && objSingleThreaded !== null) {
      if (objSingleThreaded instanceof Sortedcomparisonobjresponsetime) {
        this.objSingleThreaded = objSingleThreaded;
      } else {
        this.objSingleThreaded = new Sortedcomparisonobjresponsetime(objSingleThreaded, this.auth);
      }
    }
    if (objSlowCached !== void 0 && objSlowCached !== null) {
      if (objSlowCached instanceof Sortedcomparisonobjresponsetime) {
        this.objSlowCached = objSlowCached;
      } else {
        this.objSlowCached = new Sortedcomparisonobjresponsetime(objSlowCached, this.auth);
      }
    }
    if (objSlowUncached !== void 0 && objSlowUncached !== null) {
      if (objSlowUncached instanceof Sortedcomparisonobjresponsetime) {
        this.objSlowUncached = objSlowUncached;
      } else {
        this.objSlowUncached = new Sortedcomparisonobjresponsetime(objSlowUncached, this.auth);
      }
    }
    if (objectCount !== void 0 && objectCount !== null) {
      if (objectCount instanceof Cmpint) {
        this.objectCount = objectCount;
      } else {
        this.objectCount = new Cmpint(objectCount, this.auth);
      }
    }
    if (rowCount !== void 0 && rowCount !== null) {
      if (rowCount instanceof Cmpint) {
        this.rowCount = rowCount;
      } else {
        this.rowCount = new Cmpint(rowCount, this.auth);
      }
    }
    if (sheetCount !== void 0 && sheetCount !== null) {
      if (sheetCount instanceof Cmpint) {
        this.sheetCount = sheetCount;
      } else {
        this.sheetCount = new Cmpint(sheetCount, this.auth);
      }
    }
    if (sheetsCached !== void 0 && sheetsCached !== null) {
      if (sheetsCached instanceof Sortedcomparisonobjresponsetime) {
        this.sheetsCached = sheetsCached;
      } else {
        this.sheetsCached = new Sortedcomparisonobjresponsetime(sheetsCached, this.auth);
      }
    }
    if (sheetsUncached !== void 0 && sheetsUncached !== null) {
      if (sheetsUncached instanceof Sortedcomparisonobjresponsetime) {
        this.sheetsUncached = sheetsUncached;
      } else {
        this.sheetsUncached = new Sortedcomparisonobjresponsetime(sheetsUncached, this.auth);
      }
    }
    if (topFieldsByBytes !== void 0 && topFieldsByBytes !== null) {
      if (topFieldsByBytes instanceof Sortedcomparisonfields) {
        this.topFieldsByBytes = topFieldsByBytes;
      } else {
        this.topFieldsByBytes = new Sortedcomparisonfields(topFieldsByBytes, this.auth);
      }
    }
    if (topTablesByBytes !== void 0 && topTablesByBytes !== null) {
      if (topTablesByBytes instanceof Sortedcomparisontables) {
        this.topTablesByBytes = topTablesByBytes;
      } else {
        this.topTablesByBytes = new Sortedcomparisontables(topTablesByBytes, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Evaluation {
  constructor({
    appId,
    appItemId,
    appName,
    details,
    ended,
    events,
    id,
    metadata,
    result,
    sheetId,
    sheetTitle,
    started,
    status,
    tenantId,
    timestamp,
    version,
    ...rest
  }, auth) {
    this.auth = auth;
    this.appId = appId;
    this.appItemId = appItemId;
    this.appName = appName;
    if (details !== void 0 && details !== null) {
      if (details instanceof EvaluationDetails) {
        this.details = details;
      } else {
        this.details = new EvaluationDetails(details, this.auth);
      }
    }
    this.ended = ended;
    if (events !== void 0 && events !== null) {
      if (events.length > 0 && events[0] instanceof Event) {
        this.events = events;
      } else {
        this.events = events.map((element) => new Event(element, this.auth));
      }
    }
    this.id = id;
    if (metadata !== void 0 && metadata !== null) {
      if (metadata instanceof Metadata) {
        this.metadata = metadata;
      } else {
        this.metadata = new Metadata(metadata, this.auth);
      }
    }
    if (result !== void 0 && result !== null) {
      if (result instanceof Result) {
        this.result = result;
      } else {
        this.result = new Result(result, this.auth);
      }
    }
    this.sheetId = sheetId;
    this.sheetTitle = sheetTitle;
    this.started = started;
    this.status = status;
    this.tenantId = tenantId;
    this.timestamp = timestamp;
    this.version = version;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  async download() {
    const response = await this.auth.rest(
      "/apps/evaluations/{id}/actions/download".replace("{id}", this.id ?? ""),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new Evaluation(responseJson, this.auth);
  }
}
class EvaluationDetails {
  constructor({
    concurrentReload,
    dedicated,
    engineHasCache,
    errors,
    objectMetrics,
    warnings,
    ...rest
  }, auth) {
    this.auth = auth;
    this.concurrentReload = concurrentReload;
    this.dedicated = dedicated;
    this.engineHasCache = engineHasCache;
    this.errors = errors;
    this.objectMetrics = objectMetrics;
    this.warnings = warnings;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Evaluations {
  constructor({
    data,
    links,
    ...rest
  }, auth) {
    this.auth = auth;
    if (data !== void 0 && data !== null) {
      if (data.length > 0 && data[0] instanceof Evaluation) {
        this.data = data;
      } else {
        this.data = data.map((element) => new Evaluation(element, this.auth));
      }
    }
    if (links !== void 0 && links !== null) {
      if (links instanceof EvaluationsLinks) {
        this.links = links;
      } else {
        this.links = new EvaluationsLinks(links, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class EvaluationsLinks {
  constructor({
    next,
    prev,
    ...rest
  }, auth) {
    this.auth = auth;
    if (next !== void 0 && next !== null) {
      if (next instanceof EvaluationsLinksNext) {
        this.next = next;
      } else {
        this.next = new EvaluationsLinksNext(next, this.auth);
      }
    }
    if (prev !== void 0 && prev !== null) {
      if (prev instanceof EvaluationsLinksPrev) {
        this.prev = prev;
      } else {
        this.prev = new EvaluationsLinksPrev(prev, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class EvaluationsLinksNext {
  constructor({
    href,
    ...rest
  }, auth) {
    this.auth = auth;
    this.href = href;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class EvaluationsLinksPrev {
  constructor({
    href,
    ...rest
  }, auth) {
    this.auth = auth;
    this.href = href;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Event {
  constructor({
    details,
    errorCode,
    objectId,
    objectTitle,
    objectType,
    objectVisualization,
    severity,
    sheetId,
    sheetTitle,
    ...rest
  }, auth) {
    this.auth = auth;
    this.details = details;
    this.errorCode = errorCode;
    this.objectId = objectId;
    this.objectTitle = objectTitle;
    this.objectType = objectType;
    this.objectVisualization = objectVisualization;
    this.severity = severity;
    this.sheetId = sheetId;
    this.sheetTitle = sheetTitle;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Metadata {
  constructor({
    amountofcardinalfieldvalues,
    amountoffields,
    amountoffieldvalues,
    amountofrows,
    amountoftables,
    hassectionaccess,
    reloadmeta,
    staticbytesize,
    ...rest
  }, auth) {
    this.auth = auth;
    this.amountofcardinalfieldvalues = amountofcardinalfieldvalues;
    this.amountoffields = amountoffields;
    this.amountoffieldvalues = amountoffieldvalues;
    this.amountofrows = amountofrows;
    this.amountoftables = amountoftables;
    this.hassectionaccess = hassectionaccess;
    if (reloadmeta !== void 0 && reloadmeta !== null) {
      if (reloadmeta instanceof MetadataReloadmeta) {
        this.reloadmeta = reloadmeta;
      } else {
        this.reloadmeta = new MetadataReloadmeta(reloadmeta, this.auth);
      }
    }
    this.staticbytesize = staticbytesize;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class MetadataReloadmeta {
  constructor({
    cpuspent,
    peakmemorybytes,
    ...rest
  }, auth) {
    this.auth = auth;
    this.cpuspent = cpuspent;
    this.peakmemorybytes = peakmemorybytes;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Objectspec {
  constructor({
    id,
    objectType,
    sheetId,
    title,
    ...rest
  }, auth) {
    this.auth = auth;
    this.id = id;
    this.objectType = objectType;
    this.sheetId = sheetId;
    this.title = title;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Result {
  constructor({
    documentSizeMiB,
    hasSectionAccess,
    objNoCache,
    objSingleThreaded,
    objSlowCached,
    objSlowUncached,
    objectCount,
    rowCount,
    sheetCount,
    sheets,
    topFieldsByBytes,
    topTablesByBytes,
    ...rest
  }, auth) {
    this.auth = auth;
    this.documentSizeMiB = documentSizeMiB;
    this.hasSectionAccess = hasSectionAccess;
    if (objNoCache !== void 0 && objNoCache !== null) {
      if (objNoCache.length > 0 && objNoCache[0] instanceof Resultobjresponsetime) {
        this.objNoCache = objNoCache;
      } else {
        this.objNoCache = objNoCache.map((element) => new Resultobjresponsetime(element, this.auth));
      }
    }
    if (objSingleThreaded !== void 0 && objSingleThreaded !== null) {
      if (objSingleThreaded.length > 0 && objSingleThreaded[0] instanceof Resultsingle) {
        this.objSingleThreaded = objSingleThreaded;
      } else {
        this.objSingleThreaded = objSingleThreaded.map((element) => new Resultsingle(element, this.auth));
      }
    }
    if (objSlowCached !== void 0 && objSlowCached !== null) {
      if (objSlowCached.length > 0 && objSlowCached[0] instanceof Resultobjsinglethreaded) {
        this.objSlowCached = objSlowCached;
      } else {
        this.objSlowCached = objSlowCached.map((element) => new Resultobjsinglethreaded(element, this.auth));
      }
    }
    if (objSlowUncached !== void 0 && objSlowUncached !== null) {
      if (objSlowUncached.length > 0 && objSlowUncached[0] instanceof Resultobjresponsetime) {
        this.objSlowUncached = objSlowUncached;
      } else {
        this.objSlowUncached = objSlowUncached.map((element) => new Resultobjresponsetime(element, this.auth));
      }
    }
    this.objectCount = objectCount;
    this.rowCount = rowCount;
    this.sheetCount = sheetCount;
    if (sheets !== void 0 && sheets !== null) {
      if (sheets.length > 0 && sheets[0] instanceof Resultobjsheet) {
        this.sheets = sheets;
      } else {
        this.sheets = sheets.map((element) => new Resultobjsheet(element, this.auth));
      }
    }
    if (topFieldsByBytes !== void 0 && topFieldsByBytes !== null) {
      if (topFieldsByBytes.length > 0 && topFieldsByBytes[0] instanceof Resultmetadatatopfields) {
        this.topFieldsByBytes = topFieldsByBytes;
      } else {
        this.topFieldsByBytes = topFieldsByBytes.map((element) => new Resultmetadatatopfields(element, this.auth));
      }
    }
    if (topTablesByBytes !== void 0 && topTablesByBytes !== null) {
      if (topTablesByBytes.length > 0 && topTablesByBytes[0] instanceof Resultmetadatatoptables) {
        this.topTablesByBytes = topTablesByBytes;
      } else {
        this.topTablesByBytes = topTablesByBytes.map((element) => new Resultmetadatatoptables(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Resultmetadatatopfields {
  constructor({
    byte_size,
    is_system,
    name,
    ...rest
  }, auth) {
    this.auth = auth;
    this.byte_size = byte_size;
    this.is_system = is_system;
    this.name = name;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Resultmetadatatoptables {
  constructor({
    byte_size,
    is_system,
    name,
    ...rest
  }, auth) {
    this.auth = auth;
    this.byte_size = byte_size;
    this.is_system = is_system;
    this.name = name;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Resultobjresponsetime {
  constructor({
    id,
    objectType,
    sheetId,
    title,
    responseTimeSeconds,
    ...rest
  }, auth) {
    this.auth = auth;
    this.id = id;
    this.objectType = objectType;
    this.sheetId = sheetId;
    this.title = title;
    this.responseTimeSeconds = responseTimeSeconds;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Resultobjsheet {
  constructor({
    objectCount,
    sheet,
    sheetObjects,
    ...rest
  }, auth) {
    this.auth = auth;
    this.objectCount = objectCount;
    if (sheet !== void 0 && sheet !== null) {
      if (sheet instanceof Resultobjresponsetime) {
        this.sheet = sheet;
      } else {
        this.sheet = new Resultobjresponsetime(sheet, this.auth);
      }
    }
    if (sheetObjects !== void 0 && sheetObjects !== null) {
      if (sheetObjects.length > 0 && sheetObjects[0] instanceof Resultobjresponsetime) {
        this.sheetObjects = sheetObjects;
      } else {
        this.sheetObjects = sheetObjects.map((element) => new Resultobjresponsetime(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Resultobjsinglethreaded {
  constructor({
    id,
    objectType,
    sheetId,
    title,
    cpuQuotients,
    responseTimeSeconds,
    schema,
    ...rest
  }, auth) {
    this.auth = auth;
    this.id = id;
    this.objectType = objectType;
    this.sheetId = sheetId;
    this.title = title;
    this.cpuQuotients = cpuQuotients;
    this.responseTimeSeconds = responseTimeSeconds;
    if (schema !== void 0 && schema !== null) {
      if (schema instanceof Objectspec) {
        this.schema = schema;
      } else {
        this.schema = new Objectspec(schema, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Resultsingle {
  constructor({
    id,
    objectType,
    sheetId,
    title,
    cpuQuotient1,
    ...rest
  }, auth) {
    this.auth = auth;
    this.id = id;
    this.objectType = objectType;
    this.sheetId = sheetId;
    this.title = title;
    this.cpuQuotient1 = cpuQuotient1;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Sortedcomparisonfields {
  constructor({
    absoluteDiffAsc,
    absoluteDiffDesc,
    dataSourceStatus,
    list,
    relativeDiffAsc,
    relativeDiffDesc,
    ...rest
  }, auth) {
    this.auth = auth;
    this.absoluteDiffAsc = absoluteDiffAsc;
    this.absoluteDiffDesc = absoluteDiffDesc;
    this.dataSourceStatus = dataSourceStatus;
    this.list = list;
    this.relativeDiffAsc = relativeDiffAsc;
    this.relativeDiffDesc = relativeDiffDesc;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Sortedcomparisonobjresponsetime {
  constructor({
    absoluteDiffAsc,
    absoluteDiffDesc,
    dataSourceStatus,
    list,
    relativeDiffAsc,
    relativeDiffDesc,
    ...rest
  }, auth) {
    this.auth = auth;
    this.absoluteDiffAsc = absoluteDiffAsc;
    this.absoluteDiffDesc = absoluteDiffDesc;
    this.dataSourceStatus = dataSourceStatus;
    this.list = list;
    this.relativeDiffAsc = relativeDiffAsc;
    this.relativeDiffDesc = relativeDiffDesc;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Sortedcomparisonoobjheavy {
  constructor({
    absoluteDiffAsc,
    absoluteDiffDesc,
    dataSourceStatus,
    list,
    relativeDiffAsc,
    relativeDiffDesc,
    ...rest
  }, auth) {
    this.auth = auth;
    this.absoluteDiffAsc = absoluteDiffAsc;
    this.absoluteDiffDesc = absoluteDiffDesc;
    this.dataSourceStatus = dataSourceStatus;
    this.list = list;
    this.relativeDiffAsc = relativeDiffAsc;
    this.relativeDiffDesc = relativeDiffDesc;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Sortedcomparisontables {
  constructor({
    absoluteDiffAsc,
    absoluteDiffDesc,
    dataSourceStatus,
    list,
    relativeDiffAsc,
    relativeDiffDesc,
    ...rest
  }, auth) {
    this.auth = auth;
    this.absoluteDiffAsc = absoluteDiffAsc;
    this.absoluteDiffDesc = absoluteDiffDesc;
    this.dataSourceStatus = dataSourceStatus;
    this.list = list;
    this.relativeDiffAsc = relativeDiffAsc;
    this.relativeDiffDesc = relativeDiffDesc;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Apps {
  constructor(config) {
    this.config = config instanceof import_auth.default ? config.config : config;
    this.auth = config instanceof import_auth.default ? config : new import_auth.default(config);
  }
  async downloadAppsEvaluationsCompare(baseid, comparisonid) {
    const response = await this.auth.rest(
      "/apps/evaluations/{baseid}/actions/compare/{comparisonid}/actions/download".replace("{baseid}", baseid).replace("{comparisonid}", comparisonid),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new Comparison(responseJson, this.auth);
  }
  async compareAppsEvaluations(baseid, comparisonid, queryParams = {}) {
    const response = await this.auth.rest(
      `${"/apps/evaluations/{baseid}/actions/compare/{comparisonid}".replace("{baseid}", baseid).replace("{comparisonid}", comparisonid)}?${Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => `${k}=${v}`).join("&")}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new Comparison(responseJson, this.auth);
  }
  async getEvaluation(id, queryParams = {}) {
    const response = await this.auth.rest(
      `${"/apps/evaluations/{id}".replace("{id}", id)}?${Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => `${k}=${v}`).join("&")}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new Evaluation(responseJson, this.auth);
  }
  async importApp(data, queryParams = {}) {
    const response = await this.auth.rest(
      `/apps/import?${Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => `${k}=${v}`).join("&")}`,
      {
        method: "POST",
        body: data
      }
    );
    const responseJson = await response.json();
    return new NxApp(responseJson, this.auth);
  }
  async getPrivileges() {
    const response = await this.auth.rest(
      "/apps/privileges",
      {
        method: "GET"
      }
    );
    return response.json();
  }
  async deleteMediaFile(appId, path) {
    await this.auth.rest(
      "/apps/{appId}/media/files/{path}".replace("{appId}", appId).replace("{path}", path),
      {
        method: "DELETE"
      }
    );
  }
  async getMediaFile(appId, path) {
    const response = await this.auth.rest(
      "/apps/{appId}/media/files/{path}".replace("{appId}", appId).replace("{path}", path),
      {
        method: "GET"
      }
    );
    return response.arrayBuffer();
  }
  async setMediaFile(appId, path, data) {
    await this.auth.rest(
      "/apps/{appId}/media/files/{path}".replace("{appId}", appId).replace("{path}", path),
      {
        method: "PUT",
        body: data
      }
    );
  }
  async getMediaLists(appId, path, queryParams = {}) {
    const response = await this.auth.rest(
      `${"/apps/{appId}/media/list/{path}".replace("{appId}", appId).replace("{path}", path)}?${Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => `${k}=${v}`).join("&")}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new AppContentList(responseJson, this.auth);
  }
  async getReloadsLog(appId, reloadId) {
    const response = await this.auth.rest(
      "/apps/{appId}/reloads/logs/{reloadId}".replace("{appId}", appId).replace("{reloadId}", reloadId),
      {
        method: "GET"
      }
    );
    return response.arrayBuffer();
  }
  async get(appId) {
    const response = await this.auth.rest(
      "/apps/{appId}".replace("{appId}", appId),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new NxApp(responseJson, this.auth);
  }
  async getEvaluations(guid, queryParams = { limit: 20 }) {
    const response = await this.auth.rest(
      `${"/apps/{guid}/evaluations".replace("{guid}", guid)}?${Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => `${k}=${v}`).join("&")}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new Evaluations(responseJson, this.auth);
  }
  async createEvaluation(guid) {
    const response = await this.auth.rest(
      "/apps/{guid}/evaluations".replace("{guid}", guid),
      {
        method: "POST"
      }
    );
    const responseJson = await response.json();
    return new Evaluation(responseJson, this.auth);
  }
  async create(data) {
    const response = await this.auth.rest(
      "/apps",
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    return new NxApp(responseJson, this.auth);
  }
  createSessionApp(sessionAppId) {
    return new NxApp({ attributes: { id: sessionAppId }, create: [], privileges: [] }, this.auth);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AppAttributes,
  AppContentList,
  AppContentListItem,
  AppUpdateAttributes,
  Apps,
  Cmpbool,
  Cmpfloat,
  Cmpint,
  Comparison,
  CreateApp,
  DataModelMetadata,
  Evaluation,
  EvaluationDetails,
  Evaluations,
  EvaluationsLinks,
  EvaluationsLinksNext,
  EvaluationsLinksPrev,
  Event,
  FieldAttributes,
  FieldInTableProfilingData,
  FieldMetadata,
  FileData,
  FrequencyDistributionData,
  HardwareMeta,
  JsonObject,
  LastReloadMetadata,
  LineageInfoRest,
  Log,
  Metadata,
  MetadataReloadmeta,
  NxApp,
  NxAppCreatePrivileges,
  NxAttributes,
  Objectspec,
  PublishApp,
  RepublishApp,
  Result,
  Resultmetadatatopfields,
  Resultmetadatatoptables,
  Resultobjresponsetime,
  Resultobjsheet,
  Resultobjsinglethreaded,
  Resultsingle,
  ScriptLogList,
  ScriptLogMeta,
  Sortedcomparisonfields,
  Sortedcomparisonobjresponsetime,
  Sortedcomparisonoobjheavy,
  Sortedcomparisontables,
  SymbolFrequency,
  SymbolValue,
  TableMetadata,
  TableProfilingData,
  UpdateApp,
  UpdateOwner,
  UpdateSpace
});
