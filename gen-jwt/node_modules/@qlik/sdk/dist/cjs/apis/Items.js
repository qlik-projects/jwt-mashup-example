var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Items_exports = {};
__export(Items_exports, {
  CollectionLinksResponseBody: () => CollectionLinksResponseBody,
  CollectionMetaResponseBody: () => CollectionMetaResponseBody,
  CollectionResultResponseBody: () => CollectionResultResponseBody,
  CollectionsLinksResponseBody: () => CollectionsLinksResponseBody,
  ItemLinksResponseBody: () => ItemLinksResponseBody,
  ItemMetaResponseBody: () => ItemMetaResponseBody,
  ItemResultResponseBody: () => ItemResultResponseBody,
  ItemTagResponseBody: () => ItemTagResponseBody,
  ItemViewsResponseBody: () => ItemViewsResponseBody,
  ItemViewsWeeksResponseBody: () => ItemViewsWeeksResponseBody,
  Items: () => Items,
  ItemsLinksResponseBody: () => ItemsLinksResponseBody,
  ItemsListItemCollectionsResponseBody: () => ItemsListItemCollectionsResponseBody,
  ItemsListItemsResponseBody: () => ItemsListItemsResponseBody,
  ItemsResourceSizeResponseBody: () => ItemsResourceSizeResponseBody,
  ItemsResultResponseBody: () => ItemsResultResponseBody,
  ItemsSettingsPatch: () => ItemsSettingsPatch,
  ItemsSettingsResponseBody: () => ItemsSettingsResponseBody,
  ItemsUpdateItemRequestBody: () => ItemsUpdateItemRequestBody,
  Link: () => Link
});
module.exports = __toCommonJS(Items_exports);
var import_auth = __toESM(require("../auth/auth.js"));
class ItemResultResponseBody {
  constructor({
    actions,
    collectionIds,
    createdAt,
    creatorId,
    description,
    id,
    isFavorited,
    itemViews,
    links,
    meta,
    name,
    ownerId,
    resourceAttributes,
    resourceCreatedAt,
    resourceCustomAttributes,
    resourceId,
    resourceLink,
    resourceReloadEndTime,
    resourceReloadStatus,
    resourceSize,
    resourceSubType,
    resourceType,
    resourceUpdatedAt,
    spaceId,
    tenantId,
    thumbnailId,
    updatedAt,
    updaterId,
    ...rest
  }, auth) {
    this.auth = auth;
    this.actions = actions;
    this.collectionIds = collectionIds;
    this.createdAt = createdAt;
    this.creatorId = creatorId;
    this.description = description;
    this.id = id;
    this.isFavorited = isFavorited;
    if (itemViews !== void 0 && itemViews !== null) {
      if (itemViews instanceof ItemViewsResponseBody) {
        this.itemViews = itemViews;
      } else {
        this.itemViews = new ItemViewsResponseBody(itemViews, this.auth);
      }
    }
    if (links instanceof ItemLinksResponseBody) {
      this.links = links;
    } else {
      this.links = new ItemLinksResponseBody(links, this.auth);
    }
    if (meta instanceof ItemMetaResponseBody) {
      this.meta = meta;
    } else {
      this.meta = new ItemMetaResponseBody(meta, this.auth);
    }
    this.name = name;
    this.ownerId = ownerId;
    this.resourceAttributes = resourceAttributes;
    this.resourceCreatedAt = resourceCreatedAt;
    this.resourceCustomAttributes = resourceCustomAttributes;
    this.resourceId = resourceId;
    this.resourceLink = resourceLink;
    this.resourceReloadEndTime = resourceReloadEndTime;
    this.resourceReloadStatus = resourceReloadStatus;
    if (resourceSize !== void 0 && resourceSize !== null) {
      if (resourceSize instanceof ItemsResourceSizeResponseBody) {
        this.resourceSize = resourceSize;
      } else {
        this.resourceSize = new ItemsResourceSizeResponseBody(resourceSize, this.auth);
      }
    }
    this.resourceSubType = resourceSubType;
    this.resourceType = resourceType;
    this.resourceUpdatedAt = resourceUpdatedAt;
    this.spaceId = spaceId;
    this.tenantId = tenantId;
    this.thumbnailId = thumbnailId;
    this.updatedAt = updatedAt;
    this.updaterId = updaterId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  async getCollections(queryParams = {}) {
    const response = await this.auth.rest(
      `${"/items/{itemId}/collections".replace("{itemId}", this.id ?? "")}?${Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => `${k}=${v}`).join("&")}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new ItemsListItemCollectionsResponseBody(responseJson, this.auth);
  }
  async getPublisheditems(queryParams = {}) {
    const response = await this.auth.rest(
      `${"/items/{itemId}/publisheditems".replace("{itemId}", this.id ?? "")}?${Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => `${k}=${v}`).join("&")}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new ItemsListItemCollectionsResponseBody(responseJson, this.auth);
  }
  async delete() {
    await this.auth.rest(
      "/items/{itemId}".replace("{itemId}", this.id ?? ""),
      {
        method: "DELETE"
      }
    );
  }
  async set(data) {
    const response = await this.auth.rest(
      "/items/{itemId}".replace("{itemId}", this.id ?? ""),
      {
        method: "PUT",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    Object.keys(responseJson).forEach((key) => {
      if (this[key]) {
        this[key] = responseJson[key];
      }
    });
    return this;
  }
}
class ItemsListItemCollectionsResponseBody {
  constructor({
    data,
    links,
    ...rest
  }, auth) {
    this.auth = auth;
    if (data.length > 0 && data[0] instanceof CollectionResultResponseBody) {
      this.data = data;
    } else {
      this.data = data.map((element) => new CollectionResultResponseBody(element, this.auth));
    }
    if (links instanceof CollectionsLinksResponseBody) {
      this.links = links;
    } else {
      this.links = new CollectionsLinksResponseBody(links, this.auth);
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ItemsListItemsResponseBody {
  constructor({
    data,
    links,
    ...rest
  }, auth) {
    this.auth = auth;
    if (data.length > 0 && data[0] instanceof ItemResultResponseBody) {
      this.data = data;
    } else {
      this.data = data.map((element) => new ItemResultResponseBody(element, this.auth));
    }
    if (links instanceof ItemsLinksResponseBody) {
      this.links = links;
    } else {
      this.links = new ItemsLinksResponseBody(links, this.auth);
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ItemsSettingsPatch {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ItemsSettingsResponseBody {
  constructor({
    usageMetricsEnabled,
    ...rest
  }, auth) {
    this.usageMetricsEnabled = true;
    this.auth = auth;
    this.usageMetricsEnabled = usageMetricsEnabled;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ItemsUpdateItemRequestBody {
  constructor({
    description,
    name,
    resourceAttributes,
    resourceCustomAttributes,
    resourceId,
    resourceLink,
    resourceSubType,
    resourceType,
    resourceUpdatedAt,
    spaceId,
    thumbnailId,
    ...rest
  }, auth) {
    this.auth = auth;
    this.description = description;
    this.name = name;
    this.resourceAttributes = resourceAttributes;
    this.resourceCustomAttributes = resourceCustomAttributes;
    this.resourceId = resourceId;
    this.resourceLink = resourceLink;
    this.resourceSubType = resourceSubType;
    this.resourceType = resourceType;
    this.resourceUpdatedAt = resourceUpdatedAt;
    this.spaceId = spaceId;
    this.thumbnailId = thumbnailId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Link {
  constructor({
    href,
    ...rest
  }, auth) {
    this.auth = auth;
    this.href = href;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class CollectionLinksResponseBody {
  constructor({
    items,
    self,
    ...rest
  }, auth) {
    this.auth = auth;
    if (items !== void 0 && items !== null) {
      if (items instanceof Link) {
        this.items = items;
      } else {
        this.items = new Link(items, this.auth);
      }
    }
    if (self !== void 0 && self !== null) {
      if (self instanceof Link) {
        this.self = self;
      } else {
        this.self = new Link(self, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class CollectionMetaResponseBody {
  constructor({
    items,
    ...rest
  }, auth) {
    this.auth = auth;
    if (items !== void 0 && items !== null) {
      if (items instanceof ItemsResultResponseBody) {
        this.items = items;
      } else {
        this.items = new ItemsResultResponseBody(items, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class CollectionResultResponseBody {
  constructor({
    createdAt,
    creatorId,
    description,
    id,
    itemCount,
    links,
    meta,
    name,
    tenantId,
    type,
    updatedAt,
    updaterId,
    ...rest
  }, auth) {
    this.auth = auth;
    this.createdAt = createdAt;
    this.creatorId = creatorId;
    this.description = description;
    this.id = id;
    this.itemCount = itemCount;
    if (links instanceof CollectionLinksResponseBody) {
      this.links = links;
    } else {
      this.links = new CollectionLinksResponseBody(links, this.auth);
    }
    if (meta !== void 0 && meta !== null) {
      if (meta instanceof CollectionMetaResponseBody) {
        this.meta = meta;
      } else {
        this.meta = new CollectionMetaResponseBody(meta, this.auth);
      }
    }
    this.name = name;
    this.tenantId = tenantId;
    this.type = type;
    this.updatedAt = updatedAt;
    this.updaterId = updaterId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class CollectionsLinksResponseBody {
  constructor({
    item,
    next,
    prev,
    self,
    ...rest
  }, auth) {
    this.auth = auth;
    if (item !== void 0 && item !== null) {
      if (item instanceof Link) {
        this.item = item;
      } else {
        this.item = new Link(item, this.auth);
      }
    }
    if (next !== void 0 && next !== null) {
      if (next instanceof Link) {
        this.next = next;
      } else {
        this.next = new Link(next, this.auth);
      }
    }
    if (prev !== void 0 && prev !== null) {
      if (prev instanceof Link) {
        this.prev = prev;
      } else {
        this.prev = new Link(prev, this.auth);
      }
    }
    if (self !== void 0 && self !== null) {
      if (self instanceof Link) {
        this.self = self;
      } else {
        this.self = new Link(self, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ItemLinksResponseBody {
  constructor({
    collections,
    open,
    self,
    thumbnail,
    ...rest
  }, auth) {
    this.auth = auth;
    if (collections !== void 0 && collections !== null) {
      if (collections instanceof Link) {
        this.collections = collections;
      } else {
        this.collections = new Link(collections, this.auth);
      }
    }
    if (open !== void 0 && open !== null) {
      if (open instanceof Link) {
        this.open = open;
      } else {
        this.open = new Link(open, this.auth);
      }
    }
    if (self !== void 0 && self !== null) {
      if (self instanceof Link) {
        this.self = self;
      } else {
        this.self = new Link(self, this.auth);
      }
    }
    if (thumbnail !== void 0 && thumbnail !== null) {
      if (thumbnail instanceof Link) {
        this.thumbnail = thumbnail;
      } else {
        this.thumbnail = new Link(thumbnail, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ItemMetaResponseBody {
  constructor({
    actions,
    collections,
    isFavorited,
    tags,
    ...rest
  }, auth) {
    this.auth = auth;
    this.actions = actions;
    if (collections.length > 0 && collections[0] instanceof ItemTagResponseBody) {
      this.collections = collections;
    } else {
      this.collections = collections.map((element) => new ItemTagResponseBody(element, this.auth));
    }
    this.isFavorited = isFavorited;
    if (tags.length > 0 && tags[0] instanceof ItemTagResponseBody) {
      this.tags = tags;
    } else {
      this.tags = tags.map((element) => new ItemTagResponseBody(element, this.auth));
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ItemTagResponseBody {
  constructor({
    id,
    name,
    ...rest
  }, auth) {
    this.auth = auth;
    this.id = id;
    this.name = name;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ItemViewsResponseBody {
  constructor({
    total,
    trend,
    unique,
    usedBy,
    week,
    ...rest
  }, auth) {
    this.auth = auth;
    this.total = total;
    this.trend = trend;
    this.unique = unique;
    this.usedBy = usedBy;
    if (week !== void 0 && week !== null) {
      if (week.length > 0 && week[0] instanceof ItemViewsWeeksResponseBody) {
        this.week = week;
      } else {
        this.week = week.map((element) => new ItemViewsWeeksResponseBody(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ItemViewsWeeksResponseBody {
  constructor({
    start,
    total,
    unique,
    ...rest
  }, auth) {
    this.auth = auth;
    this.start = start;
    this.total = total;
    this.unique = unique;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ItemsLinksResponseBody {
  constructor({
    collection,
    next,
    prev,
    self,
    ...rest
  }, auth) {
    this.auth = auth;
    if (collection !== void 0 && collection !== null) {
      if (collection instanceof Link) {
        this.collection = collection;
      } else {
        this.collection = new Link(collection, this.auth);
      }
    }
    if (next !== void 0 && next !== null) {
      if (next instanceof Link) {
        this.next = next;
      } else {
        this.next = new Link(next, this.auth);
      }
    }
    if (prev !== void 0 && prev !== null) {
      if (prev instanceof Link) {
        this.prev = prev;
      } else {
        this.prev = new Link(prev, this.auth);
      }
    }
    if (self !== void 0 && self !== null) {
      if (self instanceof Link) {
        this.self = self;
      } else {
        this.self = new Link(self, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ItemsResourceSizeResponseBody {
  constructor({
    appFile,
    appMemory,
    ...rest
  }, auth) {
    this.auth = auth;
    this.appFile = appFile;
    this.appMemory = appMemory;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ItemsResultResponseBody {
  constructor({
    data,
    links,
    ...rest
  }, auth) {
    this.auth = auth;
    if (data.length > 0 && data[0] instanceof ItemResultResponseBody) {
      this.data = data;
    } else {
      this.data = data.map((element) => new ItemResultResponseBody(element, this.auth));
    }
    if (links instanceof ItemsLinksResponseBody) {
      this.links = links;
    } else {
      this.links = new ItemsLinksResponseBody(links, this.auth);
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Items {
  constructor(config) {
    this.config = config instanceof import_auth.default ? config.config : config;
    this.auth = config instanceof import_auth.default ? config : new import_auth.default(config);
  }
  async getSettings() {
    const response = await this.auth.rest(
      "/items/settings",
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new ItemsSettingsResponseBody(responseJson, this.auth);
  }
  async patchSettings(data) {
    const response = await this.auth.rest(
      "/items/settings",
      {
        method: "PATCH",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    return new ItemsSettingsResponseBody(responseJson, this.auth);
  }
  async get(itemId) {
    const response = await this.auth.rest(
      "/items/{itemId}".replace("{itemId}", itemId),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new ItemResultResponseBody(responseJson, this.auth);
  }
  async getItems(queryParams = {}) {
    const response = await this.auth.rest(
      `/items?${Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => `${k}=${v}`).join("&")}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new ItemsListItemsResponseBody(responseJson, this.auth);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CollectionLinksResponseBody,
  CollectionMetaResponseBody,
  CollectionResultResponseBody,
  CollectionsLinksResponseBody,
  ItemLinksResponseBody,
  ItemMetaResponseBody,
  ItemResultResponseBody,
  ItemTagResponseBody,
  ItemViewsResponseBody,
  ItemViewsWeeksResponseBody,
  Items,
  ItemsLinksResponseBody,
  ItemsListItemCollectionsResponseBody,
  ItemsListItemsResponseBody,
  ItemsResourceSizeResponseBody,
  ItemsResultResponseBody,
  ItemsSettingsPatch,
  ItemsSettingsResponseBody,
  ItemsUpdateItemRequestBody,
  Link
});
