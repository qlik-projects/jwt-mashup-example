{"version":3,"file":"enigma.min.js","sources":["node_modules/node-event-emitter/index.js","src/event-emitter.js","src/error.js","src/error-codes.js","src/session.js","src/key-value-cache.js","src/schema.js","src/rpc-resolver.js","src/rpc.js","src/suspend-resume.js","src/interceptors/delta-request-interceptor.js","src/interceptors/api-response-interceptor.js","node_modules/extend/index.js","src/json-patch.js","src/interceptors/delta-response-interceptor.js","src/interceptors/out-param-response-interceptor.js","src/intercept.js","src/interceptors/error-response-interceptor.js","src/interceptors/result-response-interceptor.js","src/api-cache.js","src/enigma.js"],"sourcesContent":["/**\n * Utility functions\n */\n\nvar util = {};\n\nutil.isObject = function isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nutil.isNumber = function isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nutil.isUndefined = function isUndefined(arg) {\n  return arg === void 0;\n}\n\nutil.isFunction = function isFunction(arg){\n  return typeof arg === 'function';\n}\n\n\n/**\n * EventEmitter class\n */\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\nEventEmitter.init = function() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!util.isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error' && !this._events.error) {\n    er = arguments[1];\n    if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      throw Error('Uncaught, unspecified \"error\" event.');\n    }\n    return false;\n  }\n\n  handler = this._events[type];\n\n  if (util.isUndefined(handler))\n    return false;\n\n  if (util.isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        len = arguments.length;\n        args = new Array(len - 1);\n        for (i = 1; i < len; i++)\n          args[i - 1] = arguments[i];\n        handler.apply(this, args);\n    }\n  } else if (util.isObject(handler)) {\n    len = arguments.length;\n    args = new Array(len - 1);\n    for (i = 1; i < len; i++)\n      args[i - 1] = arguments[i];\n\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!util.isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              util.isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (util.isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (util.isObject(this._events[type]) && !this._events[type].warned) {\n    var m;\n    if (!util.isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n\n      if (util.isFunction(console.error)) {\n        console.error('(node) warning: possible EventEmitter memory ' +\n                      'leak detected. %d listeners added. ' +\n                      'Use emitter.setMaxListeners() to increase limit.',\n                      this._events[type].length);\n      }\n      if (util.isFunction(console.trace))\n        console.trace();\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!util.isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!util.isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (util.isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (util.isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (util.isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (Array.isArray(listeners)) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (util.isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  var ret;\n  if (!emitter._events || !emitter._events[type])\n    ret = 0;\n  else if (util.isFunction(emitter._events[type]))\n    ret = 1;\n  else\n    ret = emitter._events[type].length;\n  return ret;\n};\n","import EventEmitter from 'node-event-emitter';\n\n/**\n* @module EventEmitter\n* @private\n*/\nexport default {\n\n  /**\n  * Function used to add event handling to objects passed in.\n  * @param {Object} obj Object instance that will get event handling.\n  */\n  mixin: (obj) => {\n    Object.keys(EventEmitter.prototype).forEach((key) => {\n      obj[key] = EventEmitter.prototype[key];\n    });\n    EventEmitter.init(obj);\n  },\n};\n","/**\n * Error containing a custom error code.\n * @extends Error\n * @property {number} code The error code as defined by `errorCodes`.\n * @property {boolean} enigmaError=true\n * @property {Object} [original] the websocket event that is the source of the error.\n */\nclass EnigmaError extends Error {\n  constructor(name, code, original) {\n    super(name);\n    this.code = code;\n    this.enigmaError = true;\n    this.original = original;\n  }\n}\n\n/**\n * Create an enigmaError\n * @private\n * @param {Number} code A proper error code from `errorCodes`\n * @param {String} name A message/name of the enigmaError.\n * @param {Object} [original] the websocket event that is the source of the error.\n * @returns {EnigmaError}\n */\nexport default function createEnigmaError(code, name, original) {\n  return new EnigmaError(name, code, original);\n}\n","/**\n * This is a list of error codes that can be thrown from enigma.js API calls.\n * @entry\n * @see EnigmaError\n * @enum\n * @example <caption>Handling an enigma.js error</caption>\n * const { NOT_CONNECTED } = require('enigma.js/error-codes');\n * try {\n *   const layout = await model.getLayout();\n * } catch (err) {\n *   if (err.code === NOT_CONNECTED) {\n *     console.log('Tried to communicate on a session that is closed');\n *   }\n * }\n */\nconst errorCodes = {\n  /**\n   * You're trying to send data on a socket that's not connected.\n   * @type {number}\n   */\n  NOT_CONNECTED: -1,\n  /**\n   * The object you're trying to fetch does not exist.\n   * @type {number}\n   */\n  OBJECT_NOT_FOUND: -2,\n  /**\n   * Unexpected RPC response, expected array of patches.\n   * @type {number}\n   */\n  EXPECTED_ARRAY_OF_PATCHES: -3,\n  /**\n   * Not an object that can be patched.\n   * @type {number}\n   */\n  PATCH_HAS_NO_PARENT: -4,\n  /**\n   * This entry is already defined with another key.\n   * @type {number}\n   */\n  ENTRY_ALREADY_DEFINED: -5,\n  /**\n   * You need to supply a configuration.\n   * @type {number}\n   */\n  NO_CONFIG_SUPPLIED: -6,\n  /**\n   * There's no promise object available (polyfill required?).\n   * @type {number}\n   */\n  PROMISE_REQUIRED: -7,\n  /**\n   * The schema struct type you requested does not exist.\n   * @type {number}\n   */\n  SCHEMA_STRUCT_TYPE_NOT_FOUND: -8,\n  /**\n   * Can't override this function.\n   * @type {number}\n   */\n  SCHEMA_MIXIN_CANT_OVERRIDE_FUNCTION: -9,\n  /**\n   * Extend is not allowed for this mixin.\n   * @type {number}\n   */\n  SCHEMA_MIXIN_EXTEND_NOT_ALLOWED: -10,\n  /**\n   * Session suspended - no interaction allowed.\n   * @type {number}\n   */\n  SESSION_SUSPENDED: -11,\n  /**\n   * onlyIfAttached supplied, but you got SESSION_CREATED.\n   * @type {number}\n   */\n  SESSION_NOT_ATTACHED: -12,\n};\n\nexport default errorCodes;\n","import EventEmitter from './event-emitter';\n\nimport createEnigmaError from './error';\nimport errorCodes from './error-codes';\n\nconst RPC_CLOSE_NORMAL = 1000;\nconst RPC_CLOSE_MANUAL_SUSPEND = 4000;\n\nlet cacheId = 0;\n\n/**\n * The QIX Engine session object.\n */\nclass Session {\n  /**\n   * Handles all JSON-RPC notification events, 'notification:* or handles a specific JSON-RPC\n   * notification event, 'notification:OnConnected'. These events depend on the product from which\n   * you use QIX Engine.\n   * @event Session#notification\n   * @type {Object}\n   * @example <caption>Bind the notification events</caption>\n   * // bind all notifications to console.log:\n   * session.on('notification:*', console.log);\n   * // bind a specific notification to console.log:\n   * session.on('notification:OnConnected', console.log);\n   */\n\n  /**\n   * Handles websocket messages. Generally used for debugging purposes. `traffic:*` will handle all\n   * websocket messages, `traffic:sent` will handle outgoing messages, and `traffic:received` will\n   * handle incoming messages.\n   * @event Session#traffic\n   * @type {Object}\n   * @example <caption>Bind the traffic events</caption>\n   * // bind both in- and outbound traffic to console.log:\n   * session.on('traffic:*', console.log);\n   * // bind outbound traffic to console.log:\n   * session.on('traffic:sent', console.log);\n   * // bind inbound traffic to console.log:\n   * session.on('traffic:received', console.log);\n   */\n\n  constructor(options) {\n    const session = this;\n    Object.assign(session, options);\n    this.Promise = this.config.Promise;\n    this.definition = this.config.definition;\n    EventEmitter.mixin(session);\n    cacheId += 1;\n    session.id = cacheId;\n    session.rpc.on('socket-error', session.onRpcError.bind(session));\n    session.rpc.on('closed', session.onRpcClosed.bind(session));\n    session.rpc.on('message', session.onRpcMessage.bind(session));\n    session.rpc.on('notification', session.onRpcNotification.bind(session));\n    session.rpc.on('traffic', session.onRpcTraffic.bind(session));\n    session.on('closed', () => session.onSessionClosed());\n  }\n\n  /**\n  * Event handler for re-triggering error events from RPC.\n  * @private\n  * @emits socket-error\n  * @param {Error} err Webocket error event.\n  */\n  onRpcError(err) {\n    if (this.suspendResume.isSuspended) {\n      return;\n    }\n    this.emit('socket-error', err);\n  }\n\n  /**\n  * Event handler for the RPC close event.\n  * @private\n  * @emits Session#suspended\n  * @emits Session#closed\n  * @param {Event} evt WebSocket close event.\n  */\n  onRpcClosed(evt) {\n    /**\n     * Handles suspended state. This event is triggered in two cases (listed below). It is useful\n     * in scenarios where, for example, you want to block interaction with your application until\n     * you resume again. Or, if config.suspendOnClose is true and there was a network disconnect\n     * (socket closed) or if you ran session.suspend().\n     * @event Session#suspended\n     * @type {Object}\n     * @param {Object} evt Event object.\n     * @param {String} evt.initiator String indication what triggered the suspended state. Possible\n     * values network, manual.\n     * @example <caption>Handling session suspended</caption>\n     * session.on('suspended', () => {\n     *   console.log('Session was suspended, retrying...');\n     *   session.resume();\n     * });\n     */\n    if (this.suspendResume.isSuspended) {\n      return;\n    }\n    if (evt.code === RPC_CLOSE_NORMAL || evt.code === RPC_CLOSE_MANUAL_SUSPEND) {\n      return;\n    }\n    if (this.config.suspendOnClose) {\n      const { code, reason } = evt;\n      this.suspendResume.suspend().then(() => this.emit('suspended', {\n        initiator: 'network',\n        code,\n        reason,\n      }));\n    } else {\n      this.emit('closed', evt);\n    }\n  }\n\n  /**\n  * Event handler for the RPC message event.\n  * @private\n  * @param {Object} response JSONRPC response.\n  */\n  onRpcMessage(response) {\n    if (this.suspendResume.isSuspended) {\n      return;\n    }\n    if (response.change) {\n      response.change.forEach((handle) => this.emitHandleChanged(handle));\n    }\n    if (response.close) {\n      response.close.forEach((handle) => this.emitHandleClosed(handle));\n    }\n  }\n\n  /**\n  * Event handler for the RPC notification event.\n  * @private\n  * @emits Session#notification\n  * @param {Object} response The JSONRPC notification.\n  */\n  onRpcNotification(response) {\n    this.emit('notification:*', response.method, response.params);\n    this.emit(`notification:${response.method}`, response.params);\n  }\n\n  /**\n  * Event handler for the RPC traffic event.\n  * @private\n  * @emits Session#traffic\n  * @param {String} dir The traffic direction, sent or received.\n  * @param {Object} data JSONRPC request/response/WebSocket message.\n  * @param {Number} handle The associated handle.\n  */\n  onRpcTraffic(dir, data, handle) {\n    this.emit('traffic:*', dir, data);\n    this.emit(`traffic:${dir}`, data);\n    const api = this.apis.getApi(handle);\n    if (api) {\n      api.emit('traffic:*', dir, data);\n      api.emit(`traffic:${dir}`, data);\n    }\n  }\n\n  /**\n  * Event handler for cleaning up API instances when a session has been closed.\n  * @private\n  * @emits API#closed\n  */\n  onSessionClosed() {\n    this.apis.getApis().forEach((entry) => {\n      entry.api.emit('closed');\n      entry.api.removeAllListeners();\n    });\n    this.apis.clear();\n  }\n\n  /**\n   * Function used to get an API for a backend object.\n   * @private\n   * @param {Object} args Arguments used to create object API.\n   * @param {Number} args.handle Handle of the backend object.\n   * @param {String} args.id ID of the backend object.\n   * @param {String} args.type QIX type of the backend object. Can for example\n   *                           be \"Doc\" or \"GenericVariable\".\n   * @param {String} args.genericType Custom type of the backend object, if defined in qInfo.\n   * @returns {Object} Returns the generated and possibly augmented API.\n   */\n  getObjectApi(args) {\n    const {\n      handle, id, type, genericType,\n    } = args;\n    let api = this.apis.getApi(handle);\n    if (api) {\n      return api;\n    }\n    const factory = this.definition.generate(type);\n    api = factory(this, handle, id, genericType);\n    this.apis.add(handle, api);\n    return api;\n  }\n\n  /**\n  * Establishes the websocket against the configured URL and returns the Global instance.\n  * @emits Session#opened\n  * @returns {Promise<Object>} Eventually resolved if the connection was successful.\n  * @example <caption>Opening a sesssion</caption>\n  * session.open().then(() => {\n  *   console.log('Session was opened');\n  * });\n  */\n  open() {\n    /**\n     * Handles opened state. This event is triggered whenever the websocket is connected and\n     * ready for communication.\n     * @event Session#opened\n     * @type {Object}\n     * @example <caption>Bind the session opened event</caption>\n     * session.on('opened', () => {\n     *   console.log('Session was opened');\n     * });\n     */\n    if (!this.globalPromise) {\n      const args = {\n        handle: -1,\n        id: 'Global',\n        type: 'Global',\n        genericType: 'Global',\n      };\n      this.globalPromise = this.rpc.open()\n        .then(() => this.getObjectApi(args))\n        .then((global) => {\n          this.emit('opened');\n          return global;\n        });\n    }\n    return this.globalPromise;\n  }\n\n  /**\n  * Function used to send data on the RPC socket.\n  * @param {Object} request The request to be sent. (data and some meta info)\n  * @returns {Object} Returns a promise instance.\n  */\n  send(request) {\n    if (this.suspendResume.isSuspended) {\n      return this.Promise.reject(createEnigmaError(errorCodes.SESSION_SUSPENDED, 'Session suspended', this.rpc.closeEvent));\n    }\n    request.id = this.rpc.createRequestId();\n    const promise = this.intercept.executeRequests(this, this.Promise.resolve(request))\n      .then((augmentedRequest) => {\n        const data = { ...this.config.protocol, ...augmentedRequest };\n        // the outKey value is used by multiple-out interceptor, at some point\n        // we need to refactor that implementation and figure out how to transport\n        // this value without hijacking the JSONRPC request object:\n        delete data.outKey;\n        const response = this.rpc.send(data);\n        augmentedRequest.retry = () => this.send(request);\n        return this.intercept.executeResponses(this, response, augmentedRequest);\n      });\n    Session.addToPromiseChain(promise, 'requestId', request.id);\n    return promise;\n  }\n\n  /**\n  * Suspends the enigma.js session by closing the websocket and rejecting all method calls\n  * until it is has resumed again.\n  * @emits Session#suspended\n  * @param {Number} [code=4000] - The reason code for suspending the connection.\n  * @param {String} [reason=\"\"] - The human readable string describing\n  * why the connection is suspended.\n  * @returns {Promise<Object>} Eventually resolved when the websocket has been closed.\n  * @example <caption>Suspending a session</caption>\n  * session.suspend().then(() => {\n  *   console.log('Session was suspended');\n  * });\n  */\n  suspend(code = 4000, reason = '') {\n    return this.suspendResume.suspend(code, reason)\n      .then(() => this.emit('suspended', { initiator: 'manual', code, reason }));\n  }\n\n  /**\n  * Resumes a previously suspended enigma.js session by recreating the websocket and,\n  * if possible, reopen the document as well as refreshing the internal cashes. If successful,\n  * changed events will be triggered on all generated APIs, and on the ones it was unable to\n  * restore, the closed event will be triggered.\n  * @emits Session#resumed\n  * @param {Boolean} onlyIfAttached If true, resume only if the session was reattached properly.\n  * @returns {Promise<Object>} Eventually resolved when the websocket (and potentially the\n  * previously opened document, and generated APIs) has been restored; it is rejected when it fails\n  * any of those steps, or when onlyIfAttached is true and a new session was created.\n  * @example <caption>Resuming a session</caption>\n  * session.resume(true).then(() => {\n  *   console.log('Session was resumed by re-attaching');\n  * });\n  */\n  resume(onlyIfAttached) {\n    /**\n     * Handles resumed state. This event is triggered when the session was properly resumed. It is\n     * useful in scenarios where, for example, you can close blocking modal dialogs and allow the\n     * user to interact with your application again.\n     * @event Session#resumed\n     * @type {Object}\n     * @example <caption>Handling session resumed</caption>\n     * session.on('resumed', () => {\n     *   console.log('Session was resumed, we can close that \"reconnecting\" dialog now');\n     * });\n     */\n    return this.suspendResume.resume(onlyIfAttached).then((value) => {\n      this.emit('resumed');\n      return value;\n    });\n  }\n\n  /**\n  * Closes the websocket and cleans up internal caches. Also triggers the closed event\n  * on all generated APIs. Note that you have to manually invoke this when you want to\n  * close a session and config.suspendOnClose is true.\n  * @emits Session#closed\n  * @param {Number} [code=1000] - The reason code for closing the connection.\n  * @param {String} [reason=\"\"] - The human readable string describing why the connection is closed.\n  * @returns {Promise<Object>} Eventually resolved when the websocket has been closed.\n  * @example <caption>Closing a session</caption>\n  * session.close().then(() => {\n  *   console.log('Session was closed');\n  * });\n  */\n  close(code = 1000, reason = '') {\n    /**\n     * Handles closed state. This event is triggered when the underlying websocket is closed and\n     * config.suspendOnClose is false.\n     * @event Session#closed\n     * @type {Object}\n     * @example <caption>Handling session closed</caption>\n     * session.on('closed', () => {\n     *   console.log('Session was closed, clean up!');\n     * });\n     */\n    this.globalPromise = undefined;\n    return this.rpc.close(code, reason).then((evt) => this.emit('closed', evt));\n  }\n\n  /**\n  * Given a handle, this function will emit the 'changed' event on the\n  * corresponding API instance.\n  * @private\n  * @param {Number} handle The handle of the API instance.\n  * @emits API#changed\n  */\n  emitHandleChanged(handle) {\n    const api = this.apis.getApi(handle);\n    if (api) {\n      api.emit('changed');\n    }\n  }\n\n  /**\n  * Given a handle, this function will emit the 'closed' event on the\n  * corresponding API instance.\n  * @private\n  * @param {Number} handle The handle of the API instance.\n  * @emits API#closed\n  */\n  emitHandleClosed(handle) {\n    const api = this.apis.getApi(handle);\n    if (api) {\n      api.emit('closed');\n      api.removeAllListeners();\n    }\n  }\n\n  /**\n  * Function used to add info on the promise chain.\n  * @private\n  * @param {Promise<Object>} promise The promise to add info on.\n  * @param {String} name The property to add info on.\n  * @param {Any} value The info to add.\n  */\n  static addToPromiseChain(promise, name, value) {\n    promise[name] = value;\n    const { then } = promise;\n    promise.then = function patchedThen(...params) {\n      const chain = then.apply(this, params);\n      Session.addToPromiseChain(chain, name, value);\n      return chain;\n    };\n  }\n}\n\nexport default Session;\n","import createEnigmaError from './error';\nimport errorCodes from './error-codes';\n\n/**\n* Key-value cache\n* @private\n*/\nclass KeyValueCache {\n  constructor() {\n    this.entries = {};\n  }\n\n  /**\n  * Adds an entry.\n  * @private\n  * @function KeyValueCache#add\n  * @param {String} key The key representing an entry.\n  * @param {*} entry The entry to be added.\n  */\n  add(key, entry) {\n    key += '';\n    if (typeof this.entries[key] !== 'undefined') {\n      throw createEnigmaError(errorCodes.ENTRY_ALREADY_DEFINED, `Entry already defined with key ${key}`);\n    }\n    this.entries[key] = entry;\n  }\n\n  /**\n  * Sets an entry.\n  * @private\n  * @function KeyValueCache#set\n  * @param {String} key The key representing an entry.\n  * @param {*} entry The entry.\n  */\n  set(key, entry) {\n    key += '';\n    this.entries[key] = entry;\n  }\n\n  /**\n  * Removes an entry.\n  * @private\n  * @function KeyValueCache#remove\n  * @param {String} key The key representing an entry.\n  */\n  remove(key) {\n    delete this.entries[key];\n  }\n\n  /**\n  * Gets an entry.\n  * @private\n  * @function KeyValueCache#get\n  * @param {String} key The key representing an entry.\n  * @returns {*} The entry for the key.\n  */\n  get(key) {\n    return this.entries[key];\n  }\n\n  /**\n  * Gets a list of all entries.\n  * @private\n  * @function KeyValueCache#getAll\n  * @returns {Array} The list of entries including its `key` and `value` properties.\n  */\n  getAll() {\n    return Object.keys(this.entries).map((key) => ({\n      key,\n      value: this.entries[key],\n    }));\n  }\n\n  /**\n  * Gets a key for an entry.\n  * @private\n  * @function KeyValueCache#getKey\n  * @param {*} entry The entry to locate the key for.\n  * @returns {String} The key representing an entry.\n  */\n  getKey(entry) {\n    return Object.keys(this.entries).filter((key) => this.entries[key] === entry)[0];\n  }\n\n  /**\n  * Clears the cache of all entries.\n  * @private\n  * @function KeyValueCache#clear\n  */\n  clear() {\n    this.entries = {};\n  }\n}\n\nexport default KeyValueCache;\n","import KeyValueCache from './key-value-cache';\nimport Events from './event-emitter';\n\nimport createEnigmaError from './error';\nimport errorCodes from './error-codes';\n\nconst { hasOwnProperty } = Object.prototype;\n\n/**\n* Returns the camelCase counterpart of a symbol.\n* @private\n* @param {String} symbol The symbol.\n* @return the camelCase counterpart.\n*/\nfunction toCamelCase(symbol) {\n  return symbol.substring(0, 1).toLowerCase() + symbol.substring(1);\n}\n\n/**\n * A facade function that allows parameters to be passed either by name\n * (through an object), or by position (through an array).\n * @private\n * @param {Function} base The function that is being overriden. Will be\n *                        called with parameters in array-form.\n * @param {Object} defaults Parameter list and it's default values.\n * @param {*} params The parameters.\n */\nfunction namedParamFacade(base, defaults, ...params) {\n  if (params.length === 1 && typeof params[0] === 'object' && !Array.isArray(params[0])) {\n    const valid = Object.keys(params[0]).every((key) => hasOwnProperty.call(defaults, key));\n    if (valid) {\n      params = Object.keys(defaults).map((key) => params[0][key] || defaults[key]);\n    }\n  }\n  return base.apply(this, params);\n}\n\n/**\n* Qix schema definition.\n* @private\n*/\nclass Schema {\n  /**\n  * Create a new schema instance.\n  * @private\n  * @param {Configuration} config The configuration for QIX.\n  */\n  constructor(config) {\n    this.config = config;\n    this.Promise = config.Promise;\n    this.schema = config.schema;\n    this.mixins = new KeyValueCache();\n    this.types = new KeyValueCache();\n  }\n\n  registerMixin({\n    types, type, extend, override, init,\n  }) {\n    if (!Array.isArray(types)) {\n      types = [types];\n    }\n    // to support a single type\n    if (type) {\n      types.push(type);\n    }\n    const cached = { extend, override, init };\n    types.forEach((typeKey) => {\n      const entryList = this.mixins.get(typeKey);\n      if (entryList) {\n        entryList.push(cached);\n      } else {\n        this.mixins.add(typeKey, [cached]);\n      }\n    });\n  }\n\n  /**\n  * Function used to generate a type definition.\n  * @private\n  * @param {String} type The type.\n  * @returns {{create: Function, def: Object}} Returns an object with a definition\n  *          of the type and a create factory.\n  */\n  generate(type) {\n    const entry = this.types.get(type);\n    if (entry) {\n      return entry;\n    }\n    if (!this.schema.structs[type]) {\n      throw createEnigmaError(errorCodes.SCHEMA_STRUCT_TYPE_NOT_FOUND, `${type} not found`);\n    }\n    const factory = this.generateApi(type, this.schema.structs[type]);\n    this.types.add(type, factory);\n    return factory;\n  }\n\n  /**\n  * Function used to generate an API definition for a given type.\n  * @private\n  * @param {String} type The type to generate.\n  * @param {Object} schema The schema describing the type.\n  * @returns {{create: (function(session:Object, handle:Number, id:String,\n  *          customKey:String)), def: Object}} Returns the API definition.\n  */\n  generateApi(type, schema) {\n    const api = Object.create({});\n\n    this.generateDefaultApi(api, schema); // Generate default\n    this.mixinType(type, api); // Mixin default type\n    this.mixinNamedParamFacade(api, schema); // Mixin named parameter support\n\n    return function create(session, handle, id, customKey) {\n      const instance = Object.create(api);\n\n      Events.mixin(instance); // Always mixin event-emitter per instance\n\n      Object.defineProperties(instance, {\n        session: {\n          enumerable: true,\n          value: session,\n        },\n        handle: {\n          enumerable: true,\n          value: handle,\n          writable: true,\n        },\n        id: {\n          enumerable: true,\n          value: id,\n        },\n        type: {\n          enumerable: true,\n          value: type,\n        },\n        genericType: {\n          enumerable: true,\n          value: customKey,\n        },\n      });\n\n      let mixinList = this.mixins.get(type) || [];\n      if (customKey !== type) {\n        this.mixinType(customKey, instance); // Mixin custom types\n        mixinList = mixinList.concat(this.mixins.get(customKey) || []);\n      }\n      mixinList.forEach((mixin) => {\n        if (typeof mixin.init === 'function') {\n          mixin.init({ config: this.config, api: instance });\n        }\n      });\n\n      return instance;\n    }.bind(this);\n  }\n\n  /**\n  * Function used to generate the methods with the right handlers to the object\n  * API that is being generated.\n  * @private\n  * @param {Object} api The object API that is currently being generated.\n  * @param {Object} schema The API definition.\n  */\n  generateDefaultApi(api, schema) {\n    Object.keys(schema).forEach((method) => {\n      const out = schema[method].Out;\n      const outKey = out.length === 1 ? out[0].Name : -1;\n      const fnName = toCamelCase(method);\n\n      api[fnName] = function generatedMethod(...params) {\n        return this.session.send({\n          handle: this.handle,\n          method,\n          params,\n          outKey,\n        });\n      };\n    });\n  }\n\n  /**\n  * Function used to add mixin methods to a specified API.\n  * @private\n  * @param {String} type Used to specify which mixin should be woven in.\n  * @param {Object} api The object that will be woven.\n  */\n  mixinType(type, api) {\n    const mixinList = this.mixins.get(type);\n    if (mixinList) {\n      mixinList.forEach(({ extend = {}, override = {} }) => {\n        Object.keys(override).forEach((key) => {\n          if (typeof api[key] === 'function' && typeof override[key] === 'function') {\n            const baseFn = api[key];\n            api[key] = function wrappedFn(...args) {\n              return override[key].apply(this, [baseFn.bind(this), ...args]);\n            };\n          } else {\n            throw createEnigmaError(errorCodes.SCHEMA_MIXIN_CANT_OVERRIDE_FUNCTION, `No function to override. Type: ${type} function: ${key}`);\n          }\n        });\n        Object.keys(extend).forEach((key) => {\n          // handle overrides\n          if (typeof api[key] === 'function' && typeof extend[key] === 'function') {\n            throw createEnigmaError(errorCodes.SCHEMA_MIXIN_EXTEND_NOT_ALLOWED, `Extend is not allowed for this mixin. Type: ${type} function: ${key}`);\n          } else {\n            api[key] = extend[key];\n          }\n        });\n      });\n    }\n  }\n\n  /**\n  * Function used to mixin the named parameter facade.\n  * @private\n  * @param {Object} api The object API that is currently being generated.\n  * @param {Object} schema The API definition.\n  */\n  mixinNamedParamFacade(api, schema) {\n    Object.keys(schema).forEach((key) => {\n      const fnName = toCamelCase(key);\n      const base = api[fnName];\n      const defaults = schema[key].In.reduce((result, item) => {\n        result[item.Name] = item.DefaultValue;\n        return result;\n      }, {});\n\n      api[fnName] = function namedParamWrapper(...params) {\n        return namedParamFacade.apply(this, [base, defaults, ...params]);\n      };\n    });\n  }\n}\n\nexport default Schema;\n","import Events from './event-emitter';\n\n/**\n * Helper class for handling RPC calls\n * @private\n */\nclass RPCResolver {\n  constructor(id, handle, resolve, reject) {\n    Events.mixin(this);\n    this.id = id;\n    this.handle = handle;\n    this.resolve = resolve;\n    this.reject = reject;\n  }\n\n  resolveWith(data) {\n    this.resolve(data);\n    this.emit('resolved', this.id);\n  }\n\n  rejectWith(err) {\n    this.reject(err);\n    this.emit('rejected', this.id);\n  }\n}\n\nexport default RPCResolver;\n","import Events from './event-emitter';\nimport RPCResolver from './rpc-resolver';\n\nimport createEnigmaError from './error';\nimport errorCodes from './error-codes';\n\n/**\n* This class handles remote procedure calls on a web socket.\n* @private\n*/\nclass RPC {\n  /**\n  * Create a new RPC instance.\n  * @private\n  * @param {Object} options The configuration options for this class.\n  * @param {Function} options.Promise The promise constructor to use.\n  * @param {String} options.url The complete websocket URL used to connect.\n  * @param {Function} options.createSocket The function callback to create a WebSocket.\n  */\n  constructor(options) {\n    Object.assign(this, options);\n    Events.mixin(this);\n    this.resolvers = {};\n    this.requestId = 0;\n    this.openedPromise = undefined;\n    this.closeEvent = undefined;\n  }\n\n  /**\n  * Opens a connection to the configured endpoint.\n  * @private\n  * @param {Boolean} force - ignores all previous and outstanding open calls if set to true.\n  * @returns {Object} A promise instance.\n  */\n  open(force = false) {\n    if (!force && this.openedPromise) {\n      return this.openedPromise;\n    }\n\n    try {\n      this.socket = this.createSocket(this.url);\n    } catch (err) {\n      return this.Promise.reject(err);\n    }\n\n    this.socket.onopen = this.onOpen.bind(this);\n    this.socket.onclose = this.onClose.bind(this);\n    this.socket.onerror = this.onError.bind(this);\n    this.socket.onmessage = this.onMessage.bind(this);\n    this.openedPromise = new this.Promise((resolve, reject) => this.registerResolver('opened', null, resolve, reject));\n    this.closedPromise = new this.Promise((resolve, reject) => this.registerResolver('closed', null, resolve, reject));\n    return this.openedPromise;\n  }\n\n  /**\n  * Resolves the open promise when a connection is successfully established.\n  * @private\n  */\n  onOpen() {\n    this.resolvers.opened.resolveWith(() => this.closedPromise);\n  }\n\n  /**\n  * Resolves the close promise when a connection is closed.\n  * @private\n  * @param {Object} event - The event describing close.\n  */\n  onClose(event) {\n    this.emit('closed', event);\n    this.closeEvent = event;\n    if (this.resolvers && this.resolvers.closed) {\n      this.resolvers.closed.resolveWith(event);\n    }\n    this.rejectAllOutstandingResolvers(createEnigmaError(errorCodes.NOT_CONNECTED, 'Socket closed', event));\n  }\n\n  /**\n  * Closes a connection.\n  * @private\n  * @param {Number} [code=1000] - The reason code for closing the connection.\n  * @param {String} [reason=\"\"] - The human readable string describing why the connection is closed.\n  * @returns {Object} Returns a promise instance.\n  */\n  close(code = 1000, reason = '') {\n    if (this.socket) {\n      this.socket.close(code, reason);\n      this.socket = null;\n    }\n    return this.closedPromise;\n  }\n\n  /**\n  * Emits an error event and rejects the open promise if an error is raised on the connection.\n  * @private\n  * @param {Object} event - The event describing the error.\n  */\n  onError(event) {\n    if (this.resolvers.opened) {\n      this.resolvers.opened.rejectWith(event);\n    } else {\n      // only emit errors after the initial open promise has been resolved,\n      // this makes it possible to catch early websocket errors as well\n      // as run-time ones:\n      this.emit('socket-error', event);\n    }\n    this.rejectAllOutstandingResolvers(createEnigmaError(errorCodes.NOT_CONNECTED, 'Socket error', event));\n  }\n\n  /**\n  * Parses the onMessage event on the connection and resolve the promise for the request.\n  * @private\n  * @param {Object} event - The event describing the message.\n  */\n  onMessage(event) {\n    const data = JSON.parse(event.data);\n    const resolver = this.resolvers[data.id] || {};\n    this.emit('traffic', 'received', data, resolver.handle);\n    if (typeof data.id !== 'undefined') {\n      this.emit('message', data);\n      this.resolvers[data.id].resolveWith(data);\n    } else {\n      this.emit(data.params ? 'notification' : 'message', data);\n    }\n  }\n\n  /**\n  * Rejects all outstanding resolvers.\n  * @private\n  * @param {Object} reason - The reject reason.\n  */\n  rejectAllOutstandingResolvers(reason) {\n    Object.keys(this.resolvers).forEach((id) => {\n      if (id === 'opened' || id === 'closed') {\n        return; // \"opened\" and \"closed\" should not be handled here\n      }\n      const resolver = this.resolvers[id];\n      resolver.rejectWith(reason);\n    });\n  }\n\n  /**\n  * Unregisters a resolver.\n  * @private\n  * @param {Number|String} id - The ID to unregister the resolver with.\n  */\n  unregisterResolver(id) {\n    const resolver = this.resolvers[id];\n    resolver.removeAllListeners();\n    delete this.resolvers[id];\n  }\n\n  /**\n  * Registers a resolver.\n  * @private\n  * @param {Number|String} id - The ID to register the resolver with.\n  * @param {Number} handle - The associated handle.\n  * @returns {Function} The promise executor function.\n  */\n  registerResolver(id, handle, resolve, reject) {\n    const resolver = new RPCResolver(id, handle, resolve, reject);\n    this.resolvers[id] = resolver;\n    resolver.on('resolved', (resolvedId) => this.unregisterResolver(resolvedId));\n    resolver.on('rejected', (rejectedId) => this.unregisterResolver(rejectedId));\n  }\n\n  /**\n  * Sends data on the socket.\n  * @private\n  * @param {Object} data - The data to send.\n  * @returns {Object} A promise instance.\n  */\n  send(data) {\n    if (!this.socket || this.socket.readyState !== this.socket.OPEN) {\n      const error = createEnigmaError(errorCodes.NOT_CONNECTED, 'Not connected', this.closeEvent);\n      return this.Promise.reject(error);\n    }\n    if (!data.id) {\n      data.id = this.createRequestId();\n    }\n    data.jsonrpc = '2.0';\n    return new this.Promise((resolve, reject) => {\n      this.socket.send(JSON.stringify(data));\n      this.emit('traffic', 'sent', data, data.handle);\n      return this.registerResolver(data.id, data.handle, resolve, reject);\n    });\n  }\n\n  createRequestId() {\n    this.requestId += 1;\n    return this.requestId;\n  }\n}\n\nexport default RPC;\n","import createEnigmaError from './error';\nimport errorCodes from './error-codes';\n\nconst ON_ATTACHED_TIMEOUT_MS = 5000;\nconst RPC_CLOSE_MANUAL_SUSPEND = 4000;\n\nclass SuspendResume {\n  /**\n  * Creates a new SuspendResume instance.\n  * @private\n  * @param {Object} options The configuration option for this class.\n  * @param {Promise<Object>} options.Promise The promise constructor to use.\n  * @param {RPC} options.rpc The RPC instance to use when communicating towards Engine.\n  * @param {ApiCache} options.apis The ApiCache instance to use.\n  */\n  constructor(options) {\n    Object.assign(this, options);\n    this.isSuspended = false;\n    this.rpc.on('traffic', (dir, data) => {\n      if (dir === 'sent' && data.method === 'OpenDoc') {\n        this.openDocParams = data.params;\n      }\n    });\n  }\n\n  /**\n  * Function used to restore the rpc connection.\n  * @private\n  * @param {Boolean} onlyIfAttached - if true, the returned promise will resolve\n  *                                   only if the session can be re-attached.\n  * @returns {Object} Returns a promise instance.\n  */\n  restoreRpcConnection(onlyIfAttached) {\n    return this.reopen(ON_ATTACHED_TIMEOUT_MS).then((sessionState) => {\n      if (sessionState === 'SESSION_CREATED' && onlyIfAttached) {\n        return this.Promise.reject(createEnigmaError(errorCodes.SESSION_NOT_ATTACHED, 'Not attached'));\n      }\n      return this.Promise.resolve();\n    });\n  }\n\n  /**\n  * Function used to restore the global API.\n  * @private\n  * @param {Object} changed - A list where the restored APIs will be added.\n  * @returns {Object} Returns a promise instance.\n  */\n  restoreGlobal(changed) {\n    const global = this.apis.getApisByType('Global').pop();\n    changed.push(global.api);\n    return this.Promise.resolve();\n  }\n\n  /**\n  * Function used to restore the doc API.\n  * @private\n  * @param {String} sessionState - The state of the session, attached or created.\n  * @param {Array} closed - A list where the closed of APIs APIs will be added.\n  * @param {Object} changed - A list where the restored APIs will be added.\n  * @returns {Object} Returns a promise instance.\n  */\n  restoreDoc(closed, changed) {\n    const doc = this.apis.getApisByType('Doc').pop();\n\n    if (!doc) {\n      return this.Promise.resolve();\n    }\n\n    return this.rpc.send({\n      method: 'GetActiveDoc',\n      handle: -1,\n      params: [],\n    }).then((response) => {\n      if (response.error && this.openDocParams) {\n        return this.rpc.send({\n          method: 'OpenDoc',\n          handle: -1,\n          params: this.openDocParams,\n        });\n      }\n      return response;\n    }).then((response) => {\n      if (response.error) {\n        closed.push(doc.api);\n        return this.Promise.resolve();\n      }\n      const handle = response.result.qReturn.qHandle;\n      doc.api.handle = handle;\n      changed.push(doc.api);\n      return this.Promise.resolve(doc.api);\n    });\n  }\n\n  /**\n  * Function used to restore the APIs on the doc.\n  * @private\n  * @param {Object} doc - The doc API on which the APIs we want to restore exist.\n  * @param {Array} closed - A list where the closed of APIs APIs will be added.\n  * @param {Object} changed - A list where the restored APIs will be added.\n  * @returns {Object} Returns a promise instance.\n  */\n  restoreDocObjects(doc, closed, changed) {\n    const tasks = [];\n    const apis = this.apis.getApis()\n      .map((entry) => entry.api)\n      .filter((api) => api.type !== 'Global' && api.type !== 'Doc');\n\n    if (!doc) {\n      apis.forEach((api) => closed.push(api));\n      return this.Promise.resolve();\n    }\n\n    apis.forEach((api) => {\n      const method = SuspendResume.buildGetMethodName(api.type);\n\n      if (!method) {\n        closed.push(api);\n      } else {\n        const request = this.rpc.send({\n          method,\n          handle: doc.handle,\n          params: [api.id],\n        }).then((response) => {\n          if (response.error || !response.result.qReturn.qHandle) {\n            closed.push(api);\n          } else {\n            api.handle = response.result.qReturn.qHandle;\n            changed.push(api);\n          }\n        });\n        tasks.push(request);\n      }\n    });\n    return this.Promise.all(tasks);\n  }\n\n  /**\n  * Set the instance as suspended.\n  * @private\n  * @param {Number} [code=4000] - The reason code for suspending the connection.\n  * @param {String} [reason=\"\"] - The human readable string describing\n  * why the connection is suspended.\n  */\n  suspend(code = RPC_CLOSE_MANUAL_SUSPEND, reason = '') {\n    this.isSuspended = true;\n    return this.rpc.close(code, reason);\n  }\n\n  /**\n  * Resumes a previously suspended RPC connection, and refreshes the API cache.\n  *                                APIs unabled to be restored has their 'closed'\n  *                                event triggered, otherwise 'changed'.\n  * @private\n  * @emits API#changed\n  * @emits APIfunction@#closed\n  * @param {Boolean} onlyIfAttached if true, resume only if the session was re-attached.\n  * @returns {Promise<Object>} Eventually resolved if the RPC connection was successfully resumed,\n  *                    otherwise rejected.\n  */\n  resume(onlyIfAttached) {\n    const changed = [];\n    const closed = [];\n\n    return this.restoreRpcConnection(onlyIfAttached)\n      .then(() => this.restoreGlobal(changed))\n      .then(() => this.restoreDoc(closed, changed))\n      .then((doc) => this.restoreDocObjects(doc, closed, changed))\n      .then(() => {\n        this.isSuspended = false;\n        this.apis.clear();\n        closed.forEach((api) => {\n          api.emit('closed');\n          api.removeAllListeners();\n        });\n        changed.forEach((api) => {\n          this.apis.add(api.handle, api);\n          if (api.type !== 'Global') {\n            api.emit('changed');\n          }\n        });\n      })\n      .catch((err) => this.rpc.close().then(() => this.Promise.reject(err)));\n  }\n\n  /**\n  * Reopens the connection and waits for the OnConnected notification.\n  * @private\n  * @param {Number} timeout - The time to wait for the OnConnected notification.\n  * @returns {Object} A promise containing the session state (SESSION_CREATED or SESSION_ATTACHED).\n  */\n  reopen(timeout) {\n    let timer;\n    let notificationResolve;\n    let notificationReceived = false;\n    const notificationPromise = new this.Promise((resolve) => { notificationResolve = resolve; });\n\n    const waitForNotification = () => {\n      if (!notificationReceived) {\n        timer = setTimeout(() => notificationResolve('SESSION_CREATED'), timeout);\n      }\n      return notificationPromise;\n    };\n\n    const onNotification = (data) => {\n      if (data.method !== 'OnConnected') return;\n      clearTimeout(timer);\n      notificationResolve(data.params.qSessionState);\n      notificationReceived = true;\n    };\n\n    this.rpc.on('notification', onNotification);\n\n    return this.rpc.open(true)\n      .then(waitForNotification)\n      .then((state) => {\n        this.rpc.removeListener('notification', onNotification);\n        return state;\n      })\n      .catch((err) => {\n        this.rpc.removeListener('notification', onNotification);\n        return this.Promise.reject(err);\n      });\n  }\n\n  /**\n  * Function used to build the get method names for Doc APIs.\n  * @private\n  * @param {String} type - The API type.\n  * @returns {String} Returns the get method name, or undefined if the type cannot be restored.\n  */\n  static buildGetMethodName(type) {\n    if (type === 'Field' || type === 'Variable') {\n      return null;\n    }\n    if (type === 'GenericVariable') {\n      return 'GetVariableById';\n    }\n    return type.replace('Generic', 'Get');\n  }\n}\n\nexport default SuspendResume;\n","const SUCCESS_KEY = 'qSuccess';\n\nexport default function deltaRequestInterceptor(session, request) {\n  const delta = session.config.protocol.delta\n    && request.outKey !== -1\n    && request.outKey !== SUCCESS_KEY;\n  if (delta) {\n    request.delta = delta;\n  }\n  return request;\n}\n","import createEnigmaError from '../error';\nimport errorCodes from '../error-codes';\n\n/**\n* Response interceptor for generating APIs. Handles the quirks of engine not\n* returning an error when an object is missing.\n* @private\n* @param {Session} session - The session the intercept is being executed on.\n* @param {Object} request - The JSON-RPC request.\n* @param {Object} response - The response.\n* @returns {Object} - Returns the generated API\n*/\nexport default function apiResponseInterceptor(session, request, response) {\n  if (response && response.qHandle && response.qType) {\n    return session.getObjectApi({\n      handle: response.qHandle,\n      type: response.qType,\n      id: response.qGenericId,\n      genericType: response.qGenericType,\n    });\n  }\n  if (response && response.qHandle === null && response.qType === null) {\n    const error = createEnigmaError(errorCodes.OBJECT_NOT_FOUND, 'Object not found');\n    return session.config.Promise.reject(error);\n  }\n  return response;\n}\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","import originalExtend from 'extend';\n\nimport createEnigmaError from './error';\nimport errorCodes from './error-codes';\n\nconst extend = originalExtend.bind(null, true);\nconst JSONPatch = {};\nconst { isArray } = Array;\nfunction isObject(v) { return v != null && !Array.isArray(v) && typeof v === 'object'; }\nfunction isUndef(v) { return typeof v === 'undefined'; }\nfunction isFunction(v) { return typeof v === 'function'; }\n\n/**\n* Generate an exact duplicate (with no references) of a specific value.\n*\n* @private\n* @param {Object} The value to duplicate\n* @returns {Object} a unique, duplicated value\n*/\nfunction generateValue(val) {\n  if (val) {\n    return extend({}, { val }).val;\n  }\n  return val;\n}\n\n/**\n* An additional type checker used to determine if the property is of internal\n* use or not a type that can be translated into JSON (like functions).\n*\n* @private\n* @param {Object} obj The object which has the property to check\n* @param {String} The property name to check\n* @returns {Boolean} Whether the property is deemed special or not\n*/\nfunction isSpecialProperty(obj, key) {\n  return isFunction(obj[key])\n    || key.substring(0, 2) === '$$'\n    || key.substring(0, 1) === '_';\n}\n\n/**\n* Finds the parent object from a JSON-Pointer (\"/foo/bar/baz\" = \"bar\" is \"baz\" parent),\n* also creates the object structure needed.\n*\n* @private\n* @param {Object} data The root object to traverse through\n* @param {String} The JSON-Pointer string to use when traversing\n* @returns {Object} The parent object\n*/\nfunction getParent(data, str) {\n  const seperator = '/';\n  const parts = str.substring(1).split(seperator).slice(0, -1);\n  let numPart;\n\n  parts.forEach((part, i) => {\n    if (i === parts.length) {\n      return;\n    }\n    numPart = +part;\n    const newPart = !isNaN(numPart) ? [] : {};\n    data[numPart || part] = isUndef(data[numPart || part])\n      ? newPart\n      : data[part];\n    data = data[numPart || part];\n  });\n\n  return data;\n}\n\n/**\n* Cleans an object of all its properties, unless they're deemed special or\n* cannot be removed by configuration.\n*\n* @private\n* @param {Object} obj The object to clean\n*/\nfunction emptyObject(obj) {\n  Object.keys(obj).forEach((key) => {\n    const config = Object.getOwnPropertyDescriptor(obj, key);\n\n    if (config.configurable && !isSpecialProperty(obj, key)) {\n      delete obj[key];\n    }\n  });\n}\n\n/**\n* Compare an object with another, could be object, array, number, string, bool.\n* @private\n* @param {Object} a The first object to compare\n* @param {Object} a The second object to compare\n* @returns {Boolean} Whether the objects are identical\n*/\nfunction compare(a, b) {\n  let isIdentical = true;\n\n  if (isObject(a) && isObject(b)) {\n    if (Object.keys(a).length !== Object.keys(b).length) {\n      return false;\n    }\n    Object.keys(a).forEach((key) => {\n      if (!compare(a[key], b[key])) {\n        isIdentical = false;\n      }\n    });\n    return isIdentical;\n  }\n  if (isArray(a) && isArray(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (let i = 0, l = a.length; i < l; i += 1) {\n      if (!compare(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return a === b;\n}\n\n/**\n* Generates patches by comparing two arrays.\n*\n* @private\n* @param {Array} oldA The old (original) array, which will be patched\n* @param {Array} newA The new array, which will be used to compare against\n* @returns {Array} An array of patches (if any)\n*/\nfunction patchArray(original, newA, basePath) {\n  let patches = [];\n  const oldA = original.slice();\n  let tmpIdx = -1;\n\n  function findIndex(a, id, idx) {\n    if (a[idx] && isUndef(a[idx].qInfo)) {\n      return null;\n    }\n    if (a[idx] && a[idx].qInfo.qId === id) {\n      // shortcut if identical\n      return idx;\n    }\n    for (let ii = 0, ll = a.length; ii < ll; ii += 1) {\n      if (a[ii] && a[ii].qInfo.qId === id) {\n        return ii;\n      }\n    }\n    return -1;\n  }\n\n  if (compare(newA, oldA)) {\n    // array is unchanged\n    return patches;\n  }\n\n  if (!isUndef(newA[0]) && isUndef(newA[0].qInfo)) {\n    // we cannot create patches without unique identifiers, replace array...\n    patches.push({\n      op: 'replace',\n      path: basePath,\n      value: newA,\n    });\n    return patches;\n  }\n\n  for (let i = oldA.length - 1; i >= 0; i -= 1) {\n    tmpIdx = findIndex(newA, oldA[i].qInfo && oldA[i].qInfo.qId, i);\n    if (tmpIdx === -1) {\n      patches.push({\n        op: 'remove',\n        path: `${basePath}/${i}`,\n      });\n      oldA.splice(i, 1);\n    } else {\n      patches = patches.concat(JSONPatch.generate(oldA[i], newA[tmpIdx], `${basePath}/${i}`));\n    }\n  }\n\n  for (let i = 0, l = newA.length; i < l; i += 1) {\n    tmpIdx = findIndex(oldA, newA[i].qInfo && newA[i].qInfo.qId);\n    if (tmpIdx === -1) {\n      patches.push({\n        op: 'add',\n        path: `${basePath}/${i}`,\n        value: newA[i],\n      });\n      oldA.splice(i, 0, newA[i]);\n    } else if (tmpIdx !== i) {\n      patches.push({\n        op: 'move',\n        path: `${basePath}/${i}`,\n        from: `${basePath}/${tmpIdx}`,\n      });\n      oldA.splice(i, 0, oldA.splice(tmpIdx, 1)[0]);\n    }\n  }\n  return patches;\n}\n\n/**\n* Generate an array of JSON-Patch:es following the JSON-Patch Specification Draft.\n*\n* See [specification draft](http://tools.ietf.org/html/draft-ietf-appsawg-json-patch-10)\n*\n* Does NOT currently generate patches for arrays (will replace them)\n* @private\n* @param {Object} original The object to patch to\n* @param {Object} newData The object to patch from\n* @param {String} [basePath] The base path to use when generating the paths for\n*                            the patches (normally not used)\n* @returns {Array} An array of patches\n*/\nJSONPatch.generate = function generate(original, newData, basePath) {\n  basePath = basePath || '';\n  let patches = [];\n\n  Object.keys(newData).forEach((key) => {\n    const val = generateValue(newData[key]);\n    const oldVal = original[key];\n    const tmpPath = `${basePath}/${key}`;\n\n    if (compare(val, oldVal) || isSpecialProperty(newData, key)) {\n      return;\n    }\n    if (isUndef(oldVal)) {\n      // property does not previously exist\n      patches.push({\n        op: 'add',\n        path: tmpPath,\n        value: val,\n      });\n    } else if (isObject(val) && isObject(oldVal)) {\n      // we need to generate sub-patches for this, since it already exist\n      patches = patches.concat(JSONPatch.generate(oldVal, val, tmpPath));\n    } else if (isArray(val) && isArray(oldVal)) {\n      patches = patches.concat(patchArray(oldVal, val, tmpPath));\n    } else {\n      // it's a simple property (bool, string, number)\n      patches.push({\n        op: 'replace',\n        path: `${basePath}/${key}`,\n        value: val,\n      });\n    }\n  });\n\n  Object.keys(original).forEach((key) => {\n    if (isUndef(newData[key]) && !isSpecialProperty(original, key)) {\n      // this property does not exist anymore\n      patches.push({\n        op: 'remove',\n        path: `${basePath}/${key}`,\n      });\n    }\n  });\n\n  return patches;\n};\n\n/**\n* Apply a list of patches to an object.\n* @private\n* @param {Object} original The object to patch\n* @param {Array} patches The list of patches to apply\n*/\nJSONPatch.apply = function apply(original, patches) {\n  patches.forEach((patch) => {\n    let parent = getParent(original, patch.path);\n    let key = patch.path.split('/').splice(-1)[0];\n    let target = key && isNaN(+key) ? parent[key] : parent[+key] || parent;\n    const from = patch.from ? patch.from.split('/').splice(-1)[0] : null;\n\n    if (patch.path === '/') {\n      parent = null;\n      target = original;\n    }\n\n    if (patch.op === 'add' || patch.op === 'replace') {\n      if (isArray(parent)) {\n        // trust indexes from patches, so don't replace the index if it's an add\n        if (key === '-') {\n          key = parent.length;\n        }\n        parent.splice(+key, patch.op === 'add' ? 0 : 1, patch.value);\n      } else if (isArray(target) && isArray(patch.value)) {\n        // keep array reference if possible...\n        target.length = 0;\n\n        const chunkSize = 1000;\n        for (let i = 0; i < patch.value.length; i += chunkSize) {\n          const chunk = patch.value.slice(i, i + chunkSize);\n          target.push(...chunk);\n        }\n      } else if (isObject(target) && isObject(patch.value)) {\n        // keep object reference if possible...\n        emptyObject(target);\n        extend(target, patch.value);\n      } else if (!parent) {\n        throw createEnigmaError(errorCodes.PATCH_HAS_NO_PARENT, 'Patchee is not an object we can patch');\n      } else {\n        // simple value\n        parent[key] = patch.value;\n      }\n    } else if (patch.op === 'move') {\n      const oldParent = getParent(original, patch.from);\n      if (isArray(parent)) {\n        parent.splice(+key, 0, oldParent.splice(+from, 1)[0]);\n      } else {\n        parent[key] = oldParent[from];\n        delete oldParent[from];\n      }\n    } else if (patch.op === 'remove') {\n      if (isArray(parent)) {\n        parent.splice(+key, 1);\n      } else {\n        delete parent[key];\n      }\n    }\n  });\n};\n\n/**\n* Deep clone an object.\n* @private\n* @param {Object} obj The object to clone\n* @returns {Object} A new object identical to the `obj`\n*/\nJSONPatch.clone = function clone(obj) {\n  return extend({}, obj);\n};\n\n/**\n* Creates a JSON-patch.\n* @private\n* @param {String} op The operation of the patch. Available values: \"add\", \"remove\", \"move\"\n* @param {Object} [val] The value to set the `path` to. If `op` is `move`, `val`\n*                       is the \"from JSON-path\" path\n* @param {String} path The JSON-path for the property to change (e.g. \"/qHyperCubeDef/columnOrder\")\n* @returns {Object} A patch following the JSON-patch specification\n*/\nJSONPatch.createPatch = function createPatch(op, val, path) {\n  const patch = {\n    op: op.toLowerCase(),\n    path,\n  };\n  if (patch.op === 'move') {\n    patch.from = val;\n  } else if (typeof val !== 'undefined') {\n    patch.value = val;\n  }\n  return patch;\n};\n\n/**\n* Apply the differences of two objects (keeping references if possible).\n* Identical to running `JSONPatch.apply(original, JSONPatch.generate(original, newData));`\n* @private\n* @param {Object} original The object to update/patch\n* @param {Object} newData the object to diff against\n*\n* @example\n* var obj1 = { foo: [1,2,3], bar: { baz: true, qux: 1 } };\n* var obj2 = { foo: [4,5,6], bar: { baz: false } };\n* JSONPatch.updateObject(obj1, obj2);\n* // => { foo: [4,5,6], bar: { baz: false } };\n*/\nJSONPatch.updateObject = function updateObject(original, newData) {\n  if (!Object.keys(original).length) {\n    extend(original, newData);\n    return;\n  }\n  JSONPatch.apply(original, JSONPatch.generate(original, newData));\n};\n\nexport default JSONPatch;\n","import JSONPatch from '../json-patch';\nimport KeyValueCache from '../key-value-cache';\n\nimport createEnigmaError from '../error';\nimport errorCodes from '../error-codes';\n\nconst sessions = {};\n\n/**\n* Function to make sure we release handle caches when they are closed.\n* @private\n* @param {Session} session The session instance to listen on.\n*/\nconst bindSession = (session) => {\n  if (!sessions[session.id]) {\n    const cache = {};\n    sessions[session.id] = cache;\n    session.on('traffic:received', (data) => data.close && data.close.forEach((handle) => delete cache[handle]));\n    session.on('closed', () => delete sessions[session.id]);\n  }\n};\n\n/**\n* Simple function that ensures the session events has been bound, and returns\n* either an existing key-value cache or creates one for the specified handle.\n* @private\n* @param {Session} session The session that owns the handle.\n* @param {Number} handle The object handle to retrieve the cache for.\n* @returns {KeyValueCache} The cache instance.\n*/\nconst getHandleCache = (session, handle) => {\n  bindSession(session);\n  const cache = sessions[session.id];\n  if (!cache[handle]) {\n    cache[handle] = new KeyValueCache();\n  }\n  return cache[handle];\n};\n\n/**\n* Function used to apply a list of patches and return the patched value.\n* @private\n* @param {Session} session The session.\n* @param {Number} handle The object handle.\n* @param {String} cacheId The cacheId.\n* @param {Array} patches The patches.\n* @returns {Object} Returns the patched value.\n*/\nconst patchValue = (session, handle, cacheId, patches) => {\n  const cache = getHandleCache(session, handle);\n  let entry = cache.get(cacheId);\n  if (typeof entry === 'undefined') {\n    entry = Array.isArray(patches[0].value) ? [] : {};\n  }\n  if (patches.length) {\n    if (patches[0].path === '/' && typeof patches[0].value !== 'object') {\n      // 'plain' values on root path is not supported (no object reference),\n      // so we simply store the value directly:\n      entry = patches[0].value;\n    } else {\n      JSONPatch.apply(entry, patches);\n    }\n    cache.set(cacheId, entry);\n  }\n  return entry;\n};\n\n/**\n* Process delta interceptor.\n* @private\n* @param {Session} session The session the intercept is being executed on.\n* @param {Object} request The JSON-RPC request.\n* @param {Object} response The response.\n* @returns {Object} Returns the patched response\n*/\nexport default function deltaResponseInterceptor(session, request, response) {\n  const { delta, result } = response;\n  if (delta) {\n    // when delta is on the response data is expected to be an array of patches:\n    Object.keys(result).forEach((key) => {\n      if (!Array.isArray(result[key])) {\n        throw createEnigmaError(errorCodes.EXPECTED_ARRAY_OF_PATCHES, 'Unexpected RPC response, expected array of patches');\n      }\n      result[key] = patchValue(session, request.handle, `${request.method}-${key}`, result[key]);\n    });\n    // return a cloned response object to avoid patched object references:\n    return JSON.parse(JSON.stringify(response));\n  }\n  return response;\n}\n\n// export object reference for testing purposes:\ndeltaResponseInterceptor.sessions = sessions;\n","const RETURN_KEY = 'qReturn';\n\n/**\n* Picks out the result \"out\" parameter based on the QIX method+schema, with\n* some specific handling for some methods that breaks the predictable protocol.\n* @private\n* @param {Session} session - The session the intercept is being executed on.\n* @param {Object} request - The JSON-RPC request.\n* @param {Object} response - The response.\n* @returns {Object} - Returns the result property on the response\n*/\nexport default function outParamResponseInterceptor(session, request, response) {\n  if (request.method === 'CreateSessionApp' || request.method === 'CreateSessionAppFromApp') {\n    // this method returns multiple out params that we need\n    // to normalize before processing the response further:\n    response[RETURN_KEY].qGenericId = response.qSessionAppId || response[RETURN_KEY].qGenericId;\n  } else if (request.method === 'GetInteract' || request.method === 'StoreTempSelectionState' || request.method === 'CreateTemporaryBookmark') {\n    // this method returns a qReturn value when it should only return\n    // meta.outKey: GetInteract\n    // qId: StoreTempSelectionState\n    delete response[RETURN_KEY];\n  }\n\n  if (hasOwnProperty.call(response, RETURN_KEY)) {\n    return response[RETURN_KEY];\n  }\n  if (request.outKey !== -1) {\n    return response[request.outKey];\n  }\n\n  return response;\n}\n","import deltaRequest from './interceptors/delta-request-interceptor';\nimport apiResponse from './interceptors/api-response-interceptor';\nimport deltaResponse from './interceptors/delta-response-interceptor';\nimport errorResponse from './interceptors/error-response-interceptor';\nimport outParamResponse from './interceptors/out-param-response-interceptor';\nimport resultResponse from './interceptors/result-response-interceptor';\n\n/**\n * Interceptor is a concept similar to mixins, but runs on a lower level. The interceptor concept\n * can augment either the requests (i.e. before sent to QIX Engine), or the responses (i.e. after\n * QIX Engine has sent a response). The interceptor promises run in parallel to the regular\n * promises used in enigma.js, which means that it can be really useful when you want to normalize\n * behaviors in your application.\n * @interface Interceptor\n */\n\n/**\n * @class InterceptorRequest\n * @implements {Interceptor}\n * @example <caption>Implement a request interceptor</caption>\n * const enigma = require('enigma.js');\n * const WebSocket = require('ws');\n * const schema = require('enigma.js/schemas/12.20.0.json');\n *\n * const session = enigma.create({\n *   schema,\n *   url: 'ws://localhost:9076/app/engineData',\n *   createSocket: (url) => new WebSocket(url),\n *   requestInterceptors: [{\n *     onFulfilled: function logRequest(sessionReference, request) {\n *       console.log('Request being sent', request);\n *       return request;\n *     }\n *   },\n * });\n */\n\n/**\n * @class InterceptorResponse\n * @implements {Interceptor}\n * @example <caption>Implement a request interceptor</caption>\n * const enigma = require('enigma.js');\n * const WebSocket = require('ws');\n * const schema = require('enigma.js/schemas/12.20.0.json');\n *\n * const session = enigma.create({\n *   schema,\n *   url: 'ws://localhost:9076/app/engineData',\n *   createSocket: (url) => new WebSocket(url),\n *   responseInterceptors: [{\n *     onRejected: function logError(sessionReference, request, error) {\n *       console.log('Error returned from QIX engine', error, 'Originating request:', request);\n *       // throw error so it's continued to be rejected:\n *       throw error;\n *     }\n *   },\n * });\n */\n\n/**\n * This method is invoked when a request is about to be sent to QIX Engine.\n * @function InterceptorRequest#onFulfilled\n * @param {Session} session The session executing the interceptor.\n * @param {Object} request The JSON-RPC request that will be sent.\n */\n\n/**\n * This method is invoked when a previous interceptor has rejected the\n * promise; use this to handle, for example, errors before they are sent into mixins.\n * @function InterceptorResponse#onRejected\n * @param {Session} session The session executing the interceptor. You may use .retry() to retry\n * sending it to QIX Engine.\n * @param {Object} request The JSON-RPC request resulting in this error.\n * @param {Object} error Whatever the previous interceptor is rejected with.\n */\n\n/**\n * This method is invoked when a promise has been successfully resolved;\n * use this to modify the result or reject the promise chain before it is sent\n * to mixins.\n * @function InterceptorResponse#onFulfilled\n * @param {Session} session The session executing the interceptor.\n * @param {Object} request The JSON-RPC request resulting in this response.\n * @param {Object} result Whatever the previous interceptor is resolved with.\n */\nclass Intercept {\n  /**\n  * Create a new Intercept instance.\n  * @private\n  * @param {Object} options The configuration options for this class.\n  * @param {Promise<Object>} options.Promise The promise constructor to use.\n  * @param {ApiCache} options.apis The ApiCache instance to use.\n  * @param {Array<Object>} [options.request] The additional request interceptors to use.\n  * @param {Array<Object>} [options.response] The additional response interceptors to use.\n  */\n  constructor(options) {\n    Object.assign(this, options);\n    this.request = [{ onFulfilled: deltaRequest }, ...this.request || []];\n    this.response = [\n      { onFulfilled: errorResponse },\n      { onFulfilled: deltaResponse },\n      { onFulfilled: resultResponse },\n      { onFulfilled: outParamResponse },\n      ...this.response || [],\n      { onFulfilled: apiResponse },\n    ];\n  }\n\n  /**\n  * Execute the request interceptor queue, each interceptor will get the result from\n  * the previous interceptor.\n  * @private\n  * @param {Session} session The session instance to execute against.\n  * @param {Promise<Object>} promise The promise to chain on to.\n  * @returns {Promise<Object>}\n  */\n  executeRequests(session, promise) {\n    return this.request.reduce((interception, interceptor) => {\n      const intercept = interceptor.onFulfilled\n        && interceptor.onFulfilled.bind(this, session);\n      return interception.then(intercept);\n    }, promise);\n  }\n\n  /**\n  * Execute the response interceptor queue, each interceptor will get the result from\n  * the previous interceptor.\n  * @private\n  * @param {Session} session The session instance to execute against.\n  * @param {Promise<Object>} promise The promise to chain on to.\n  * @param {Object} request The JSONRPC request object for the intercepted response.\n  * @returns {Promise<Object>}\n  */\n  executeResponses(session, promise, request) {\n    return this.response.reduce((interception, interceptor) => interception.then(\n      interceptor.onFulfilled && interceptor.onFulfilled.bind(this, session, request),\n      interceptor.onRejected && interceptor.onRejected.bind(this, session, request),\n    ), promise);\n  }\n}\n\nexport default Intercept;\n","/**\n* Process error interceptor.\n* @private\n* @param {Session} session - The session the intercept is being executed on.\n* @param {Object} request - The JSON-RPC request.\n* @param {Object} response - The response.\n* @returns {Object} - Returns the defined error for an error, else the response.\n*/\nexport default function errorResponseInterceptor(session, request, response) {\n  if (typeof response.error !== 'undefined') {\n    const data = response.error;\n    const error = new Error(data.message);\n    error.code = data.code;\n    error.parameter = data.parameter;\n    return session.config.Promise.reject(error);\n  }\n  return response;\n}\n","/**\n* Process result interceptor.\n* @private\n* @param {Session} session - The session the intercept is being executed on.\n* @param {Object} request - The JSON-RPC request.\n* @param {Object} response - The response.\n* @returns {Object} - Returns the result property on the response\n*/\nexport default function resultResponseInterceptor(session, request, response) {\n  return response.result;\n}\n","import KeyValueCache from './key-value-cache';\n\n/**\n* API cache for instances of QIX types, e.g. GenericObject.\n* @private\n* @extends KeyValueCache\n*/\nclass ApiCache extends KeyValueCache {\n  /**\n  * Adds an API.\n  * @private\n  * @function ApiCache#add\n  * @param {Number} handle - The handle for the API.\n  * @param {*} api - The API.\n  * @returns {{api: *}} The entry.\n  */\n  add(handle, api) {\n    const entry = { api };\n    super.add(handle.toString(), entry);\n    api.on('closed', () => this.remove(handle));\n    return entry;\n  }\n\n  /**\n  * Gets an API.\n  * @private\n  * @function ApiCache#getApi\n  * @param {Number} handle - The handle for the API.\n  * @returns {*} The API for the handle.\n  */\n  getApi(handle) {\n    const entry = typeof handle !== 'undefined' ? this.get(handle.toString()) : undefined;\n    return entry && entry.api;\n  }\n\n  /**\n  * Gets a list of APIs.\n  * @private\n  * @function ApiCache#getApis\n  * @returns {Array} The list of entries including `handle` and `api` properties for each entry.\n  */\n  getApis() {\n    return super.getAll().map((entry) => ({\n      handle: entry.key,\n      api: entry.value.api,\n    }));\n  }\n\n  /**\n  * Gets a list of APIs with a given type.\n  * @private\n  * @function ApiCache#getApisByType\n  * @param {String} type - The type of APIs to get.\n  * @returns {Array} The list of entries including `handle` and `api` properties for each entry.\n  */\n  getApisByType(type) {\n    return this.getApis().filter((entry) => entry.api.type === type);\n  }\n}\n\nexport default ApiCache;\n","import Session from './session';\nimport Schema from './schema';\nimport RPC from './rpc';\nimport SuspendResume from './suspend-resume';\nimport Intercept from './intercept';\nimport ApiCache from './api-cache';\n\nimport createEnigmaError from './error';\nimport errorCodes from './error-codes';\n\n/**\n * The enigma.js configuration object.\n * @interface Configuration\n * @property {Object} schema Object containing the specification for the API to generate.\n * Corresponds to a specific version of the QIX Engine API.\n * @property {String} url String containing a proper websocket URL to QIX Engine.\n * @property {Function} [createSocket] A function to use when instantiating the WebSocket,\n * mandatory for Node.js.\n * @property {Object} [Promise] ES6-compatible Promise library.\n * @property {Boolean} [suspendOnClose=false] Set to true if the session should be suspended\n * instead of closed when the websocket is closed.\n * @property {Array<Mixin>} [mixins=[]] Mixins to extend/augment the QIX Engine API. Mixins\n * are applied in the array order.\n * @property {Array} [requestInterceptors=[]] Interceptors for augmenting requests before they\n * are sent to QIX Engine. Interceptors are applied in the array order.\n * @property {Array} [responseInterceptors=[]] Interceptors for augmenting responses before they\n * are passed into mixins and end-users. Interceptors are applied in the array order.\n * @property {Object} [protocol={}] An object containing additional JSON-RPC request parameters.\n * @property {Boolean} [protocol.delta=true] Set to false to disable the use of the\n * bandwidth-reducing delta protocol.\n * @example <caption>Example defining a configuration object</caption>\n * const enigma = require('enigma.js');\n * const WebSocket = require('ws');\n * const bluebird = require('bluebird');\n * const schema = require('enigma.js/schemas/12.20.0.json');\n *\n * const config = {\n *  schema,\n *  url: 'ws://localhost:4848/app/engineData',\n *  createSocket: url => new WebSocket(url),\n *  Promise: bluebird,\n *  suspendOnClose: true,\n *  mixins: [{ types: ['Global'], init: () => console.log('Mixin ran') }],\n *  protocol: { delta: false },\n * };\n *\n * enigma.create(config).open().then((global) => {\n *   // global === QIX global interface\n *   process.exit(0);\n * });\n */\n\n/**\n * The mixin concept allows you to add or override QIX Engine API functionality. A mixin is\n * basically a JavaScript object describing which types it modifies, and a list of functions\n * for extending and overriding the API for those types.\n *\n * QIX Engine types like, for example, GenericObject, Doc, GenericBookmark, are supported but\n * also custom GenericObject types such as barchart, story and myCustomType. An API will get\n * both their generic type as well as custom type mixins applied.\n *\n * Mixins that are bound to several different types can find the current API type in the\n * `genericType` or `type` members. `this.type` would, for instance, return `GenericObject` and\n * `this.genericType` would return `barchart`.\n *\n * See the Mixins examples on how to use it. Below is an outline of what the mixin API consists of.\n *\n * @interface Mixin\n * @property {String|Array<String>} types String or array of strings containing the API-types that\n * will be mixed in.\n * @property {Object} [extend] Object literal containing the methods that will be extended on the\n * specified API.\n * @property {Object} [override] Object literal containing the methods to override existing methods.\n * @property {Function} [init] Init function that, if defined, will run when an API is instantiated.\n * It runs with Promise and API object as parameters.\n */\n\n/**\n * The API for generated APIs depends on the QIX Engine schema you pass into your Configuration, and\n * on what QIX struct the API has.\n *\n * All API calls made using the generated APIs will return promises that are either resolved or\n * rejected depending on how the QIX Engine responds.\n *\n * @interface API\n * @property {String} id Contains the unique identifier for this API.\n * @property {String} type Contains the schema class name for this API.\n * @property {String} genericType Corresponds to the qInfo.qType property on the generic object's\n * properties object.\n * @property {Session} session Contains a reference to the session that this API belongs to.\n * @property {Number} handle Contains the handle QIX Engine assigned to the API. Used interally in\n * enigma.js for caches and JSON-RPC requests.\n * @example <caption>Example using `global` and `generic object` struct APIs</caption>\n * global.openDoc('my-document.qvf').then((doc) => {\n *   doc.createObject({ qInfo: { qType: 'my-object' } }).then(api => { });\n *   doc.getObject('object-id').then(api => { });\n *   doc.getBookmark('bookmark-id').then(api => { });\n * });\n */\n\n/**\n * Handles changes on the API. The changed event is triggered whenever enigma.js or QIX Engine has\n * identified potential changes on the underlying properties or hypercubes and you should re-fetch\n * your data.\n * @event API#changed\n * @type {Object}\n * @example <caption>Bind the `changed` event</caption>\n * api.on('changed', () => {\n *   api.getLayout().then(layout => { });\n * });\n */\n\n/**\n * Handles closed API. The closed event is triggered whenever QIX Engine considers an API closed.\n * It usually means that it no longer exists in the QIX Engine document or session.\n * @event API#closed\n * @type {Object}\n * @example <caption>Bind the `closed` event</caption>\n * api.on('closed', () => {\n *   console.log(api.id, 'was closed');\n * });\n */\n\n/**\n * Handles JSON-RPC requests/responses for this API. Generally used in debugging purposes.\n * `traffic:*` will handle all websocket messages, `traffic:sent` will handle outgoing messages\n * and `traffic:received` will handle incoming messages.\n * @event API#traffic\n * @type {Object}\n * @example <caption>Bind the traffic events</caption>\n * // bind both in- and outbound traffic to console.log:\n * api.on('traffic:*', console.log);\n * // bind outbound traffic to console.log:\n * api.on('traffic:sent', console.log);\n * // bind inbound traffic to console.log:\n * api.on('traffic:received', console.log);\n */\n\nclass Enigma {\n  /**\n   * Function used to get a session.\n   * @private\n   * @param {Configuration} config The configuration object for this session.\n   * @returns {Session} Returns a session instance.\n   */\n  static getSession(config) {\n    const {\n      createSocket,\n      Promise,\n      requestInterceptors,\n      responseInterceptors,\n      url,\n    } = config;\n    const apis = new ApiCache();\n    const intercept = new Intercept({\n      apis,\n      Promise,\n      request: requestInterceptors,\n      response: responseInterceptors,\n    });\n    const rpc = new RPC({ createSocket, Promise, url });\n    const suspendResume = new SuspendResume({ apis, Promise, rpc });\n    const session = new Session({\n      apis,\n      config,\n      intercept,\n      rpc,\n      suspendResume,\n    });\n    return session;\n  }\n\n  /**\n  * Function used to configure defaults.\n  * @private\n  * @param {Configuration} config The configuration object for how to connect\n  *                               and retrieve end QIX APIs.\n  */\n  static configureDefaults(config) {\n    if (!config) {\n      throw createEnigmaError(errorCodes.NO_CONFIG_SUPPLIED, 'You need to supply a configuration.');\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (!config.Promise && typeof Promise === 'undefined') {\n      throw createEnigmaError(errorCodes.PROMISE_REQUIRED, 'Your environment has no Promise implementation. You must provide a Promise implementation in the config.');\n    }\n\n    if (typeof config.createSocket !== 'function' && typeof WebSocket === 'function') {\n      // eslint-disable-next-line no-undef\n      config.createSocket = (url) => new WebSocket(url);\n    }\n\n    if (typeof config.suspendOnClose === 'undefined') {\n      config.suspendOnClose = false;\n    }\n\n    config.protocol = config.protocol || {};\n    config.protocol.delta = typeof config.protocol.delta !== 'undefined' ? config.protocol.delta : true;\n    // eslint-disable-next-line no-restricted-globals\n    config.Promise = config.Promise || Promise;\n    config.mixins = config.mixins || [];\n    config.definition = config.definition || new Schema(config);\n  }\n\n  /**\n  * Function used to create a QIX session.\n  * @entry\n  * @param {Configuration} config The configuration object for the QIX session.\n  * @returns {Session} Returns a new QIX session.\n  * @example <caption>Example minimal session creation</caption>\n  * const enigma = require('enigma.js');\n  * const schema = require('enigma.js/schemas/12.20.0.json');\n  * const WebSocket = require('ws');\n  * const config = {\n  *   schema,\n  *   url: 'ws://localhost:9076/app/engineData',\n  *   createSocket: url => new WebSocket(url),\n  * };\n  * const session = enigma.create(config);\n  */\n  static create(config) {\n    Enigma.configureDefaults(config);\n    config.mixins.forEach((mixin) => {\n      config.definition.registerMixin(mixin);\n    });\n    return Enigma.getSession(config);\n  }\n}\n\nexport default Enigma;\n"],"names":["util","EventEmitter","init","call","this","isObject","arg","isNumber","isUndefined","isFunction","nodeEventEmitter","prototype","_events","undefined","_maxListeners","defaultMaxListeners","setMaxListeners","n","isNaN","TypeError","emit","type","er","handler","len","args","i","listeners","error","arguments","Error","length","Array","apply","slice","on","addListener","listener","m","newListener","push","warned","console","trace","once","fired","g","removeListener","list","position","splice","removeAllListeners","key","isArray","listenerCount","emitter","Events","obj","Object","keys","forEach","EnigmaError","name","code","original","_this","_classCallCheck","_super","enigmaError","createEnigmaError","errorCodes","NOT_CONNECTED","OBJECT_NOT_FOUND","EXPECTED_ARRAY_OF_PATCHES","PATCH_HAS_NO_PARENT","ENTRY_ALREADY_DEFINED","NO_CONFIG_SUPPLIED","PROMISE_REQUIRED","SCHEMA_STRUCT_TYPE_NOT_FOUND","SCHEMA_MIXIN_CANT_OVERRIDE_FUNCTION","SCHEMA_MIXIN_EXTEND_NOT_ALLOWED","SESSION_SUSPENDED","SESSION_NOT_ATTACHED","cacheId","Session","options","session","assign","Promise","config","definition","id","rpc","onRpcError","bind","onRpcClosed","onRpcMessage","onRpcNotification","onRpcTraffic","onSessionClosed","value","promise","then","_len","params","_key","chain","addToPromiseChain","err","suspendResume","isSuspended","evt","suspendOnClose","reason","suspend","initiator","response","_this2","change","handle","emitHandleChanged","close","emitHandleClosed","method","dir","data","concat","api","apis","getApi","getApis","entry","clear","genericType","generate","factory","add","_this3","globalPromise","open","getObjectApi","global","request","_this4","reject","closeEvent","createRequestId","intercept","executeRequests","resolve","augmentedRequest","_objectSpread","protocol","outKey","send","retry","executeResponses","_this5","onlyIfAttached","_this6","resume","_this7","KeyValueCache","entries","map","filter","hasOwnProperty","toCamelCase","symbol","substring","toLowerCase","Schema","schema","mixins","types","_ref","extend","override","cached","typeKey","entryList","get","structs","generateApi","create","generateDefaultApi","mixinType","mixinNamedParamFacade","customKey","instance","defineProperties","enumerable","writable","mixinList","mixin","out","Out","Name","fnName","_len2","_key2","_ref2","_ref2$extend","_ref2$override","baseFn","_len3","_key3","base","defaults","In","reduce","result","item","DefaultValue","_len4","_key4","_typeof","every","RPCResolver","RPC","resolvers","requestId","openedPromise","socket","createSocket","url","onopen","onOpen","onclose","onClose","onerror","onError","onmessage","onMessage","registerResolver","closedPromise","opened","resolveWith","event","closed","rejectAllOutstandingResolvers","rejectWith","JSON","parse","resolver","resolvedId","unregisterResolver","rejectedId","readyState","OPEN","jsonrpc","stringify","SuspendResume","openDocParams","replace","reopen","sessionState","changed","getApisByType","pop","doc","qReturn","qHandle","tasks","buildGetMethodName","all","restoreRpcConnection","restoreGlobal","restoreDoc","restoreDocObjects","timeout","timer","notificationResolve","notificationReceived","notificationPromise","onNotification","clearTimeout","qSessionState","setTimeout","state","SUCCESS_KEY","apiResponseInterceptor","qType","qGenericId","qGenericType","hasOwn","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","arr","isPlainObject","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","configurable","newValue","getProperty","src","copy","copyIsArray","clone","deep","JSONPatch","v","isUndef","isSpecialProperty","getParent","str","numPart","parts","split","part","newPart","compare","a","b","isIdentical","l","newData","basePath","patches","val","oldVal","tmpPath","op","path","newA","oldA","tmpIdx","findIndex","idx","qInfo","qId","ii","ll","from","patchArray","patch","parent","_target","chunk","_toConsumableArray","oldParent","createPatch","updateObject","sessions","getHandleCache","cache","bindSession","patchValue","set","deltaResponseInterceptor","delta","RETURN_KEY","Intercept","onFulfilled","message","parameter","deltaResponse","qSessionAppId","apiResponse","interception","interceptor","onRejected","ApiCache","_get","_getPrototypeOf","remove","requestInterceptors","responseInterceptors","WebSocket","Enigma","configureDefaults","registerMixin","getSession"],"mappings":"sOAIA,IAAIA,EAAO,GAuBX,SAASC,IACPA,EAAaC,KAAKC,KAAKC,MAtBzBJ,EAAKK,SAAW,SAAkBC,GAChC,MAAsB,iBAARA,GAA4B,OAARA,GAGpCN,EAAKO,SAAW,SAAkBD,GAChC,MAAsB,iBAARA,GAGhBN,EAAKQ,YAAc,SAAqBF,GACtC,YAAe,IAARA,GAGTN,EAAKS,WAAa,SAAoBH,GACpC,MAAsB,mBAARA,GAWhB,IAAcI,EAAGT,GAGjBA,EAAaA,aAAeA,GAEfU,UAAUC,aAAUC,EACjCZ,EAAaU,UAAUG,mBAAgBD,EAIvCZ,EAAac,oBAAsB,GAEnCd,EAAaC,KAAO,WAClBE,KAAKQ,QAAUR,KAAKQ,SAAW,GAC/BR,KAAKU,cAAgBV,KAAKU,oBAAiBD,GAK7CZ,EAAaU,UAAUK,gBAAkB,SAASC,GAChD,IAAKjB,EAAKO,SAASU,IAAMA,EAAI,GAAKC,MAAMD,GACtC,MAAME,UAAU,+BAElB,OADAf,KAAKU,cAAgBG,EACdb,MAGTH,EAAaU,UAAUS,KAAO,SAASC,GACrC,IAAIC,EAAIC,EAASC,EAAKC,EAAMC,EAAGC,EAM/B,GAJKvB,KAAKQ,UACRR,KAAKQ,QAAU,IAGJ,UAATS,IAAqBjB,KAAKQ,QAAQgB,MAEpC,MADAN,EAAKO,UAAU,cACGC,MACVR,EAEAQ,MAAM,wCAOhB,GAFAP,EAAUnB,KAAKQ,QAAQS,GAEnBrB,EAAKQ,YAAYe,GACnB,OAAO,EAET,GAAIvB,EAAKS,WAAWc,GAClB,OAAQM,UAAUE,QAEhB,KAAK,EACHR,EAAQpB,KAAKC,MACb,MACF,KAAK,EACHmB,EAAQpB,KAAKC,KAAMyB,UAAU,IAC7B,MACF,KAAK,EACHN,EAAQpB,KAAKC,KAAMyB,UAAU,GAAIA,UAAU,IAC3C,MAEF,QAGE,IAFAL,EAAMK,UAAUE,OAChBN,EAAO,IAAIO,MAAMR,EAAM,GAClBE,EAAI,EAAGA,EAAIF,EAAKE,IACnBD,EAAKC,EAAI,GAAKG,UAAUH,GAC1BH,EAAQU,MAAM7B,KAAMqB,QAEnB,GAAIzB,EAAKK,SAASkB,GAAU,CAGjC,IAFAC,EAAMK,UAAUE,OAChBN,EAAO,IAAIO,MAAMR,EAAM,GAClBE,EAAI,EAAGA,EAAIF,EAAKE,IACnBD,EAAKC,EAAI,GAAKG,UAAUH,GAI1B,IADAF,GADAG,EAAYJ,EAAQW,SACJH,OACXL,EAAI,EAAGA,EAAIF,EAAKE,IACnBC,EAAUD,GAAGO,MAAM7B,KAAMqB,GAG7B,OAAO,GAuDTxB,EAAaU,UAAUwB,GApDvBlC,EAAaU,UAAUyB,YAAc,SAASf,EAAMgB,GAClD,IA2BMC,EAzBN,IAAKtC,EAAKS,WAAW4B,GACnB,MAAMlB,UAAU,gCAEbf,KAAKQ,UACRR,KAAKQ,QAAU,IAIbR,KAAKQ,QAAQ2B,aACfnC,KAAKgB,KAAK,cAAeC,EACfrB,EAAKS,WAAW4B,EAASA,UACzBA,EAASA,SAAWA,GAE3BjC,KAAKQ,QAAQS,GAGTrB,EAAKK,SAASD,KAAKQ,QAAQS,IAElCjB,KAAKQ,QAAQS,GAAMmB,KAAKH,GAGxBjC,KAAKQ,QAAQS,GAAQ,CAACjB,KAAKQ,QAAQS,GAAOgB,GAN1CjC,KAAKQ,QAAQS,GAAQgB,EASnBrC,EAAKK,SAASD,KAAKQ,QAAQS,MAAWjB,KAAKQ,QAAQS,GAAMoB,WAKzDH,EAHGtC,EAAKQ,YAAYJ,KAAKU,eAGrBb,EAAac,oBAFbX,KAAKU,gBAKE,EAAJwB,GAASlC,KAAKQ,QAAQS,GAAMU,OAASO,IAC5ClC,KAAKQ,QAAQS,GAAMoB,QAAS,EAExBzC,EAAKS,WAAWiC,QAAQd,QAC1Bc,QAAQd,MAAM,mIAGAxB,KAAKQ,QAAQS,GAAMU,QAE/B/B,EAAKS,WAAWiC,QAAQC,QAC1BD,QAAQC,UAId,OAAOvC,MAKTH,EAAaU,UAAUiC,KAAO,SAASvB,EAAMgB,GAC3C,IAAKrC,EAAKS,WAAW4B,GACnB,MAAMlB,UAAU,+BAElB,IAAI0B,GAAQ,EAEZ,SAASC,IACP1C,KAAK2C,eAAe1B,EAAMyB,GAErBD,IACHA,GAAQ,EACRR,EAASJ,MAAM7B,KAAMyB,YAOzB,OAHAiB,EAAET,SAAWA,EACbjC,KAAK+B,GAAGd,EAAMyB,GAEP1C,MAITH,EAAaU,UAAUoC,eAAiB,SAAS1B,EAAMgB,GACrD,IAAIW,EAAMC,EAAUlB,EAAQL,EAE5B,IAAK1B,EAAKS,WAAW4B,GACnB,MAAMlB,UAAU,+BAElB,IAAKf,KAAKQ,UAAYR,KAAKQ,QAAQS,GACjC,OAAOjB,KAMT,GAHA2B,GADAiB,EAAO5C,KAAKQ,QAAQS,IACNU,OACdkB,GAAY,EAERD,IAASX,GACRrC,EAAKS,WAAWuC,EAAKX,WAAaW,EAAKX,WAAaA,SAChDjC,KAAKQ,QAAQS,GAChBjB,KAAKQ,QAAQmC,gBACf3C,KAAKgB,KAAK,iBAAkBC,EAAMgB,QAE/B,GAAIrC,EAAKK,SAAS2C,GAAO,CAC9B,IAAKtB,EAAIK,EAAc,EAANL,KACf,GAAIsB,EAAKtB,KAAOW,GACXW,EAAKtB,GAAGW,UAAYW,EAAKtB,GAAGW,WAAaA,EAAW,CACvDY,EAAWvB,EACX,MAIJ,GAAIuB,EAAW,EACb,OAAO7C,KAEW,IAAhB4C,EAAKjB,QACPiB,EAAKjB,OAAS,SACP3B,KAAKQ,QAAQS,IAEpB2B,EAAKE,OAAOD,EAAU,GAGpB7C,KAAKQ,QAAQmC,gBACf3C,KAAKgB,KAAK,iBAAkBC,EAAMgB,GAGtC,OAAOjC,MAGTH,EAAaU,UAAUwC,mBAAqB,SAAS9B,GACnD,IAAI+B,EAAKzB,EAET,IAAKvB,KAAKQ,QACR,OAAOR,KAGT,IAAKA,KAAKQ,QAAQmC,eAKhB,OAJyB,IAArBlB,UAAUE,OACZ3B,KAAKQ,QAAU,GACRR,KAAKQ,QAAQS,WACbjB,KAAKQ,QAAQS,GACfjB,KAIT,GAAyB,IAArByB,UAAUE,OAAc,CAC1B,IAAKqB,KAAOhD,KAAKQ,QACH,mBAARwC,GACJhD,KAAK+C,mBAAmBC,GAI1B,OAFAhD,KAAK+C,mBAAmB,kBACxB/C,KAAKQ,QAAU,GACRR,KAKT,GAFAuB,EAAYvB,KAAKQ,QAAQS,GAErBrB,EAAKS,WAAWkB,GAClBvB,KAAK2C,eAAe1B,EAAMM,QACrB,GAAIK,MAAMqB,QAAQ1B,GAEvB,KAAOA,EAAUI,QACf3B,KAAK2C,eAAe1B,EAAMM,EAAUA,EAAUI,OAAS,IAI3D,cAFO3B,KAAKQ,QAAQS,GAEbjB,MAGTH,EAAaU,UAAUgB,UAAY,SAASN,GAQ1C,OANKjB,KAAKQ,SAAYR,KAAKQ,QAAQS,GAE1BrB,EAAKS,WAAWL,KAAKQ,QAAQS,IAC9B,CAACjB,KAAKQ,QAAQS,IAEdjB,KAAKQ,QAAQS,GAAMa,QAJnB,IAQVjC,EAAaqD,cAAgB,SAASC,EAASlC,GAQ7C,OANKkC,EAAQ3C,SAAY2C,EAAQ3C,QAAQS,GAEhCrB,EAAKS,WAAW8C,EAAQ3C,QAAQS,IACjC,EAEAkC,EAAQ3C,QAAQS,GAAMU,OAJtB,GC1RK,IAAAyB,EAMN,SAACC,GACNC,OAAOC,KAAK1D,EAAaU,WAAWiD,QAAQ,SAACR,GAC3CK,EAAIL,GAAOnD,EAAaU,UAAUyC,KAEpCnD,EAAaC,KAAKuD,shECThBI,ySAAoB/B,yBACxB,SAAA+B,EAAYC,EAAMC,EAAMC,GAAU,IAAAC,EAAA,mGAAAC,CAAA9D,KAAAyD,IAChCI,EAAAE,EAAAhE,KAAAC,KAAM0D,IACDC,KAAOA,EACZE,EAAKG,aAAc,EACnBH,EAAKD,SAAWA,EAJgBC,mGAgBrB,SAASI,EAAkBN,EAAMD,EAAME,GACpD,OAAO,IAAIH,EAAYC,EAAMC,EAAMC,GCVrC,IAAMM,EAAa,CAKjBC,eAAgB,EAKhBC,kBAAmB,EAKnBC,2BAA4B,EAK5BC,qBAAsB,EAKtBC,uBAAwB,EAKxBC,oBAAqB,EAKrBC,kBAAmB,EAKnBC,8BAA+B,EAK/BC,qCAAsC,EAKtCC,iCAAkC,GAKlCC,mBAAoB,GAKpBC,sBAAuB,21BCtEzB,IAGIC,EAAU,EAKRC,aA6BJ,SAAAA,EAAYC,gGAASnB,CAAA9D,KAAAgF,GACnB,IAAME,EAAUlF,KAChBsD,OAAO6B,OAAOD,EAASD,GACvBjF,KAAKoF,QAAUpF,KAAKqF,OAAOD,QAC3BpF,KAAKsF,WAAatF,KAAKqF,OAAOC,WAC9BzF,EAAmBqF,GACnBH,GAAW,EACXG,EAAQK,GAAKR,EACbG,EAAQM,IAAIzD,GAAG,eAAgBmD,EAAQO,WAAWC,KAAKR,IACvDA,EAAQM,IAAIzD,GAAG,SAAUmD,EAAQS,YAAYD,KAAKR,IAClDA,EAAQM,IAAIzD,GAAG,UAAWmD,EAAQU,aAAaF,KAAKR,IACpDA,EAAQM,IAAIzD,GAAG,eAAgBmD,EAAQW,kBAAkBH,KAAKR,IAC9DA,EAAQM,IAAIzD,GAAG,UAAWmD,EAAQY,aAAaJ,KAAKR,IACpDA,EAAQnD,GAAG,SAAU,WAAA,OAAMmD,EAAQa,qEA+TrCC,MAAA,SAAyBC,EAASvC,EAAMsC,GACtCC,EAAQvC,GAAQsC,EAChB,IAAQE,EAASD,EAATC,KACRD,EAAQC,KAAO,WAAgC,IAAA,IAAAC,EAAA1E,UAAAE,OAARyE,EAAQ,IAAAxE,MAAAuE,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAARD,EAAQC,GAAA5E,UAAA4E,GAC7C,IAAMC,EAAQJ,EAAKrE,MAAM7B,KAAMoG,GAE/B,OADApB,EAAQuB,kBAAkBD,EAAO5C,EAAMsC,GAChCM,4BA5TXN,MAAA,SAAWQ,GACLxG,KAAKyG,cAAcC,aAGvB1G,KAAKgB,KAAK,eAAgBwF,wBAU5BR,MAAA,SAAYW,GAAK,IAAA9C,EAAA7D,KAiBf,IAAIA,KAAKyG,cAAcC,aA1FF,MA6FjBC,EAAIhD,MA5FqB,MA4FQgD,EAAIhD,KAGzC,GAAI3D,KAAKqF,OAAOuB,eAAgB,CAC9B,IAAQjD,EAAiBgD,EAAjBhD,KAAMkD,EAAWF,EAAXE,OACd7G,KAAKyG,cAAcK,UAAUZ,KAAK,WAAA,OAAMrC,EAAK7C,KAAK,YAAa,CAC7D+F,UAAW,UACXpD,KAAAA,EACAkD,OAAAA,WAGF7G,KAAKgB,KAAK,SAAU2F,yBASxBX,MAAA,SAAagB,GAAU,IAAAC,EAAAjH,KACjBA,KAAKyG,cAAcC,cAGnBM,EAASE,QACXF,EAASE,OAAO1D,QAAQ,SAAC2D,GAAD,OAAYF,EAAKG,kBAAkBD,KAEzDH,EAASK,OACXL,EAASK,MAAM7D,QAAQ,SAAC2D,GAAD,OAAYF,EAAKK,iBAAiBH,iCAU7DnB,MAAA,SAAkBgB,GAChBhH,KAAKgB,KAAK,iBAAkBgG,EAASO,OAAQP,EAASZ,QACtDpG,KAAKgB,4BAAqBgG,EAASO,QAAUP,EAASZ,8BAWxDJ,MAAA,SAAawB,EAAKC,EAAMN,GACtBnH,KAAKgB,KAAK,YAAawG,EAAKC,GAC5BzH,KAAKgB,KAAL,WAAA0G,OAAqBF,GAAOC,GAC5B,IAAME,EAAM3H,KAAK4H,KAAKC,OAAOV,GACzBQ,IACFA,EAAI3G,KAAK,YAAawG,EAAKC,GAC3BE,EAAI3G,KAAgBwG,WAAAA,OAAAA,GAAOC,mCAS/B,WACEzH,KAAK4H,KAAKE,UAAUtE,QAAQ,SAACuE,GAC3BA,EAAMJ,IAAI3G,KAAK,UACf+G,EAAMJ,IAAI5E,uBAEZ/C,KAAK4H,KAAKI,8BAcZhC,MAAA,SAAa3E,GACX,IACE8F,EACE9F,EADF8F,OAAQ5B,EACNlE,EADMkE,GAAItE,EACVI,EADUJ,KAAMgH,EAChB5G,EADgB4G,YAEhBN,EAAM3H,KAAK4H,KAAKC,OAAOV,GAC3B,OAAIQ,IAIJA,EADgB3H,KAAKsF,WAAW4C,SAASjH,EACnCkH,CAAQnI,KAAMmH,EAAQ5B,EAAI0C,GAChCjI,KAAK4H,KAAKQ,IAAIjB,EAAQQ,GACfA,uBAYT,WAAO,IAAAU,EAAArI,KAWL,IAAKA,KAAKsI,cAAe,CACvB,IAAMjH,EAAO,CACX8F,QAAS,EACT5B,GAAI,SACJtE,KAAM,SACNgH,YAAa,UAEfjI,KAAKsI,cAAgBtI,KAAKwF,IAAI+C,OAC3BrC,KAAK,WAAA,OAAMmC,EAAKG,aAAanH,KAC7B6E,KAAK,SAACuC,GAEL,OADAJ,EAAKrH,KAAK,UACHyH,IAGb,OAAOzI,KAAKsI,4BAQdtC,MAAA,SAAK0C,GAAS,IAAAC,EAAA3I,KACZ,GAAIA,KAAKyG,cAAcC,YACrB,OAAO1G,KAAKoF,QAAQwD,OAAO3E,EAAkBC,EAAWW,kBAAmB,oBAAqB7E,KAAKwF,IAAIqD,aAE3GH,EAAQnD,GAAKvF,KAAKwF,IAAIsD,kBACtB,IAAM7C,EAAUjG,KAAK+I,UAAUC,gBAAgBhJ,KAAMA,KAAKoF,QAAQ6D,QAAQP,IACvExC,KAAK,SAACgD,GACL,IAAMzB,EAAY0B,EAAAA,EAAA,GAAAR,EAAKtD,OAAO+D,UAAaF,UAIpCzB,EAAK4B,OACZ,IAAMrC,EAAW2B,EAAKnD,IAAI8D,KAAK7B,GAE/B,OADAyB,EAAiBK,MAAQ,WAAA,OAAMZ,EAAKW,KAAKZ,IAClCC,EAAKI,UAAUS,iBAAiBb,EAAM3B,EAAUkC,KAG3D,OADAlE,EAAQuB,kBAAkBN,EAAS,YAAayC,EAAQnD,IACjDU,yBAgBT,WAAkC,IAAAwD,EAAAzJ,KAA1B2D,yDAAO,IAAMkD,yDAAS,GAC5B,OAAO7G,KAAKyG,cAAcK,QAAQnD,EAAMkD,GACrCX,KAAK,WAAA,OAAMuD,EAAKzI,KAAK,YAAa,CAAE+F,UAAW,SAAUpD,KAAAA,EAAMkD,OAAAA,sBAkBpEb,MAAA,SAAO0D,GAAgB,IAAAC,EAAA3J,KAYrB,OAAOA,KAAKyG,cAAcmD,OAAOF,GAAgBxD,KAAK,SAACF,GAErD,OADA2D,EAAK3I,KAAK,WACHgF,yBAiBX,WAAgC,IAAA6D,EAAA7J,KAA1B2D,yDAAO,IAAMkD,yDAAS,GAY1B,OADA7G,KAAKsI,mBAAgB7H,EACdT,KAAKwF,IAAI6B,MAAM1D,EAAMkD,GAAQX,KAAK,SAACS,GAAD,OAASkD,EAAK7I,KAAK,SAAU2F,gCAUxEX,MAAA,SAAkBmB,GAChB,IAAMQ,EAAM3H,KAAK4H,KAAKC,OAAOV,GACzBQ,GACFA,EAAI3G,KAAK,qCAWbgF,MAAA,SAAiBmB,GACf,IAAMQ,EAAM3H,KAAK4H,KAAKC,OAAOV,GACzBQ,IACFA,EAAI3G,KAAK,UACT2G,EAAI5E,wRCpWJ+G,aACJ,SAAcA,iGAAAhG,CAAA9D,KAAA8J,GACZ9J,KAAK+J,QAAU,6CAUjB,SAAI/G,EAAK+E,GAEP,GADA/E,GAAO,QAC0B,IAAtBhD,KAAK+J,QAAQ/G,GACtB,MAAMiB,EAAkBC,EAAWK,sBAAZ,kCAAAmD,OAAqE1E,IAE9FhD,KAAK+J,QAAQ/G,GAAO+E,qBAUtB,SAAI/E,EAAK+E,GACP/E,GAAO,GACPhD,KAAK+J,QAAQ/G,GAAO+E,kBAStB/B,MAAA,SAAOhD,UACEhD,KAAK+J,QAAQ/G,gBAUtBgD,MAAA,SAAIhD,GACF,OAAOhD,KAAK+J,QAAQ/G,yBAStB,WAAS,IAAAa,EAAA7D,KACP,OAAOsD,OAAOC,KAAKvD,KAAK+J,SAASC,IAAI,SAAChH,GAAD,MAAU,CAC7CA,IAAAA,EACAgD,MAAOnC,EAAKkG,QAAQ/G,sBAWxBgD,MAAA,SAAO+B,GAAO,IAAAd,EAAAjH,KACZ,OAAOsD,OAAOC,KAAKvD,KAAK+J,SAASE,OAAO,SAACjH,GAAD,OAASiE,EAAK8C,QAAQ/G,KAAS+E,IAAO,wBAQhF,WACE/H,KAAK+J,QAAU,seCpFnB,IAAQG,EAAmB5G,OAAO/C,UAA1B2J,eAQR,SAASC,EAAYC,GACnB,OAAOA,EAAOC,UAAU,EAAG,GAAGC,cAAgBF,EAAOC,UAAU,OA0B3DE,aAMJ,SAAAA,EAAYlF,gGAAQvB,CAAA9D,KAAAuK,GAClBvK,KAAKqF,OAASA,EACdrF,KAAKoF,QAAUC,EAAOD,QACtBpF,KAAKwK,OAASnF,EAAOmF,OACrBxK,KAAKyK,OAAS,IAAIX,EAClB9J,KAAK0K,MAAQ,IAAIZ,sDAGnB,SAEGa,GAAA,IAAA9G,EAAA7D,KADD0K,IAAAA,MAAOzJ,IAAAA,KAAM2J,IAAAA,OAAQC,IAAAA,SAAU/K,IAAAA,KAE1B8B,MAAMqB,QAAQyH,KACjBA,EAAQ,CAACA,IAGPzJ,GACFyJ,EAAMtI,KAAKnB,GAEb,IAAM6J,EAAS,CAAEF,OAAAA,EAAQC,SAAAA,EAAU/K,KAAAA,GACnC4K,EAAMlH,QAAQ,SAACuH,GACb,IAAMC,EAAYnH,EAAK4G,OAAOQ,IAAIF,GAC9BC,EACFA,EAAU5I,KAAK0I,GAEfjH,EAAK4G,OAAOrC,IAAI2C,EAAS,CAACD,wBAYhC9E,MAAA,SAAS/E,GACP,IAAM8G,EAAQ/H,KAAK0K,MAAMO,IAAIhK,GAC7B,GAAI8G,EACF,OAAOA,EAET,IAAK/H,KAAKwK,OAAOU,QAAQjK,GACvB,MAAMgD,EAAkBC,EAAWQ,6BAAZ,GAAAgD,OAA6CzG,EAApE,eAEF,IAAMkH,EAAUnI,KAAKmL,YAAYlK,EAAMjB,KAAKwK,OAAOU,QAAQjK,IAE3D,OADAjB,KAAK0K,MAAMtC,IAAInH,EAAMkH,GACdA,6BAWT,SAAYlH,EAAMuJ,GAChB,IAAM7C,EAAMrE,OAAO8H,OAAO,IAM1B,OAJApL,KAAKqL,mBAAmB1D,EAAK6C,GAC7BxK,KAAKsL,UAAUrK,EAAM0G,GACrB3H,KAAKuL,sBAAsB5D,EAAK6C,GAEzB,SAAgBtF,EAASiC,EAAQ5B,EAAIiG,GAAW,IAAAvE,EAAAjH,KAC/CyL,EAAWnI,OAAO8H,OAAOzD,GAE/BvE,EAAaqI,GAEbnI,OAAOoI,iBAAiBD,EAAU,CAChCvG,QAAS,CACPyG,YAAY,EACZ3F,MAAOd,GAETiC,OAAQ,CACNwE,YAAY,EACZ3F,MAAOmB,EACPyE,UAAU,GAEZrG,GAAI,CACFoG,YAAY,EACZ3F,MAAOT,GAETtE,KAAM,CACJ0K,YAAY,EACZ3F,MAAO/E,GAETgH,YAAa,CACX0D,YAAY,EACZ3F,MAAOwF,KAIX,IAAIK,EAAY7L,KAAKyK,OAAOQ,IAAIhK,IAAS,GAWzC,OAVIuK,IAAcvK,IAChBjB,KAAKsL,UAAUE,EAAWC,GAC1BI,EAAYA,EAAUnE,OAAO1H,KAAKyK,OAAOQ,IAAIO,IAAc,KAE7DK,EAAUrI,QAAQ,SAACsI,GACS,mBAAfA,EAAMhM,MACfgM,EAAMhM,KAAK,CAAEuF,OAAQ4B,EAAK5B,OAAQsC,IAAK8D,MAIpCA,GACP/F,KAAK1F,wCAUT,SAAmB2H,EAAK6C,GACtBlH,OAAOC,KAAKiH,GAAQhH,QAAQ,SAAC+D,GAC3B,IAAMwE,EAAMvB,EAAOjD,GAAQyE,IACrB3C,EAAwB,IAAf0C,EAAIpK,OAAeoK,EAAI,GAAGE,MAAQ,EAC3CC,EAAS/B,EAAY5C,GAE3BI,EAAIuE,GAAU,WAAoC,IAAA,IAAAC,EAAA1K,UAAAE,OAARyE,EAAQ,IAAAxE,MAAAuK,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAARhG,EAAQgG,GAAA3K,UAAA2K,GAChD,OAAOpM,KAAKkF,QAAQoE,KAAK,CACvBnC,OAAQnH,KAAKmH,OACbI,OAAAA,EACAnB,OAAAA,EACAiD,OAAAA,gCAYR,SAAUpI,EAAM0G,GACd,IAAMkE,EAAY7L,KAAKyK,OAAOQ,IAAIhK,GAC9B4K,GACFA,EAAUrI,QAAQ,SAAoC6I,GAAA,IAAAC,EAAAD,EAAjCzB,OAAAA,aAAS,GAAwB0B,EAAAC,EAAAF,EAApBxB,SAAAA,aAAW,GAAS0B,EACpDjJ,OAAOC,KAAKsH,GAAUrH,QAAQ,SAACR,GAC7B,GAAwB,mBAAb2E,EAAI3E,IAAgD,mBAAlB6H,EAAS7H,GAMpD,MAAMiB,EAAkBC,EAAWS,oCAAuE1D,kCAAAA,OAAAA,EAAkB+B,eAAAA,OAAAA,IAL5H,IAAMwJ,EAAS7E,EAAI3E,GACnB2E,EAAI3E,GAAO,WAA4B,IAAA,IAAAyJ,EAAAhL,UAAAE,OAANN,EAAM,IAAAO,MAAA6K,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAANrL,EAAMqL,GAAAjL,UAAAiL,GACrC,OAAO7B,EAAS7H,GAAKnB,MAAM7B,KAAOwM,CAAAA,EAAO9G,KAAK1F,OAAvC0H,OAAiDrG,OAM9DiC,OAAOC,KAAKqH,GAAQpH,QAAQ,SAACR,GAE3B,GAAwB,mBAAb2E,EAAI3E,IAA8C,mBAAhB4H,EAAO5H,GAClD,MAAMiB,EAAkBC,EAAWU,gCAAgF3D,+CAAAA,OAAAA,EAAkB+B,eAAAA,OAAAA,IAErI2E,EAAI3E,GAAO4H,EAAO5H,4CAa5B,SAAsB2E,EAAK6C,GACzBlH,OAAOC,KAAKiH,GAAQhH,QAAQ,SAACR,GAC3B,IAAMkJ,EAAS/B,EAAYnH,GACrB2J,EAAOhF,EAAIuE,GACXU,EAAWpC,EAAOxH,GAAK6J,GAAGC,OAAO,SAACC,EAAQC,GAE9C,OADAD,EAAOC,EAAKf,MAAQe,EAAKC,aAClBF,GACN,IAEHpF,EAAIuE,GAAU,WAAsC,IAAA,IAAAgB,EAAAzL,UAAAE,OAARyE,EAAQ,IAAAxE,MAAAsL,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAR/G,EAAQ+G,GAAA1L,UAAA0L,GAClD,OAxMR,SAA0BR,EAAMC,GAAqB,IAAA,IAAAzG,EAAA1E,UAAAE,OAARyE,EAAQ,IAAAxE,MAAA,EAAAuE,EAAAA,EAAA,EAAA,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAARD,EAAQC,EAAA,GAAA5E,UAAA4E,GAOnD,OANsB,IAAlBD,EAAOzE,QAAqC,WAArByL,EAAOhH,EAAO,KAAoBxE,MAAMqB,QAAQmD,EAAO,KAClE9C,OAAOC,KAAK6C,EAAO,IAAIiH,MAAM,SAACrK,GAAD,OAASkH,EAAenK,KAAK6M,EAAU5J,OAEhFoD,EAAS9C,OAAOC,KAAKqJ,GAAU5C,IAAI,SAAChH,GAAD,OAASoD,EAAO,GAAGpD,IAAQ4J,EAAS5J,MAGpE2J,EAAK9K,MAAM7B,KAAMoG,IAiMMvE,MAAM7B,KAAO2M,CAAAA,EAAMC,GAAaxG,OAAAA,yQC7N1DkH,aACJ,SAAAA,EAAY/H,EAAI4B,EAAQ8B,EAASL,gGAAQ9E,CAAA9D,KAAAsN,GACvClK,EAAapD,MACbA,KAAKuF,GAAKA,EACVvF,KAAKmH,OAASA,EACdnH,KAAKiJ,QAAUA,EACfjJ,KAAK4I,OAASA,8CAGhB5C,MAAA,SAAYyB,GACVzH,KAAKiJ,QAAQxB,GACbzH,KAAKgB,KAAK,WAAYhB,KAAKuF,wBAG7BS,MAAA,SAAWQ,GACTxG,KAAK4I,OAAOpC,GACZxG,KAAKgB,KAAK,WAAYhB,KAAKuF,sQCZzBgI,aASJ,SAAAA,EAAYtI,gGAASnB,CAAA9D,KAAAuN,GACnBjK,OAAO6B,OAAOnF,KAAMiF,GACpB7B,EAAapD,MACbA,KAAKwN,UAAY,GACjBxN,KAAKyN,UAAY,EACjBzN,KAAK0N,mBAAgBjN,EACrBT,KAAK6I,gBAAapI,6CASpB,WAAoB,IAAAoD,EAAA7D,KAClB,+DAAcA,KAAK0N,cACjB,OAAO1N,KAAK0N,cAGd,IACE1N,KAAK2N,OAAS3N,KAAK4N,aAAa5N,KAAK6N,KACrC,MAAOrH,GACP,OAAOxG,KAAKoF,QAAQwD,OAAOpC,GAS7B,OANAxG,KAAK2N,OAAOG,OAAS9N,KAAK+N,OAAOrI,KAAK1F,MACtCA,KAAK2N,OAAOK,QAAUhO,KAAKiO,QAAQvI,KAAK1F,MACxCA,KAAK2N,OAAOO,QAAUlO,KAAKmO,QAAQzI,KAAK1F,MACxCA,KAAK2N,OAAOS,UAAYpO,KAAKqO,UAAU3I,KAAK1F,MAC5CA,KAAK0N,cAAgB,IAAI1N,KAAKoF,QAAQ,SAAC6D,EAASL,GAAV,OAAqB/E,EAAKyK,iBAAiB,SAAU,KAAMrF,EAASL,KAC1G5I,KAAKuO,cAAgB,IAAIvO,KAAKoF,QAAQ,SAAC6D,EAASL,GAAV,OAAqB/E,EAAKyK,iBAAiB,SAAU,KAAMrF,EAASL,KACnG5I,KAAK0N,oCAOd,WAAS,IAAAzG,EAAAjH,KACPA,KAAKwN,UAAUgB,OAAOC,YAAY,WAAA,OAAMxH,EAAKsH,iCAQ/CvI,MAAA,SAAQ0I,GACN1O,KAAKgB,KAAK,SAAU0N,GACpB1O,KAAK6I,WAAa6F,EACd1O,KAAKwN,WAAaxN,KAAKwN,UAAUmB,QACnC3O,KAAKwN,UAAUmB,OAAOF,YAAYC,GAEpC1O,KAAK4O,8BAA8B3K,EAAkBC,EAAWC,cAAe,gBAAiBuK,yBAUlG,WAAgC,IAA1B/K,yDAAO,IAAMkD,yDAAS,GAK1B,OAJI7G,KAAK2N,SACP3N,KAAK2N,OAAOtG,MAAM1D,EAAMkD,GACxB7G,KAAK2N,OAAS,MAET3N,KAAKuO,+BAQdvI,MAAA,SAAQ0I,GACF1O,KAAKwN,UAAUgB,OACjBxO,KAAKwN,UAAUgB,OAAOK,WAAWH,GAKjC1O,KAAKgB,KAAK,eAAgB0N,GAE5B1O,KAAK4O,8BAA8B3K,EAAkBC,EAAWC,cAAe,eAAgBuK,uBAQjG1I,MAAA,SAAU0I,GACR,IAAMjH,EAAOqH,KAAKC,MAAML,EAAMjH,MACxBuH,EAAWhP,KAAKwN,UAAU/F,EAAKlC,KAAO,GAC5CvF,KAAKgB,KAAK,UAAW,WAAYyG,EAAMuH,EAAS7H,aACzB,IAAZM,EAAKlC,IACdvF,KAAKgB,KAAK,UAAWyG,GACrBzH,KAAKwN,UAAU/F,EAAKlC,IAAIkJ,YAAYhH,IAEpCzH,KAAKgB,KAAKyG,EAAKrB,OAAS,eAAiB,UAAWqB,0CASxDzB,MAAA,SAA8Ba,GAAQ,IAAAwB,EAAArI,KACpCsD,OAAOC,KAAKvD,KAAKwN,WAAWhK,QAAQ,SAAC+B,GACxB,WAAPA,GAA0B,WAAPA,GAGN8C,EAAKmF,UAAUjI,GACvBsJ,WAAWhI,iCASxBb,MAAA,SAAmBT,GACAvF,KAAKwN,UAAUjI,GACvBxC,4BACF/C,KAAKwN,UAAUjI,6BAUxBS,MAAA,SAAiBT,EAAI4B,EAAQ8B,EAASL,GAAQ,IAAAD,EAAA3I,KACtCgP,EAAW,IAAI1B,EAAY/H,EAAI4B,EAAQ8B,EAASL,IACtD5I,KAAKwN,UAAUjI,GAAMyJ,GACZjN,GAAG,WAAY,SAACkN,GAAD,OAAgBtG,EAAKuG,mBAAmBD,KAChED,EAASjN,GAAG,WAAY,SAACoN,GAAD,OAAgBxG,EAAKuG,mBAAmBC,mBASlEnJ,MAAA,SAAKyB,GAAM,IAAAgC,EAAAzJ,KACT,GAAKA,KAAK2N,QAAU3N,KAAK2N,OAAOyB,aAAepP,KAAK2N,OAAO0B,KAQ3D,OAJK5H,EAAKlC,KACRkC,EAAKlC,GAAKvF,KAAK8I,mBAEjBrB,EAAK6H,QAAU,MACR,IAAItP,KAAKoF,QAAQ,SAAC6D,EAASL,GAGhC,OAFAa,EAAKkE,OAAOrE,KAAKwF,KAAKS,UAAU9H,IAChCgC,EAAKzI,KAAK,UAAW,OAAQyG,EAAMA,EAAKN,QACjCsC,EAAK6E,iBAAiB7G,EAAKlC,GAAIkC,EAAKN,OAAQ8B,EAASL,KAV5D,IAAMpH,EAAQyC,EAAkBC,EAAWC,cAAe,gBAAiBnE,KAAK6I,YAChF,OAAO7I,KAAKoF,QAAQwD,OAAOpH,kCAa/B,WAEE,OADAxB,KAAKyN,WAAa,EACXzN,KAAKyN,wQC1LhB,IAGM+B,aASJ,SAAAA,EAAYvK,GAAS,IAAApB,EAAA7D,kGAAA8D,CAAA9D,KAAAwP,GACnBlM,OAAO6B,OAAOnF,KAAMiF,GACpBjF,KAAK0G,aAAc,EACnB1G,KAAKwF,IAAIzD,GAAG,UAAW,SAACyF,EAAKC,GACf,SAARD,GAAkC,YAAhBC,EAAKF,SACzB1D,EAAK4L,cAAgBhI,EAAKrB,4DAkNhCJ,MAAA,SAA0B/E,GACxB,MAAa,UAATA,GAA6B,aAATA,EACf,KAEI,oBAATA,EACK,kBAEFA,EAAKyO,QAAQ,UAAW,0CA7MjC1J,MAAA,SAAqB0D,GAAgB,IAAAzC,EAAAjH,KACnC,OAAOA,KAAK2P,OA9Be,KA8BgBzJ,KAAK,SAAC0J,GAC/C,MAAqB,oBAAjBA,GAAsClG,EACjCzC,EAAK7B,QAAQwD,OAAO3E,EAAkBC,EAAWY,qBAAsB,iBAEzEmC,EAAK7B,QAAQ6D,mCAUxBjD,MAAA,SAAc6J,GACZ,IAAMpH,EAASzI,KAAK4H,KAAKkI,cAAc,UAAUC,MAEjD,OADAF,EAAQzN,KAAKqG,EAAOd,KACb3H,KAAKoF,QAAQ6D,oCAWtB,SAAW0F,EAAQkB,GAAS,IAAAxH,EAAArI,KACpBgQ,EAAMhQ,KAAK4H,KAAKkI,cAAc,OAAOC,MAE3C,OAAKC,EAIEhQ,KAAKwF,IAAI8D,KAAK,CACnB/B,OAAQ,eACRJ,QAAS,EACTf,OAAQ,KACPF,KAAK,SAACc,GACP,OAAIA,EAASxF,OAAS6G,EAAKoH,cAClBpH,EAAK7C,IAAI8D,KAAK,CACnB/B,OAAQ,UACRJ,QAAS,EACTf,OAAQiC,EAAKoH,gBAGVzI,IACNd,KAAK,SAACc,GACP,GAAIA,EAASxF,MAEX,OADAmN,EAAOvM,KAAK4N,EAAIrI,KACTU,EAAKjD,QAAQ6D,UAEtB,IAAM9B,EAASH,EAAS+F,OAAOkD,QAAQC,QAGvC,OAFAF,EAAIrI,IAAIR,OAASA,EACjB0I,EAAQzN,KAAK4N,EAAIrI,KACVU,EAAKjD,QAAQ6D,QAAQ+G,EAAIrI,OAxBzB3H,KAAKoF,QAAQ6D,qCAoCxBjD,MAAA,SAAkBgK,EAAKrB,EAAQkB,GAAS,IAAAlH,EAAA3I,KAChCmQ,EAAQ,GACRvI,EAAO5H,KAAK4H,KAAKE,UACpBkC,IAAI,SAACjC,GAAD,OAAWA,EAAMJ,MACrBsC,OAAO,SAACtC,GAAD,MAAsB,WAAbA,EAAI1G,MAAkC,QAAb0G,EAAI1G,OAEhD,OAAK+O,GAKLpI,EAAKpE,QAAQ,SAACmE,GACZ,IAAMJ,EAASiI,EAAcY,mBAAmBzI,EAAI1G,MAEpD,GAAKsG,EAEE,CACL,IAAMmB,EAAUC,EAAKnD,IAAI8D,KAAK,CAC5B/B,OAAAA,EACAJ,OAAQ6I,EAAI7I,OACZf,OAAQ,CAACuB,EAAIpC,MACZW,KAAK,SAACc,GACHA,EAASxF,QAAUwF,EAAS+F,OAAOkD,QAAQC,QAC7CvB,EAAOvM,KAAKuF,IAEZA,EAAIR,OAASH,EAAS+F,OAAOkD,QAAQC,QACrCL,EAAQzN,KAAKuF,MAGjBwI,EAAM/N,KAAKsG,QAdXiG,EAAOvM,KAAKuF,KAiBT3H,KAAKoF,QAAQiL,IAAIF,KAzBtBvI,EAAKpE,QAAQ,SAACmE,GAAD,OAASgH,EAAOvM,KAAKuF,KAC3B3H,KAAKoF,QAAQ6D,kCAkCxB,WAAsD,IAA9CtF,yDA3IuB,IA2IUkD,yDAAS,GAEhD,OADA7G,KAAK0G,aAAc,EACZ1G,KAAKwF,IAAI6B,MAAM1D,EAAMkD,mBAc9Bb,MAAA,SAAO0D,GAAgB,IAAAD,EAAAzJ,KACf6P,EAAU,GACVlB,EAAS,GAEf,OAAO3O,KAAKsQ,qBAAqB5G,GAC9BxD,KAAK,WAAA,OAAMuD,EAAK8G,cAAcV,KAC9B3J,KAAK,WAAA,OAAMuD,EAAK+G,WAAW7B,EAAQkB,KACnC3J,KAAK,SAAC8J,GAAD,OAASvG,EAAKgH,kBAAkBT,EAAKrB,EAAQkB,KAClD3J,KAAK,WACJuD,EAAK/C,aAAc,EACnB+C,EAAK7B,KAAKI,QACV2G,EAAOnL,QAAQ,SAACmE,GACdA,EAAI3G,KAAK,UACT2G,EAAI5E,uBAEN8M,EAAQrM,QAAQ,SAACmE,GACf8B,EAAK7B,KAAKQ,IAAIT,EAAIR,OAAQQ,GACT,WAAbA,EAAI1G,MACN0G,EAAI3G,KAAK,eAdV,MAkBE,SAACwF,GAAD,OAASiD,EAAKjE,IAAI6B,QAAQnB,KAAK,WAAA,OAAMuD,EAAKrE,QAAQwD,OAAOpC,uBASpER,MAAA,SAAO0K,GAAS,IACVC,EACAC,EAFUjH,EAAA3J,KAGV6Q,GAAuB,EACrBC,EAAsB,IAAI9Q,KAAKoF,QAAQ,SAAC6D,GAAc2H,EAAsB3H,IAS5E8H,EAAiB,SAACtJ,GACF,gBAAhBA,EAAKF,SACTyJ,aAAaL,GACbC,EAAoBnJ,EAAKrB,OAAO6K,eAChCJ,GAAuB,IAKzB,OAFA7Q,KAAKwF,IAAIzD,GAAG,eAAgBgP,GAErB/Q,KAAKwF,IAAI+C,MAAK,GAClBrC,KAjByB,WAI1B,OAHK2K,IACHF,EAAQO,WAAW,WAAA,OAAMN,EAAoB,oBAAoBF,IAE5DI,IAcN5K,KAAK,SAACiL,GAEL,OADAxH,EAAKnE,IAAI7C,eAAe,eAAgBoO,GACjCI,IAJJ,MAME,SAAC3K,GAEN,OADAmD,EAAKnE,IAAI7C,eAAe,eAAgBoO,GACjCpH,EAAKvE,QAAQwD,OAAOpC,6FC5N7B4K,EAAc,WCYL,SAASC,EAAuBnM,EAASwD,EAAS1B,GAC/D,GAAIA,GAAYA,EAASkJ,SAAWlJ,EAASsK,MAC3C,OAAOpM,EAAQsD,aAAa,CAC1BrB,OAAQH,EAASkJ,QACjBjP,KAAM+F,EAASsK,MACf/L,GAAIyB,EAASuK,WACbtJ,YAAajB,EAASwK,eAG1B,GAAIxK,GAAiC,OAArBA,EAASkJ,SAAuC,OAAnBlJ,EAASsK,MAAgB,CACpE,IAAM9P,EAAQyC,EAAkBC,EAAWE,iBAAkB,oBAC7D,OAAOc,EAAQG,OAAOD,QAAQwD,OAAOpH,GAEvC,OAAOwF,ECvBT,IAAIyK,EAASnO,OAAO/C,UAAU2J,eAC1BwH,EAAQpO,OAAO/C,UAAUoR,SACzBC,EAAiBtO,OAAOsO,eACxBC,EAAOvO,OAAOwO,yBAEd7O,EAAU,SAAiB8O,GAC9B,MAA6B,mBAAlBnQ,MAAMqB,QACTrB,MAAMqB,QAAQ8O,GAGK,mBAApBL,EAAM3R,KAAKgS,IAGfC,EAAgB,SAAuB3O,GAC1C,IAAKA,GAA2B,oBAApBqO,EAAM3R,KAAKsD,GACtB,OAAO,EAGR,IASIL,EATAiP,EAAoBR,EAAO1R,KAAKsD,EAAK,eACrC6O,EAAmB7O,EAAI8O,aAAe9O,EAAI8O,YAAY5R,WAAakR,EAAO1R,KAAKsD,EAAI8O,YAAY5R,UAAW,iBAE9G,GAAI8C,EAAI8O,cAAgBF,IAAsBC,EAC7C,OAAO,EAMR,IAAKlP,KAAOK,GAEZ,YAAsB,IAARL,GAAuByO,EAAO1R,KAAKsD,EAAKL,IAInDoP,EAAc,SAAqBC,EAAQpN,GAC1C2M,GAAmC,cAAjB3M,EAAQvB,KAC7BkO,EAAeS,EAAQpN,EAAQvB,KAAM,CACpCiI,YAAY,EACZ2G,cAAc,EACdtM,MAAOf,EAAQsN,SACf3G,UAAU,IAGXyG,EAAOpN,EAAQvB,MAAQuB,EAAQsN,UAK7BC,EAAc,SAAqBnP,EAAKK,GAC3C,GAAa,cAATA,EAAsB,CACzB,IAAK+N,EAAO1R,KAAKsD,EAAKK,GACrB,OACM,GAAImO,EAGV,OAAOA,EAAKxO,EAAKK,GAAMsC,MAIzB,OAAO3C,EAAIK,s+BCxDZ,IAAMkH,ED2DW,SAASA,IACzB,IAAI3F,EAASvB,EAAM+O,EAAKC,EAAMC,EAAaC,EACvCP,EAAS5Q,UAAU,GACnBH,EAAI,EACJK,EAASF,UAAUE,OACnBkR,GAAO,EAaX,IAVsB,kBAAXR,IACVQ,EAAOR,EACPA,EAAS5Q,UAAU,IAAM,GAEzBH,EAAI,IAES,MAAV+Q,GAAqC,iBAAXA,GAAyC,mBAAXA,KAC3DA,EAAS,IAGH/Q,EAAIK,IAAUL,EAGpB,GAAe,OAFf2D,EAAUxD,UAAUH,IAInB,IAAKoC,KAAQuB,EACZwN,EAAMD,EAAYH,EAAQ3O,GAItB2O,KAHJK,EAAOF,EAAYvN,EAASvB,MAKvBmP,GAAQH,IAASV,EAAcU,KAAUC,EAAc1P,EAAQyP,MAGjEE,EAFGD,GACHA,GAAc,EACNF,GAAOxP,EAAQwP,GAAOA,EAAM,IAE5BA,GAAOT,EAAcS,GAAOA,EAAM,GAI3CL,EAAYC,EAAQ,CAAE3O,KAAMA,EAAM6O,SAAU3H,EAAOiI,EAAMD,EAAOF,WAGtC,IAATA,GACjBN,EAAYC,EAAQ,CAAE3O,KAAMA,EAAM6O,SAAUG,KAQjD,OAAOL,GC9GsB3M,KAAK,MAAM,GACnCoN,EAAY,GACV7P,EAAYrB,MAAZqB,QACR,SAAShD,EAAS8S,GAAK,OAAY,MAALA,IAAcnR,MAAMqB,QAAQ8P,IAAmB,WAAb3F,EAAO2F,GACvE,SAASC,EAAQD,GAAK,YAAoB,IAANA,EA0BpC,SAASE,EAAkB5P,EAAKL,GAC9B,MA1B2C,mBA0BzBK,EAAIL,IACO,OAAxBA,EAAIqH,UAAU,EAAG,IACO,MAAxBrH,EAAIqH,UAAU,EAAG,GAYxB,SAAS6I,GAAUzL,EAAM0L,GACvB,IAEIC,EADEC,EAAQF,EAAI9I,UAAU,GAAGiJ,MADb,KAC8BxR,MAAM,GAAI,GAe1D,OAZAuR,EAAM7P,QAAQ,SAAC+P,EAAMjS,GACnB,GAAIA,IAAM+R,EAAM1R,OAAhB,CAGAyR,GAAWG,EACX,IAAMC,EAAW1S,MAAMsS,GAAgB,GAAL,GAClC3L,EAAK2L,GAAWG,GAAQP,EAAQvL,EAAK2L,GAAWG,IAC5CC,EACA/L,EAAK8L,GACT9L,EAAOA,EAAK2L,GAAWG,MAGlB9L,EA2BT,SAASgM,GAAQC,EAAGC,GAClB,IAAIC,GAAc,EAElB,GAAI3T,EAASyT,IAAMzT,EAAS0T,GAC1B,OAAIrQ,OAAOC,KAAKmQ,GAAG/R,SAAW2B,OAAOC,KAAKoQ,GAAGhS,SAG7C2B,OAAOC,KAAKmQ,GAAGlQ,QAAQ,SAACR,GACjByQ,GAAQC,EAAE1Q,GAAM2Q,EAAE3Q,MACrB4Q,GAAc,KAGXA,GAET,GAAI3Q,EAAQyQ,IAAMzQ,EAAQ0Q,GAAI,CAC5B,GAAID,EAAE/R,SAAWgS,EAAEhS,OACjB,OAAO,EAET,IAAK,IAAIL,EAAI,EAAGuS,EAAIH,EAAE/R,OAAQL,EAAIuS,EAAGvS,GAAK,EACxC,IAAKmS,GAAQC,EAAEpS,GAAIqS,EAAErS,IACnB,OAAO,EAGX,OAAO,EAET,OAAOoS,IAAMC,yOA8Ffb,EAAU5K,SAAW,SAAkBtE,EAAUkQ,EAASC,GACxDA,EAAWA,GAAY,GACvB,IAAIC,EAAU,GA0Cd,OAxCA1Q,OAAOC,KAAKuQ,GAAStQ,QAAQ,SAACR,GAC5B,IAvMmBiR,EAuMbA,GAvMaA,EAuMOH,EAAQ9Q,IArM3B4H,EAAO,GAAI,CAAEqJ,IAAAA,IAAOA,IAEtBA,EAoMCC,EAAStQ,EAASZ,GAClBmR,EAAO,GAAAzM,OAAMqM,EAAN,KAAArM,OAAkB1E,GAE3ByQ,GAAQQ,EAAKC,IAAWjB,EAAkBa,EAAS9Q,KAGnDgQ,EAAQkB,GAEVF,EAAQ5R,KAAK,CACXgS,GAAI,MACJC,KAAMF,EACNnO,MAAOiO,IAEAhU,EAASgU,IAAQhU,EAASiU,GAEnCF,EAAUA,EAAQtM,OAAOoL,EAAU5K,SAASgM,EAAQD,EAAKE,IAChDlR,EAAQgR,IAAQhR,EAAQiR,GACjCF,EAAUA,EAAQtM,OA1GxB,SAAoB9D,EAAU0Q,EAAMP,GAClC,IAAIC,EAAU,GACRO,EAAO3Q,EAAS9B,QAClB0S,GAAU,EAEd,SAASC,EAAUf,EAAGnO,EAAImP,GACxB,GAAIhB,EAAEgB,IAAQ1B,EAAQU,EAAEgB,GAAKC,OAC3B,OAAO,KAET,GAAIjB,EAAEgB,IAAQhB,EAAEgB,GAAKC,MAAMC,MAAQrP,EAEjC,OAAOmP,EAET,IAAK,IAAIG,EAAK,EAAGC,EAAKpB,EAAE/R,OAAQkT,EAAKC,EAAID,GAAM,EAC7C,GAAInB,EAAEmB,IAAOnB,EAAEmB,GAAIF,MAAMC,MAAQrP,EAC/B,OAAOsP,EAGX,OAAQ,EAGV,GAAIpB,GAAQa,EAAMC,GAEhB,OAAOP,EAGT,IAAKhB,EAAQsB,EAAK,KAAOtB,EAAQsB,EAAK,GAAGK,OAOvC,OALAX,EAAQ5R,KAAK,CACXgS,GAAI,UACJC,KAAMN,EACN/N,MAAOsO,IAEFN,EAGT,IAAK,IAAI1S,EAAIiT,EAAK5S,OAAS,EAAQ,GAALL,EAAQA,GAAK,GAEzB,KADhBkT,EAASC,EAAUH,EAAMC,EAAKjT,GAAGqT,OAASJ,EAAKjT,GAAGqT,MAAMC,IAAKtT,KAE3D0S,EAAQ5R,KAAK,CACXgS,GAAI,SACJC,KAAI,GAAA3M,OAAKqM,EAAL,KAAArM,OAAiBpG,KAEvBiT,EAAKzR,OAAOxB,EAAG,IAEf0S,EAAUA,EAAQtM,OAAOoL,EAAU5K,SAASqM,EAAKjT,GAAIgT,EAAKE,aAAYT,EAA7C,KAAArM,OAAyDpG,KAItF,IAAK,IAAIA,EAAI,EAAGuS,EAAIS,EAAK3S,OAAQL,EAAIuS,EAAGvS,GAAK,GAE3B,KADhBkT,EAASC,EAAUF,EAAMD,EAAKhT,GAAGqT,OAASL,EAAKhT,GAAGqT,MAAMC,OAEtDZ,EAAQ5R,KAAK,CACXgS,GAAI,MACJC,KAASN,GAAAA,OAAAA,EAAYzS,KAAAA,OAAAA,GACrB0E,MAAOsO,EAAKhT,KAEdiT,EAAKzR,OAAOxB,EAAG,EAAGgT,EAAKhT,KACdkT,IAAWlT,IACpB0S,EAAQ5R,KAAK,CACXgS,GAAI,OACJC,KAASN,GAAAA,OAAAA,EAAYzS,KAAAA,OAAAA,GACrByT,KAAI,GAAArN,OAAKqM,EAAL,KAAArM,OAAiB8M,KAEvBD,EAAKzR,OAAOxB,EAAG,EAAGiT,EAAKzR,OAAO0R,EAAQ,GAAG,KAG7C,OAAOR,EAuCsBgB,CAAWd,EAAQD,EAAKE,IAGjDH,EAAQ5R,KAAK,CACXgS,GAAI,UACJC,KAASN,GAAAA,OAAAA,EAAY/Q,KAAAA,OAAAA,GACrBgD,MAAOiO,OAKb3Q,OAAOC,KAAKK,GAAUJ,QAAQ,SAACR,GACzBgQ,EAAQc,EAAQ9Q,MAAUiQ,EAAkBrP,EAAUZ,IAExDgR,EAAQ5R,KAAK,CACXgS,GAAI,SACJC,KAAI,GAAA3M,OAAKqM,EAAL,KAAArM,OAAiB1E,OAKpBgR,GASTlB,EAAUjR,MAAQ,SAAe+B,EAAUoQ,GACzCA,EAAQxQ,QAAQ,SAACyR,GACf,IA/LiB5R,EA+Lb6R,EAAShC,GAAUtP,EAAUqR,EAAMZ,MACnCrR,EAAMiS,EAAMZ,KAAKf,MAAM,KAAKxQ,QAAQ,GAAG,GACvCuP,EAASrP,GAAOlC,OAAOkC,GAAOkS,EAAOlS,GAAOkS,GAAQlS,IAAQkS,EAC1DH,EAAOE,EAAMF,KAAOE,EAAMF,KAAKzB,MAAM,KAAKxQ,QAAQ,GAAG,GAAK,KAOhE,GALmB,MAAfmS,EAAMZ,OACRa,EAAS,KACT7C,EAASzO,GAGM,QAAbqR,EAAMb,IAA6B,YAAba,EAAMb,GAC9B,GAAInR,EAAQiS,GAEE,MAARlS,IACFA,EAAMkS,EAAOvT,QAEfuT,EAAOpS,QAAQE,EAAkB,QAAbiS,EAAMb,GAAe,EAAI,EAAGa,EAAMjP,YACjD,GAAI/C,EAAQoP,IAAWpP,EAAQgS,EAAMjP,OAK1C,IADA,IACS1E,EAHT+Q,EAAO1Q,OAAS,EAGAL,EAAI2T,EAAMjP,MAAMrE,OAAQL,GADtB,IACsC,CAAA,IAAA6T,EAChDC,EAAQH,EAAMjP,MAAMlE,MAAMR,EAAGA,EAFnB,MAGhB6T,EAAA9C,GAAOjQ,KAAPP,MAAAsT,EAAAE,EAAeD,SAEZ,GAAInV,EAASoS,IAAWpS,EAASgV,EAAMjP,OAzN/B3C,EA2NDgP,EA1NlB/O,OAAOC,KAAKF,GAAKG,QAAQ,SAACR,GACTM,OAAOwO,yBAAyBzO,EAAKL,GAEzCsP,eAAiBW,EAAkB5P,EAAKL,WAC1CK,EAAIL,KAuNT4H,EAAOyH,EAAQ4C,EAAMjP,WAChB,CAAA,IAAKkP,EACV,MAAMjR,EAAkBC,EAAWI,oBAAqB,yCAGxD4Q,EAAOlS,GAAOiS,EAAMjP,WAEjB,GAAiB,SAAbiP,EAAMb,GAAe,CAC9B,IAAMkB,EAAYpC,GAAUtP,EAAUqR,EAAMF,MACxC9R,EAAQiS,GACVA,EAAOpS,QAAQE,EAAK,EAAGsS,EAAUxS,QAAQiS,EAAM,GAAG,KAElDG,EAAOlS,GAAOsS,EAAUP,UACjBO,EAAUP,QAEG,WAAbE,EAAMb,KACXnR,EAAQiS,GACVA,EAAOpS,QAAQE,EAAK,UAEbkS,EAAOlS,OAYtB8P,EAAUF,MAAQ,SAAevP,GAC/B,OAAOuH,EAAO,GAAIvH,IAYpByP,EAAUyC,YAAc,SAAqBnB,EAAIH,EAAKI,GACpD,IAAMY,EAAQ,CACZb,GAAIA,EAAG9J,cACP+J,KAAAA,GAOF,MALiB,SAAbY,EAAMb,GACRa,EAAMF,KAAOd,OACW,IAARA,IAChBgB,EAAMjP,MAAQiO,GAETgB,GAgBTnC,EAAU0C,aAAe,SAAsB5R,EAAUkQ,GAClDxQ,OAAOC,KAAKK,GAAUjC,OAI3BmR,EAAUjR,MAAM+B,EAAUkP,EAAU5K,SAAStE,EAAUkQ,IAHrDlJ,EAAOhH,EAAUkQ,IC3WrB,IAAM2B,GAAW,GAwBXC,GAAiB,SAACxQ,EAASiC,IAjBb,SAACjC,GACnB,IAAKuQ,GAASvQ,EAAQK,IAAK,CACzB,IAAMoQ,EAAQ,GACdF,GAASvQ,EAAQK,IAAMoQ,EACvBzQ,EAAQnD,GAAG,mBAAoB,SAAC0F,GAAD,OAAUA,EAAKJ,OAASI,EAAKJ,MAAM7D,QAAQ,SAAC2D,GAAD,cAAmBwO,EAAMxO,OACnGjC,EAAQnD,GAAG,SAAU,WAAA,cAAa0T,GAASvQ,EAAQK,OAarDqQ,CAAY1Q,GACZ,IAAMyQ,EAAQF,GAASvQ,EAAQK,IAI/B,OAHKoQ,EAAMxO,KACTwO,EAAMxO,GAAU,IAAI2C,GAEf6L,EAAMxO,IAYT0O,GAAa,SAAC3Q,EAASiC,EAAQpC,EAASiP,GAC5C,IAAM2B,EAAQD,GAAexQ,EAASiC,GAClCY,EAAQ4N,EAAM1K,IAAIlG,GActB,YAbqB,IAAVgD,IACTA,EAAQnG,MAAMqB,QAAQ+Q,EAAQ,GAAGhO,OAAS,GAAK,IAE7CgO,EAAQrS,SACc,MAApBqS,EAAQ,GAAGK,MAA4C,WAA5BjH,GAAO4G,EAAQ,GAAGhO,OAG/C+B,EAAQiM,EAAQ,GAAGhO,MAEnB8M,EAAUjR,MAAMkG,EAAOiM,GAEzB2B,EAAMG,IAAI/Q,EAASgD,IAEdA,GAWM,SAASgO,GAAyB7Q,EAASwD,EAAS1B,GACjE,IAAQgP,EAAkBhP,EAAlBgP,MAAOjJ,EAAW/F,EAAX+F,OACf,OAAIiJ,GAEF1S,OAAOC,KAAKwJ,GAAQvJ,QAAQ,SAACR,GAC3B,IAAKpB,MAAMqB,QAAQ8J,EAAO/J,IACxB,MAAMiB,EAAkBC,EAAWG,0BAA2B,sDAEhE0I,EAAO/J,GAAO6S,GAAW3Q,EAASwD,EAAQvB,iBAAWuB,EAAQnB,OAAUvE,KAAAA,OAAAA,GAAO+J,EAAO/J,MAGhF8L,KAAKC,MAAMD,KAAKS,UAAUvI,KAE5BA,EAIT+O,GAAyBN,SAAWA,GC5FpC,IAAMQ,GAAa,u7BCqFbC,cAUJ,SAAAA,EAAYjR,gGAASnB,CAAA9D,KAAAkW,GACnB5S,OAAO6B,OAAOnF,KAAMiF,GACpBjF,KAAK0I,QAAW,CAAA,CAAEyN,YN/FP,SAAiCjR,EAASwD,GACvD,IAAMsN,EAAQ9Q,EAAQG,OAAO+D,SAAS4M,QACb,IAApBtN,EAAQW,QACRX,EAAQW,SAAW+H,EAIxB,OAHI4E,IACFtN,EAAQsN,MAAQA,GAEXtN,KMwF6ChB,OAAA2N,GAAArV,KAAK0I,SAAW,KAClE1I,KAAKgH,SACH,CAAA,CAAEmP,YC3FO,SAAkCjR,EAASwD,EAAS1B,GACjE,QAA8B,IAAnBA,EAASxF,MAOpB,OAAOwF,EANL,IAAMS,EAAOT,EAASxF,MAChBA,EAAQ,IAAIE,MAAM+F,EAAK2O,SAG7B,OAFA5U,EAAMmC,KAAO8D,EAAK9D,KAClBnC,EAAM6U,UAAY5O,EAAK4O,UAChBnR,EAAQG,OAAOD,QAAQwD,OAAOpH,KDsFnC,CAAE2U,YAAaG,IACf,CAAEH,YE7FO,SAAmCjR,EAASwD,EAAS1B,GAClE,OAAOA,EAAS+F,SF6FZ,CAAEoJ,YD3FO,SAAqCjR,EAASwD,EAAS1B,GAYpE,MAXuB,qBAAnB0B,EAAQnB,QAAoD,4BAAnBmB,EAAQnB,OAGnDP,EAASiP,IAAY1E,WAAavK,EAASuP,eAAiBvP,EAASiP,IAAY1E,WACrD,gBAAnB7I,EAAQnB,QAA+C,4BAAnBmB,EAAQnB,QAA2D,4BAAnBmB,EAAQnB,eAI9FP,EAASiP,IAGd/L,eAAenK,KAAKiH,EAAUiP,IACzBjP,EAASiP,KAEM,IAApBvN,EAAQW,OACHrC,EAAS0B,EAAQW,QAGnBrC,KCyEAU,OAAA2N,GAAArV,KAAKgH,UAAY,IACpB,CAAA,CAAEmP,YAAaK,2DAYnB,SAAgBtR,EAASe,GAAS,IAAApC,EAAA7D,KAChC,OAAOA,KAAK0I,QAAQoE,OAAO,SAAC2J,EAAcC,GACxC,IAAM3N,EAAY2N,EAAYP,aACzBO,EAAYP,YAAYzQ,KAAK7B,EAAMqB,GACxC,OAAOuR,EAAavQ,KAAK6C,IACxB9C,6BAYLD,MAAA,SAAiBd,EAASe,EAASyC,GAAS,IAAAzB,EAAAjH,KAC1C,OAAOA,KAAKgH,SAAS8F,OAAO,SAAC2J,EAAcC,GAAf,OAA+BD,EAAavQ,KACtEwQ,EAAYP,aAAeO,EAAYP,YAAYzQ,KAAKuB,EAAM/B,EAASwD,GACvEgO,EAAYC,YAAcD,EAAYC,WAAWjR,KAAKuB,EAAM/B,EAASwD,KACpEzC,gxDGlID2Q,ySAAiB9M,sMASrB,SAAI3C,EAAQQ,GAAK,IAAA9D,EAAA7D,KACT+H,EAAQ,CAAEJ,IAAAA,GAGhB,OAFAkP,GAAAC,GAAAF,EAAArW,WAAA,MAAAP,MAAAD,KAAAC,KAAUmH,EAAOwK,WAAY5J,GAC7BJ,EAAI5F,GAAG,SAAU,WAAA,OAAM8B,EAAKkT,OAAO5P,KAC5BY,kBAUT/B,MAAA,SAAOmB,GACL,IAAMY,OAA0B,IAAXZ,EAAyBnH,KAAKiL,IAAI9D,EAAOwK,iBAAclR,EAC5E,OAAOsH,GAASA,EAAMJ,2BASxB,WACE,OAAOkP,GAAe7M,GAAAA,EAAAA,WAAAA,SAAAA,MAAAA,KAAAA,MAAAA,IAAI,SAACjC,GAAD,MAAY,CACpCZ,OAAQY,EAAM/E,IACd2E,IAAKI,EAAM/B,MAAM2B,8BAWrB3B,MAAA,SAAc/E,GACZ,OAAOjB,KAAK8H,UAAUmC,OAAO,SAAClC,GAAD,OAAWA,EAAMJ,IAAI1G,OAASA,0bCyF7D,SAAkBoE,GAChB,IACEuI,EAKEvI,EALFuI,aACAxI,EAIEC,EAJFD,QACA4R,EAGE3R,EAHF2R,oBACAC,EAEE5R,EAFF4R,qBACApJ,EACExI,EADFwI,IAEIjG,EAAO,IAAIgP,GACX7N,EAAY,IAAImN,GAAU,CAC9BtO,KAAAA,EACAxC,QAAAA,EACAsD,QAASsO,EACThQ,SAAUiQ,IAENzR,EAAM,IAAI+H,EAAI,CAAEK,aAAAA,EAAcxI,QAAAA,EAASyI,IAAAA,IACvCpH,EAAgB,IAAI+I,EAAc,CAAE5H,KAAAA,EAAMxC,QAAAA,EAASI,IAAAA,IAQzD,OAPgB,IAAIR,EAAQ,CAC1B4C,KAAAA,EACAvC,OAAAA,EACA0D,UAAAA,EACAvD,IAAAA,EACAiB,cAAAA,+BAWJT,MAAA,SAAyBX,GACvB,IAAKA,EACH,MAAMpB,EAAkBC,EAAWM,mBAAoB,uCAIzD,IAAKa,EAAOD,SAA8B,oBAAZA,QAC5B,MAAMnB,EAAkBC,EAAWO,iBAAkB,4GAGpB,mBAAxBY,EAAOuI,cAAoD,mBAAdsJ,YAEtD7R,EAAOuI,aAAe,SAACC,GAAD,OAAS,IAAIqJ,UAAUrJ,UAGV,IAA1BxI,EAAOuB,iBAChBvB,EAAOuB,gBAAiB,GAG1BvB,EAAO+D,SAAW/D,EAAO+D,UAAY,GACrC/D,EAAO+D,SAAS4M,WAAyC,IAA1B3Q,EAAO+D,SAAS4M,OAAwB3Q,EAAO+D,SAAS4M,MAEvF3Q,EAAOD,QAAUC,EAAOD,SAAWA,QACnCC,EAAOoF,OAASpF,EAAOoF,QAAU,GACjCpF,EAAOC,WAAaD,EAAOC,YAAc,IAAIiF,EAAOlF,mBAmBtDW,MAAA,SAAcX,GAKZ,OAJA8R,EAAOC,kBAAkB/R,GACzBA,EAAOoF,OAAOjH,QAAQ,SAACsI,GACrBzG,EAAOC,WAAW+R,cAAcvL,KAE3BqL,EAAOG,WAAWjS"}