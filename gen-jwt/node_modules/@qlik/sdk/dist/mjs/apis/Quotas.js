import Auth from "../auth/auth.js";
class GetQuotaByIdResult {
  constructor({
    data,
    ...rest
  }, auth) {
    this.auth = auth;
    if (data.length > 0 && data[0] instanceof Quota) {
      this.data = data;
    } else {
      this.data = data.map((element) => new Quota(element, this.auth));
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GetQuotasResult {
  constructor({
    data,
    ...rest
  }, auth) {
    this.auth = auth;
    if (data.length > 0 && data[0] instanceof Quota) {
      this.data = data;
    } else {
      this.data = data.map((element) => new Quota(element, this.auth));
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Quota {
  constructor({
    attributes,
    id,
    type,
    ...rest
  }, auth) {
    this.auth = auth;
    if (attributes instanceof QuotaAttributes) {
      this.attributes = attributes;
    } else {
      this.attributes = new QuotaAttributes(attributes, this.auth);
    }
    this.id = id;
    this.type = type;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class QuotaAttributes {
  constructor({
    quota,
    unit,
    usage,
    warningThresholds,
    ...rest
  }, auth) {
    this.auth = auth;
    this.quota = quota;
    this.unit = unit;
    this.usage = usage;
    this.warningThresholds = warningThresholds;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Quotas {
  constructor(config) {
    this.config = config instanceof Auth ? config.config : config;
    this.auth = config instanceof Auth ? config : new Auth(config);
  }
  async gets(id, queryParams = {}) {
    const response = await this.auth.rest(
      `${"/quotas/{id}".replace("{id}", id)}?${Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => `${k}=${v}`).join("&")}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new GetQuotaByIdResult(responseJson, this.auth);
  }
  async getQuotas(queryParams = {}) {
    const response = await this.auth.rest(
      `/quotas?${Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => `${k}=${v}`).join("&")}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new GetQuotasResult(responseJson, this.auth);
  }
}
export {
  GetQuotaByIdResult,
  GetQuotasResult,
  Quota,
  QuotaAttributes,
  Quotas
};
