import Auth from "../auth/auth.js";
class AutomationDetailResponseObject {
  constructor({
    connectorIds,
    createdAt,
    description,
    endpointIds,
    executionToken,
    id,
    lastRun,
    lastRunAt,
    lastRunStatus,
    name,
    ownerId,
    runMode,
    schedules,
    snippetIds,
    state,
    updatedAt,
    workspace,
    ...rest
  }, auth) {
    this.auth = auth;
    this.connectorIds = connectorIds;
    this.createdAt = createdAt;
    this.description = description;
    this.endpointIds = endpointIds;
    this.executionToken = executionToken;
    this.id = id;
    if (lastRun !== void 0 && lastRun !== null) {
      if (lastRun instanceof RunDetailResponseObject) {
        this.lastRun = lastRun;
      } else {
        this.lastRun = new RunDetailResponseObject(lastRun, this.auth);
      }
    }
    this.lastRunAt = lastRunAt;
    this.lastRunStatus = lastRunStatus;
    this.name = name;
    this.ownerId = ownerId;
    this.runMode = runMode;
    if (schedules !== void 0 && schedules !== null) {
      if (schedules.length > 0 && schedules[0] instanceof ScheduleResponseObject) {
        this.schedules = schedules;
      } else {
        this.schedules = schedules.map((element) => new ScheduleResponseObject(element, this.auth));
      }
    }
    this.snippetIds = snippetIds;
    this.state = state;
    this.updatedAt = updatedAt;
    this.workspace = workspace;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  async copy(name) {
    const response = await this.auth.rest(
      "/automations/{id}/actions/copy".replace("{id}", this.id ?? ""),
      {
        method: "POST",
        body: JSON.stringify({ name })
      }
    );
    return response;
  }
  async disable() {
    await this.auth.rest(
      "/automations/{id}/actions/disable".replace("{id}", this.id ?? ""),
      {
        method: "POST"
      }
    );
  }
  async enable() {
    await this.auth.rest(
      "/automations/{id}/actions/enable".replace("{id}", this.id ?? ""),
      {
        method: "POST"
      }
    );
  }
  async move(ownerId) {
    await this.auth.rest(
      "/automations/{id}/actions/move".replace("{id}", this.id ?? ""),
      {
        method: "POST",
        body: JSON.stringify({ ownerId })
      }
    );
  }
  async getRuns(queryParams = { limit: 10, sort: "id" }) {
    const response = await this.auth.rest(
      `${"/automations/{id}/runs".replace("{id}", this.id ?? "")}?${Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => `${k}=${v}`).join("&")}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new RunList(responseJson, this.auth);
  }
  async createRun(data) {
    const response = await this.auth.rest(
      "/automations/{id}/runs".replace("{id}", this.id ?? ""),
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    return new RunDetailResponseObject(responseJson, this.auth);
  }
  async delete() {
    await this.auth.rest(
      "/automations/{id}".replace("{id}", this.id ?? ""),
      {
        method: "DELETE"
      }
    );
  }
  async set(data) {
    const response = await this.auth.rest(
      "/automations/{id}".replace("{id}", this.id ?? ""),
      {
        method: "PUT",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    Object.keys(responseJson).forEach((key) => {
      if (this[key]) {
        this[key] = responseJson[key];
      }
    });
    return this;
  }
}
class AutomationDetailRequestObject {
  constructor({
    description,
    name,
    schedules,
    state,
    workspace,
    ...rest
  }, auth) {
    this.auth = auth;
    this.description = description;
    this.name = name;
    if (schedules !== void 0 && schedules !== null) {
      if (schedules.length > 0 && schedules[0] instanceof ScheduleRequestObject) {
        this.schedules = schedules;
      } else {
        this.schedules = schedules.map((element) => new ScheduleRequestObject(element, this.auth));
      }
    }
    this.state = state;
    this.workspace = workspace;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class AutomationList {
  constructor({
    data,
    links,
    ...rest
  }, auth) {
    this.auth = auth;
    if (data !== void 0 && data !== null) {
      if (data.length > 0 && data[0] instanceof AutomationListObject) {
        this.data = data;
      } else {
        this.data = data.map((element) => new AutomationListObject(element, this.auth));
      }
    }
    if (links !== void 0 && links !== null) {
      if (links instanceof Links) {
        this.links = links;
      } else {
        this.links = new Links(links, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class AutomationListObject {
  constructor({
    createdAt,
    description,
    id,
    lastRunAt,
    lastRunStatus,
    name,
    ownerId,
    runMode,
    state,
    updatedAt,
    ...rest
  }, auth) {
    this.auth = auth;
    this.createdAt = createdAt;
    this.description = description;
    this.id = id;
    this.lastRunAt = lastRunAt;
    this.lastRunStatus = lastRunStatus;
    this.name = name;
    this.ownerId = ownerId;
    this.runMode = runMode;
    this.state = state;
    this.updatedAt = updatedAt;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class AutomationUsageObject {
  constructor({
    guid,
    name,
    ownerId,
    ...rest
  }, auth) {
    this.auth = auth;
    this.guid = guid;
    this.name = name;
    this.ownerId = ownerId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Links {
  constructor({
    next,
    prev,
    ...rest
  }, auth) {
    this.auth = auth;
    if (next !== void 0 && next !== null) {
      if (next instanceof PaginationLink) {
        this.next = next;
      } else {
        this.next = new PaginationLink(next, this.auth);
      }
    }
    if (prev !== void 0 && prev !== null) {
      if (prev instanceof PaginationLink) {
        this.prev = prev;
      } else {
        this.prev = new PaginationLink(prev, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class PaginationLink {
  constructor({
    href,
    ...rest
  }, auth) {
    this.auth = auth;
    this.href = href;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class RunDetailRequestObject {
  constructor({
    context,
    id,
    inputs,
    ...rest
  }, auth) {
    this.auth = auth;
    this.context = context;
    this.id = id;
    this.inputs = inputs;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class RunDetailResponseObject {
  constructor({
    context,
    createdAt,
    error,
    expectedInputs,
    id,
    inputs,
    isArchived,
    isTestRun,
    metrics,
    scheduledStartTime,
    startTime,
    status,
    stopTime,
    title,
    updatedAt,
    ...rest
  }, auth) {
    this.auth = auth;
    this.context = context;
    this.createdAt = createdAt;
    this.error = error;
    this.expectedInputs = expectedInputs;
    this.id = id;
    this.inputs = inputs;
    this.isArchived = isArchived;
    this.isTestRun = isTestRun;
    if (metrics !== void 0 && metrics !== null) {
      if (metrics instanceof RunDetailResponseObjectMetrics) {
        this.metrics = metrics;
      } else {
        this.metrics = new RunDetailResponseObjectMetrics(metrics, this.auth);
      }
    }
    this.scheduledStartTime = scheduledStartTime;
    this.startTime = startTime;
    this.status = status;
    this.stopTime = stopTime;
    this.title = title;
    this.updatedAt = updatedAt;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class RunDetailResponseObjectMetrics {
  constructor({
    blocks,
    network,
    totalApiCalls,
    ...rest
  }, auth) {
    this.auth = auth;
    if (blocks !== void 0 && blocks !== null) {
      if (blocks.length > 0 && blocks[0] instanceof RunDetailResponseObjectMetricsBlocks) {
        this.blocks = blocks;
      } else {
        this.blocks = blocks.map((element) => new RunDetailResponseObjectMetricsBlocks(element, this.auth));
      }
    }
    if (network !== void 0 && network !== null) {
      if (network instanceof RunDetailResponseObjectMetricsNetwork) {
        this.network = network;
      } else {
        this.network = new RunDetailResponseObjectMetricsNetwork(network, this.auth);
      }
    }
    this.totalApiCalls = totalApiCalls;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class RunDetailResponseObjectMetricsBlocks {
  constructor({
    apiCalls,
    connectorId,
    endpointId,
    rxBytes,
    snippetId,
    txBytes,
    type,
    ...rest
  }, auth) {
    this.auth = auth;
    this.apiCalls = apiCalls;
    this.connectorId = connectorId;
    this.endpointId = endpointId;
    this.rxBytes = rxBytes;
    this.snippetId = snippetId;
    this.txBytes = txBytes;
    this.type = type;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class RunDetailResponseObjectMetricsNetwork {
  constructor({
    rxBytes,
    txBytes,
    ...rest
  }, auth) {
    this.auth = auth;
    this.rxBytes = rxBytes;
    this.txBytes = txBytes;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class RunList {
  constructor({
    data,
    links,
    ...rest
  }, auth) {
    this.auth = auth;
    if (data !== void 0 && data !== null) {
      if (data.length > 0 && data[0] instanceof RunListObject) {
        this.data = data;
      } else {
        this.data = data.map((element) => new RunListObject(element, this.auth));
      }
    }
    if (links !== void 0 && links !== null) {
      if (links instanceof Links) {
        this.links = links;
      } else {
        this.links = new Links(links, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class RunListObject {
  constructor({
    context,
    createdAt,
    error,
    id,
    isArchived,
    isTestRun,
    scheduledStartTime,
    startTime,
    status,
    stopTime,
    title,
    updatedAt,
    ...rest
  }, auth) {
    this.auth = auth;
    this.context = context;
    this.createdAt = createdAt;
    this.error = error;
    this.id = id;
    this.isArchived = isArchived;
    this.isTestRun = isTestRun;
    this.scheduledStartTime = scheduledStartTime;
    this.startTime = startTime;
    this.status = status;
    this.stopTime = stopTime;
    this.title = title;
    this.updatedAt = updatedAt;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ScheduleRequestObject {
  constructor({
    interval,
    startAt,
    stopAt,
    timezone,
    ...rest
  }, auth) {
    this.auth = auth;
    this.interval = interval;
    this.startAt = startAt;
    this.stopAt = stopAt;
    this.timezone = timezone;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ScheduleResponseObject {
  constructor({
    id,
    interval,
    lastStartedAt,
    startAt,
    stopAt,
    timezone,
    ...rest
  }, auth) {
    this.auth = auth;
    this.id = id;
    this.interval = interval;
    this.lastStartedAt = lastStartedAt;
    this.startAt = startAt;
    this.stopAt = stopAt;
    this.timezone = timezone;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SettingsObject {
  constructor({
    automationsEnabled,
    ...rest
  }, auth) {
    this.auth = auth;
    this.automationsEnabled = automationsEnabled;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class UsageList {
  constructor({
    data,
    ...rest
  }, auth) {
    this.auth = auth;
    if (data !== void 0 && data !== null) {
      if (data.length > 0 && data[0] instanceof UsageObject) {
        this.data = data;
      } else {
        this.data = data.map((element) => new UsageObject(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class UsageObject {
  constructor({
    automation,
    date,
    name,
    value,
    ...rest
  }, auth) {
    this.auth = auth;
    if (automation !== void 0 && automation !== null) {
      if (automation instanceof AutomationUsageObject) {
        this.automation = automation;
      } else {
        this.automation = new AutomationUsageObject(automation, this.auth);
      }
    }
    this.date = date;
    this.name = name;
    this.value = value;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Automations {
  constructor(config) {
    this.config = config instanceof Auth ? config.config : config;
    this.auth = config instanceof Auth ? config : new Auth(config);
  }
  async getSettings() {
    const response = await this.auth.rest(
      "/automations/settings",
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new SettingsObject(responseJson, this.auth);
  }
  async setSettings(data) {
    const response = await this.auth.rest(
      "/automations/settings",
      {
        method: "PUT",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    return new SettingsObject(responseJson, this.auth);
  }
  async getUsages(queryParams) {
    const response = await this.auth.rest(
      `/automations/usage?${Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => `${k}=${v}`).join("&")}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new UsageList(responseJson, this.auth);
  }
  async export(automationId, runId) {
    const response = await this.auth.rest(
      "/automations/{automationId}/runs/{runId}/actions/export".replace("{automationId}", automationId).replace("{runId}", runId),
      {
        method: "POST"
      }
    );
    return response;
  }
  async retry(automationId, runId) {
    await this.auth.rest(
      "/automations/{automationId}/runs/{runId}/actions/retry".replace("{automationId}", automationId).replace("{runId}", runId),
      {
        method: "POST"
      }
    );
  }
  async stop(automationId, runId) {
    await this.auth.rest(
      "/automations/{automationId}/runs/{runId}/actions/stop".replace("{automationId}", automationId).replace("{runId}", runId),
      {
        method: "POST"
      }
    );
  }
  async getRun(automationId, runId) {
    const response = await this.auth.rest(
      "/automations/{automationId}/runs/{runId}".replace("{automationId}", automationId).replace("{runId}", runId),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new RunDetailResponseObject(responseJson, this.auth);
  }
  async get(id) {
    const response = await this.auth.rest(
      "/automations/{id}".replace("{id}", id),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new AutomationDetailResponseObject(responseJson, this.auth);
  }
  async getAutomations(queryParams = { limit: 100, sort: "id" }) {
    const response = await this.auth.rest(
      `/automations?${Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => `${k}=${v}`).join("&")}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new AutomationList(responseJson, this.auth);
  }
  async create(data) {
    const response = await this.auth.rest(
      "/automations",
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    return new AutomationDetailResponseObject(responseJson, this.auth);
  }
}
export {
  AutomationDetailRequestObject,
  AutomationDetailResponseObject,
  AutomationList,
  AutomationListObject,
  AutomationUsageObject,
  Automations,
  Links,
  PaginationLink,
  RunDetailRequestObject,
  RunDetailResponseObject,
  RunDetailResponseObjectMetrics,
  RunDetailResponseObjectMetricsBlocks,
  RunDetailResponseObjectMetricsNetwork,
  RunList,
  RunListObject,
  ScheduleRequestObject,
  ScheduleResponseObject,
  SettingsObject,
  UsageList,
  UsageObject
};
