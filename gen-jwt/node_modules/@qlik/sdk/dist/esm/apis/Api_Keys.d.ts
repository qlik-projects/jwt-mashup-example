/**
This is spectacularly generated code by spectacular v0.13.0 based on
Qlik Cloud Services 0.554.4
*/
import Auth from '../auth/auth.js';
import type { Config } from '../types/types.js';
/**
  @param created - When the API key was created.
  @param createdByUser - The ID of the user who created the key.
  @param description - A description for the API key.
  @param expiry - When the API key will expire and no longer be a valid authentication token.
  @param id - The unique ID for the resource.
  @param lastUpdated - When the API key was last updated.
  @param status
  @param sub - The ID of the subject for the API key.
  @param subType - Type of the subject.
  @param tenantId - The tenant ID.
  @param auth - Auth object used to make requests
 */
export declare class ApiKey {
    auth: Auth;
    created?: string;
    createdByUser: string;
    description: string;
    expiry: string;
    id: string;
    lastUpdated?: string;
    status: 'active' | 'expired' | 'revoked' | string;
    sub: string;
    subType: 'user' | string;
    tenantId: string;
    [key: string]: any;
    constructor({ created, createdByUser, description, expiry, id, lastUpdated, status, sub, subType, tenantId, ...rest }: {
        created?: string;
        createdByUser: string;
        description: string;
        expiry: string;
        id: string;
        lastUpdated?: string;
        status: 'active' | 'expired' | 'revoked' | string;
        sub: string;
        subType: 'user' | string;
        tenantId: string;
    }, auth?: Auth);
    /**    When the owner of the API key sends the request, the key will be removed. When a TenantAdmin sends the request, the key will be revoked.
    Deletes or revokes an API key.
  
    */
    delete(): Promise<void>;
    /**
    Updates an API key for a given ID.
  
      @param data
    */
    patch(data: ApiKeysPatchSchema): Promise<void>;
}
/**
  @param description - Text that describes the API key.
  @param expiry - The expiry of the API key, in ISO8601 duration format.
  @param sub - The ID of the subject for the API key.
  @param subType - Type of the subject.
  @param auth - Auth object used to make requests
 */
export declare class ApiKeyBody {
    auth?: Auth;
    description: string;
    expiry?: string;
    sub?: string;
    subType?: string;
    [key: string]: any;
    constructor({ description, expiry, sub, subType, ...rest }: {
        description: string;
        expiry?: string;
        sub?: string;
        subType?: string;
    }, auth?: Auth);
}
/**
  A JSON Patch document as defined in https://datatracker.ietf.org/doc/html/rfc6902.
  @param op - The operation to be performed.
  @param path - The path for the given resource field to patch.
  @param value - The value to be used for this operation.
  @param auth - Auth object used to make requests
 */
export declare class ApiKeyConfigPatch {
    auth?: Auth;
    op: 'replace' | string;
    path: '/api_keys_enabled' | '/max_api_key_expiry' | '/max_keys_per_user' | string;
    value: any;
    [key: string]: any;
    constructor({ op, path, value, ...rest }: {
        op: 'replace' | string;
        path: '/api_keys_enabled' | '/max_api_key_expiry' | '/max_keys_per_user' | string;
        value: any;
    }, auth?: Auth);
}
/**
  A JSON Patch document as defined in https://datatracker.ietf.org/doc/html/rfc6902.
  @param op - The operation to be performed.
  @param path - The path for the given resource field to patch.
  @param value - The value to be used for this operation.
  @param auth - Auth object used to make requests
 */
export declare class ApiKeyPatch {
    auth?: Auth;
    op: 'replace' | string;
    path: '/description' | string;
    value: string;
    [key: string]: any;
    constructor({ op, path, value, ...rest }: {
        op: 'replace' | string;
        path: '/description' | string;
        value: string;
    }, auth?: Auth);
}
/**
  @param created - When the API key was created.
  @param createdByUser - The id of the user who created the key.
  @param description - A description for the API key.
  @param expiry - When the API key will expire and no longer be a valid authentication token.
  @param id - The unique ID for the resource.
  @param lastUpdated - When the API key was last updated.
  @param status
  @param sub - The ID of the subject for the API key.
  @param subType - Type of the subject.
  @param tenantId - The tenant ID.
  @param token - The generated signed JWT.
  @param auth - Auth object used to make requests
 */
export declare class ApiKeyWithToken {
    auth?: Auth;
    created?: string;
    createdByUser: string;
    description: string;
    expiry: string;
    id: string;
    lastUpdated?: string;
    status: 'active' | 'expired' | 'revoked' | string;
    sub: string;
    subType: 'user' | string;
    tenantId: string;
    token: string;
    [key: string]: any;
    constructor({ created, createdByUser, description, expiry, id, lastUpdated, status, sub, subType, tenantId, token, ...rest }: {
        created?: string;
        createdByUser: string;
        description: string;
        expiry: string;
        id: string;
        lastUpdated?: string;
        status: 'active' | 'expired' | 'revoked' | string;
        sub: string;
        subType: 'user' | string;
        tenantId: string;
        token: string;
    }, auth?: Auth);
}
/**
  @param api_keys_enabled - Enables or disables API key functionality for the specified tenant.
  @param max_api_key_expiry - The maximum lifetime, in ISO8601 duration format, for which an API key can be issued for the specified tenant.
  @param max_keys_per_user - The maximum number of active API keys that any user can create for the specified tenant.
  @param scim_externalClient_expiry - The expiry of the scim externalClient token in ISO8601 duration format. Used during the creation of an externalClient API key.
  @param auth - Auth object used to make requests
 */
export declare class ApiKeysConfig {
    auth?: Auth;
    api_keys_enabled?: boolean;
    max_api_key_expiry?: string;
    max_keys_per_user?: number;
    scim_externalClient_expiry?: string;
    [key: string]: any;
    constructor({ api_keys_enabled, max_api_key_expiry, max_keys_per_user, scim_externalClient_expiry, ...rest }: {
        api_keys_enabled?: boolean;
        max_api_key_expiry?: string;
        max_keys_per_user?: number;
        scim_externalClient_expiry?: string;
    }, auth?: Auth);
}
export declare class ApiKeysConfigPatchSchema extends Array<ApiKeyConfigPatch> {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor(arr: Array<ApiKeyConfigPatch>, auth?: Auth);
}
export declare class ApiKeysPatchSchema extends Array<ApiKeyPatch> {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor(arr: Array<ApiKeyPatch>, auth?: Auth);
}
/**
  @param href - The URL for the link.
  @param auth - Auth object used to make requests
 */
export declare class Link {
    auth?: Auth;
    href: string;
    [key: string]: any;
    constructor({ href, ...rest }: {
        href: string;
    }, auth?: Auth);
}
/**
  @param data
  @param links
  @param auth - Auth object used to make requests
 */
export declare class ApiKeyPage {
    auth?: Auth;
    data: Array<ApiKey>;
    links: ApiKeyPageLinks;
    [key: string]: any;
    constructor({ data, links, ...rest }: {
        data: Array<ApiKey>;
        links: ApiKeyPageLinks;
    }, auth?: Auth);
}
/**
  @param next
  @param prev
  @param self
  @param auth - Auth object used to make requests
 */
export declare class ApiKeyPageLinks {
    auth?: Auth;
    next?: Link;
    prev?: Link;
    self: Link;
    [key: string]: any;
    constructor({ next, prev, self, ...rest }: {
        next?: Link;
        prev?: Link;
        self: Link;
    }, auth?: Auth);
}
export declare class ApiKeys {
    auth: Auth;
    config: Config;
    constructor(config: Config | Auth);
    /**
    Gets the API keys configuration for a given tenant ID.
  
      @param tenantId - The tenant ID of the API keys configuration to be retrieved.
    */
    getConfig(tenantId: string): Promise<ApiKeysConfig>;
    /**
    Updates the API keys configuration for a given tenant ID.
  
      @param tenantId - The tenant ID of the API keys configuration to be retrieved.
      @param data
    */
    patchConfig(tenantId: string, data: ApiKeysConfigPatchSchema): Promise<void>;
    /**
    Gets the API key for a given ID.
  
      @param id - The ID of the API key resource to be retrieved.
    */
    get(id: string): Promise<ApiKey>;
    /**
    Lists API keys for a given tenant ID.
  
      @param createdByUser - The user ID that created the API key.
      @param endingBefore - Get resources with IDs that are lower than the target resource ID. Cannot be used in conjunction with startingAfter.
      @param limit - Maximum number of API keys to retrieve.
      @param sort - The field to sort by, with +/- prefix indicating sort order
      @param startingAfter - Get resources with IDs that are higher than the target resource ID. Cannot be used in conjunction with endingBefore.
      @param status - The status of the API key.
      @param sub - The ID of the subject.
    */
    getApiKeys(queryParams?: {
        createdByUser?: string;
        endingBefore?: string;
        limit?: number;
        sort?: 'createdByUser' | '+createdByUser' | '-createdByUser' | 'sub' | '+sub' | '-sub' | 'status' | '+status' | '-status' | 'description' | '+description' | '-description' | 'created' | '+created' | '-created';
        startingAfter?: string;
        status?: 'active' | 'expired' | 'revoked';
        sub?: string;
    }): Promise<ApiKeyPage>;
    /**
    Creates an API key resource.
  
      @param data
    */
    create(data: ApiKeyBody): Promise<ApiKeyWithToken>;
}
