/**
This is spectacularly generated code by spectacular v0.13.0 based on
Qlik Cloud Services 0.554.4
*/
/// <reference types="node" />
import Auth from '../auth/auth.js';
import type { Config } from '../types/types.js';
/**
  The theme model.
  @param author - Author of the theme.
  @param createdAt
  @param dependencies - Map of dependencies describing version of the component it requires.
  @param description - Description of the theme.
  @param file - The file that was uploaded with the theme.
  @param homepage - Home page of the theme.
  @param icon - Icon to show in the client.
  @param id
  @param keywords - Keywords for the theme.
  @param license - Under which license this theme is published.
  @param name - The display name of this theme.
  @param qextFilename - The name of the qext file that was uploaded with this theme.
  @param qextVersion - The version from the qext file that was uploaded with this extension.
  @param repository - Link to the theme source code.
  @param supplier - Supplier of the theme.
  @param tags - List of tags.
  @param tenantId
  @param type - The type of this theme (visualization, etc.).
  @param updateAt
  @param userId
  @param version - Version of the theme.
  @param auth - Auth object used to make requests
 */
export declare class Theme {
    auth: Auth;
    author?: string;
    createdAt?: string;
    dependencies?: object;
    description?: string;
    file?: object;
    homepage?: string;
    icon?: string;
    id?: string;
    keywords?: string;
    license?: string;
    name?: string;
    qextFilename?: string;
    qextVersion?: string;
    repository?: string;
    supplier?: string;
    tags?: Array<string>;
    tenantId?: string;
    type?: string;
    updateAt?: string;
    userId?: string;
    version?: string;
    [key: string]: any;
    constructor({ author, createdAt, dependencies, description, file, homepage, icon, id, keywords, license, name, qextFilename, qextVersion, repository, supplier, tags, tenantId, type, updateAt, userId, version, ...rest }: {
        author?: string;
        createdAt?: string;
        dependencies?: object;
        description?: string;
        file?: object;
        homepage?: string;
        icon?: string;
        id?: string;
        keywords?: string;
        license?: string;
        name?: string;
        qextFilename?: string;
        qextVersion?: string;
        repository?: string;
        supplier?: string;
        tags?: Array<string>;
        tenantId?: string;
        type?: string;
        updateAt?: string;
        userId?: string;
        version?: string;
    }, auth?: Auth);
    /**
    Downloads the theme as an archive.
  
    */
    getFile(): Promise<void>;
    /**
    Deletes a specific theme.
  
    */
    delete(): Promise<void>;
    /**
    Updates a specific theme with provided data. If a file is provided, the data field is not required.
  
      @param data
      @param file - Theme archive.
    */
    patches(data?: Theme, file?: Buffer): Promise<ThemesClass>;
}
/**
  The theme model.
  @param author - Author of the theme.
  @param dependencies - Map of dependencies describing version of the component it requires.
  @param description - Description of the theme.
  @param file - The file that was uploaded with the theme.
  @param homepage - Home page of the theme.
  @param icon - Icon to show in the client.
  @param keywords - Keywords for the theme.
  @param license - Under which license this theme is published.
  @param name - The display name of this theme.
  @param qextFilename - The name of the qext file that was uploaded with this theme.
  @param qextVersion - The version from the qext file that was uploaded with this extension.
  @param repository - Link to the theme source code.
  @param supplier - Supplier of the theme.
  @param tags - List of tags.
  @param type - The type of this theme (visualization, etc.).
  @param version - Version of the theme.
  @param auth - Auth object used to make requests
 */
export declare class ThemeDef {
    auth?: Auth;
    author?: string;
    dependencies?: object;
    description?: string;
    file?: object;
    homepage?: string;
    icon?: string;
    keywords?: string;
    license?: string;
    name?: string;
    qextFilename?: string;
    qextVersion?: string;
    repository?: string;
    supplier?: string;
    tags?: Array<string>;
    type?: string;
    version?: string;
    [key: string]: any;
    constructor({ author, dependencies, description, file, homepage, icon, keywords, license, name, qextFilename, qextVersion, repository, supplier, tags, type, version, ...rest }: {
        author?: string;
        dependencies?: object;
        description?: string;
        file?: object;
        homepage?: string;
        icon?: string;
        keywords?: string;
        license?: string;
        name?: string;
        qextFilename?: string;
        qextVersion?: string;
        repository?: string;
        supplier?: string;
        tags?: Array<string>;
        type?: string;
        version?: string;
    }, auth?: Auth);
}
/**
  @param data
  @param auth - Auth object used to make requests
 */
export declare class ThemesClass {
    auth?: Auth;
    data?: Array<Theme>;
    [key: string]: any;
    constructor({ data, ...rest }: {
        data?: Array<Theme>;
    }, auth?: Auth);
}
export declare class Themes {
    auth: Auth;
    config: Config;
    constructor(config: Config | Auth);
    /**
    Downloads a file from the theme archive.
  
      @param filepath - Path to the file archive for the specified theme archive. Folders separated with forward slashes.
      @param id - Theme identifier or its qextFilename.
    */
    getFile(filepath: string, id: string): Promise<void>;
    /**
    Returns a specific theme.
  
      @param id - Theme identifier or its qextFilename
    */
    get(id: string): Promise<Theme>;
    /**
    Lists all themes.
  
    */
    getThemes(): Promise<ThemesClass>;
    /**
    Creates a new theme. If a file is provided, the data field is not required.
  
      @param data
      @param file - Theme archive.
    */
    create(data?: ThemeDef, file?: Buffer): Promise<Theme>;
}
