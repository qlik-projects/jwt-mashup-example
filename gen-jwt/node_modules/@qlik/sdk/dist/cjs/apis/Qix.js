var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Qix_exports = {};
__export(Qix_exports, {
  AlfaNumString: () => AlfaNumString,
  AlternateStateData: () => AlternateStateData,
  AppEntry: () => AppEntry,
  AppObjectList: () => AppObjectList,
  AppObjectListDef: () => AppObjectListDef,
  AppScript: () => AppScript,
  ArrayOfNxValuePoint: () => ArrayOfNxValuePoint,
  AssociationScore: () => AssociationScore,
  BNFDef: () => BNFDef,
  BNFDefMetaType: () => BNFDefMetaType,
  BNFType: () => BNFType,
  Blob: () => Blob,
  Bookmark: () => Bookmark,
  BookmarkApplyAndVerifyResult: () => BookmarkApplyAndVerifyResult,
  BookmarkFieldItem: () => BookmarkFieldItem,
  BookmarkFieldPage: () => BookmarkFieldPage,
  BookmarkFieldVerifyResultState: () => BookmarkFieldVerifyResultState,
  BookmarkFieldVerifyWarning: () => BookmarkFieldVerifyWarning,
  BookmarkList: () => BookmarkList,
  BookmarkListDef: () => BookmarkListDef,
  BookmarkVariableItem: () => BookmarkVariableItem,
  CalendarStrings: () => CalendarStrings,
  CharEncodingType: () => CharEncodingType,
  CharRange: () => CharRange,
  CheckExpressionReturn: () => CheckExpressionReturn,
  CheckNumberOrExpressionReturn: () => CheckNumberOrExpressionReturn,
  ChildList: () => ChildList,
  ChildListDef: () => ChildListDef,
  CodePage: () => CodePage,
  CondDef: () => CondDef,
  Connection: () => Connection,
  ContentLibraryList: () => ContentLibraryList,
  ContentLibraryListItem: () => ContentLibraryListItem,
  CreateTemporaryBookmarkReturn: () => CreateTemporaryBookmarkReturn,
  CustomConnector: () => CustomConnector,
  DataField: () => DataField,
  DataRecord: () => DataRecord,
  DataTable: () => DataTable,
  DataTableEx: () => DataTableEx,
  Database: () => Database,
  DatabaseInfo: () => DatabaseInfo,
  DatabaseOwner: () => DatabaseOwner,
  DelimiterInfo: () => DelimiterInfo,
  DerivedFieldsInTableData: () => DerivedFieldsInTableData,
  DimensionList: () => DimensionList,
  DimensionListDef: () => DimensionListDef,
  DoReloadExParams: () => DoReloadExParams,
  DoReloadExResult: () => DoReloadExResult,
  Doc: () => Doc,
  DocListEntry: () => DocListEntry,
  DriveInfo: () => DriveInfo,
  DriveType: () => DriveType,
  EditorBreakpoint: () => EditorBreakpoint,
  EmbeddedSnapshot: () => EmbeddedSnapshot,
  EmbeddedSnapshotDef: () => EmbeddedSnapshotDef,
  ErrorData: () => ErrorData,
  ErrorDataCode: () => ErrorDataCode,
  ExpansionData: () => ExpansionData,
  ExportDataReturn: () => ExportDataReturn,
  ExtendedLayoutBookmarkData: () => ExtendedLayoutBookmarkData,
  ExtendedPivotStateData: () => ExtendedPivotStateData,
  ExtensionList: () => ExtensionList,
  ExtensionListDef: () => ExtensionListDef,
  Field: () => Field,
  FieldAttrType: () => FieldAttrType,
  FieldAttributes: () => FieldAttributes,
  FieldDefEx: () => FieldDefEx,
  FieldDescription: () => FieldDescription,
  FieldInTableData: () => FieldInTableData,
  FieldInTableProfilingData: () => FieldInTableProfilingData,
  FieldList: () => FieldList,
  FieldListDef: () => FieldListDef,
  FieldOrColumn: () => FieldOrColumn,
  FieldScores: () => FieldScores,
  FieldType: () => FieldType,
  FieldValue: () => FieldValue,
  FileDataFormat: () => FileDataFormat,
  FileType: () => FileType,
  FilterInfo: () => FilterInfo,
  FilterType: () => FilterType,
  FolderItem: () => FolderItem,
  FolderItemType: () => FolderItemType,
  FrequencyDistributionData: () => FrequencyDistributionData,
  Function: () => Function,
  FunctionGroup: () => FunctionGroup,
  GenericBookmark: () => GenericBookmark,
  GenericBookmarkEntry: () => GenericBookmarkEntry,
  GenericBookmarkLayout: () => GenericBookmarkLayout,
  GenericBookmarkProperties: () => GenericBookmarkProperties,
  GenericConnectMachine: () => GenericConnectMachine,
  GenericDimension: () => GenericDimension,
  GenericDimensionInfo: () => GenericDimensionInfo,
  GenericDimensionLayout: () => GenericDimensionLayout,
  GenericDimensionProperties: () => GenericDimensionProperties,
  GenericMeasure: () => GenericMeasure,
  GenericMeasureLayout: () => GenericMeasureLayout,
  GenericMeasureProperties: () => GenericMeasureProperties,
  GenericObject: () => GenericObject,
  GenericObjectEntry: () => GenericObjectEntry,
  GenericObjectLayout: () => GenericObjectLayout,
  GenericObjectProperties: () => GenericObjectProperties,
  GenericVariable: () => GenericVariable,
  GenericVariableLayout: () => GenericVariableLayout,
  GenericVariableProperties: () => GenericVariableProperties,
  GetBaseBNFReturn: () => GetBaseBNFReturn,
  GetBaseBNFStringReturn: () => GetBaseBNFStringReturn,
  GetDatabaseTablePreviewReturn: () => GetDatabaseTablePreviewReturn,
  GetExpressionBNFReturn: () => GetExpressionBNFReturn,
  GetFileTableFieldsReturn: () => GetFileTableFieldsReturn,
  GetFileTablePreviewReturn: () => GetFileTablePreviewReturn,
  GetHyperCubeContinuousDataReturn: () => GetHyperCubeContinuousDataReturn,
  GetInteractReturn: () => GetInteractReturn,
  GetMediaListReturn: () => GetMediaListReturn,
  GetTablesAndKeysReturn: () => GetTablesAndKeysReturn,
  Global: () => Global,
  GraphMode: () => GraphMode,
  GroupBookmarkData: () => GroupBookmarkData,
  GroupStateInfo: () => GroupStateInfo,
  HyperCube: () => HyperCube,
  HyperCubeDef: () => HyperCubeDef,
  InputFieldItem: () => InputFieldItem,
  InterFieldSortData: () => InterFieldSortData,
  InteractDef: () => InteractDef,
  InteractType: () => InteractType,
  JsonObject: () => JsonObject,
  KeyType: () => KeyType,
  LayoutBookmarkData: () => LayoutBookmarkData,
  LayoutExclude: () => LayoutExclude,
  LayoutFieldInfo: () => LayoutFieldInfo,
  LineageInfo: () => LineageInfo,
  ListObject: () => ListObject,
  ListObjectDef: () => ListObjectDef,
  LocaleInfo: () => LocaleInfo,
  LogOnType: () => LogOnType,
  MeasureList: () => MeasureList,
  MeasureListDef: () => MeasureListDef,
  MediaList: () => MediaList,
  MediaListDef: () => MediaListDef,
  MediaListItem: () => MediaListItem,
  MetaData: () => MetaData,
  NxAppLayout: () => NxAppLayout,
  NxAppProperties: () => NxAppProperties,
  NxAttrDimDef: () => NxAttrDimDef,
  NxAttrDimInfo: () => NxAttrDimInfo,
  NxAttrExprDef: () => NxAttrExprDef,
  NxAttrExprInfo: () => NxAttrExprInfo,
  NxAttributeDimValues: () => NxAttributeDimValues,
  NxAttributeExpressionValues: () => NxAttributeExpressionValues,
  NxAutoSortByStateDef: () => NxAutoSortByStateDef,
  NxAxisData: () => NxAxisData,
  NxAxisTicks: () => NxAxisTicks,
  NxBookmark: () => NxBookmark,
  NxCalcCond: () => NxCalcCond,
  NxCardinalities: () => NxCardinalities,
  NxCell: () => NxCell,
  NxCellPosition: () => NxCellPosition,
  NxCellRows: () => NxCellRows,
  NxContainerEntry: () => NxContainerEntry,
  NxContinuousDataOptions: () => NxContinuousDataOptions,
  NxContinuousMode: () => NxContinuousMode,
  NxContinuousRangeSelectInfo: () => NxContinuousRangeSelectInfo,
  NxCurrentSelectionItem: () => NxCurrentSelectionItem,
  NxDataAreaPage: () => NxDataAreaPage,
  NxDataPage: () => NxDataPage,
  NxDataReductionMode: () => NxDataReductionMode,
  NxDerivedField: () => NxDerivedField,
  NxDerivedFieldDescriptionList: () => NxDerivedFieldDescriptionList,
  NxDerivedFieldsData: () => NxDerivedFieldsData,
  NxDerivedGroup: () => NxDerivedGroup,
  NxDimCellType: () => NxDimCellType,
  NxDimension: () => NxDimension,
  NxDimensionInfo: () => NxDimensionInfo,
  NxDimensionType: () => NxDimensionType,
  NxDownloadInfo: () => NxDownloadInfo,
  NxDownloadOptions: () => NxDownloadOptions,
  NxEngineVersion: () => NxEngineVersion,
  NxExportFileType: () => NxExportFileType,
  NxExportState: () => NxExportState,
  NxFeature: () => NxFeature,
  NxFieldDescription: () => NxFieldDescription,
  NxFieldProperties: () => NxFieldProperties,
  NxFieldResourceId: () => NxFieldResourceId,
  NxFieldSelectionInfo: () => NxFieldSelectionInfo,
  NxFieldSelectionMode: () => NxFieldSelectionMode,
  NxFieldTableResourceId: () => NxFieldTableResourceId,
  NxFrequencyMode: () => NxFrequencyMode,
  NxGetBookmarkOptions: () => NxGetBookmarkOptions,
  NxGetObjectOptions: () => NxGetObjectOptions,
  NxGroupTail: () => NxGroupTail,
  NxGrpType: () => NxGrpType,
  NxHighlightRanges: () => NxHighlightRanges,
  NxHypercubeMode: () => NxHypercubeMode,
  NxInfo: () => NxInfo,
  NxInlineDimensionDef: () => NxInlineDimensionDef,
  NxInlineMeasureDef: () => NxInlineMeasureDef,
  NxLTrendlineType: () => NxLTrendlineType,
  NxLayoutErrors: () => NxLayoutErrors,
  NxLibraryDimension: () => NxLibraryDimension,
  NxLibraryDimensionDef: () => NxLibraryDimensionDef,
  NxLibraryMeasure: () => NxLibraryMeasure,
  NxLibraryMeasureDef: () => NxLibraryMeasureDef,
  NxLinkedObjectInfo: () => NxLinkedObjectInfo,
  NxListObjectExpression: () => NxListObjectExpression,
  NxListObjectExpressionDef: () => NxListObjectExpressionDef,
  NxLocalizedErrorCode: () => NxLocalizedErrorCode,
  NxLocalizedWarningCode: () => NxLocalizedWarningCode,
  NxMatchingFieldInfo: () => NxMatchingFieldInfo,
  NxMatchingFieldMode: () => NxMatchingFieldMode,
  NxMeasure: () => NxMeasure,
  NxMeasureInfo: () => NxMeasureInfo,
  NxMeta: () => NxMeta,
  NxMetaDef: () => NxMetaDef,
  NxMiniChart: () => NxMiniChart,
  NxMiniChartCell: () => NxMiniChartCell,
  NxMiniChartData: () => NxMiniChartData,
  NxMiniChartDef: () => NxMiniChartDef,
  NxMiniChartRows: () => NxMiniChartRows,
  NxMultiRangeSelectInfo: () => NxMultiRangeSelectInfo,
  NxPage: () => NxPage,
  NxPageTreeLevel: () => NxPageTreeLevel,
  NxPageTreeNode: () => NxPageTreeNode,
  NxPatch: () => NxPatch,
  NxPatchOperationType: () => NxPatchOperationType,
  NxPatches: () => NxPatches,
  NxPivotDimensionCell: () => NxPivotDimensionCell,
  NxPivotPage: () => NxPivotPage,
  NxPivotValuePoint: () => NxPivotValuePoint,
  NxRange: () => NxRange,
  NxRangeSelectInfo: () => NxRangeSelectInfo,
  NxSelectionCell: () => NxSelectionCell,
  NxSelectionCellType: () => NxSelectionCellType,
  NxSelectionInfo: () => NxSelectionInfo,
  NxSimpleDimValue: () => NxSimpleDimValue,
  NxSimpleValue: () => NxSimpleValue,
  NxSortIndicatorType: () => NxSortIndicatorType,
  NxStackPage: () => NxStackPage,
  NxStackedPivotCell: () => NxStackedPivotCell,
  NxStateCounts: () => NxStateCounts,
  NxStreamListEntry: () => NxStreamListEntry,
  NxTempBookmarkOptions: () => NxTempBookmarkOptions,
  NxTickCell: () => NxTickCell,
  NxTreeDataOption: () => NxTreeDataOption,
  NxTreeDimensionDef: () => NxTreeDimensionDef,
  NxTreeDimensionInfo: () => NxTreeDimensionInfo,
  NxTreeMultiRangeSelectInfo: () => NxTreeMultiRangeSelectInfo,
  NxTreeNode: () => NxTreeNode,
  NxTreeRangeSelectInfo: () => NxTreeRangeSelectInfo,
  NxTreeValue: () => NxTreeValue,
  NxTrendline: () => NxTrendline,
  NxTrendlineDef: () => NxTrendlineDef,
  NxTrendlineMode: () => NxTrendlineMode,
  NxValidationError: () => NxValidationError,
  NxVariableListItem: () => NxVariableListItem,
  NxVariableProperties: () => NxVariableProperties,
  NxViewPort: () => NxViewPort,
  ObjectInterface: () => ObjectInterface,
  OdbcDsn: () => OdbcDsn,
  OleDbProvider: () => OleDbProvider,
  OtherLimitMode: () => OtherLimitMode,
  OtherMode: () => OtherMode,
  OtherSortMode: () => OtherSortMode,
  OtherTotalSpecProp: () => OtherTotalSpecProp,
  Point: () => Point,
  PositionMark: () => PositionMark,
  ProgressData: () => ProgressData,
  ProgressMessage: () => ProgressMessage,
  Qix: () => Qix,
  Range: () => Range,
  RangeSelectInfo: () => RangeSelectInfo,
  Rect: () => Rect,
  SampleResult: () => SampleResult,
  ScriptSyntaxError: () => ScriptSyntaxError,
  ScrollPosition: () => ScrollPosition,
  SearchAssociationResult: () => SearchAssociationResult,
  SearchAttribute: () => SearchAttribute,
  SearchCharRange: () => SearchCharRange,
  SearchCombinationOptions: () => SearchCombinationOptions,
  SearchContextType: () => SearchContextType,
  SearchFieldDictionary: () => SearchFieldDictionary,
  SearchFieldMatch: () => SearchFieldMatch,
  SearchFieldMatchType: () => SearchFieldMatchType,
  SearchFieldMatchesItem: () => SearchFieldMatchesItem,
  SearchFieldSelectionMode: () => SearchFieldSelectionMode,
  SearchFieldValueItem: () => SearchFieldValueItem,
  SearchGroup: () => SearchGroup,
  SearchGroupItem: () => SearchGroupItem,
  SearchGroupItemMatch: () => SearchGroupItemMatch,
  SearchGroupItemOptions: () => SearchGroupItemOptions,
  SearchGroupItemType: () => SearchGroupItemType,
  SearchGroupOptions: () => SearchGroupOptions,
  SearchGroupType: () => SearchGroupType,
  SearchMatchCombination: () => SearchMatchCombination,
  SearchMatchCombinations: () => SearchMatchCombinations,
  SearchObjectOptions: () => SearchObjectOptions,
  SearchPage: () => SearchPage,
  SearchResult: () => SearchResult,
  SearchSuggestItem: () => SearchSuggestItem,
  SearchSuggestionResult: () => SearchSuggestionResult,
  SearchTermResult: () => SearchTermResult,
  SearchValueOptions: () => SearchValueOptions,
  SearchValuePage: () => SearchValuePage,
  SearchValueResult: () => SearchValueResult,
  SelectInfo: () => SelectInfo,
  SelectionObject: () => SelectionObject,
  SelectionObjectDef: () => SelectionObjectDef,
  Size: () => Size,
  SortCriteria: () => SortCriteria,
  SourceKeyRecord: () => SourceKeyRecord,
  StateEnumType: () => StateEnumType,
  StaticContentList: () => StaticContentList,
  StaticContentListItem: () => StaticContentListItem,
  StaticContentUrl: () => StaticContentUrl,
  StaticContentUrlDef: () => StaticContentUrlDef,
  StoreTempSelectionStateReturn: () => StoreTempSelectionStateReturn,
  StringExpr: () => StringExpr,
  StringExpression: () => StringExpression,
  SymbolFrequency: () => SymbolFrequency,
  SymbolValue: () => SymbolValue,
  TableProfilingData: () => TableProfilingData,
  TableRecord: () => TableRecord,
  TableRow: () => TableRow,
  TableViewBroomPointSaveInfo: () => TableViewBroomPointSaveInfo,
  TableViewConnectionPointSaveInfo: () => TableViewConnectionPointSaveInfo,
  TableViewCtlSaveInfo: () => TableViewCtlSaveInfo,
  TableViewDlgSaveInfo: () => TableViewDlgSaveInfo,
  TableViewSaveInfo: () => TableViewSaveInfo,
  TableViewTableWinSaveInfo: () => TableViewTableWinSaveInfo,
  TextMacro: () => TextMacro,
  TotalMode: () => TotalMode,
  TransformAppParameters: () => TransformAppParameters,
  TransformAppResult: () => TransformAppResult,
  TreeData: () => TreeData,
  TreeDataDef: () => TreeDataDef,
  UndoInfo: () => UndoInfo,
  UndoInfoDef: () => UndoInfoDef,
  ValueExpr: () => ValueExpr,
  ValueExpression: () => ValueExpression,
  Variable: () => Variable,
  VariableList: () => VariableList,
  VariableListDef: () => VariableListDef
});
module.exports = __toCommonJS(Qix_exports);
class AlfaNumString {
  constructor({
    qIsNum,
    qString,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qIsNum = qIsNum;
    this.qString = qString;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class AlternateStateData {
  constructor({
    qFieldItems,
    qStateName,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qFieldItems !== void 0 && qFieldItems !== null) {
      if (qFieldItems.length > 0 && qFieldItems[0] instanceof BookmarkFieldItem) {
        this.qFieldItems = qFieldItems;
      } else {
        this.qFieldItems = qFieldItems.map((element) => new BookmarkFieldItem(element, this.auth));
      }
    }
    this.qStateName = qStateName;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class AppEntry {
  constructor({
    qFileSize,
    qHasSectionAccess,
    qID,
    qLastReloadTime,
    qMeta,
    qPath,
    qReadOnly,
    qThumbnail,
    qTitle,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qFileSize = qFileSize;
    this.qHasSectionAccess = qHasSectionAccess;
    this.qID = qID;
    this.qLastReloadTime = qLastReloadTime;
    if (qMeta !== void 0 && qMeta !== null) {
      if (qMeta instanceof NxMeta) {
        this.qMeta = qMeta;
      } else {
        this.qMeta = new NxMeta(qMeta, this.auth);
      }
    }
    this.qPath = qPath;
    this.qReadOnly = qReadOnly;
    if (qThumbnail !== void 0 && qThumbnail !== null) {
      if (qThumbnail instanceof StaticContentUrl) {
        this.qThumbnail = qThumbnail;
      } else {
        this.qThumbnail = new StaticContentUrl(qThumbnail, this.auth);
      }
    }
    this.qTitle = qTitle;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class AppObjectList {
  constructor({
    qItems,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qItems !== void 0 && qItems !== null) {
      if (qItems.length > 0 && qItems[0] instanceof NxContainerEntry) {
        this.qItems = qItems;
      } else {
        this.qItems = qItems.map((element) => new NxContainerEntry(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class AppObjectListDef {
  constructor({
    qData,
    qType,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qData !== void 0 && qData !== null) {
      if (qData instanceof JsonObject) {
        this.qData = qData;
      } else {
        this.qData = new JsonObject(qData, this.auth);
      }
    }
    this.qType = qType;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class AppScript {
  constructor({
    qIsLocked,
    qMeta,
    qScript,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qIsLocked = qIsLocked;
    if (qMeta !== void 0 && qMeta !== null) {
      if (qMeta instanceof NxMeta) {
        this.qMeta = qMeta;
      } else {
        this.qMeta = new NxMeta(qMeta, this.auth);
      }
    }
    this.qScript = qScript;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ArrayOfNxValuePoint extends Array {
  constructor(arr, auth) {
    super();
    this.auth = auth;
    for (const e of arr) {
      this.push(new NxPivotValuePoint(e, this.auth));
    }
  }
}
class AssociationScore {
  constructor({
    qField1Scores,
    qField2Scores,
    qFieldPairName,
    qScoreSummary,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qField1Scores !== void 0 && qField1Scores !== null) {
      if (qField1Scores instanceof FieldScores) {
        this.qField1Scores = qField1Scores;
      } else {
        this.qField1Scores = new FieldScores(qField1Scores, this.auth);
      }
    }
    if (qField2Scores !== void 0 && qField2Scores !== null) {
      if (qField2Scores instanceof FieldScores) {
        this.qField2Scores = qField2Scores;
      } else {
        this.qField2Scores = new FieldScores(qField2Scores, this.auth);
      }
    }
    this.qFieldPairName = qFieldPairName;
    this.qScoreSummary = qScoreSummary;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class BNFDef {
  constructor({
    qAggrFunc,
    qBnf,
    qBnfLiteral,
    qControlStatement,
    qDepr,
    qFG,
    qFGList,
    qFieldFlag,
    qHelpId,
    qIsBnfRule,
    qMT,
    qName,
    qNbr,
    qPNbr,
    qQvFunc,
    qScriptStatement,
    qStr,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qAggrFunc = qAggrFunc;
    this.qBnf = qBnf;
    this.qBnfLiteral = qBnfLiteral;
    this.qControlStatement = qControlStatement;
    this.qDepr = qDepr;
    this.qFG = qFG;
    this.qFGList = qFGList;
    this.qFieldFlag = qFieldFlag;
    this.qHelpId = qHelpId;
    this.qIsBnfRule = qIsBnfRule;
    this.qMT = qMT;
    this.qName = qName;
    this.qNbr = qNbr;
    this.qPNbr = qPNbr;
    this.qQvFunc = qQvFunc;
    this.qScriptStatement = qScriptStatement;
    this.qStr = qStr;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class BNFDefMetaType {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class BNFType {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Blob {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Bookmark {
  constructor({
    qAlternateStateData,
    qApplyAdditive,
    qApplyInputFieldValues,
    qApplyLayoutState,
    qFieldItems,
    qForAnnotations,
    qGroups,
    qId,
    qIncludeAllVariables,
    qIncludeScrollPosition,
    qIncludeSelectionState,
    qInfoText,
    qInputFieldItems,
    qName,
    qObjects,
    qObjectsLayout,
    qOwner,
    qRecallCount,
    qSheetId,
    qShow,
    qShowPopupInfo,
    qUtcModifyTime,
    qUtcRecallTime,
    qVariableItems,
    ...rest
  }, auth) {
    this.qApplyInputFieldValues = true;
    this.qIncludeSelectionState = true;
    this.auth = auth;
    if (qAlternateStateData !== void 0 && qAlternateStateData !== null) {
      if (qAlternateStateData.length > 0 && qAlternateStateData[0] instanceof AlternateStateData) {
        this.qAlternateStateData = qAlternateStateData;
      } else {
        this.qAlternateStateData = qAlternateStateData.map((element) => new AlternateStateData(element, this.auth));
      }
    }
    this.qApplyAdditive = qApplyAdditive;
    this.qApplyInputFieldValues = qApplyInputFieldValues;
    this.qApplyLayoutState = qApplyLayoutState;
    if (qFieldItems !== void 0 && qFieldItems !== null) {
      if (qFieldItems.length > 0 && qFieldItems[0] instanceof BookmarkFieldItem) {
        this.qFieldItems = qFieldItems;
      } else {
        this.qFieldItems = qFieldItems.map((element) => new BookmarkFieldItem(element, this.auth));
      }
    }
    this.qForAnnotations = qForAnnotations;
    if (qGroups !== void 0 && qGroups !== null) {
      if (qGroups.length > 0 && qGroups[0] instanceof GroupBookmarkData) {
        this.qGroups = qGroups;
      } else {
        this.qGroups = qGroups.map((element) => new GroupBookmarkData(element, this.auth));
      }
    }
    this.qId = qId;
    this.qIncludeAllVariables = qIncludeAllVariables;
    this.qIncludeScrollPosition = qIncludeScrollPosition;
    this.qIncludeSelectionState = qIncludeSelectionState;
    this.qInfoText = qInfoText;
    if (qInputFieldItems !== void 0 && qInputFieldItems !== null) {
      if (qInputFieldItems.length > 0 && qInputFieldItems[0] instanceof InputFieldItem) {
        this.qInputFieldItems = qInputFieldItems;
      } else {
        this.qInputFieldItems = qInputFieldItems.map((element) => new InputFieldItem(element, this.auth));
      }
    }
    this.qName = qName;
    if (qObjects !== void 0 && qObjects !== null) {
      if (qObjects.length > 0 && qObjects[0] instanceof LayoutBookmarkData) {
        this.qObjects = qObjects;
      } else {
        this.qObjects = qObjects.map((element) => new LayoutBookmarkData(element, this.auth));
      }
    }
    if (qObjectsLayout !== void 0 && qObjectsLayout !== null) {
      if (qObjectsLayout.length > 0 && qObjectsLayout[0] instanceof ExtendedLayoutBookmarkData) {
        this.qObjectsLayout = qObjectsLayout;
      } else {
        this.qObjectsLayout = qObjectsLayout.map((element) => new ExtendedLayoutBookmarkData(element, this.auth));
      }
    }
    this.qOwner = qOwner;
    this.qRecallCount = qRecallCount;
    this.qSheetId = qSheetId;
    if (qShow !== void 0 && qShow !== null) {
      if (qShow instanceof CondDef) {
        this.qShow = qShow;
      } else {
        this.qShow = new CondDef(qShow, this.auth);
      }
    }
    this.qShowPopupInfo = qShowPopupInfo;
    this.qUtcModifyTime = qUtcModifyTime;
    this.qUtcRecallTime = qUtcRecallTime;
    if (qVariableItems !== void 0 && qVariableItems !== null) {
      if (qVariableItems.length > 0 && qVariableItems[0] instanceof BookmarkVariableItem) {
        this.qVariableItems = qVariableItems;
      } else {
        this.qVariableItems = qVariableItems.map((element) => new BookmarkVariableItem(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class BookmarkApplyAndVerifyResult {
  constructor({
    qApplySuccess,
    qWarnings,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qApplySuccess = qApplySuccess;
    if (qWarnings !== void 0 && qWarnings !== null) {
      if (qWarnings.length > 0 && qWarnings[0] instanceof BookmarkFieldVerifyWarning) {
        this.qWarnings = qWarnings;
      } else {
        this.qWarnings = qWarnings.map((element) => new BookmarkFieldVerifyWarning(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class BookmarkFieldItem {
  constructor({
    qAndMode,
    qDef,
    qExcludedValues,
    qLocked,
    qOneAndOnlyOne,
    qSelectInfo,
    qValues,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qAndMode = qAndMode;
    if (qDef !== void 0 && qDef !== null) {
      if (qDef instanceof FieldDefEx) {
        this.qDef = qDef;
      } else {
        this.qDef = new FieldDefEx(qDef, this.auth);
      }
    }
    if (qExcludedValues !== void 0 && qExcludedValues !== null) {
      if (qExcludedValues.length > 0 && qExcludedValues[0] instanceof FieldValue) {
        this.qExcludedValues = qExcludedValues;
      } else {
        this.qExcludedValues = qExcludedValues.map((element) => new FieldValue(element, this.auth));
      }
    }
    this.qLocked = qLocked;
    this.qOneAndOnlyOne = qOneAndOnlyOne;
    if (qSelectInfo !== void 0 && qSelectInfo !== null) {
      if (qSelectInfo instanceof SelectInfo) {
        this.qSelectInfo = qSelectInfo;
      } else {
        this.qSelectInfo = new SelectInfo(qSelectInfo, this.auth);
      }
    }
    if (qValues !== void 0 && qValues !== null) {
      if (qValues.length > 0 && qValues[0] instanceof FieldValue) {
        this.qValues = qValues;
      } else {
        this.qValues = qValues.map((element) => new FieldValue(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class BookmarkFieldPage {
  constructor({
    qEndIndex,
    qStartIndex,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qEndIndex = qEndIndex;
    this.qStartIndex = qStartIndex;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class BookmarkFieldVerifyResultState {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class BookmarkFieldVerifyWarning {
  constructor({
    qField,
    qMissingValues,
    qState,
    qVerifyResult,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qField = qField;
    this.qMissingValues = qMissingValues;
    this.qState = qState;
    this.qVerifyResult = qVerifyResult;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class BookmarkList {
  constructor({
    qItems,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qItems !== void 0 && qItems !== null) {
      if (qItems.length > 0 && qItems[0] instanceof NxContainerEntry) {
        this.qItems = qItems;
      } else {
        this.qItems = qItems.map((element) => new NxContainerEntry(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class BookmarkListDef {
  constructor({
    qData,
    qIncludePatches,
    qType,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qData !== void 0 && qData !== null) {
      if (qData instanceof JsonObject) {
        this.qData = qData;
      } else {
        this.qData = new JsonObject(qData, this.auth);
      }
    }
    this.qIncludePatches = qIncludePatches;
    this.qType = qType;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class BookmarkVariableItem {
  constructor({
    qName,
    qValue,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qName = qName;
    if (qValue !== void 0 && qValue !== null) {
      if (qValue instanceof FieldValue) {
        this.qValue = qValue;
      } else {
        this.qValue = new FieldValue(qValue, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class CalendarStrings {
  constructor({
    qDayNames,
    qLongDayNames,
    qLongMonthNames,
    qMonthNames,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qDayNames = qDayNames;
    this.qLongDayNames = qLongDayNames;
    this.qLongMonthNames = qLongMonthNames;
    this.qMonthNames = qMonthNames;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class CharEncodingType {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class CharRange {
  constructor({
    qCharCount,
    qCharPos,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qCharCount = qCharCount;
    this.qCharPos = qCharPos;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class CheckExpressionReturn {
  constructor({
    qBadFieldNames,
    qDangerousFieldNames,
    qErrorMsg,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qBadFieldNames !== void 0 && qBadFieldNames !== null) {
      if (qBadFieldNames.length > 0 && qBadFieldNames[0] instanceof NxRange) {
        this.qBadFieldNames = qBadFieldNames;
      } else {
        this.qBadFieldNames = qBadFieldNames.map((element) => new NxRange(element, this.auth));
      }
    }
    if (qDangerousFieldNames !== void 0 && qDangerousFieldNames !== null) {
      if (qDangerousFieldNames.length > 0 && qDangerousFieldNames[0] instanceof NxRange) {
        this.qDangerousFieldNames = qDangerousFieldNames;
      } else {
        this.qDangerousFieldNames = qDangerousFieldNames.map((element) => new NxRange(element, this.auth));
      }
    }
    this.qErrorMsg = qErrorMsg;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class CheckNumberOrExpressionReturn {
  constructor({
    qBadFieldNames,
    qErrorMsg,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qBadFieldNames !== void 0 && qBadFieldNames !== null) {
      if (qBadFieldNames.length > 0 && qBadFieldNames[0] instanceof NxRange) {
        this.qBadFieldNames = qBadFieldNames;
      } else {
        this.qBadFieldNames = qBadFieldNames.map((element) => new NxRange(element, this.auth));
      }
    }
    this.qErrorMsg = qErrorMsg;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ChildList {
  constructor({
    qItems,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qItems !== void 0 && qItems !== null) {
      if (qItems.length > 0 && qItems[0] instanceof NxContainerEntry) {
        this.qItems = qItems;
      } else {
        this.qItems = qItems.map((element) => new NxContainerEntry(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ChildListDef {
  constructor({
    qData,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qData !== void 0 && qData !== null) {
      if (qData instanceof JsonObject) {
        this.qData = qData;
      } else {
        this.qData = new JsonObject(qData, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class CodePage {
  constructor({
    qDescription,
    qName,
    qNumber,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qDescription = qDescription;
    this.qName = qName;
    this.qNumber = qNumber;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class CondDef {
  constructor({
    qAlways,
    qExpression,
    ...rest
  }, auth) {
    this.qAlways = true;
    this.auth = auth;
    this.qAlways = qAlways;
    if (qExpression !== void 0 && qExpression !== null) {
      if (qExpression instanceof ValueExpr) {
        this.qExpression = qExpression;
      } else {
        this.qExpression = new ValueExpr(qExpression, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Connection {
  constructor({
    qConnectionString,
    qId,
    qLogOn,
    qMeta,
    qModifiedDate,
    qName,
    qPassword,
    qType,
    qUserName,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qConnectionString = qConnectionString;
    this.qId = qId;
    this.qLogOn = qLogOn;
    if (qMeta !== void 0 && qMeta !== null) {
      if (qMeta instanceof NxMeta) {
        this.qMeta = qMeta;
      } else {
        this.qMeta = new NxMeta(qMeta, this.auth);
      }
    }
    this.qModifiedDate = qModifiedDate;
    this.qName = qName;
    this.qPassword = qPassword;
    this.qType = qType;
    this.qUserName = qUserName;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ContentLibraryList {
  constructor({
    qItems,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qItems !== void 0 && qItems !== null) {
      if (qItems.length > 0 && qItems[0] instanceof ContentLibraryListItem) {
        this.qItems = qItems;
      } else {
        this.qItems = qItems.map((element) => new ContentLibraryListItem(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ContentLibraryListItem {
  constructor({
    qAppSpecific,
    qMeta,
    qName,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qAppSpecific = qAppSpecific;
    if (qMeta !== void 0 && qMeta !== null) {
      if (qMeta instanceof NxMeta) {
        this.qMeta = qMeta;
      } else {
        this.qMeta = new NxMeta(qMeta, this.auth);
      }
    }
    this.qName = qName;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class CreateTemporaryBookmarkReturn {
  constructor({
    qId,
    qReturn,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qId = qId;
    this.qReturn = qReturn;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class CustomConnector {
  constructor({
    qDisplayName,
    qMachineMode,
    qParent,
    qProvider,
    qSupportFileStreaming,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qDisplayName = qDisplayName;
    this.qMachineMode = qMachineMode;
    this.qParent = qParent;
    this.qProvider = qProvider;
    this.qSupportFileStreaming = qSupportFileStreaming;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class DataField {
  constructor({
    qIsKey,
    qName,
    qOriginalFieldName,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qIsKey = qIsKey;
    this.qName = qName;
    this.qOriginalFieldName = qOriginalFieldName;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class DataRecord {
  constructor({
    qValues,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qValues = qValues;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class DataTable {
  constructor({
    qName,
    qType,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qName = qName;
    this.qType = qType;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class DataTableEx {
  constructor({
    qFields,
    qFormatSpec,
    qName,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qFields !== void 0 && qFields !== null) {
      if (qFields.length > 0 && qFields[0] instanceof DataField) {
        this.qFields = qFields;
      } else {
        this.qFields = qFields.map((element) => new DataField(element, this.auth));
      }
    }
    this.qFormatSpec = qFormatSpec;
    this.qName = qName;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Database {
  constructor({
    qIsDefault,
    qName,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qIsDefault = qIsDefault;
    this.qName = qName;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class DatabaseInfo {
  constructor({
    qDBFirst,
    qDBMSName,
    qDBSeparator,
    qDBUsage,
    qDefaultDatabase,
    qKeywords,
    qOwnerSeparator,
    qOwnerUsage,
    qQuotePreffix,
    qQuoteSuffix,
    qSpecialChars,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qDBFirst = qDBFirst;
    this.qDBMSName = qDBMSName;
    this.qDBSeparator = qDBSeparator;
    this.qDBUsage = qDBUsage;
    this.qDefaultDatabase = qDefaultDatabase;
    this.qKeywords = qKeywords;
    this.qOwnerSeparator = qOwnerSeparator;
    this.qOwnerUsage = qOwnerUsage;
    this.qQuotePreffix = qQuotePreffix;
    this.qQuoteSuffix = qQuoteSuffix;
    this.qSpecialChars = qSpecialChars;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class DatabaseOwner {
  constructor({
    qName,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qName = qName;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class DelimiterInfo {
  constructor({
    qIsMultiple,
    qName,
    qNumber,
    qScriptCode,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qIsMultiple = qIsMultiple;
    this.qName = qName;
    this.qNumber = qNumber;
    this.qScriptCode = qScriptCode;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class DerivedFieldsInTableData {
  constructor({
    qActive,
    qDefinitionName,
    qTags,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qActive = qActive;
    this.qDefinitionName = qDefinitionName;
    this.qTags = qTags;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class DimensionList {
  constructor({
    qItems,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qItems !== void 0 && qItems !== null) {
      if (qItems.length > 0 && qItems[0] instanceof NxContainerEntry) {
        this.qItems = qItems;
      } else {
        this.qItems = qItems.map((element) => new NxContainerEntry(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class DimensionListDef {
  constructor({
    qData,
    qType,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qData !== void 0 && qData !== null) {
      if (qData instanceof JsonObject) {
        this.qData = qData;
      } else {
        this.qData = new JsonObject(qData, this.auth);
      }
    }
    this.qType = qType;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class DoReloadExParams {
  constructor({
    qDebug,
    qMode,
    qPartial,
    qReloadId,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qDebug = qDebug;
    this.qMode = qMode;
    this.qPartial = qPartial;
    this.qReloadId = qReloadId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class DoReloadExResult {
  constructor({
    qEndedWithMemoryConstraint,
    qScriptLogFile,
    qSuccess,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qEndedWithMemoryConstraint = qEndedWithMemoryConstraint;
    this.qScriptLogFile = qScriptLogFile;
    this.qSuccess = qSuccess;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Doc {
  constructor({
    qGenericId,
    qGenericType,
    qHandle,
    qType,
    ...rest
  }, session, auth) {
    this.auth = auth;
    this.session = session;
    this.qGenericId = qGenericId;
    this.qGenericType = qGenericType;
    this.qHandle = qHandle;
    this.qType = qType;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  async getField(qFieldName, qStateName) {
    const params = {};
    params.qFieldName = qFieldName;
    if (qStateName !== void 0) {
      params.qStateName = qStateName;
    }
    const rawResponse = await this.session.send({
      method: "GetField",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    const obj = new Field(response, this.session, this.auth);
    return obj;
  }
  async getFieldDescription(qFieldName) {
    const params = {};
    params.qFieldName = qFieldName;
    const rawResponse = await this.session.send({
      method: "GetFieldDescription",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    const obj = new FieldDescription(response, this.auth);
    return obj;
  }
  async getVariable(qName) {
    const params = {};
    params.qName = qName;
    const rawResponse = await this.session.send({
      method: "GetVariable",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    const obj = new GenericVariable(response, this.session, this.auth);
    return obj;
  }
  async getLooselyCoupledVector() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetLooselyCoupledVector",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qv"];
    return response;
  }
  async setLooselyCoupledVector(qv) {
    const params = {};
    params.qv = qv;
    const rawResponse = await this.session.send({
      method: "SetLooselyCoupledVector",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    return response;
  }
  async evaluate(qExpression) {
    const params = {};
    params.qExpression = qExpression;
    const rawResponse = await this.session.send({
      method: "Evaluate",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    return response;
  }
  async evaluateEx(qExpression) {
    const params = {};
    params.qExpression = qExpression;
    const rawResponse = await this.session.send({
      method: "EvaluateEx",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qValue"];
    const obj = new FieldValue(response, this.auth);
    return obj;
  }
  async clearAll(qLockedAlso, qStateName) {
    const params = {};
    if (qLockedAlso !== void 0) {
      params.qLockedAlso = qLockedAlso;
    }
    if (qStateName !== void 0) {
      params.qStateName = qStateName;
    }
    const rawResponse = await this.session.send({
      method: "ClearAll",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async lockAll(qStateName) {
    const params = {};
    if (qStateName !== void 0) {
      params.qStateName = qStateName;
    }
    const rawResponse = await this.session.send({
      method: "LockAll",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async unlockAll(qStateName) {
    const params = {};
    if (qStateName !== void 0) {
      params.qStateName = qStateName;
    }
    const rawResponse = await this.session.send({
      method: "UnlockAll",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async back() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "Back",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async forward() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "Forward",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async createVariable(qName) {
    const params = {};
    params.qName = qName;
    const rawResponse = await this.session.send({
      method: "CreateVariable",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    return response;
  }
  async removeVariable(qName) {
    const params = {};
    params.qName = qName;
    const rawResponse = await this.session.send({
      method: "RemoveVariable",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    return response;
  }
  async getLocaleInfo() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetLocaleInfo",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    const obj = new LocaleInfo(response, this.auth);
    return obj;
  }
  async getTablesAndKeys(qWindowSize, qNullSize, qCellHeight, qSyntheticMode, qIncludeSysVars, qIncludeProfiling) {
    const params = {};
    params.qWindowSize = qWindowSize;
    params.qNullSize = qNullSize;
    params.qCellHeight = qCellHeight;
    params.qSyntheticMode = qSyntheticMode;
    params.qIncludeSysVars = qIncludeSysVars;
    if (qIncludeProfiling !== void 0) {
      params.qIncludeProfiling = qIncludeProfiling;
    }
    const rawResponse = await this.session.send({
      method: "GetTablesAndKeys",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    const obj = new GetTablesAndKeysReturn(response, this.auth);
    return obj;
  }
  async getViewDlgSaveInfo() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetViewDlgSaveInfo",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    const obj = new TableViewDlgSaveInfo(response, this.auth);
    return obj;
  }
  async setViewDlgSaveInfo(qInfo) {
    const params = {};
    params.qInfo = qInfo;
    const rawResponse = await this.session.send({
      method: "SetViewDlgSaveInfo",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async getEmptyScript(qLocalizedMainSection) {
    const params = {};
    if (qLocalizedMainSection !== void 0) {
      params.qLocalizedMainSection = qLocalizedMainSection;
    }
    const rawResponse = await this.session.send({
      method: "GetEmptyScript",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    return response;
  }
  async doReload(qMode, qPartial, qDebug) {
    const params = {};
    if (qMode !== void 0) {
      params.qMode = qMode;
    }
    if (qPartial !== void 0) {
      params.qPartial = qPartial;
    }
    if (qDebug !== void 0) {
      params.qDebug = qDebug;
    }
    const rawResponse = await this.session.send({
      method: "DoReload",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    return response;
  }
  async getScriptBreakpoints() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetScriptBreakpoints",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qBreakpoints"];
    return response.map((r) => new EditorBreakpoint(r, this.auth));
  }
  async setScriptBreakpoints(qBreakpoints) {
    const params = {};
    params.qBreakpoints = qBreakpoints;
    const rawResponse = await this.session.send({
      method: "SetScriptBreakpoints",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async getScript() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetScript",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qScript"];
    return response;
  }
  async getTextMacros() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetTextMacros",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qMacros"];
    return response.map((r) => new TextMacro(r, this.auth));
  }
  async setFetchLimit(qLimit) {
    const params = {};
    params.qLimit = qLimit;
    const rawResponse = await this.session.send({
      method: "SetFetchLimit",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async doSave(qFileName) {
    const params = {};
    if (qFileName !== void 0) {
      params.qFileName = qFileName;
    }
    const rawResponse = await this.session.send({
      method: "DoSave",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async getTableData(qOffset, qRows, qSyntheticMode, qTableName) {
    const params = {};
    params.qOffset = qOffset;
    params.qRows = qRows;
    params.qSyntheticMode = qSyntheticMode;
    params.qTableName = qTableName;
    const rawResponse = await this.session.send({
      method: "GetTableData",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qData"];
    return response.map((r) => new TableRow(r, this.auth));
  }
  async getAppLayout() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetAppLayout",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qLayout"];
    const obj = new NxAppLayout(response, this.auth);
    return obj;
  }
  async setAppProperties(qProp) {
    const params = {};
    params.qProp = qProp;
    const rawResponse = await this.session.send({
      method: "SetAppProperties",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async getAppProperties() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetAppProperties",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qProp"];
    const obj = new NxAppProperties(response, this.auth);
    return obj;
  }
  async getLineage() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetLineage",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qLineage"];
    return response.map((r) => new LineageInfo(r, this.auth));
  }
  async createSessionObject(qProp) {
    const params = {};
    params.qProp = qProp;
    const rawResponse = await this.session.send({
      method: "CreateSessionObject",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    const obj = new GenericObject(response, this.session, this.auth);
    return obj;
  }
  async destroySessionObject(qId) {
    const params = {};
    params.qId = qId;
    const rawResponse = await this.session.send({
      method: "DestroySessionObject",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async createObject(qProp) {
    const params = {};
    params.qProp = qProp;
    const rawResponse = await this.session.send({
      method: "CreateObject",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    const obj = new GenericObject(response, this.session, this.auth);
    return obj;
  }
  async destroyObject(qId) {
    const params = {};
    params.qId = qId;
    const rawResponse = await this.session.send({
      method: "DestroyObject",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async getObject(qId) {
    const params = {};
    params.qId = qId;
    const rawResponse = await this.session.send({
      method: "GetObject",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    const obj = new GenericObject(response, this.session, this.auth);
    return obj;
  }
  async getObjects(qOptions) {
    const params = {};
    params.qOptions = qOptions;
    const rawResponse = await this.session.send({
      method: "GetObjects",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qList"];
    return response.map((r) => new NxContainerEntry(r, this.auth));
  }
  async getBookmarks(qOptions) {
    const params = {};
    params.qOptions = qOptions;
    const rawResponse = await this.session.send({
      method: "GetBookmarks",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qList"];
    return response.map((r) => new NxContainerEntry(r, this.auth));
  }
  async cloneObject(qId) {
    const params = {};
    params.qId = qId;
    const rawResponse = await this.session.send({
      method: "CloneObject",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qCloneId"];
    return response;
  }
  async createDraft(qId) {
    const params = {};
    params.qId = qId;
    const rawResponse = await this.session.send({
      method: "CreateDraft",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qDraftId"];
    return response;
  }
  async commitDraft(qId) {
    const params = {};
    params.qId = qId;
    const rawResponse = await this.session.send({
      method: "CommitDraft",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async destroyDraft(qId, qSourceId) {
    const params = {};
    params.qId = qId;
    params.qSourceId = qSourceId;
    const rawResponse = await this.session.send({
      method: "DestroyDraft",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async undo() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "Undo",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async redo() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "Redo",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async clearUndoBuffer() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "ClearUndoBuffer",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async createDimension(qProp) {
    const params = {};
    params.qProp = qProp;
    const rawResponse = await this.session.send({
      method: "CreateDimension",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    const obj = new GenericDimension(response, this.session, this.auth);
    return obj;
  }
  async destroyDimension(qId) {
    const params = {};
    params.qId = qId;
    const rawResponse = await this.session.send({
      method: "DestroyDimension",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async getDimension(qId) {
    const params = {};
    params.qId = qId;
    const rawResponse = await this.session.send({
      method: "GetDimension",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    const obj = new GenericDimension(response, this.session, this.auth);
    return obj;
  }
  async cloneDimension(qId) {
    const params = {};
    params.qId = qId;
    const rawResponse = await this.session.send({
      method: "CloneDimension",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qCloneId"];
    return response;
  }
  async createMeasure(qProp) {
    const params = {};
    params.qProp = qProp;
    const rawResponse = await this.session.send({
      method: "CreateMeasure",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    const obj = new GenericMeasure(response, this.session, this.auth);
    return obj;
  }
  async destroyMeasure(qId) {
    const params = {};
    params.qId = qId;
    const rawResponse = await this.session.send({
      method: "DestroyMeasure",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async getMeasure(qId) {
    const params = {};
    params.qId = qId;
    const rawResponse = await this.session.send({
      method: "GetMeasure",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    const obj = new GenericMeasure(response, this.session, this.auth);
    return obj;
  }
  async cloneMeasure(qId) {
    const params = {};
    params.qId = qId;
    const rawResponse = await this.session.send({
      method: "CloneMeasure",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qCloneId"];
    return response;
  }
  async createSessionVariable(qProp) {
    const params = {};
    params.qProp = qProp;
    const rawResponse = await this.session.send({
      method: "CreateSessionVariable",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    const obj = new GenericVariable(response, this.session, this.auth);
    return obj;
  }
  async destroySessionVariable(qId) {
    const params = {};
    params.qId = qId;
    const rawResponse = await this.session.send({
      method: "DestroySessionVariable",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async createVariableEx(qProp) {
    const params = {};
    params.qProp = qProp;
    const rawResponse = await this.session.send({
      method: "CreateVariableEx",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    const obj = new GenericVariable(response, this.session, this.auth);
    return obj;
  }
  async destroyVariableById(qId) {
    const params = {};
    params.qId = qId;
    const rawResponse = await this.session.send({
      method: "DestroyVariableById",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async destroyVariableByName(qName) {
    const params = {};
    params.qName = qName;
    const rawResponse = await this.session.send({
      method: "DestroyVariableByName",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async getVariableById(qId) {
    const params = {};
    params.qId = qId;
    const rawResponse = await this.session.send({
      method: "GetVariableById",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    const obj = new GenericVariable(response, this.session, this.auth);
    return obj;
  }
  async getVariableByName(qName) {
    const params = {};
    params.qName = qName;
    const rawResponse = await this.session.send({
      method: "GetVariableByName",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    const obj = new GenericVariable(response, this.session, this.auth);
    return obj;
  }
  async checkExpression(qExpr, qLabels) {
    const params = {};
    params.qExpr = qExpr;
    if (qLabels !== void 0) {
      params.qLabels = qLabels;
    }
    const rawResponse = await this.session.send({
      method: "CheckExpression",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    const obj = new CheckExpressionReturn(response, this.auth);
    return obj;
  }
  async checkNumberOrExpression(qExpr) {
    const params = {};
    params.qExpr = qExpr;
    const rawResponse = await this.session.send({
      method: "CheckNumberOrExpression",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    const obj = new CheckNumberOrExpressionReturn(response, this.auth);
    return obj;
  }
  async addAlternateState(qStateName) {
    const params = {};
    params.qStateName = qStateName;
    const rawResponse = await this.session.send({
      method: "AddAlternateState",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async removeAlternateState(qStateName) {
    const params = {};
    params.qStateName = qStateName;
    const rawResponse = await this.session.send({
      method: "RemoveAlternateState",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async addSessionAlternateState(qStateName, qSourceStateName) {
    const params = {};
    params.qStateName = qStateName;
    if (qSourceStateName !== void 0) {
      params.qSourceStateName = qSourceStateName;
    }
    const rawResponse = await this.session.send({
      method: "AddSessionAlternateState",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async removeSessionAlternateState(qStateName) {
    const params = {};
    params.qStateName = qStateName;
    const rawResponse = await this.session.send({
      method: "RemoveSessionAlternateState",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async createBookmark(qProp) {
    const params = {};
    params.qProp = qProp;
    const rawResponse = await this.session.send({
      method: "CreateBookmark",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    const obj = new GenericBookmark(response, this.session, this.auth);
    return obj;
  }
  async destroyBookmark(qId) {
    const params = {};
    params.qId = qId;
    const rawResponse = await this.session.send({
      method: "DestroyBookmark",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async getBookmark(qId) {
    const params = {};
    params.qId = qId;
    const rawResponse = await this.session.send({
      method: "GetBookmark",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    const obj = new GenericBookmark(response, this.session, this.auth);
    return obj;
  }
  async applyBookmark(qId) {
    const params = {};
    params.qId = qId;
    const rawResponse = await this.session.send({
      method: "ApplyBookmark",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async applyAndVerifyBookmark(qId) {
    const params = {};
    params.qId = qId;
    const rawResponse = await this.session.send({
      method: "ApplyAndVerifyBookmark",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qResult"];
    const obj = new BookmarkApplyAndVerifyResult(response, this.auth);
    return obj;
  }
  async cloneBookmark(qId) {
    const params = {};
    params.qId = qId;
    const rawResponse = await this.session.send({
      method: "CloneBookmark",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qCloneId"];
    return response;
  }
  async addFieldFromExpression(qName, qExpr) {
    const params = {};
    params.qName = qName;
    params.qExpr = qExpr;
    const rawResponse = await this.session.send({
      method: "AddFieldFromExpression",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async getFieldOnTheFlyByName(qReadableName) {
    const params = {};
    params.qReadableName = qReadableName;
    const rawResponse = await this.session.send({
      method: "GetFieldOnTheFlyByName",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qName"];
    return response;
  }
  async getAllInfos() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetAllInfos",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qInfos"];
    return response.map((r) => new NxInfo(r, this.auth));
  }
  async resume() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "Resume",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async abortModal(qAccept) {
    const params = {};
    params.qAccept = qAccept;
    const rawResponse = await this.session.send({
      method: "AbortModal",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async getMatchingFields(qTags, qMatchingFieldMode) {
    const params = {};
    params.qTags = qTags;
    if (qMatchingFieldMode !== void 0) {
      params.qMatchingFieldMode = qMatchingFieldMode;
    }
    const rawResponse = await this.session.send({
      method: "GetMatchingFields",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qFieldNames"];
    return response.map((r) => new NxMatchingFieldInfo(r, this.auth));
  }
  async findMatchingFields(qFieldName, qTags) {
    const params = {};
    params.qFieldName = qFieldName;
    params.qTags = qTags;
    const rawResponse = await this.session.send({
      method: "FindMatchingFields",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qFieldNames"];
    return response.map((r) => new NxMatchingFieldInfo(r, this.auth));
  }
  async scramble(qFieldName) {
    const params = {};
    params.qFieldName = qFieldName;
    const rawResponse = await this.session.send({
      method: "Scramble",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async saveObjects() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "SaveObjects",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async getAssociationScores(qTable1, qTable2) {
    const params = {};
    params.qTable1 = qTable1;
    params.qTable2 = qTable2;
    const rawResponse = await this.session.send({
      method: "GetAssociationScores",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qScore"];
    return response.map((r) => new AssociationScore(r, this.auth));
  }
  async getMediaList() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetMediaList",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    const obj = new GetMediaListReturn(response, this.auth);
    return obj;
  }
  async getContentLibraries() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetContentLibraries",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qList"];
    const obj = new ContentLibraryList(response, this.auth);
    return obj;
  }
  async getLibraryContent(qName) {
    const params = {};
    params.qName = qName;
    const rawResponse = await this.session.send({
      method: "GetLibraryContent",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qList"];
    const obj = new StaticContentList(response, this.auth);
    return obj;
  }
  async doReloadEx(qParams) {
    const params = {};
    if (qParams !== void 0) {
      params.qParams = qParams;
    }
    const rawResponse = await this.session.send({
      method: "DoReloadEx",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qResult"];
    const obj = new DoReloadExResult(response, this.auth);
    return obj;
  }
  async backCount() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "BackCount",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    return response;
  }
  async forwardCount() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "ForwardCount",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    return response;
  }
  async exportReducedData(qOptions) {
    const params = {};
    if (qOptions !== void 0) {
      params.qOptions = qOptions;
    }
    const rawResponse = await this.session.send({
      method: "ExportReducedData",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qDownloadInfo"];
    const obj = new NxDownloadInfo(response, this.auth);
    return obj;
  }
  async getSetAnalysis(qStateName, qBookmarkId) {
    const params = {};
    if (qStateName !== void 0) {
      params.qStateName = qStateName;
    }
    if (qBookmarkId !== void 0) {
      params.qBookmarkId = qBookmarkId;
    }
    const rawResponse = await this.session.send({
      method: "GetSetAnalysis",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSetExpression"];
    return response;
  }
  async setScript(qScript) {
    const params = {};
    params.qScript = qScript;
    const rawResponse = await this.session.send({
      method: "SetScript",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async checkScriptSyntax() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "CheckScriptSyntax",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qErrors"];
    return response.map((r) => new ScriptSyntaxError(r, this.auth));
  }
  async getFavoriteVariables() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetFavoriteVariables",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qNames"];
    return response;
  }
  async setFavoriteVariables(qNames) {
    const params = {};
    params.qNames = qNames;
    const rawResponse = await this.session.send({
      method: "SetFavoriteVariables",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async getIncludeFileContent(qPath) {
    const params = {};
    params.qPath = qPath;
    const rawResponse = await this.session.send({
      method: "GetIncludeFileContent",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qContent"];
    return response;
  }
  async createConnection(qConnection) {
    const params = {};
    params.qConnection = qConnection;
    const rawResponse = await this.session.send({
      method: "CreateConnection",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qConnectionId"];
    return response;
  }
  async modifyConnection(qConnectionId, qConnection, qOverrideCredentials) {
    const params = {};
    params.qConnectionId = qConnectionId;
    params.qConnection = qConnection;
    if (qOverrideCredentials !== void 0) {
      params.qOverrideCredentials = qOverrideCredentials;
    }
    const rawResponse = await this.session.send({
      method: "ModifyConnection",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async deleteConnection(qConnectionId) {
    const params = {};
    params.qConnectionId = qConnectionId;
    const rawResponse = await this.session.send({
      method: "DeleteConnection",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async getConnection(qConnectionId) {
    const params = {};
    params.qConnectionId = qConnectionId;
    const rawResponse = await this.session.send({
      method: "GetConnection",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qConnection"];
    const obj = new Connection(response, this.auth);
    return obj;
  }
  async getConnections() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetConnections",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qConnections"];
    return response.map((r) => new Connection(r, this.auth));
  }
  async getDatabaseInfo(qConnectionId) {
    const params = {};
    params.qConnectionId = qConnectionId;
    const rawResponse = await this.session.send({
      method: "GetDatabaseInfo",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qInfo"];
    const obj = new DatabaseInfo(response, this.auth);
    return obj;
  }
  async getDatabases(qConnectionId) {
    const params = {};
    params.qConnectionId = qConnectionId;
    const rawResponse = await this.session.send({
      method: "GetDatabases",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qDatabases"];
    return response.map((r) => new Database(r, this.auth));
  }
  async getDatabaseOwners(qConnectionId, qDatabase) {
    const params = {};
    params.qConnectionId = qConnectionId;
    if (qDatabase !== void 0) {
      params.qDatabase = qDatabase;
    }
    const rawResponse = await this.session.send({
      method: "GetDatabaseOwners",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qOwners"];
    return response.map((r) => new DatabaseOwner(r, this.auth));
  }
  async getDatabaseTables(qConnectionId, qDatabase, qOwner) {
    const params = {};
    params.qConnectionId = qConnectionId;
    if (qDatabase !== void 0) {
      params.qDatabase = qDatabase;
    }
    if (qOwner !== void 0) {
      params.qOwner = qOwner;
    }
    const rawResponse = await this.session.send({
      method: "GetDatabaseTables",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qTables"];
    return response.map((r) => new DataTable(r, this.auth));
  }
  async getDatabaseTableFields(qConnectionId, qTable, qDatabase, qOwner) {
    const params = {};
    params.qConnectionId = qConnectionId;
    params.qTable = qTable;
    if (qDatabase !== void 0) {
      params.qDatabase = qDatabase;
    }
    if (qOwner !== void 0) {
      params.qOwner = qOwner;
    }
    const rawResponse = await this.session.send({
      method: "GetDatabaseTableFields",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qFields"];
    return response.map((r) => new DataField(r, this.auth));
  }
  async getDatabaseTablePreview(qConnectionId, qTable, qDatabase, qOwner, qConditions) {
    const params = {};
    params.qConnectionId = qConnectionId;
    params.qTable = qTable;
    if (qDatabase !== void 0) {
      params.qDatabase = qDatabase;
    }
    if (qOwner !== void 0) {
      params.qOwner = qOwner;
    }
    if (qConditions !== void 0) {
      params.qConditions = qConditions;
    }
    const rawResponse = await this.session.send({
      method: "GetDatabaseTablePreview",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    const obj = new GetDatabaseTablePreviewReturn(response, this.auth);
    return obj;
  }
  async getFolderItemsForConnection(qConnectionId, qRelativePath) {
    const params = {};
    params.qConnectionId = qConnectionId;
    if (qRelativePath !== void 0) {
      params.qRelativePath = qRelativePath;
    }
    const rawResponse = await this.session.send({
      method: "GetFolderItemsForConnection",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qFolderItems"];
    return response.map((r) => new FolderItem(r, this.auth));
  }
  async guessFileType(qConnectionId, qRelativePath) {
    const params = {};
    params.qConnectionId = qConnectionId;
    if (qRelativePath !== void 0) {
      params.qRelativePath = qRelativePath;
    }
    const rawResponse = await this.session.send({
      method: "GuessFileType",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qDataFormat"];
    const obj = new FileDataFormat(response, this.auth);
    return obj;
  }
  async getFileTables(qConnectionId, qDataFormat, qRelativePath) {
    const params = {};
    params.qConnectionId = qConnectionId;
    params.qDataFormat = qDataFormat;
    if (qRelativePath !== void 0) {
      params.qRelativePath = qRelativePath;
    }
    const rawResponse = await this.session.send({
      method: "GetFileTables",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qTables"];
    return response.map((r) => new DataTable(r, this.auth));
  }
  async getFileTableFields(qConnectionId, qDataFormat, qTable, qRelativePath) {
    const params = {};
    params.qConnectionId = qConnectionId;
    params.qDataFormat = qDataFormat;
    params.qTable = qTable;
    if (qRelativePath !== void 0) {
      params.qRelativePath = qRelativePath;
    }
    const rawResponse = await this.session.send({
      method: "GetFileTableFields",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    const obj = new GetFileTableFieldsReturn(response, this.auth);
    return obj;
  }
  async getFileTablePreview(qConnectionId, qDataFormat, qTable, qRelativePath) {
    const params = {};
    params.qConnectionId = qConnectionId;
    params.qDataFormat = qDataFormat;
    params.qTable = qTable;
    if (qRelativePath !== void 0) {
      params.qRelativePath = qRelativePath;
    }
    const rawResponse = await this.session.send({
      method: "GetFileTablePreview",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    const obj = new GetFileTablePreviewReturn(response, this.auth);
    return obj;
  }
  async getFileTablesEx(qConnectionId, qDataFormat, qRelativePath) {
    const params = {};
    params.qConnectionId = qConnectionId;
    params.qDataFormat = qDataFormat;
    if (qRelativePath !== void 0) {
      params.qRelativePath = qRelativePath;
    }
    const rawResponse = await this.session.send({
      method: "GetFileTablesEx",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qTables"];
    return response.map((r) => new DataTableEx(r, this.auth));
  }
  async sendGenericCommandToCustomConnector(qProvider, qCommand, qMethod, qParameters, qAppendConnection) {
    const params = {};
    params.qProvider = qProvider;
    params.qCommand = qCommand;
    params.qMethod = qMethod;
    params.qParameters = qParameters;
    params.qAppendConnection = qAppendConnection;
    const rawResponse = await this.session.send({
      method: "SendGenericCommandToCustomConnector",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qResult"];
    return response;
  }
  async searchSuggest(qOptions, qTerms) {
    const params = {};
    params.qOptions = qOptions;
    params.qTerms = qTerms;
    const rawResponse = await this.session.send({
      method: "SearchSuggest",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qResult"];
    const obj = new SearchSuggestionResult(response, this.auth);
    return obj;
  }
  async searchAssociations(qOptions, qTerms, qPage) {
    const params = {};
    params.qOptions = qOptions;
    params.qTerms = qTerms;
    params.qPage = qPage;
    const rawResponse = await this.session.send({
      method: "SearchAssociations",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qResults"];
    const obj = new SearchAssociationResult(response, this.auth);
    return obj;
  }
  async selectAssociations(qOptions, qTerms, qMatchIx, qSoftLock) {
    const params = {};
    params.qOptions = qOptions;
    params.qTerms = qTerms;
    params.qMatchIx = qMatchIx;
    if (qSoftLock !== void 0) {
      params.qSoftLock = qSoftLock;
    }
    const rawResponse = await this.session.send({
      method: "SelectAssociations",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async searchResults(qOptions, qTerms, qPage) {
    const params = {};
    params.qOptions = qOptions;
    params.qTerms = qTerms;
    params.qPage = qPage;
    const rawResponse = await this.session.send({
      method: "SearchResults",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qResult"];
    const obj = new SearchResult(response, this.auth);
    return obj;
  }
  async searchObjects(qOptions, qTerms, qPage) {
    const params = {};
    params.qOptions = qOptions;
    params.qTerms = qTerms;
    params.qPage = qPage;
    const rawResponse = await this.session.send({
      method: "SearchObjects",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qResult"];
    const obj = new SearchResult(response, this.auth);
    return obj;
  }
  async getFieldAndColumnSamples(qFieldsOrColumnsWithWildcards, qMaxNumberOfValues, qRandSeed) {
    const params = {};
    params.qFieldsOrColumnsWithWildcards = qFieldsOrColumnsWithWildcards;
    params.qMaxNumberOfValues = qMaxNumberOfValues;
    if (qRandSeed !== void 0) {
      params.qRandSeed = qRandSeed;
    }
    const rawResponse = await this.session.send({
      method: "GetFieldAndColumnSamples",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qResult"];
    return response.map((r) => new SampleResult(r, this.auth));
  }
  async getScriptEx() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetScriptEx",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qScript"];
    const obj = new AppScript(response, this.auth);
    return obj;
  }
  async getVariables(qListDef) {
    const params = {};
    params.qListDef = qListDef;
    const rawResponse = await this.session.send({
      method: "GetVariables",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qList"];
    return response.map((r) => new NxVariableListItem(r, this.auth));
  }
  async expandExpression(qExpression) {
    const params = {};
    params.qExpression = qExpression;
    const rawResponse = await this.session.send({
      method: "ExpandExpression",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qExpandedExpression"];
    return response;
  }
  async destroySessionVariableById(qId) {
    const params = {};
    params.qId = qId;
    const rawResponse = await this.session.send({
      method: "DestroySessionVariableById",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async destroySessionVariableByName(qName) {
    const params = {};
    params.qName = qName;
    const rawResponse = await this.session.send({
      method: "DestroySessionVariableByName",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async createBookmarkEx(qProp, qObjectIdsToPatch) {
    const params = {};
    params.qProp = qProp;
    if (qObjectIdsToPatch !== void 0) {
      params.qObjectIdsToPatch = qObjectIdsToPatch;
    }
    const rawResponse = await this.session.send({
      method: "CreateBookmarkEx",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    const obj = new GenericBookmark(response, this.session, this.auth);
    return obj;
  }
  async saveAs(qNewAppName) {
    const params = {};
    params.qNewAppName = qNewAppName;
    const rawResponse = await this.session.send({
      method: "SaveAs",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qNewAppId"];
    return response;
  }
  async storeTempSelectionState(qTTLOfTempState) {
    const params = {};
    if (qTTLOfTempState !== void 0) {
      params.qTTLOfTempState = qTTLOfTempState;
    }
    const rawResponse = await this.session.send({
      method: "StoreTempSelectionState",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    const obj = new StoreTempSelectionStateReturn(response, this.auth);
    return obj;
  }
  async restoreTempSelectionState(qId) {
    const params = {};
    params.qId = qId;
    const rawResponse = await this.session.send({
      method: "RestoreTempSelectionState",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    return response;
  }
  async changeSessionAppOwner(qNewOwnerId) {
    const params = {};
    params.qNewOwnerId = qNewOwnerId;
    const rawResponse = await this.session.send({
      method: "ChangeSessionAppOwner",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async changeSessionAppSpace(qSpaceId) {
    const params = {};
    params.qSpaceId = qSpaceId;
    const rawResponse = await this.session.send({
      method: "ChangeSessionAppSpace",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async getTableProfileData(qTableName) {
    const params = {};
    params.qTableName = qTableName;
    const rawResponse = await this.session.send({
      method: "GetTableProfileData",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qProfiling"];
    const obj = new TableProfilingData(response, this.auth);
    return obj;
  }
  async getMeasureWithLabel(qLabel) {
    const params = {};
    params.qLabel = qLabel;
    const rawResponse = await this.session.send({
      method: "GetMeasureWithLabel",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    const obj = new GenericMeasure(response, this.session, this.auth);
    return obj;
  }
  async searchValues(qOptions, qTerms, qPage) {
    const params = {};
    params.qOptions = qOptions;
    params.qTerms = qTerms;
    params.qPage = qPage;
    const rawResponse = await this.session.send({
      method: "SearchValues",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qResult"];
    const obj = new SearchValueResult(response, this.auth);
    return obj;
  }
  async getFieldsFromExpression(qExpr) {
    const params = {};
    params.qExpr = qExpr;
    const rawResponse = await this.session.send({
      method: "GetFieldsFromExpression",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qFieldNames"];
    return response;
  }
  async getFieldsResourceIds(qFieldNames) {
    const params = {};
    params.qFieldNames = qFieldNames;
    const rawResponse = await this.session.send({
      method: "GetFieldsResourceIds",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qFields"];
    return response.map((r) => new NxFieldResourceId(r, this.auth));
  }
  async getExpressionBNF() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetExpressionBNF",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    const obj = new GetExpressionBNFReturn(response, this.auth);
    return obj;
  }
  async getExpressionBNFHash() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetExpressionBNFHash",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qBnfHash"];
    return response;
  }
  async setProhibitBinaryLoad(qProhibit) {
    const params = {};
    params.qProhibit = qProhibit;
    const rawResponse = await this.session.send({
      method: "SetProhibitBinaryLoad",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async transformApp(qDstParameters) {
    const params = {};
    params.qDstParameters = qDstParameters;
    const rawResponse = await this.session.send({
      method: "TransformApp",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qResult"];
    const obj = new TransformAppResult(response, this.auth);
    return obj;
  }
  async createTemporaryBookmark(qOptions, qObjectIdsToPatch) {
    const params = {};
    params.qOptions = qOptions;
    if (qObjectIdsToPatch !== void 0) {
      params.qObjectIdsToPatch = qObjectIdsToPatch;
    }
    const rawResponse = await this.session.send({
      method: "CreateTemporaryBookmark",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    const obj = new CreateTemporaryBookmarkReturn(response, this.auth);
    return obj;
  }
  async applyTemporaryBookmark(qId) {
    const params = {};
    params.qId = qId;
    const rawResponse = await this.session.send({
      method: "ApplyTemporaryBookmark",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    return response;
  }
  async commitScript(qCommitMessage) {
    const params = {};
    if (qCommitMessage !== void 0) {
      params.qCommitMessage = qCommitMessage;
    }
    const rawResponse = await this.session.send({
      method: "CommitScript",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async open() {
    this.session = await this.auth.rpc(this?.attributes.id);
    this.global = new Global({ qType: "global", qHandle: -1 }, this.session, this.auth);
    await this.session.open();
    const app = await this.session.send({
      method: "OpenDoc",
      handle: -1,
      params: [this.attributes.id]
    });
    this.qHandle = app.result.qReturn.qHandle;
    this.qGenericId = app.result.qReturn.qGenericId;
    this.qType = app.result.qReturn.qType;
    return this.session;
  }
  async close() {
    return this.session.close();
  }
}
class DocListEntry {
  constructor({
    qConnectedUsers,
    qDocId,
    qDocName,
    qFileSize,
    qFileTime,
    qHasSectionAccess,
    qIsDirectQueryMode,
    qLastReloadTime,
    qMeta,
    qReadOnly,
    qThumbnail,
    qTitle,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qConnectedUsers = qConnectedUsers;
    this.qDocId = qDocId;
    this.qDocName = qDocName;
    this.qFileSize = qFileSize;
    this.qFileTime = qFileTime;
    this.qHasSectionAccess = qHasSectionAccess;
    this.qIsDirectQueryMode = qIsDirectQueryMode;
    this.qLastReloadTime = qLastReloadTime;
    if (qMeta !== void 0 && qMeta !== null) {
      if (qMeta instanceof NxMeta) {
        this.qMeta = qMeta;
      } else {
        this.qMeta = new NxMeta(qMeta, this.auth);
      }
    }
    this.qReadOnly = qReadOnly;
    if (qThumbnail !== void 0 && qThumbnail !== null) {
      if (qThumbnail instanceof StaticContentUrl) {
        this.qThumbnail = qThumbnail;
      } else {
        this.qThumbnail = new StaticContentUrl(qThumbnail, this.auth);
      }
    }
    this.qTitle = qTitle;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class DriveInfo {
  constructor({
    qDrive,
    qName,
    qType,
    qTypeIdentifier,
    qUnnamedDrive,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qDrive = qDrive;
    this.qName = qName;
    this.qType = qType;
    this.qTypeIdentifier = qTypeIdentifier;
    this.qUnnamedDrive = qUnnamedDrive;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class DriveType {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class EditorBreakpoint {
  constructor({
    qEnabled,
    qbufferName,
    qlineIx,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qEnabled = qEnabled;
    this.qbufferName = qbufferName;
    this.qlineIx = qlineIx;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class EmbeddedSnapshot {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class EmbeddedSnapshotDef {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ErrorData {
  constructor({
    qErrorDataCode,
    qErrorString,
    qLine,
    qLineEnd,
    qMessage,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qErrorDataCode = qErrorDataCode;
    this.qErrorString = qErrorString;
    this.qLine = qLine;
    this.qLineEnd = qLineEnd;
    if (qMessage !== void 0 && qMessage !== null) {
      if (qMessage instanceof ProgressMessage) {
        this.qMessage = qMessage;
      } else {
        this.qMessage = new ProgressMessage(qMessage, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ErrorDataCode {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ExpansionData {
  constructor({
    qExcludeList,
    qPos,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qExcludeList = qExcludeList;
    if (qPos !== void 0 && qPos !== null) {
      if (qPos instanceof PositionMark) {
        this.qPos = qPos;
      } else {
        this.qPos = new PositionMark(qPos, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ExportDataReturn {
  constructor({
    qUrl,
    qWarnings,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qUrl = qUrl;
    this.qWarnings = qWarnings;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ExtendedLayoutBookmarkData {
  constructor({
    qActive,
    qActiveContainerChildObjectId,
    qDimensionGroupPos,
    qExpansionInfo,
    qExpressionGroupPos,
    qExtendedPivotState,
    qGraphMode,
    qId,
    qLeftCollapsed,
    qScrollPos,
    qShowMode,
    qSortData,
    qTopCollapsed,
    qUseGraphMode,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qActive = qActive;
    this.qActiveContainerChildObjectId = qActiveContainerChildObjectId;
    if (qDimensionGroupPos !== void 0 && qDimensionGroupPos !== null) {
      if (qDimensionGroupPos.length > 0 && qDimensionGroupPos[0] instanceof GroupStateInfo) {
        this.qDimensionGroupPos = qDimensionGroupPos;
      } else {
        this.qDimensionGroupPos = qDimensionGroupPos.map((element) => new GroupStateInfo(element, this.auth));
      }
    }
    if (qExpansionInfo !== void 0 && qExpansionInfo !== null) {
      if (qExpansionInfo.length > 0 && qExpansionInfo[0] instanceof ExpansionData) {
        this.qExpansionInfo = qExpansionInfo;
      } else {
        this.qExpansionInfo = qExpansionInfo.map((element) => new ExpansionData(element, this.auth));
      }
    }
    if (qExpressionGroupPos !== void 0 && qExpressionGroupPos !== null) {
      if (qExpressionGroupPos.length > 0 && qExpressionGroupPos[0] instanceof GroupStateInfo) {
        this.qExpressionGroupPos = qExpressionGroupPos;
      } else {
        this.qExpressionGroupPos = qExpressionGroupPos.map((element) => new GroupStateInfo(element, this.auth));
      }
    }
    if (qExtendedPivotState !== void 0 && qExtendedPivotState !== null) {
      if (qExtendedPivotState instanceof ExtendedPivotStateData) {
        this.qExtendedPivotState = qExtendedPivotState;
      } else {
        this.qExtendedPivotState = new ExtendedPivotStateData(qExtendedPivotState, this.auth);
      }
    }
    this.qGraphMode = qGraphMode;
    this.qId = qId;
    this.qLeftCollapsed = qLeftCollapsed;
    if (qScrollPos !== void 0 && qScrollPos !== null) {
      if (qScrollPos instanceof ScrollPosition) {
        this.qScrollPos = qScrollPos;
      } else {
        this.qScrollPos = new ScrollPosition(qScrollPos, this.auth);
      }
    }
    this.qShowMode = qShowMode;
    if (qSortData !== void 0 && qSortData !== null) {
      if (qSortData.length > 0 && qSortData[0] instanceof InterFieldSortData) {
        this.qSortData = qSortData;
      } else {
        this.qSortData = qSortData.map((element) => new InterFieldSortData(element, this.auth));
      }
    }
    this.qTopCollapsed = qTopCollapsed;
    this.qUseGraphMode = qUseGraphMode;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ExtendedPivotStateData {
  constructor({
    qDimensionNames,
    qEnableConditions,
    qExpressionPosition,
    qNumberOfLeftDimensions,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qDimensionNames = qDimensionNames;
    this.qEnableConditions = qEnableConditions;
    this.qExpressionPosition = qExpressionPosition;
    this.qNumberOfLeftDimensions = qNumberOfLeftDimensions;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ExtensionList {
  constructor({
    qItems,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qItems = qItems;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ExtensionListDef {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Field {
  constructor({
    qGenericId,
    qGenericType,
    qHandle,
    qType,
    ...rest
  }, session, auth) {
    this.auth = auth;
    this.session = session;
    this.qGenericId = qGenericId;
    this.qGenericType = qGenericType;
    this.qHandle = qHandle;
    this.qType = qType;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  async getCardinal() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetCardinal",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    return response;
  }
  async getAndMode() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetAndMode",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    return response;
  }
  async selectValues(qFieldValues, qToggleMode, qSoftLock) {
    const params = {};
    params.qFieldValues = qFieldValues;
    if (qToggleMode !== void 0) {
      params.qToggleMode = qToggleMode;
    }
    if (qSoftLock !== void 0) {
      params.qSoftLock = qSoftLock;
    }
    const rawResponse = await this.session.send({
      method: "SelectValues",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    return response;
  }
  async select(qMatch, qSoftLock, qExcludedValuesMode) {
    const params = {};
    params.qMatch = qMatch;
    if (qSoftLock !== void 0) {
      params.qSoftLock = qSoftLock;
    }
    if (qExcludedValuesMode !== void 0) {
      params.qExcludedValuesMode = qExcludedValuesMode;
    }
    const rawResponse = await this.session.send({
      method: "Select",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    return response;
  }
  async toggleSelect(qMatch, qSoftLock, qExcludedValuesMode) {
    const params = {};
    params.qMatch = qMatch;
    if (qSoftLock !== void 0) {
      params.qSoftLock = qSoftLock;
    }
    if (qExcludedValuesMode !== void 0) {
      params.qExcludedValuesMode = qExcludedValuesMode;
    }
    const rawResponse = await this.session.send({
      method: "ToggleSelect",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    return response;
  }
  async clearAllButThis(qSoftLock) {
    const params = {};
    if (qSoftLock !== void 0) {
      params.qSoftLock = qSoftLock;
    }
    const rawResponse = await this.session.send({
      method: "ClearAllButThis",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    return response;
  }
  async selectPossible(qSoftLock) {
    const params = {};
    if (qSoftLock !== void 0) {
      params.qSoftLock = qSoftLock;
    }
    const rawResponse = await this.session.send({
      method: "SelectPossible",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    return response;
  }
  async selectExcluded(qSoftLock) {
    const params = {};
    if (qSoftLock !== void 0) {
      params.qSoftLock = qSoftLock;
    }
    const rawResponse = await this.session.send({
      method: "SelectExcluded",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    return response;
  }
  async selectAll(qSoftLock) {
    const params = {};
    if (qSoftLock !== void 0) {
      params.qSoftLock = qSoftLock;
    }
    const rawResponse = await this.session.send({
      method: "SelectAll",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    return response;
  }
  async lock() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "Lock",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    return response;
  }
  async unlock() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "Unlock",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    return response;
  }
  async getNxProperties() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetNxProperties",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qProperties"];
    const obj = new NxFieldProperties(response, this.auth);
    return obj;
  }
  async setNxProperties(qProperties) {
    const params = {};
    params.qProperties = qProperties;
    const rawResponse = await this.session.send({
      method: "SetNxProperties",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async setAndMode(qAndMode) {
    const params = {};
    params.qAndMode = qAndMode;
    const rawResponse = await this.session.send({
      method: "SetAndMode",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async selectAlternative(qSoftLock) {
    const params = {};
    if (qSoftLock !== void 0) {
      params.qSoftLock = qSoftLock;
    }
    const rawResponse = await this.session.send({
      method: "SelectAlternative",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    return response;
  }
  async lowLevelSelect(qValues, qToggleMode, qSoftLock) {
    const params = {};
    params.qValues = qValues;
    params.qToggleMode = qToggleMode;
    if (qSoftLock !== void 0) {
      params.qSoftLock = qSoftLock;
    }
    const rawResponse = await this.session.send({
      method: "LowLevelSelect",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    return response;
  }
  async clear() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "Clear",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    return response;
  }
}
class FieldAttrType {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class FieldAttributes {
  constructor({
    qDec,
    qFmt,
    qThou,
    qType,
    qUseThou,
    qnDec,
    ...rest
  }, auth) {
    this.qnDec = 10;
    this.auth = auth;
    this.qDec = qDec;
    this.qFmt = qFmt;
    this.qThou = qThou;
    this.qType = qType;
    this.qUseThou = qUseThou;
    this.qnDec = qnDec;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class FieldDefEx {
  constructor({
    qName,
    qType,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qName = qName;
    this.qType = qType;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class FieldDescription {
  constructor({
    qAlwaysOneSelected,
    qAndMode,
    qByteSize,
    qCardinal,
    qComment,
    qDistinctOnly,
    qHasInfo_OBSOLETE,
    qInternalNumber,
    qIsDefinitionOnly,
    qIsHidden,
    qIsLocked,
    qIsNumeric,
    qIsSemantic,
    qIsSystem,
    qName,
    qPossibleCount_OBSOLETE,
    qSrcTables,
    qTags,
    qTotalCount,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qAlwaysOneSelected = qAlwaysOneSelected;
    this.qAndMode = qAndMode;
    this.qByteSize = qByteSize;
    this.qCardinal = qCardinal;
    this.qComment = qComment;
    this.qDistinctOnly = qDistinctOnly;
    this.qHasInfo_OBSOLETE = qHasInfo_OBSOLETE;
    this.qInternalNumber = qInternalNumber;
    this.qIsDefinitionOnly = qIsDefinitionOnly;
    this.qIsHidden = qIsHidden;
    this.qIsLocked = qIsLocked;
    this.qIsNumeric = qIsNumeric;
    this.qIsSemantic = qIsSemantic;
    this.qIsSystem = qIsSystem;
    this.qName = qName;
    this.qPossibleCount_OBSOLETE = qPossibleCount_OBSOLETE;
    this.qSrcTables = qSrcTables;
    this.qTags = qTags;
    this.qTotalCount = qTotalCount;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class FieldInTableData {
  constructor({
    qComment,
    qDerivedFields,
    qHasDuplicates,
    qHasNull,
    qHasWild,
    qInformationDensity,
    qIsFieldOnTheFly,
    qIsSynthetic,
    qKeyType,
    qName,
    qOriginalFields,
    qPresent,
    qReadableName,
    qSubsetRatio,
    qTags,
    qnNonNulls,
    qnPresentDistinctValues,
    qnRows,
    qnTotalDistinctValues,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qComment = qComment;
    if (qDerivedFields !== void 0 && qDerivedFields !== null) {
      if (qDerivedFields.length > 0 && qDerivedFields[0] instanceof DerivedFieldsInTableData) {
        this.qDerivedFields = qDerivedFields;
      } else {
        this.qDerivedFields = qDerivedFields.map((element) => new DerivedFieldsInTableData(element, this.auth));
      }
    }
    this.qHasDuplicates = qHasDuplicates;
    this.qHasNull = qHasNull;
    this.qHasWild = qHasWild;
    this.qInformationDensity = qInformationDensity;
    this.qIsFieldOnTheFly = qIsFieldOnTheFly;
    this.qIsSynthetic = qIsSynthetic;
    this.qKeyType = qKeyType;
    this.qName = qName;
    this.qOriginalFields = qOriginalFields;
    this.qPresent = qPresent;
    this.qReadableName = qReadableName;
    this.qSubsetRatio = qSubsetRatio;
    this.qTags = qTags;
    this.qnNonNulls = qnNonNulls;
    this.qnPresentDistinctValues = qnPresentDistinctValues;
    this.qnRows = qnRows;
    this.qnTotalDistinctValues = qnTotalDistinctValues;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class FieldInTableProfilingData {
  constructor({
    qAverage,
    qAvgStringLen,
    qDistinctNumericValues,
    qDistinctTextValues,
    qDistinctValues,
    qEmptyStrings,
    qFieldTags,
    qFirstSorted,
    qFractiles,
    qFrequencyDistribution,
    qKurtosis,
    qLastSorted,
    qMax,
    qMaxStringLen,
    qMedian,
    qMin,
    qMinStringLen,
    qMostFrequent,
    qName,
    qNegValues,
    qNullValues,
    qNumberFormat,
    qNumericValues,
    qPosValues,
    qSkewness,
    qStd,
    qSum,
    qSum2,
    qSumStringLen,
    qTextValues,
    qZeroValues,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qAverage = qAverage;
    this.qAvgStringLen = qAvgStringLen;
    this.qDistinctNumericValues = qDistinctNumericValues;
    this.qDistinctTextValues = qDistinctTextValues;
    this.qDistinctValues = qDistinctValues;
    this.qEmptyStrings = qEmptyStrings;
    this.qFieldTags = qFieldTags;
    this.qFirstSorted = qFirstSorted;
    this.qFractiles = qFractiles;
    if (qFrequencyDistribution !== void 0 && qFrequencyDistribution !== null) {
      if (qFrequencyDistribution instanceof FrequencyDistributionData) {
        this.qFrequencyDistribution = qFrequencyDistribution;
      } else {
        this.qFrequencyDistribution = new FrequencyDistributionData(qFrequencyDistribution, this.auth);
      }
    }
    this.qKurtosis = qKurtosis;
    this.qLastSorted = qLastSorted;
    this.qMax = qMax;
    this.qMaxStringLen = qMaxStringLen;
    this.qMedian = qMedian;
    this.qMin = qMin;
    this.qMinStringLen = qMinStringLen;
    if (qMostFrequent !== void 0 && qMostFrequent !== null) {
      if (qMostFrequent.length > 0 && qMostFrequent[0] instanceof SymbolFrequency) {
        this.qMostFrequent = qMostFrequent;
      } else {
        this.qMostFrequent = qMostFrequent.map((element) => new SymbolFrequency(element, this.auth));
      }
    }
    this.qName = qName;
    this.qNegValues = qNegValues;
    this.qNullValues = qNullValues;
    if (qNumberFormat !== void 0 && qNumberFormat !== null) {
      if (qNumberFormat instanceof FieldAttributes) {
        this.qNumberFormat = qNumberFormat;
      } else {
        this.qNumberFormat = new FieldAttributes(qNumberFormat, this.auth);
      }
    }
    this.qNumericValues = qNumericValues;
    this.qPosValues = qPosValues;
    this.qSkewness = qSkewness;
    this.qStd = qStd;
    this.qSum = qSum;
    this.qSum2 = qSum2;
    this.qSumStringLen = qSumStringLen;
    this.qTextValues = qTextValues;
    this.qZeroValues = qZeroValues;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class FieldList {
  constructor({
    qItems,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qItems !== void 0 && qItems !== null) {
      if (qItems.length > 0 && qItems[0] instanceof NxFieldDescription) {
        this.qItems = qItems;
      } else {
        this.qItems = qItems.map((element) => new NxFieldDescription(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class FieldListDef {
  constructor({
    qShowDefinitionOnly,
    qShowDerivedFields,
    qShowHidden,
    qShowImplicit,
    qShowSemantic,
    qShowSrcTables,
    qShowSystem,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qShowDefinitionOnly = qShowDefinitionOnly;
    this.qShowDerivedFields = qShowDerivedFields;
    this.qShowHidden = qShowHidden;
    this.qShowImplicit = qShowImplicit;
    this.qShowSemantic = qShowSemantic;
    this.qShowSrcTables = qShowSrcTables;
    this.qShowSystem = qShowSystem;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class FieldOrColumn {
  constructor({
    qFieldName,
    qTableName,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qFieldName = qFieldName;
    this.qTableName = qTableName;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class FieldScores {
  constructor({
    qCardinalRatio,
    qFieldName,
    qReadableName,
    qRowScore,
    qSymbolScore,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qCardinalRatio = qCardinalRatio;
    this.qFieldName = qFieldName;
    this.qReadableName = qReadableName;
    this.qRowScore = qRowScore;
    this.qSymbolScore = qSymbolScore;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class FieldType {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class FieldValue {
  constructor({
    qIsNumeric,
    qNumber,
    qText,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qIsNumeric = qIsNumeric;
    this.qNumber = qNumber;
    this.qText = qText;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class FileDataFormat {
  constructor({
    qCodePage,
    qComment,
    qDelimiter,
    qFixedWidthDelimiters,
    qHeaderSize,
    qIgnoreEOF,
    qLabel,
    qQuote,
    qRecordSize,
    qTabSize,
    qType,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qCodePage = qCodePage;
    this.qComment = qComment;
    if (qDelimiter !== void 0 && qDelimiter !== null) {
      if (qDelimiter instanceof DelimiterInfo) {
        this.qDelimiter = qDelimiter;
      } else {
        this.qDelimiter = new DelimiterInfo(qDelimiter, this.auth);
      }
    }
    this.qFixedWidthDelimiters = qFixedWidthDelimiters;
    this.qHeaderSize = qHeaderSize;
    this.qIgnoreEOF = qIgnoreEOF;
    this.qLabel = qLabel;
    this.qQuote = qQuote;
    this.qRecordSize = qRecordSize;
    this.qTabSize = qTabSize;
    this.qType = qType;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class FileType {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class FilterInfo {
  constructor({
    qType,
    qWherePredicate,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qType = qType;
    this.qWherePredicate = qWherePredicate;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class FilterType {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class FolderItem {
  constructor({
    qName,
    qType,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qName = qName;
    this.qType = qType;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class FolderItemType {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class FrequencyDistributionData {
  constructor({
    qBinsEdges,
    qFrequencies,
    qNumberOfBins,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qBinsEdges = qBinsEdges;
    this.qFrequencies = qFrequencies;
    this.qNumberOfBins = qNumberOfBins;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Function {
  constructor({
    qGroup,
    qName,
    qSignature,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qGroup = qGroup;
    this.qName = qName;
    this.qSignature = qSignature;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class FunctionGroup {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GenericBookmark {
  constructor({
    qGenericId,
    qGenericType,
    qHandle,
    qType,
    ...rest
  }, session, auth) {
    this.auth = auth;
    this.session = session;
    this.qGenericId = qGenericId;
    this.qGenericType = qGenericType;
    this.qHandle = qHandle;
    this.qType = qType;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  async getFieldValues(qField, qGetExcludedValues, qDataPage) {
    const params = {};
    params.qField = qField;
    params.qGetExcludedValues = qGetExcludedValues;
    params.qDataPage = qDataPage;
    const rawResponse = await this.session.send({
      method: "GetFieldValues",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qFieldValues"];
    return response.map((r) => new FieldValue(r, this.auth));
  }
  async getLayout() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetLayout",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qLayout"];
    const obj = new GenericBookmarkLayout(response, this.auth);
    return obj;
  }
  async applyPatches(qPatches) {
    const params = {};
    params.qPatches = qPatches;
    const rawResponse = await this.session.send({
      method: "ApplyPatches",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async setProperties(qProp) {
    const params = {};
    params.qProp = qProp;
    const rawResponse = await this.session.send({
      method: "SetProperties",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async getProperties() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetProperties",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qProp"];
    const obj = new GenericBookmarkProperties(response, this.auth);
    return obj;
  }
  async getInfo() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetInfo",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qInfo"];
    const obj = new NxInfo(response, this.auth);
    return obj;
  }
  async apply() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "Apply",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async applyAndVerify() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "ApplyAndVerify",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qResult"];
    const obj = new BookmarkApplyAndVerifyResult(response, this.auth);
    return obj;
  }
  async publish() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "Publish",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async unPublish() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "UnPublish",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async approve() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "Approve",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async unApprove() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "UnApprove",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
}
class GenericBookmarkEntry {
  constructor({
    qBookmark,
    qClassicBookmark,
    qClassicMetadata,
    qProperties,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qBookmark !== void 0 && qBookmark !== null) {
      if (qBookmark instanceof NxBookmark) {
        this.qBookmark = qBookmark;
      } else {
        this.qBookmark = new NxBookmark(qBookmark, this.auth);
      }
    }
    if (qClassicBookmark !== void 0 && qClassicBookmark !== null) {
      if (qClassicBookmark instanceof Bookmark) {
        this.qClassicBookmark = qClassicBookmark;
      } else {
        this.qClassicBookmark = new Bookmark(qClassicBookmark, this.auth);
      }
    }
    if (qClassicMetadata !== void 0 && qClassicMetadata !== null) {
      if (qClassicMetadata instanceof MetaData) {
        this.qClassicMetadata = qClassicMetadata;
      } else {
        this.qClassicMetadata = new MetaData(qClassicMetadata, this.auth);
      }
    }
    if (qProperties !== void 0 && qProperties !== null) {
      if (qProperties instanceof GenericBookmarkProperties) {
        this.qProperties = qProperties;
      } else {
        this.qProperties = new GenericBookmarkProperties(qProperties, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GenericBookmarkLayout {
  constructor({
    qBookmark,
    qFieldInfos,
    qInfo,
    qMeta,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qBookmark !== void 0 && qBookmark !== null) {
      if (qBookmark instanceof NxBookmark) {
        this.qBookmark = qBookmark;
      } else {
        this.qBookmark = new NxBookmark(qBookmark, this.auth);
      }
    }
    if (qFieldInfos !== void 0 && qFieldInfos !== null) {
      if (qFieldInfos.length > 0 && qFieldInfos[0] instanceof LayoutFieldInfo) {
        this.qFieldInfos = qFieldInfos;
      } else {
        this.qFieldInfos = qFieldInfos.map((element) => new LayoutFieldInfo(element, this.auth));
      }
    }
    if (qInfo !== void 0 && qInfo !== null) {
      if (qInfo instanceof NxInfo) {
        this.qInfo = qInfo;
      } else {
        this.qInfo = new NxInfo(qInfo, this.auth);
      }
    }
    if (qMeta !== void 0 && qMeta !== null) {
      if (qMeta instanceof NxMeta) {
        this.qMeta = qMeta;
      } else {
        this.qMeta = new NxMeta(qMeta, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GenericBookmarkProperties {
  constructor({
    qDistinctValues,
    qIncludeVariables,
    qInfo,
    qMetaDef,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qDistinctValues = qDistinctValues;
    this.qIncludeVariables = qIncludeVariables;
    if (qInfo !== void 0 && qInfo !== null) {
      if (qInfo instanceof NxInfo) {
        this.qInfo = qInfo;
      } else {
        this.qInfo = new NxInfo(qInfo, this.auth);
      }
    }
    if (qMetaDef !== void 0 && qMetaDef !== null) {
      if (qMetaDef instanceof NxMetaDef) {
        this.qMetaDef = qMetaDef;
      } else {
        this.qMetaDef = new NxMetaDef(qMetaDef, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GenericConnectMachine {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GenericDimension {
  constructor({
    qGenericId,
    qGenericType,
    qHandle,
    qType,
    ...rest
  }, session, auth) {
    this.auth = auth;
    this.session = session;
    this.qGenericId = qGenericId;
    this.qGenericType = qGenericType;
    this.qHandle = qHandle;
    this.qType = qType;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  async getLayout() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetLayout",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qLayout"];
    const obj = new GenericDimensionLayout(response, this.auth);
    return obj;
  }
  async applyPatches(qPatches) {
    const params = {};
    params.qPatches = qPatches;
    const rawResponse = await this.session.send({
      method: "ApplyPatches",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async setProperties(qProp) {
    const params = {};
    params.qProp = qProp;
    const rawResponse = await this.session.send({
      method: "SetProperties",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async getProperties() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetProperties",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qProp"];
    const obj = new GenericDimensionProperties(response, this.auth);
    return obj;
  }
  async getInfo() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetInfo",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qInfo"];
    const obj = new NxInfo(response, this.auth);
    return obj;
  }
  async getDimension() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetDimension",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qDim"];
    const obj = new NxLibraryDimensionDef(response, this.auth);
    return obj;
  }
  async getLinkedObjects() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetLinkedObjects",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qItems"];
    return response.map((r) => new NxLinkedObjectInfo(r, this.auth));
  }
  async publish() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "Publish",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async unPublish() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "UnPublish",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async approve() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "Approve",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async unApprove() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "UnApprove",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
}
class GenericDimensionInfo {
  constructor({
    qAndMode,
    qApprMaxGlyphCount,
    qCardinal,
    qIsSemantic,
    qTags,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qAndMode = qAndMode;
    this.qApprMaxGlyphCount = qApprMaxGlyphCount;
    this.qCardinal = qCardinal;
    this.qIsSemantic = qIsSemantic;
    this.qTags = qTags;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GenericDimensionLayout {
  constructor({
    qDim,
    qDimInfos,
    qInfo,
    qMeta,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qDim !== void 0 && qDim !== null) {
      if (qDim instanceof NxLibraryDimension) {
        this.qDim = qDim;
      } else {
        this.qDim = new NxLibraryDimension(qDim, this.auth);
      }
    }
    if (qDimInfos !== void 0 && qDimInfos !== null) {
      if (qDimInfos.length > 0 && qDimInfos[0] instanceof GenericDimensionInfo) {
        this.qDimInfos = qDimInfos;
      } else {
        this.qDimInfos = qDimInfos.map((element) => new GenericDimensionInfo(element, this.auth));
      }
    }
    if (qInfo !== void 0 && qInfo !== null) {
      if (qInfo instanceof NxInfo) {
        this.qInfo = qInfo;
      } else {
        this.qInfo = new NxInfo(qInfo, this.auth);
      }
    }
    if (qMeta !== void 0 && qMeta !== null) {
      if (qMeta instanceof NxMeta) {
        this.qMeta = qMeta;
      } else {
        this.qMeta = new NxMeta(qMeta, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GenericDimensionProperties {
  constructor({
    qDim,
    qInfo,
    qMetaDef,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qDim !== void 0 && qDim !== null) {
      if (qDim instanceof NxLibraryDimensionDef) {
        this.qDim = qDim;
      } else {
        this.qDim = new NxLibraryDimensionDef(qDim, this.auth);
      }
    }
    if (qInfo !== void 0 && qInfo !== null) {
      if (qInfo instanceof NxInfo) {
        this.qInfo = qInfo;
      } else {
        this.qInfo = new NxInfo(qInfo, this.auth);
      }
    }
    if (qMetaDef !== void 0 && qMetaDef !== null) {
      if (qMetaDef instanceof NxMetaDef) {
        this.qMetaDef = qMetaDef;
      } else {
        this.qMetaDef = new NxMetaDef(qMetaDef, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GenericMeasure {
  constructor({
    qGenericId,
    qGenericType,
    qHandle,
    qType,
    ...rest
  }, session, auth) {
    this.auth = auth;
    this.session = session;
    this.qGenericId = qGenericId;
    this.qGenericType = qGenericType;
    this.qHandle = qHandle;
    this.qType = qType;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  async getLayout() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetLayout",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qLayout"];
    const obj = new GenericMeasureLayout(response, this.auth);
    return obj;
  }
  async applyPatches(qPatches) {
    const params = {};
    params.qPatches = qPatches;
    const rawResponse = await this.session.send({
      method: "ApplyPatches",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async setProperties(qProp) {
    const params = {};
    params.qProp = qProp;
    const rawResponse = await this.session.send({
      method: "SetProperties",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async getProperties() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetProperties",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qProp"];
    const obj = new GenericMeasureProperties(response, this.auth);
    return obj;
  }
  async getInfo() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetInfo",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qInfo"];
    const obj = new NxInfo(response, this.auth);
    return obj;
  }
  async getMeasure() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetMeasure",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qMeasure"];
    const obj = new NxLibraryMeasureDef(response, this.auth);
    return obj;
  }
  async getLinkedObjects() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetLinkedObjects",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qItems"];
    return response.map((r) => new NxLinkedObjectInfo(r, this.auth));
  }
  async publish() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "Publish",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async unPublish() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "UnPublish",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async approve() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "Approve",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async unApprove() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "UnApprove",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
}
class GenericMeasureLayout {
  constructor({
    qInfo,
    qMeasure,
    qMeta,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qInfo !== void 0 && qInfo !== null) {
      if (qInfo instanceof NxInfo) {
        this.qInfo = qInfo;
      } else {
        this.qInfo = new NxInfo(qInfo, this.auth);
      }
    }
    if (qMeasure !== void 0 && qMeasure !== null) {
      if (qMeasure instanceof NxLibraryMeasure) {
        this.qMeasure = qMeasure;
      } else {
        this.qMeasure = new NxLibraryMeasure(qMeasure, this.auth);
      }
    }
    if (qMeta !== void 0 && qMeta !== null) {
      if (qMeta instanceof NxMeta) {
        this.qMeta = qMeta;
      } else {
        this.qMeta = new NxMeta(qMeta, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GenericMeasureProperties {
  constructor({
    qInfo,
    qMeasure,
    qMetaDef,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qInfo !== void 0 && qInfo !== null) {
      if (qInfo instanceof NxInfo) {
        this.qInfo = qInfo;
      } else {
        this.qInfo = new NxInfo(qInfo, this.auth);
      }
    }
    if (qMeasure !== void 0 && qMeasure !== null) {
      if (qMeasure instanceof NxLibraryMeasureDef) {
        this.qMeasure = qMeasure;
      } else {
        this.qMeasure = new NxLibraryMeasureDef(qMeasure, this.auth);
      }
    }
    if (qMetaDef !== void 0 && qMetaDef !== null) {
      if (qMetaDef instanceof NxMetaDef) {
        this.qMetaDef = qMetaDef;
      } else {
        this.qMetaDef = new NxMetaDef(qMetaDef, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GenericObject {
  constructor({
    qGenericId,
    qGenericType,
    qHandle,
    qType,
    ...rest
  }, session, auth) {
    this.auth = auth;
    this.session = session;
    this.qGenericId = qGenericId;
    this.qGenericType = qGenericType;
    this.qHandle = qHandle;
    this.qType = qType;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  async getLayout() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetLayout",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qLayout"];
    const obj = new GenericObjectLayout(response, this.auth);
    return obj;
  }
  async getListObjectData(qPath, qPages) {
    const params = {};
    params.qPath = qPath;
    params.qPages = qPages;
    const rawResponse = await this.session.send({
      method: "GetListObjectData",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qDataPages"];
    return response.map((r) => new NxDataPage(r, this.auth));
  }
  async getHyperCubeData(qPath, qPages) {
    const params = {};
    params.qPath = qPath;
    params.qPages = qPages;
    const rawResponse = await this.session.send({
      method: "GetHyperCubeData",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qDataPages"];
    return response.map((r) => new NxDataPage(r, this.auth));
  }
  async getHyperCubeReducedData(qPath, qPages, qZoomFactor, qReductionMode) {
    const params = {};
    params.qPath = qPath;
    params.qPages = qPages;
    params.qZoomFactor = qZoomFactor;
    params.qReductionMode = qReductionMode;
    const rawResponse = await this.session.send({
      method: "GetHyperCubeReducedData",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qDataPages"];
    return response.map((r) => new NxDataPage(r, this.auth));
  }
  async getHyperCubePivotData(qPath, qPages) {
    const params = {};
    params.qPath = qPath;
    params.qPages = qPages;
    const rawResponse = await this.session.send({
      method: "GetHyperCubePivotData",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qDataPages"];
    return response.map((r) => new NxPivotPage(r, this.auth));
  }
  async getHyperCubeStackData(qPath, qPages, qMaxNbrCells) {
    const params = {};
    params.qPath = qPath;
    params.qPages = qPages;
    if (qMaxNbrCells !== void 0) {
      params.qMaxNbrCells = qMaxNbrCells;
    }
    const rawResponse = await this.session.send({
      method: "GetHyperCubeStackData",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qDataPages"];
    return response.map((r) => new NxStackPage(r, this.auth));
  }
  async getHyperCubeContinuousData(qPath, qOptions, qReverseSort) {
    const params = {};
    params.qPath = qPath;
    params.qOptions = qOptions;
    if (qReverseSort !== void 0) {
      params.qReverseSort = qReverseSort;
    }
    const rawResponse = await this.session.send({
      method: "GetHyperCubeContinuousData",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    const obj = new GetHyperCubeContinuousDataReturn(response, this.auth);
    return obj;
  }
  async getHyperCubeTreeData(qPath, qNodeOptions) {
    const params = {};
    params.qPath = qPath;
    if (qNodeOptions !== void 0) {
      params.qNodeOptions = qNodeOptions;
    }
    const rawResponse = await this.session.send({
      method: "GetHyperCubeTreeData",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qNodes"];
    return response.map((r) => new NxTreeNode(r, this.auth));
  }
  async getHyperCubeBinnedData(qPath, qPages, qViewport, qDataRanges, qMaxNbrCells, qQueryLevel, qBinningMethod) {
    const params = {};
    params.qPath = qPath;
    params.qPages = qPages;
    params.qViewport = qViewport;
    params.qDataRanges = qDataRanges;
    params.qMaxNbrCells = qMaxNbrCells;
    params.qQueryLevel = qQueryLevel;
    params.qBinningMethod = qBinningMethod;
    const rawResponse = await this.session.send({
      method: "GetHyperCubeBinnedData",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qDataPages"];
    return response.map((r) => new NxDataPage(r, this.auth));
  }
  async applyPatches(qPatches, qSoftPatch) {
    const params = {};
    params.qPatches = qPatches;
    if (qSoftPatch !== void 0) {
      params.qSoftPatch = qSoftPatch;
    }
    const rawResponse = await this.session.send({
      method: "ApplyPatches",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async clearSoftPatches() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "ClearSoftPatches",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async setProperties(qProp) {
    const params = {};
    params.qProp = qProp;
    const rawResponse = await this.session.send({
      method: "SetProperties",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async getProperties() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetProperties",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qProp"];
    const obj = new GenericObjectProperties(response, this.auth);
    return obj;
  }
  async getEffectiveProperties() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetEffectiveProperties",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qProp"];
    const obj = new GenericObjectProperties(response, this.auth);
    return obj;
  }
  async setFullPropertyTree(qPropEntry) {
    const params = {};
    params.qPropEntry = qPropEntry;
    const rawResponse = await this.session.send({
      method: "SetFullPropertyTree",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async getFullPropertyTree() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetFullPropertyTree",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qPropEntry"];
    const obj = new GenericObjectEntry(response, this.auth);
    return obj;
  }
  async getInfo() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetInfo",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qInfo"];
    const obj = new NxInfo(response, this.auth);
    return obj;
  }
  async clearSelections(qPath, qColIndices) {
    const params = {};
    params.qPath = qPath;
    if (qColIndices !== void 0) {
      params.qColIndices = qColIndices;
    }
    const rawResponse = await this.session.send({
      method: "ClearSelections",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async exportData(qFileType, qPath, qFileName, qExportState, qServeOnce) {
    const params = {};
    params.qFileType = qFileType;
    if (qPath !== void 0) {
      params.qPath = qPath;
    }
    if (qFileName !== void 0) {
      params.qFileName = qFileName;
    }
    if (qExportState !== void 0) {
      params.qExportState = qExportState;
    }
    if (qServeOnce !== void 0) {
      params.qServeOnce = qServeOnce;
    }
    const rawResponse = await this.session.send({
      method: "ExportData",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    const obj = new ExportDataReturn(response, this.auth);
    return obj;
  }
  async selectListObjectValues(qPath, qValues, qToggleMode, qSoftLock) {
    const params = {};
    params.qPath = qPath;
    params.qValues = qValues;
    params.qToggleMode = qToggleMode;
    if (qSoftLock !== void 0) {
      params.qSoftLock = qSoftLock;
    }
    const rawResponse = await this.session.send({
      method: "SelectListObjectValues",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async selectListObjectPossible(qPath, qSoftLock) {
    const params = {};
    params.qPath = qPath;
    if (qSoftLock !== void 0) {
      params.qSoftLock = qSoftLock;
    }
    const rawResponse = await this.session.send({
      method: "SelectListObjectPossible",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async selectListObjectExcluded(qPath, qSoftLock) {
    const params = {};
    params.qPath = qPath;
    if (qSoftLock !== void 0) {
      params.qSoftLock = qSoftLock;
    }
    const rawResponse = await this.session.send({
      method: "SelectListObjectExcluded",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async selectListObjectAlternative(qPath, qSoftLock) {
    const params = {};
    params.qPath = qPath;
    if (qSoftLock !== void 0) {
      params.qSoftLock = qSoftLock;
    }
    const rawResponse = await this.session.send({
      method: "SelectListObjectAlternative",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async selectListObjectAll(qPath, qSoftLock) {
    const params = {};
    params.qPath = qPath;
    if (qSoftLock !== void 0) {
      params.qSoftLock = qSoftLock;
    }
    const rawResponse = await this.session.send({
      method: "SelectListObjectAll",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async selectListObjectContinuousRange(qPath, qRanges, qSoftLock) {
    const params = {};
    params.qPath = qPath;
    params.qRanges = qRanges;
    if (qSoftLock !== void 0) {
      params.qSoftLock = qSoftLock;
    }
    const rawResponse = await this.session.send({
      method: "SelectListObjectContinuousRange",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async searchListObjectFor(qPath, qMatch) {
    const params = {};
    params.qPath = qPath;
    params.qMatch = qMatch;
    const rawResponse = await this.session.send({
      method: "SearchListObjectFor",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async abortListObjectSearch(qPath) {
    const params = {};
    params.qPath = qPath;
    const rawResponse = await this.session.send({
      method: "AbortListObjectSearch",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async acceptListObjectSearch(qPath, qToggleMode, qSoftLock) {
    const params = {};
    params.qPath = qPath;
    params.qToggleMode = qToggleMode;
    if (qSoftLock !== void 0) {
      params.qSoftLock = qSoftLock;
    }
    const rawResponse = await this.session.send({
      method: "AcceptListObjectSearch",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async expandLeft(qPath, qRow, qCol, qAll) {
    const params = {};
    params.qPath = qPath;
    params.qRow = qRow;
    params.qCol = qCol;
    params.qAll = qAll;
    const rawResponse = await this.session.send({
      method: "ExpandLeft",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async expandTop(qPath, qRow, qCol, qAll) {
    const params = {};
    params.qPath = qPath;
    params.qRow = qRow;
    params.qCol = qCol;
    params.qAll = qAll;
    const rawResponse = await this.session.send({
      method: "ExpandTop",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async collapseLeft(qPath, qRow, qCol, qAll) {
    const params = {};
    params.qPath = qPath;
    params.qRow = qRow;
    params.qCol = qCol;
    params.qAll = qAll;
    const rawResponse = await this.session.send({
      method: "CollapseLeft",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async collapseTop(qPath, qRow, qCol, qAll) {
    const params = {};
    params.qPath = qPath;
    params.qRow = qRow;
    params.qCol = qCol;
    params.qAll = qAll;
    const rawResponse = await this.session.send({
      method: "CollapseTop",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async drillUp(qPath, qDimNo, qNbrSteps) {
    const params = {};
    params.qPath = qPath;
    params.qDimNo = qDimNo;
    params.qNbrSteps = qNbrSteps;
    const rawResponse = await this.session.send({
      method: "DrillUp",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async lock(qPath, qColIndices) {
    const params = {};
    params.qPath = qPath;
    if (qColIndices !== void 0) {
      params.qColIndices = qColIndices;
    }
    const rawResponse = await this.session.send({
      method: "Lock",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async unlock(qPath, qColIndices) {
    const params = {};
    params.qPath = qPath;
    if (qColIndices !== void 0) {
      params.qColIndices = qColIndices;
    }
    const rawResponse = await this.session.send({
      method: "Unlock",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async selectHyperCubeValues(qPath, qDimNo, qValues, qToggleMode) {
    const params = {};
    params.qPath = qPath;
    params.qDimNo = qDimNo;
    params.qValues = qValues;
    params.qToggleMode = qToggleMode;
    const rawResponse = await this.session.send({
      method: "SelectHyperCubeValues",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async selectHyperCubeCells(qPath, qRowIndices, qColIndices, qSoftLock, qDeselectOnlyOneSelected) {
    const params = {};
    params.qPath = qPath;
    params.qRowIndices = qRowIndices;
    params.qColIndices = qColIndices;
    if (qSoftLock !== void 0) {
      params.qSoftLock = qSoftLock;
    }
    if (qDeselectOnlyOneSelected !== void 0) {
      params.qDeselectOnlyOneSelected = qDeselectOnlyOneSelected;
    }
    const rawResponse = await this.session.send({
      method: "SelectHyperCubeCells",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async selectPivotCells(qPath, qSelections, qSoftLock, qDeselectOnlyOneSelected) {
    const params = {};
    params.qPath = qPath;
    params.qSelections = qSelections;
    if (qSoftLock !== void 0) {
      params.qSoftLock = qSoftLock;
    }
    if (qDeselectOnlyOneSelected !== void 0) {
      params.qDeselectOnlyOneSelected = qDeselectOnlyOneSelected;
    }
    const rawResponse = await this.session.send({
      method: "SelectPivotCells",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async rangeSelectHyperCubeValues(qPath, qRanges, qColumnsToSelect, qOrMode, qDeselectOnlyOneSelected) {
    const params = {};
    params.qPath = qPath;
    params.qRanges = qRanges;
    if (qColumnsToSelect !== void 0) {
      params.qColumnsToSelect = qColumnsToSelect;
    }
    if (qOrMode !== void 0) {
      params.qOrMode = qOrMode;
    }
    if (qDeselectOnlyOneSelected !== void 0) {
      params.qDeselectOnlyOneSelected = qDeselectOnlyOneSelected;
    }
    const rawResponse = await this.session.send({
      method: "RangeSelectHyperCubeValues",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async multiRangeSelectHyperCubeValues(qPath, qRanges, qOrMode, qDeselectOnlyOneSelected) {
    const params = {};
    params.qPath = qPath;
    params.qRanges = qRanges;
    if (qOrMode !== void 0) {
      params.qOrMode = qOrMode;
    }
    if (qDeselectOnlyOneSelected !== void 0) {
      params.qDeselectOnlyOneSelected = qDeselectOnlyOneSelected;
    }
    const rawResponse = await this.session.send({
      method: "MultiRangeSelectHyperCubeValues",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async multiRangeSelectTreeDataValues(qPath, qRanges, qOrMode, qDeselectOnlyOneSelected) {
    const params = {};
    params.qPath = qPath;
    params.qRanges = qRanges;
    if (qOrMode !== void 0) {
      params.qOrMode = qOrMode;
    }
    if (qDeselectOnlyOneSelected !== void 0) {
      params.qDeselectOnlyOneSelected = qDeselectOnlyOneSelected;
    }
    const rawResponse = await this.session.send({
      method: "MultiRangeSelectTreeDataValues",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async selectHyperCubeContinuousRange(qPath, qRanges, qSoftLock) {
    const params = {};
    params.qPath = qPath;
    params.qRanges = qRanges;
    if (qSoftLock !== void 0) {
      params.qSoftLock = qSoftLock;
    }
    const rawResponse = await this.session.send({
      method: "SelectHyperCubeContinuousRange",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async getChild(qId) {
    const params = {};
    params.qId = qId;
    const rawResponse = await this.session.send({
      method: "GetChild",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    const obj = new GenericObject(response, this.session, this.auth);
    return obj;
  }
  async getParent() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetParent",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    const obj = new GenericObject(response, this.session, this.auth);
    return obj;
  }
  async getChildInfos() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetChildInfos",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qInfos"];
    return response.map((r) => new NxInfo(r, this.auth));
  }
  async createChild(qProp, qPropForThis) {
    const params = {};
    params.qProp = qProp;
    if (qPropForThis !== void 0) {
      params.qPropForThis = qPropForThis;
    }
    const rawResponse = await this.session.send({
      method: "CreateChild",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    const obj = new GenericObject(response, this.session, this.auth);
    return obj;
  }
  async destroyChild(qId, qPropForThis) {
    const params = {};
    params.qId = qId;
    if (qPropForThis !== void 0) {
      params.qPropForThis = qPropForThis;
    }
    const rawResponse = await this.session.send({
      method: "DestroyChild",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async destroyAllChildren(qPropForThis) {
    const params = {};
    if (qPropForThis !== void 0) {
      params.qPropForThis = qPropForThis;
    }
    const rawResponse = await this.session.send({
      method: "DestroyAllChildren",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async setChildArrayOrder(qIds) {
    const params = {};
    params.qIds = qIds;
    const rawResponse = await this.session.send({
      method: "SetChildArrayOrder",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async getLinkedObjects() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetLinkedObjects",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qItems"];
    return response.map((r) => new NxLinkedObjectInfo(r, this.auth));
  }
  async copyFrom(qFromId) {
    const params = {};
    params.qFromId = qFromId;
    const rawResponse = await this.session.send({
      method: "CopyFrom",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async beginSelections(qPaths) {
    const params = {};
    params.qPaths = qPaths;
    const rawResponse = await this.session.send({
      method: "BeginSelections",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async endSelections(qAccept) {
    const params = {};
    params.qAccept = qAccept;
    const rawResponse = await this.session.send({
      method: "EndSelections",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async resetMadeSelections() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "ResetMadeSelections",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async embedSnapshotObject(qId) {
    const params = {};
    params.qId = qId;
    const rawResponse = await this.session.send({
      method: "EmbedSnapshotObject",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async getSnapshotObject() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetSnapshotObject",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    const obj = new GenericObject(response, this.session, this.auth);
    return obj;
  }
  async publish() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "Publish",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async unPublish() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "UnPublish",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async approve() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "Approve",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async unApprove() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "UnApprove",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
}
class GenericObjectEntry {
  constructor({
    qChildren,
    qEmbeddedSnapshotRef,
    qProperty,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qChildren !== void 0 && qChildren !== null) {
      if (qChildren.length > 0 && qChildren[0] instanceof GenericObjectEntry) {
        this.qChildren = qChildren;
      } else {
        this.qChildren = qChildren.map((element) => new GenericObjectEntry(element, this.auth));
      }
    }
    if (qEmbeddedSnapshotRef !== void 0 && qEmbeddedSnapshotRef !== null) {
      if (qEmbeddedSnapshotRef instanceof GenericBookmarkEntry) {
        this.qEmbeddedSnapshotRef = qEmbeddedSnapshotRef;
      } else {
        this.qEmbeddedSnapshotRef = new GenericBookmarkEntry(qEmbeddedSnapshotRef, this.auth);
      }
    }
    if (qProperty !== void 0 && qProperty !== null) {
      if (qProperty instanceof GenericObjectProperties) {
        this.qProperty = qProperty;
      } else {
        this.qProperty = new GenericObjectProperties(qProperty, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GenericObjectLayout {
  constructor({
    qError,
    qExtendsId,
    qHasSoftPatches,
    qInfo,
    qMeta,
    qSelectionInfo,
    qStateName,
    qAppObjectList,
    qBookmarkList,
    qChildList,
    qDimensionList,
    qEmbeddedSnapshot,
    qExtensionList,
    qFieldList,
    qHyperCube,
    qListObject,
    qMeasureList,
    qMediaList,
    qNxLibraryDimension,
    qNxLibraryMeasure,
    qSelectionObject,
    qStaticContentUrl,
    qTreeData,
    qUndoInfo,
    qVariableList,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qError !== void 0 && qError !== null) {
      if (qError instanceof NxLayoutErrors) {
        this.qError = qError;
      } else {
        this.qError = new NxLayoutErrors(qError, this.auth);
      }
    }
    this.qExtendsId = qExtendsId;
    this.qHasSoftPatches = qHasSoftPatches;
    if (qInfo !== void 0 && qInfo !== null) {
      if (qInfo instanceof NxInfo) {
        this.qInfo = qInfo;
      } else {
        this.qInfo = new NxInfo(qInfo, this.auth);
      }
    }
    if (qMeta !== void 0 && qMeta !== null) {
      if (qMeta instanceof NxMeta) {
        this.qMeta = qMeta;
      } else {
        this.qMeta = new NxMeta(qMeta, this.auth);
      }
    }
    if (qSelectionInfo !== void 0 && qSelectionInfo !== null) {
      if (qSelectionInfo instanceof NxSelectionInfo) {
        this.qSelectionInfo = qSelectionInfo;
      } else {
        this.qSelectionInfo = new NxSelectionInfo(qSelectionInfo, this.auth);
      }
    }
    this.qStateName = qStateName;
    if (qAppObjectList !== void 0 && qAppObjectList !== null) {
      if (qAppObjectList instanceof AppObjectList) {
        this.qAppObjectList = qAppObjectList;
      } else {
        this.qAppObjectList = new AppObjectList(qAppObjectList, this.auth);
      }
    }
    if (qBookmarkList !== void 0 && qBookmarkList !== null) {
      if (qBookmarkList instanceof BookmarkList) {
        this.qBookmarkList = qBookmarkList;
      } else {
        this.qBookmarkList = new BookmarkList(qBookmarkList, this.auth);
      }
    }
    if (qChildList !== void 0 && qChildList !== null) {
      if (qChildList instanceof ChildList) {
        this.qChildList = qChildList;
      } else {
        this.qChildList = new ChildList(qChildList, this.auth);
      }
    }
    if (qDimensionList !== void 0 && qDimensionList !== null) {
      if (qDimensionList instanceof DimensionList) {
        this.qDimensionList = qDimensionList;
      } else {
        this.qDimensionList = new DimensionList(qDimensionList, this.auth);
      }
    }
    if (qEmbeddedSnapshot !== void 0 && qEmbeddedSnapshot !== null) {
      if (qEmbeddedSnapshot instanceof EmbeddedSnapshot) {
        this.qEmbeddedSnapshot = qEmbeddedSnapshot;
      } else {
        this.qEmbeddedSnapshot = new EmbeddedSnapshot(qEmbeddedSnapshot, this.auth);
      }
    }
    if (qExtensionList !== void 0 && qExtensionList !== null) {
      if (qExtensionList instanceof ExtensionList) {
        this.qExtensionList = qExtensionList;
      } else {
        this.qExtensionList = new ExtensionList(qExtensionList, this.auth);
      }
    }
    if (qFieldList !== void 0 && qFieldList !== null) {
      if (qFieldList instanceof FieldList) {
        this.qFieldList = qFieldList;
      } else {
        this.qFieldList = new FieldList(qFieldList, this.auth);
      }
    }
    if (qHyperCube !== void 0 && qHyperCube !== null) {
      if (qHyperCube instanceof HyperCube) {
        this.qHyperCube = qHyperCube;
      } else {
        this.qHyperCube = new HyperCube(qHyperCube, this.auth);
      }
    }
    if (qListObject !== void 0 && qListObject !== null) {
      if (qListObject instanceof ListObject) {
        this.qListObject = qListObject;
      } else {
        this.qListObject = new ListObject(qListObject, this.auth);
      }
    }
    if (qMeasureList !== void 0 && qMeasureList !== null) {
      if (qMeasureList instanceof MeasureList) {
        this.qMeasureList = qMeasureList;
      } else {
        this.qMeasureList = new MeasureList(qMeasureList, this.auth);
      }
    }
    if (qMediaList !== void 0 && qMediaList !== null) {
      if (qMediaList instanceof MediaList) {
        this.qMediaList = qMediaList;
      } else {
        this.qMediaList = new MediaList(qMediaList, this.auth);
      }
    }
    if (qNxLibraryDimension !== void 0 && qNxLibraryDimension !== null) {
      if (qNxLibraryDimension instanceof NxLibraryDimension) {
        this.qNxLibraryDimension = qNxLibraryDimension;
      } else {
        this.qNxLibraryDimension = new NxLibraryDimension(qNxLibraryDimension, this.auth);
      }
    }
    if (qNxLibraryMeasure !== void 0 && qNxLibraryMeasure !== null) {
      if (qNxLibraryMeasure instanceof NxLibraryMeasure) {
        this.qNxLibraryMeasure = qNxLibraryMeasure;
      } else {
        this.qNxLibraryMeasure = new NxLibraryMeasure(qNxLibraryMeasure, this.auth);
      }
    }
    if (qSelectionObject !== void 0 && qSelectionObject !== null) {
      if (qSelectionObject instanceof SelectionObject) {
        this.qSelectionObject = qSelectionObject;
      } else {
        this.qSelectionObject = new SelectionObject(qSelectionObject, this.auth);
      }
    }
    if (qStaticContentUrl !== void 0 && qStaticContentUrl !== null) {
      if (qStaticContentUrl instanceof StaticContentUrl) {
        this.qStaticContentUrl = qStaticContentUrl;
      } else {
        this.qStaticContentUrl = new StaticContentUrl(qStaticContentUrl, this.auth);
      }
    }
    if (qTreeData !== void 0 && qTreeData !== null) {
      if (qTreeData instanceof TreeData) {
        this.qTreeData = qTreeData;
      } else {
        this.qTreeData = new TreeData(qTreeData, this.auth);
      }
    }
    if (qUndoInfo !== void 0 && qUndoInfo !== null) {
      if (qUndoInfo instanceof UndoInfo) {
        this.qUndoInfo = qUndoInfo;
      } else {
        this.qUndoInfo = new UndoInfo(qUndoInfo, this.auth);
      }
    }
    if (qVariableList !== void 0 && qVariableList !== null) {
      if (qVariableList instanceof VariableList) {
        this.qVariableList = qVariableList;
      } else {
        this.qVariableList = new VariableList(qVariableList, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GenericObjectProperties {
  constructor({
    qExtendsId,
    qInfo,
    qMetaDef,
    qStateName,
    qAppObjectListDef,
    qBookmarkListDef,
    qChildListDef,
    qDimensionListDef,
    qEmbeddedSnapshotDef,
    qExtensionListDef,
    qFieldListDef,
    qHyperCubeDef,
    qLayoutExclude,
    qListObjectDef,
    qMeasureListDef,
    qMediaListDef,
    qNxLibraryDimensionDef,
    qNxLibraryMeasureDef,
    qSelectionObjectDef,
    qStaticContentUrlDef,
    qStringExpression,
    qTreeDataDef,
    qUndoInfoDef,
    qValueExpression,
    qVariableListDef,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qExtendsId = qExtendsId;
    if (qInfo !== void 0 && qInfo !== null) {
      if (qInfo instanceof NxInfo) {
        this.qInfo = qInfo;
      } else {
        this.qInfo = new NxInfo(qInfo, this.auth);
      }
    }
    if (qMetaDef !== void 0 && qMetaDef !== null) {
      if (qMetaDef instanceof NxMetaDef) {
        this.qMetaDef = qMetaDef;
      } else {
        this.qMetaDef = new NxMetaDef(qMetaDef, this.auth);
      }
    }
    this.qStateName = qStateName;
    if (qAppObjectListDef !== void 0 && qAppObjectListDef !== null) {
      if (qAppObjectListDef instanceof AppObjectListDef) {
        this.qAppObjectListDef = qAppObjectListDef;
      } else {
        this.qAppObjectListDef = new AppObjectListDef(qAppObjectListDef, this.auth);
      }
    }
    if (qBookmarkListDef !== void 0 && qBookmarkListDef !== null) {
      if (qBookmarkListDef instanceof BookmarkListDef) {
        this.qBookmarkListDef = qBookmarkListDef;
      } else {
        this.qBookmarkListDef = new BookmarkListDef(qBookmarkListDef, this.auth);
      }
    }
    if (qChildListDef !== void 0 && qChildListDef !== null) {
      if (qChildListDef instanceof ChildListDef) {
        this.qChildListDef = qChildListDef;
      } else {
        this.qChildListDef = new ChildListDef(qChildListDef, this.auth);
      }
    }
    if (qDimensionListDef !== void 0 && qDimensionListDef !== null) {
      if (qDimensionListDef instanceof DimensionListDef) {
        this.qDimensionListDef = qDimensionListDef;
      } else {
        this.qDimensionListDef = new DimensionListDef(qDimensionListDef, this.auth);
      }
    }
    if (qEmbeddedSnapshotDef !== void 0 && qEmbeddedSnapshotDef !== null) {
      if (qEmbeddedSnapshotDef instanceof EmbeddedSnapshotDef) {
        this.qEmbeddedSnapshotDef = qEmbeddedSnapshotDef;
      } else {
        this.qEmbeddedSnapshotDef = new EmbeddedSnapshotDef(qEmbeddedSnapshotDef, this.auth);
      }
    }
    if (qExtensionListDef !== void 0 && qExtensionListDef !== null) {
      if (qExtensionListDef instanceof ExtensionListDef) {
        this.qExtensionListDef = qExtensionListDef;
      } else {
        this.qExtensionListDef = new ExtensionListDef(qExtensionListDef, this.auth);
      }
    }
    if (qFieldListDef !== void 0 && qFieldListDef !== null) {
      if (qFieldListDef instanceof FieldListDef) {
        this.qFieldListDef = qFieldListDef;
      } else {
        this.qFieldListDef = new FieldListDef(qFieldListDef, this.auth);
      }
    }
    if (qHyperCubeDef !== void 0 && qHyperCubeDef !== null) {
      if (qHyperCubeDef instanceof HyperCubeDef) {
        this.qHyperCubeDef = qHyperCubeDef;
      } else {
        this.qHyperCubeDef = new HyperCubeDef(qHyperCubeDef, this.auth);
      }
    }
    if (qLayoutExclude !== void 0 && qLayoutExclude !== null) {
      if (qLayoutExclude instanceof LayoutExclude) {
        this.qLayoutExclude = qLayoutExclude;
      } else {
        this.qLayoutExclude = new LayoutExclude(qLayoutExclude, this.auth);
      }
    }
    if (qListObjectDef !== void 0 && qListObjectDef !== null) {
      if (qListObjectDef instanceof ListObjectDef) {
        this.qListObjectDef = qListObjectDef;
      } else {
        this.qListObjectDef = new ListObjectDef(qListObjectDef, this.auth);
      }
    }
    if (qMeasureListDef !== void 0 && qMeasureListDef !== null) {
      if (qMeasureListDef instanceof MeasureListDef) {
        this.qMeasureListDef = qMeasureListDef;
      } else {
        this.qMeasureListDef = new MeasureListDef(qMeasureListDef, this.auth);
      }
    }
    if (qMediaListDef !== void 0 && qMediaListDef !== null) {
      if (qMediaListDef instanceof MediaListDef) {
        this.qMediaListDef = qMediaListDef;
      } else {
        this.qMediaListDef = new MediaListDef(qMediaListDef, this.auth);
      }
    }
    if (qNxLibraryDimensionDef !== void 0 && qNxLibraryDimensionDef !== null) {
      if (qNxLibraryDimensionDef instanceof NxLibraryDimensionDef) {
        this.qNxLibraryDimensionDef = qNxLibraryDimensionDef;
      } else {
        this.qNxLibraryDimensionDef = new NxLibraryDimensionDef(qNxLibraryDimensionDef, this.auth);
      }
    }
    if (qNxLibraryMeasureDef !== void 0 && qNxLibraryMeasureDef !== null) {
      if (qNxLibraryMeasureDef instanceof NxLibraryMeasureDef) {
        this.qNxLibraryMeasureDef = qNxLibraryMeasureDef;
      } else {
        this.qNxLibraryMeasureDef = new NxLibraryMeasureDef(qNxLibraryMeasureDef, this.auth);
      }
    }
    if (qSelectionObjectDef !== void 0 && qSelectionObjectDef !== null) {
      if (qSelectionObjectDef instanceof SelectionObjectDef) {
        this.qSelectionObjectDef = qSelectionObjectDef;
      } else {
        this.qSelectionObjectDef = new SelectionObjectDef(qSelectionObjectDef, this.auth);
      }
    }
    if (qStaticContentUrlDef !== void 0 && qStaticContentUrlDef !== null) {
      if (qStaticContentUrlDef instanceof StaticContentUrlDef) {
        this.qStaticContentUrlDef = qStaticContentUrlDef;
      } else {
        this.qStaticContentUrlDef = new StaticContentUrlDef(qStaticContentUrlDef, this.auth);
      }
    }
    if (qStringExpression !== void 0 && qStringExpression !== null) {
      if (qStringExpression instanceof StringExpression) {
        this.qStringExpression = qStringExpression;
      } else {
        this.qStringExpression = new StringExpression(qStringExpression, this.auth);
      }
    }
    if (qTreeDataDef !== void 0 && qTreeDataDef !== null) {
      if (qTreeDataDef instanceof TreeDataDef) {
        this.qTreeDataDef = qTreeDataDef;
      } else {
        this.qTreeDataDef = new TreeDataDef(qTreeDataDef, this.auth);
      }
    }
    if (qUndoInfoDef !== void 0 && qUndoInfoDef !== null) {
      if (qUndoInfoDef instanceof UndoInfoDef) {
        this.qUndoInfoDef = qUndoInfoDef;
      } else {
        this.qUndoInfoDef = new UndoInfoDef(qUndoInfoDef, this.auth);
      }
    }
    if (qValueExpression !== void 0 && qValueExpression !== null) {
      if (qValueExpression instanceof ValueExpression) {
        this.qValueExpression = qValueExpression;
      } else {
        this.qValueExpression = new ValueExpression(qValueExpression, this.auth);
      }
    }
    if (qVariableListDef !== void 0 && qVariableListDef !== null) {
      if (qVariableListDef instanceof VariableListDef) {
        this.qVariableListDef = qVariableListDef;
      } else {
        this.qVariableListDef = new VariableListDef(qVariableListDef, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GenericVariable {
  constructor({
    qGenericId,
    qGenericType,
    qHandle,
    qType,
    ...rest
  }, session, auth) {
    this.auth = auth;
    this.session = session;
    this.qGenericId = qGenericId;
    this.qGenericType = qGenericType;
    this.qHandle = qHandle;
    this.qType = qType;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  async getLayout() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetLayout",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qLayout"];
    const obj = new GenericVariableLayout(response, this.auth);
    return obj;
  }
  async applyPatches(qPatches) {
    const params = {};
    params.qPatches = qPatches;
    const rawResponse = await this.session.send({
      method: "ApplyPatches",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async setProperties(qProp) {
    const params = {};
    params.qProp = qProp;
    const rawResponse = await this.session.send({
      method: "SetProperties",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async getProperties() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetProperties",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qProp"];
    const obj = new GenericVariableProperties(response, this.auth);
    return obj;
  }
  async getInfo() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetInfo",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qInfo"];
    const obj = new NxInfo(response, this.auth);
    return obj;
  }
  async setStringValue(qVal) {
    const params = {};
    params.qVal = qVal;
    const rawResponse = await this.session.send({
      method: "SetStringValue",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async setNumValue(qVal) {
    const params = {};
    params.qVal = qVal;
    const rawResponse = await this.session.send({
      method: "SetNumValue",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async setDualValue(qText, qNum) {
    const params = {};
    params.qText = qText;
    params.qNum = qNum;
    const rawResponse = await this.session.send({
      method: "SetDualValue",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async getRawContent() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetRawContent",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    return response;
  }
}
class GenericVariableLayout {
  constructor({
    qInfo,
    qIsScriptCreated,
    qMeta,
    qNum,
    qText,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qInfo !== void 0 && qInfo !== null) {
      if (qInfo instanceof NxInfo) {
        this.qInfo = qInfo;
      } else {
        this.qInfo = new NxInfo(qInfo, this.auth);
      }
    }
    this.qIsScriptCreated = qIsScriptCreated;
    if (qMeta !== void 0 && qMeta !== null) {
      if (qMeta instanceof NxMeta) {
        this.qMeta = qMeta;
      } else {
        this.qMeta = new NxMeta(qMeta, this.auth);
      }
    }
    this.qNum = qNum;
    this.qText = qText;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GenericVariableProperties {
  constructor({
    qComment,
    qDefinition,
    qIncludeInBookmark,
    qInfo,
    qMetaDef,
    qName,
    qNumberPresentation,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qComment = qComment;
    this.qDefinition = qDefinition;
    this.qIncludeInBookmark = qIncludeInBookmark;
    if (qInfo !== void 0 && qInfo !== null) {
      if (qInfo instanceof NxInfo) {
        this.qInfo = qInfo;
      } else {
        this.qInfo = new NxInfo(qInfo, this.auth);
      }
    }
    if (qMetaDef !== void 0 && qMetaDef !== null) {
      if (qMetaDef instanceof NxMetaDef) {
        this.qMetaDef = qMetaDef;
      } else {
        this.qMetaDef = new NxMetaDef(qMetaDef, this.auth);
      }
    }
    this.qName = qName;
    if (qNumberPresentation !== void 0 && qNumberPresentation !== null) {
      if (qNumberPresentation instanceof FieldAttributes) {
        this.qNumberPresentation = qNumberPresentation;
      } else {
        this.qNumberPresentation = new FieldAttributes(qNumberPresentation, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GetBaseBNFReturn {
  constructor({
    qBnfDefs,
    qBnfHash,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qBnfDefs !== void 0 && qBnfDefs !== null) {
      if (qBnfDefs.length > 0 && qBnfDefs[0] instanceof BNFDef) {
        this.qBnfDefs = qBnfDefs;
      } else {
        this.qBnfDefs = qBnfDefs.map((element) => new BNFDef(element, this.auth));
      }
    }
    this.qBnfHash = qBnfHash;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GetBaseBNFStringReturn {
  constructor({
    qBnfHash,
    qBnfStr,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qBnfHash = qBnfHash;
    this.qBnfStr = qBnfStr;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GetDatabaseTablePreviewReturn {
  constructor({
    qPreview,
    qRowCount,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qPreview !== void 0 && qPreview !== null) {
      if (qPreview.length > 0 && qPreview[0] instanceof DataRecord) {
        this.qPreview = qPreview;
      } else {
        this.qPreview = qPreview.map((element) => new DataRecord(element, this.auth));
      }
    }
    this.qRowCount = qRowCount;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GetExpressionBNFReturn {
  constructor({
    qBnfDefs,
    qBnfHash,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qBnfDefs !== void 0 && qBnfDefs !== null) {
      if (qBnfDefs.length > 0 && qBnfDefs[0] instanceof BNFDef) {
        this.qBnfDefs = qBnfDefs;
      } else {
        this.qBnfDefs = qBnfDefs.map((element) => new BNFDef(element, this.auth));
      }
    }
    this.qBnfHash = qBnfHash;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GetFileTableFieldsReturn {
  constructor({
    qFields,
    qFormatSpec,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qFields !== void 0 && qFields !== null) {
      if (qFields.length > 0 && qFields[0] instanceof DataField) {
        this.qFields = qFields;
      } else {
        this.qFields = qFields.map((element) => new DataField(element, this.auth));
      }
    }
    this.qFormatSpec = qFormatSpec;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GetFileTablePreviewReturn {
  constructor({
    qFormatSpec,
    qPreview,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qFormatSpec = qFormatSpec;
    if (qPreview !== void 0 && qPreview !== null) {
      if (qPreview.length > 0 && qPreview[0] instanceof DataRecord) {
        this.qPreview = qPreview;
      } else {
        this.qPreview = qPreview.map((element) => new DataRecord(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GetHyperCubeContinuousDataReturn {
  constructor({
    qAxisData,
    qDataPages,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qAxisData !== void 0 && qAxisData !== null) {
      if (qAxisData instanceof NxAxisData) {
        this.qAxisData = qAxisData;
      } else {
        this.qAxisData = new NxAxisData(qAxisData, this.auth);
      }
    }
    if (qDataPages !== void 0 && qDataPages !== null) {
      if (qDataPages.length > 0 && qDataPages[0] instanceof NxDataPage) {
        this.qDataPages = qDataPages;
      } else {
        this.qDataPages = qDataPages.map((element) => new NxDataPage(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GetInteractReturn {
  constructor({
    qDef,
    qReturn,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qDef !== void 0 && qDef !== null) {
      if (qDef instanceof InteractDef) {
        this.qDef = qDef;
      } else {
        this.qDef = new InteractDef(qDef, this.auth);
      }
    }
    this.qReturn = qReturn;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GetMediaListReturn {
  constructor({
    qList,
    qReturn,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qList !== void 0 && qList !== null) {
      if (qList instanceof MediaList) {
        this.qList = qList;
      } else {
        this.qList = new MediaList(qList, this.auth);
      }
    }
    this.qReturn = qReturn;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GetTablesAndKeysReturn {
  constructor({
    qk,
    qtr,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qk !== void 0 && qk !== null) {
      if (qk.length > 0 && qk[0] instanceof SourceKeyRecord) {
        this.qk = qk;
      } else {
        this.qk = qk.map((element) => new SourceKeyRecord(element, this.auth));
      }
    }
    if (qtr !== void 0 && qtr !== null) {
      if (qtr.length > 0 && qtr[0] instanceof TableRecord) {
        this.qtr = qtr;
      } else {
        this.qtr = qtr.map((element) => new TableRecord(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Global {
  constructor({
    qGenericId,
    qGenericType,
    qHandle,
    qType,
    ...rest
  }, session, auth) {
    this.auth = auth;
    this.session = session;
    this.qGenericId = qGenericId;
    this.qGenericType = qGenericType;
    this.qHandle = qHandle;
    this.qType = qType;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  async abortRequest(qRequestId) {
    const params = {};
    params.qRequestId = qRequestId;
    const rawResponse = await this.session.send({
      method: "AbortRequest",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async abortAll() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "AbortAll",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async getProgress(qRequestId) {
    const params = {};
    params.qRequestId = qRequestId;
    const rawResponse = await this.session.send({
      method: "GetProgress",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qProgressData"];
    const obj = new ProgressData(response, this.auth);
    return obj;
  }
  async getInteract(qRequestId) {
    const params = {};
    params.qRequestId = qRequestId;
    const rawResponse = await this.session.send({
      method: "GetInteract",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    const obj = new GetInteractReturn(response, this.auth);
    return obj;
  }
  async interactDone(qRequestId, qDef) {
    const params = {};
    params.qRequestId = qRequestId;
    params.qDef = qDef;
    const rawResponse = await this.session.send({
      method: "InteractDone",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async getAuthenticatedUser() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetAuthenticatedUser",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    return response;
  }
  async getActiveDoc() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetActiveDoc",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    const obj = new Doc(response, this.session, this.auth);
    return obj;
  }
  async allowCreateApp() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "AllowCreateApp",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    return response;
  }
  async isDesktopMode() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "IsDesktopMode",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    return response;
  }
  async cancelRequest(qRequestId) {
    const params = {};
    params.qRequestId = qRequestId;
    const rawResponse = await this.session.send({
      method: "CancelRequest",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async shutdownProcess() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "ShutdownProcess",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async replaceAppFromID(qTargetAppId, qSrcAppID, qIds) {
    const params = {};
    params.qTargetAppId = qTargetAppId;
    params.qSrcAppID = qSrcAppID;
    params.qIds = qIds;
    const rawResponse = await this.session.send({
      method: "ReplaceAppFromID",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qSuccess"];
    return response;
  }
  async publishApp(qAppId, qName, qStreamId) {
    const params = {};
    params.qAppId = qAppId;
    params.qName = qName;
    params.qStreamId = qStreamId;
    const rawResponse = await this.session.send({
      method: "PublishApp",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async isPersonalMode() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "IsPersonalMode",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    return response;
  }
  async getUniqueID() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetUniqueID",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qUniqueID"];
    return response;
  }
  async openDoc(qDocName, qUserName, qPassword, qSerial, qNoData) {
    const params = {};
    params.qDocName = qDocName;
    if (qUserName !== void 0) {
      params.qUserName = qUserName;
    }
    if (qPassword !== void 0) {
      params.qPassword = qPassword;
    }
    if (qSerial !== void 0) {
      params.qSerial = qSerial;
    }
    if (qNoData !== void 0) {
      params.qNoData = qNoData;
    }
    const rawResponse = await this.session.send({
      method: "OpenDoc",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    const obj = new Doc(response, this.session, this.auth);
    return obj;
  }
  async productVersion() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "ProductVersion",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    return response;
  }
  async getAppEntry(qAppID) {
    const params = {};
    params.qAppID = qAppID;
    const rawResponse = await this.session.send({
      method: "GetAppEntry",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qEntry"];
    const obj = new AppEntry(response, this.auth);
    return obj;
  }
  async configureReload(qCancelOnScriptError, qUseErrorData, qInteractOnError) {
    const params = {};
    params.qCancelOnScriptError = qCancelOnScriptError;
    params.qUseErrorData = qUseErrorData;
    params.qInteractOnError = qInteractOnError;
    const rawResponse = await this.session.send({
      method: "ConfigureReload",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async cancelReload() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "CancelReload",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async getBNF(qBnfType) {
    const params = {};
    params.qBnfType = qBnfType;
    const rawResponse = await this.session.send({
      method: "GetBNF",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qBnfDefs"];
    return response.map((r) => new BNFDef(r, this.auth));
  }
  async getFunctions(qGroup) {
    const params = {};
    if (qGroup !== void 0) {
      params.qGroup = qGroup;
    }
    const rawResponse = await this.session.send({
      method: "GetFunctions",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qFunctions"];
    return response.map((r) => new Function(r, this.auth));
  }
  async getOdbcDsns() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetOdbcDsns",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qOdbcDsns"];
    return response.map((r) => new OdbcDsn(r, this.auth));
  }
  async getOleDbProviders() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetOleDbProviders",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qOleDbProviders"];
    return response.map((r) => new OleDbProvider(r, this.auth));
  }
  async getDatabasesFromConnectionString(qConnection) {
    const params = {};
    params.qConnection = qConnection;
    const rawResponse = await this.session.send({
      method: "GetDatabasesFromConnectionString",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qDatabases"];
    return response.map((r) => new Database(r, this.auth));
  }
  async isValidConnectionString(qConnection) {
    const params = {};
    params.qConnection = qConnection;
    const rawResponse = await this.session.send({
      method: "IsValidConnectionString",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    return response;
  }
  async getDefaultAppFolder() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetDefaultAppFolder",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qPath"];
    return response;
  }
  async getLogicalDriveStrings() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetLogicalDriveStrings",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qDrives"];
    return response.map((r) => new DriveInfo(r, this.auth));
  }
  async getFolderItemsForPath(qPath) {
    const params = {};
    params.qPath = qPath;
    const rawResponse = await this.session.send({
      method: "GetFolderItemsForPath",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qFolderItems"];
    return response.map((r) => new FolderItem(r, this.auth));
  }
  async getSupportedCodePages() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetSupportedCodePages",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qCodePages"];
    return response.map((r) => new CodePage(r, this.auth));
  }
  async getCustomConnectors(qReloadList) {
    const params = {};
    if (qReloadList !== void 0) {
      params.qReloadList = qReloadList;
    }
    const rawResponse = await this.session.send({
      method: "GetCustomConnectors",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qConnectors"];
    return response.map((r) => new CustomConnector(r, this.auth));
  }
  async getStreamList() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetStreamList",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qStreamList"];
    return response.map((r) => new NxStreamListEntry(r, this.auth));
  }
  async engineVersion() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "EngineVersion",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qVersion"];
    const obj = new NxEngineVersion(response, this.auth);
    return obj;
  }
  async getBaseBNF(qBnfType) {
    const params = {};
    params.qBnfType = qBnfType;
    const rawResponse = await this.session.send({
      method: "GetBaseBNF",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    const obj = new GetBaseBNFReturn(response, this.auth);
    return obj;
  }
  async getBaseBNFHash(qBnfType) {
    const params = {};
    params.qBnfType = qBnfType;
    const rawResponse = await this.session.send({
      method: "GetBaseBNFHash",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qBnfHash"];
    return response;
  }
  async getBaseBNFString(qBnfType) {
    const params = {};
    params.qBnfType = qBnfType;
    const rawResponse = await this.session.send({
      method: "GetBaseBNFString",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    const obj = new GetBaseBNFStringReturn(response, this.auth);
    return obj;
  }
  async saveAs(qNewAppName) {
    const params = {};
    params.qNewAppName = qNewAppName;
    const rawResponse = await this.session.send({
      method: "SaveAs",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qNewAppId"];
    return response;
  }
}
class GraphMode {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GroupBookmarkData {
  constructor({
    qCyclePos,
    qId,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qCyclePos = qCyclePos;
    this.qId = qId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GroupStateInfo {
  constructor({
    qCurrentItemName,
    qGroupName,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qCurrentItemName = qCurrentItemName;
    this.qGroupName = qGroupName;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class HyperCube {
  constructor({
    qCalcCondMsg,
    qColumnOrder,
    qDataPages,
    qDimensionInfo,
    qEffectiveInterColumnSortOrder,
    qError,
    qGrandTotalRow,
    qHasOtherValues,
    qIndentMode,
    qLastExpandedPos,
    qMeasureInfo,
    qMode,
    qNoOfLeftDims,
    qPivotDataPages,
    qSize,
    qStackedDataPages,
    qStateName,
    qTitle,
    qTreeNodesOnDim,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qCalcCondMsg = qCalcCondMsg;
    this.qColumnOrder = qColumnOrder;
    if (qDataPages !== void 0 && qDataPages !== null) {
      if (qDataPages.length > 0 && qDataPages[0] instanceof NxDataPage) {
        this.qDataPages = qDataPages;
      } else {
        this.qDataPages = qDataPages.map((element) => new NxDataPage(element, this.auth));
      }
    }
    if (qDimensionInfo !== void 0 && qDimensionInfo !== null) {
      if (qDimensionInfo.length > 0 && qDimensionInfo[0] instanceof NxDimensionInfo) {
        this.qDimensionInfo = qDimensionInfo;
      } else {
        this.qDimensionInfo = qDimensionInfo.map((element) => new NxDimensionInfo(element, this.auth));
      }
    }
    this.qEffectiveInterColumnSortOrder = qEffectiveInterColumnSortOrder;
    if (qError !== void 0 && qError !== null) {
      if (qError instanceof NxValidationError) {
        this.qError = qError;
      } else {
        this.qError = new NxValidationError(qError, this.auth);
      }
    }
    if (qGrandTotalRow !== void 0 && qGrandTotalRow !== null) {
      if (qGrandTotalRow.length > 0 && qGrandTotalRow[0] instanceof NxCell) {
        this.qGrandTotalRow = qGrandTotalRow;
      } else {
        this.qGrandTotalRow = qGrandTotalRow.map((element) => new NxCell(element, this.auth));
      }
    }
    this.qHasOtherValues = qHasOtherValues;
    this.qIndentMode = qIndentMode;
    if (qLastExpandedPos !== void 0 && qLastExpandedPos !== null) {
      if (qLastExpandedPos instanceof NxCellPosition) {
        this.qLastExpandedPos = qLastExpandedPos;
      } else {
        this.qLastExpandedPos = new NxCellPosition(qLastExpandedPos, this.auth);
      }
    }
    if (qMeasureInfo !== void 0 && qMeasureInfo !== null) {
      if (qMeasureInfo.length > 0 && qMeasureInfo[0] instanceof NxMeasureInfo) {
        this.qMeasureInfo = qMeasureInfo;
      } else {
        this.qMeasureInfo = qMeasureInfo.map((element) => new NxMeasureInfo(element, this.auth));
      }
    }
    this.qMode = qMode;
    this.qNoOfLeftDims = qNoOfLeftDims;
    if (qPivotDataPages !== void 0 && qPivotDataPages !== null) {
      if (qPivotDataPages.length > 0 && qPivotDataPages[0] instanceof NxPivotPage) {
        this.qPivotDataPages = qPivotDataPages;
      } else {
        this.qPivotDataPages = qPivotDataPages.map((element) => new NxPivotPage(element, this.auth));
      }
    }
    if (qSize !== void 0 && qSize !== null) {
      if (qSize instanceof Size) {
        this.qSize = qSize;
      } else {
        this.qSize = new Size(qSize, this.auth);
      }
    }
    if (qStackedDataPages !== void 0 && qStackedDataPages !== null) {
      if (qStackedDataPages.length > 0 && qStackedDataPages[0] instanceof NxStackPage) {
        this.qStackedDataPages = qStackedDataPages;
      } else {
        this.qStackedDataPages = qStackedDataPages.map((element) => new NxStackPage(element, this.auth));
      }
    }
    this.qStateName = qStateName;
    this.qTitle = qTitle;
    this.qTreeNodesOnDim = qTreeNodesOnDim;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class HyperCubeDef {
  constructor({
    qAlwaysFullyExpanded,
    qCalcCond,
    qCalcCondition,
    qColumnOrder,
    qContextSetExpression,
    qDimensions,
    qDynamicScript,
    qExpansionState,
    qIndentMode,
    qInitialDataFetch,
    qInterColumnSortOrder,
    qMaxStackedCells,
    qMeasures,
    qMode,
    qNoOfLeftDims,
    qPopulateMissing,
    qPseudoDimPos,
    qReductionMode,
    qShowTotalsAbove,
    qSortbyYValue,
    qStateName,
    qSuppressMissing,
    qSuppressZero,
    qTitle,
    ...rest
  }, auth) {
    this.qMaxStackedCells = 5e3;
    this.qNoOfLeftDims = -1;
    this.qPseudoDimPos = -1;
    this.auth = auth;
    this.qAlwaysFullyExpanded = qAlwaysFullyExpanded;
    if (qCalcCond !== void 0 && qCalcCond !== null) {
      if (qCalcCond instanceof ValueExpr) {
        this.qCalcCond = qCalcCond;
      } else {
        this.qCalcCond = new ValueExpr(qCalcCond, this.auth);
      }
    }
    if (qCalcCondition !== void 0 && qCalcCondition !== null) {
      if (qCalcCondition instanceof NxCalcCond) {
        this.qCalcCondition = qCalcCondition;
      } else {
        this.qCalcCondition = new NxCalcCond(qCalcCondition, this.auth);
      }
    }
    this.qColumnOrder = qColumnOrder;
    this.qContextSetExpression = qContextSetExpression;
    if (qDimensions !== void 0 && qDimensions !== null) {
      if (qDimensions.length > 0 && qDimensions[0] instanceof NxDimension) {
        this.qDimensions = qDimensions;
      } else {
        this.qDimensions = qDimensions.map((element) => new NxDimension(element, this.auth));
      }
    }
    this.qDynamicScript = qDynamicScript;
    if (qExpansionState !== void 0 && qExpansionState !== null) {
      if (qExpansionState.length > 0 && qExpansionState[0] instanceof ExpansionData) {
        this.qExpansionState = qExpansionState;
      } else {
        this.qExpansionState = qExpansionState.map((element) => new ExpansionData(element, this.auth));
      }
    }
    this.qIndentMode = qIndentMode;
    if (qInitialDataFetch !== void 0 && qInitialDataFetch !== null) {
      if (qInitialDataFetch.length > 0 && qInitialDataFetch[0] instanceof NxPage) {
        this.qInitialDataFetch = qInitialDataFetch;
      } else {
        this.qInitialDataFetch = qInitialDataFetch.map((element) => new NxPage(element, this.auth));
      }
    }
    this.qInterColumnSortOrder = qInterColumnSortOrder;
    this.qMaxStackedCells = qMaxStackedCells;
    if (qMeasures !== void 0 && qMeasures !== null) {
      if (qMeasures.length > 0 && qMeasures[0] instanceof NxMeasure) {
        this.qMeasures = qMeasures;
      } else {
        this.qMeasures = qMeasures.map((element) => new NxMeasure(element, this.auth));
      }
    }
    this.qMode = qMode;
    this.qNoOfLeftDims = qNoOfLeftDims;
    this.qPopulateMissing = qPopulateMissing;
    this.qPseudoDimPos = qPseudoDimPos;
    this.qReductionMode = qReductionMode;
    this.qShowTotalsAbove = qShowTotalsAbove;
    this.qSortbyYValue = qSortbyYValue;
    this.qStateName = qStateName;
    this.qSuppressMissing = qSuppressMissing;
    this.qSuppressZero = qSuppressZero;
    if (qTitle !== void 0 && qTitle !== null) {
      if (qTitle instanceof StringExpr) {
        this.qTitle = qTitle;
      } else {
        this.qTitle = new StringExpr(qTitle, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class InputFieldItem {
  constructor({
    qFieldName,
    qPackedHashKeys,
    qValues,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qFieldName = qFieldName;
    this.qPackedHashKeys = qPackedHashKeys;
    if (qValues !== void 0 && qValues !== null) {
      if (qValues.length > 0 && qValues[0] instanceof FieldValue) {
        this.qValues = qValues;
      } else {
        this.qValues = qValues.map((element) => new FieldValue(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class InterFieldSortData {
  constructor({
    qName,
    qReversed,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qName = qName;
    this.qReversed = qReversed;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class InteractDef {
  constructor({
    qButtons,
    qHidden,
    qInput,
    qLine,
    qMsg,
    qNewLineNr,
    qOldLineNr,
    qPath,
    qResult,
    qTitle,
    qType,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qButtons = qButtons;
    this.qHidden = qHidden;
    this.qInput = qInput;
    this.qLine = qLine;
    this.qMsg = qMsg;
    this.qNewLineNr = qNewLineNr;
    this.qOldLineNr = qOldLineNr;
    this.qPath = qPath;
    this.qResult = qResult;
    this.qTitle = qTitle;
    this.qType = qType;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class InteractType {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class JsonObject {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class KeyType {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class LayoutBookmarkData {
  constructor({
    qActive,
    qId,
    qScrollPos,
    qShowMode,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qActive = qActive;
    this.qId = qId;
    if (qScrollPos !== void 0 && qScrollPos !== null) {
      if (qScrollPos instanceof ScrollPosition) {
        this.qScrollPos = qScrollPos;
      } else {
        this.qScrollPos = new ScrollPosition(qScrollPos, this.auth);
      }
    }
    this.qShowMode = qShowMode;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class LayoutExclude {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class LayoutFieldInfo {
  constructor({
    qExcludedValuesCount,
    qFieldName,
    qValuesCount,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qExcludedValuesCount = qExcludedValuesCount;
    this.qFieldName = qFieldName;
    this.qValuesCount = qValuesCount;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class LineageInfo {
  constructor({
    qDiscriminator,
    qStatement,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qDiscriminator = qDiscriminator;
    this.qStatement = qStatement;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ListObject {
  constructor({
    qDataPages,
    qDimensionInfo,
    qError,
    qExpressions,
    qSize,
    qStateName,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qDataPages !== void 0 && qDataPages !== null) {
      if (qDataPages.length > 0 && qDataPages[0] instanceof NxDataPage) {
        this.qDataPages = qDataPages;
      } else {
        this.qDataPages = qDataPages.map((element) => new NxDataPage(element, this.auth));
      }
    }
    if (qDimensionInfo !== void 0 && qDimensionInfo !== null) {
      if (qDimensionInfo instanceof NxDimensionInfo) {
        this.qDimensionInfo = qDimensionInfo;
      } else {
        this.qDimensionInfo = new NxDimensionInfo(qDimensionInfo, this.auth);
      }
    }
    if (qError !== void 0 && qError !== null) {
      if (qError instanceof NxValidationError) {
        this.qError = qError;
      } else {
        this.qError = new NxValidationError(qError, this.auth);
      }
    }
    if (qExpressions !== void 0 && qExpressions !== null) {
      if (qExpressions.length > 0 && qExpressions[0] instanceof NxListObjectExpression) {
        this.qExpressions = qExpressions;
      } else {
        this.qExpressions = qExpressions.map((element) => new NxListObjectExpression(element, this.auth));
      }
    }
    if (qSize !== void 0 && qSize !== null) {
      if (qSize instanceof Size) {
        this.qSize = qSize;
      } else {
        this.qSize = new Size(qSize, this.auth);
      }
    }
    this.qStateName = qStateName;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ListObjectDef {
  constructor({
    qAutoSortByState,
    qDef,
    qDirectQuerySimplifiedView,
    qExpressions,
    qFrequencyMode,
    qInitialDataFetch,
    qLibraryId,
    qShowAlternatives,
    qStateName,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qAutoSortByState !== void 0 && qAutoSortByState !== null) {
      if (qAutoSortByState instanceof NxAutoSortByStateDef) {
        this.qAutoSortByState = qAutoSortByState;
      } else {
        this.qAutoSortByState = new NxAutoSortByStateDef(qAutoSortByState, this.auth);
      }
    }
    if (qDef !== void 0 && qDef !== null) {
      if (qDef instanceof NxInlineDimensionDef) {
        this.qDef = qDef;
      } else {
        this.qDef = new NxInlineDimensionDef(qDef, this.auth);
      }
    }
    this.qDirectQuerySimplifiedView = qDirectQuerySimplifiedView;
    if (qExpressions !== void 0 && qExpressions !== null) {
      if (qExpressions.length > 0 && qExpressions[0] instanceof NxListObjectExpressionDef) {
        this.qExpressions = qExpressions;
      } else {
        this.qExpressions = qExpressions.map((element) => new NxListObjectExpressionDef(element, this.auth));
      }
    }
    this.qFrequencyMode = qFrequencyMode;
    if (qInitialDataFetch !== void 0 && qInitialDataFetch !== null) {
      if (qInitialDataFetch.length > 0 && qInitialDataFetch[0] instanceof NxPage) {
        this.qInitialDataFetch = qInitialDataFetch;
      } else {
        this.qInitialDataFetch = qInitialDataFetch.map((element) => new NxPage(element, this.auth));
      }
    }
    this.qLibraryId = qLibraryId;
    this.qShowAlternatives = qShowAlternatives;
    this.qStateName = qStateName;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class LocaleInfo {
  constructor({
    qBrokenWeeks,
    qCalendarStrings,
    qCollation,
    qCurrentYear,
    qDateFmt,
    qDecimalSep,
    qFirstMonthOfYear,
    qFirstWeekDay,
    qListSep,
    qMoneyDecimalSep,
    qMoneyFmt,
    qMoneyThousandSep,
    qNumericalAbbreviation,
    qReferenceDay,
    qThousandSep,
    qTimeFmt,
    qTimestampFmt,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qBrokenWeeks = qBrokenWeeks;
    if (qCalendarStrings !== void 0 && qCalendarStrings !== null) {
      if (qCalendarStrings instanceof CalendarStrings) {
        this.qCalendarStrings = qCalendarStrings;
      } else {
        this.qCalendarStrings = new CalendarStrings(qCalendarStrings, this.auth);
      }
    }
    this.qCollation = qCollation;
    this.qCurrentYear = qCurrentYear;
    this.qDateFmt = qDateFmt;
    this.qDecimalSep = qDecimalSep;
    this.qFirstMonthOfYear = qFirstMonthOfYear;
    this.qFirstWeekDay = qFirstWeekDay;
    this.qListSep = qListSep;
    this.qMoneyDecimalSep = qMoneyDecimalSep;
    this.qMoneyFmt = qMoneyFmt;
    this.qMoneyThousandSep = qMoneyThousandSep;
    this.qNumericalAbbreviation = qNumericalAbbreviation;
    this.qReferenceDay = qReferenceDay;
    this.qThousandSep = qThousandSep;
    this.qTimeFmt = qTimeFmt;
    this.qTimestampFmt = qTimestampFmt;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class LogOnType {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class MeasureList {
  constructor({
    qItems,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qItems !== void 0 && qItems !== null) {
      if (qItems.length > 0 && qItems[0] instanceof NxContainerEntry) {
        this.qItems = qItems;
      } else {
        this.qItems = qItems.map((element) => new NxContainerEntry(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class MeasureListDef {
  constructor({
    qData,
    qType,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qData !== void 0 && qData !== null) {
      if (qData instanceof JsonObject) {
        this.qData = qData;
      } else {
        this.qData = new JsonObject(qData, this.auth);
      }
    }
    this.qType = qType;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class MediaList {
  constructor({
    qItems,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qItems !== void 0 && qItems !== null) {
      if (qItems.length > 0 && qItems[0] instanceof MediaListItem) {
        this.qItems = qItems;
      } else {
        this.qItems = qItems.map((element) => new MediaListItem(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class MediaListDef {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class MediaListItem {
  constructor({
    qUrl,
    qUrlDef,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qUrl = qUrl;
    this.qUrlDef = qUrlDef;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class MetaData {
  constructor({
    qAccessList,
    qHidden,
    qLinkedTo,
    qPersonalEditionHash_OBSOLETE,
    qRestrictedAccess,
    qShared,
    qSheetId,
    qTemporary,
    qUtcModifyTime,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qAccessList = qAccessList;
    this.qHidden = qHidden;
    this.qLinkedTo = qLinkedTo;
    this.qPersonalEditionHash_OBSOLETE = qPersonalEditionHash_OBSOLETE;
    this.qRestrictedAccess = qRestrictedAccess;
    this.qShared = qShared;
    this.qSheetId = qSheetId;
    this.qTemporary = qTemporary;
    this.qUtcModifyTime = qUtcModifyTime;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxAppLayout {
  constructor({
    qFileName,
    qHasData,
    qHasScript,
    qIsBDILiveMode,
    qIsDirectQueryMode,
    qIsOpenedWithoutData,
    qIsSessionApp,
    qLastReloadTime,
    qLocaleInfo,
    qMeta,
    qModified,
    qReadOnly,
    qStateNames,
    qThumbnail,
    qTitle,
    qUnsupportedFeatures,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qFileName = qFileName;
    this.qHasData = qHasData;
    this.qHasScript = qHasScript;
    this.qIsBDILiveMode = qIsBDILiveMode;
    this.qIsDirectQueryMode = qIsDirectQueryMode;
    this.qIsOpenedWithoutData = qIsOpenedWithoutData;
    this.qIsSessionApp = qIsSessionApp;
    this.qLastReloadTime = qLastReloadTime;
    if (qLocaleInfo !== void 0 && qLocaleInfo !== null) {
      if (qLocaleInfo instanceof LocaleInfo) {
        this.qLocaleInfo = qLocaleInfo;
      } else {
        this.qLocaleInfo = new LocaleInfo(qLocaleInfo, this.auth);
      }
    }
    if (qMeta !== void 0 && qMeta !== null) {
      if (qMeta instanceof NxMeta) {
        this.qMeta = qMeta;
      } else {
        this.qMeta = new NxMeta(qMeta, this.auth);
      }
    }
    this.qModified = qModified;
    this.qReadOnly = qReadOnly;
    this.qStateNames = qStateNames;
    if (qThumbnail !== void 0 && qThumbnail !== null) {
      if (qThumbnail instanceof StaticContentUrl) {
        this.qThumbnail = qThumbnail;
      } else {
        this.qThumbnail = new StaticContentUrl(qThumbnail, this.auth);
      }
    }
    this.qTitle = qTitle;
    this.qUnsupportedFeatures = qUnsupportedFeatures;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxAppProperties {
  constructor({
    qHasSectionAccess,
    qLastReloadTime,
    qMigrationHash,
    qSavedInProductVersion,
    qThumbnail,
    qTitle,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qHasSectionAccess = qHasSectionAccess;
    this.qLastReloadTime = qLastReloadTime;
    this.qMigrationHash = qMigrationHash;
    this.qSavedInProductVersion = qSavedInProductVersion;
    if (qThumbnail !== void 0 && qThumbnail !== null) {
      if (qThumbnail instanceof StaticContentUrlDef) {
        this.qThumbnail = qThumbnail;
      } else {
        this.qThumbnail = new StaticContentUrlDef(qThumbnail, this.auth);
      }
    }
    this.qTitle = qTitle;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxAttrDimDef {
  constructor({
    qAttribute,
    qDef,
    qLibraryId,
    qSortBy,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qAttribute = qAttribute;
    this.qDef = qDef;
    this.qLibraryId = qLibraryId;
    if (qSortBy !== void 0 && qSortBy !== null) {
      if (qSortBy instanceof SortCriteria) {
        this.qSortBy = qSortBy;
      } else {
        this.qSortBy = new SortCriteria(qSortBy, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxAttrDimInfo {
  constructor({
    qCardinal,
    qError,
    qFallbackTitle,
    qIsCalculated,
    qLocked,
    qSize,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qCardinal = qCardinal;
    if (qError !== void 0 && qError !== null) {
      if (qError instanceof NxValidationError) {
        this.qError = qError;
      } else {
        this.qError = new NxValidationError(qError, this.auth);
      }
    }
    this.qFallbackTitle = qFallbackTitle;
    this.qIsCalculated = qIsCalculated;
    this.qLocked = qLocked;
    if (qSize !== void 0 && qSize !== null) {
      if (qSize instanceof Size) {
        this.qSize = qSize;
      } else {
        this.qSize = new Size(qSize, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxAttrExprDef {
  constructor({
    qAttribute,
    qExpression,
    qLabel,
    qLabelExpression,
    qLibraryId,
    qNumFormat,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qAttribute = qAttribute;
    this.qExpression = qExpression;
    this.qLabel = qLabel;
    this.qLabelExpression = qLabelExpression;
    this.qLibraryId = qLibraryId;
    if (qNumFormat !== void 0 && qNumFormat !== null) {
      if (qNumFormat instanceof FieldAttributes) {
        this.qNumFormat = qNumFormat;
      } else {
        this.qNumFormat = new FieldAttributes(qNumFormat, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxAttrExprInfo {
  constructor({
    qFallbackTitle,
    qIsAutoFormat,
    qMax,
    qMaxText,
    qMin,
    qMinText,
    qNumFormat,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qFallbackTitle = qFallbackTitle;
    this.qIsAutoFormat = qIsAutoFormat;
    this.qMax = qMax;
    this.qMaxText = qMaxText;
    this.qMin = qMin;
    this.qMinText = qMinText;
    if (qNumFormat !== void 0 && qNumFormat !== null) {
      if (qNumFormat instanceof FieldAttributes) {
        this.qNumFormat = qNumFormat;
      } else {
        this.qNumFormat = new FieldAttributes(qNumFormat, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxAttributeDimValues {
  constructor({
    qValues,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qValues !== void 0 && qValues !== null) {
      if (qValues.length > 0 && qValues[0] instanceof NxSimpleDimValue) {
        this.qValues = qValues;
      } else {
        this.qValues = qValues.map((element) => new NxSimpleDimValue(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxAttributeExpressionValues {
  constructor({
    qValues,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qValues !== void 0 && qValues !== null) {
      if (qValues.length > 0 && qValues[0] instanceof NxSimpleValue) {
        this.qValues = qValues;
      } else {
        this.qValues = qValues.map((element) => new NxSimpleValue(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxAutoSortByStateDef {
  constructor({
    qDisplayNumberOfRows,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qDisplayNumberOfRows = qDisplayNumberOfRows;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxAxisData {
  constructor({
    qAxis,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qAxis !== void 0 && qAxis !== null) {
      if (qAxis.length > 0 && qAxis[0] instanceof NxAxisTicks) {
        this.qAxis = qAxis;
      } else {
        this.qAxis = qAxis.map((element) => new NxAxisTicks(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxAxisTicks {
  constructor({
    qName,
    qTags,
    qTicks,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qName = qName;
    this.qTags = qTags;
    if (qTicks !== void 0 && qTicks !== null) {
      if (qTicks.length > 0 && qTicks[0] instanceof NxTickCell) {
        this.qTicks = qTicks;
      } else {
        this.qTicks = qTicks.map((element) => new NxTickCell(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxBookmark {
  constructor({
    qPatches,
    qStateData,
    qUtcModifyTime,
    qVariableItems,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qPatches !== void 0 && qPatches !== null) {
      if (qPatches.length > 0 && qPatches[0] instanceof NxPatches) {
        this.qPatches = qPatches;
      } else {
        this.qPatches = qPatches.map((element) => new NxPatches(element, this.auth));
      }
    }
    if (qStateData !== void 0 && qStateData !== null) {
      if (qStateData.length > 0 && qStateData[0] instanceof AlternateStateData) {
        this.qStateData = qStateData;
      } else {
        this.qStateData = qStateData.map((element) => new AlternateStateData(element, this.auth));
      }
    }
    this.qUtcModifyTime = qUtcModifyTime;
    if (qVariableItems !== void 0 && qVariableItems !== null) {
      if (qVariableItems.length > 0 && qVariableItems[0] instanceof BookmarkVariableItem) {
        this.qVariableItems = qVariableItems;
      } else {
        this.qVariableItems = qVariableItems.map((element) => new BookmarkVariableItem(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxCalcCond {
  constructor({
    qCond,
    qMsg,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qCond !== void 0 && qCond !== null) {
      if (qCond instanceof ValueExpr) {
        this.qCond = qCond;
      } else {
        this.qCond = new ValueExpr(qCond, this.auth);
      }
    }
    if (qMsg !== void 0 && qMsg !== null) {
      if (qMsg instanceof StringExpr) {
        this.qMsg = qMsg;
      } else {
        this.qMsg = new StringExpr(qMsg, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxCardinalities {
  constructor({
    qAllValuesCardinal,
    qCardinal,
    qHypercubeCardinal,
    ...rest
  }, auth) {
    this.qAllValuesCardinal = -1;
    this.auth = auth;
    this.qAllValuesCardinal = qAllValuesCardinal;
    this.qCardinal = qCardinal;
    this.qHypercubeCardinal = qHypercubeCardinal;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxCell {
  constructor({
    qAttrDims,
    qAttrExps,
    qElemNumber,
    qFrequency,
    qHighlightRanges,
    qInExtRow,
    qIsEmpty,
    qIsNull,
    qIsOtherCell,
    qIsTotalCell,
    qMiniChart,
    qNum,
    qState,
    qText,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qAttrDims !== void 0 && qAttrDims !== null) {
      if (qAttrDims instanceof NxAttributeDimValues) {
        this.qAttrDims = qAttrDims;
      } else {
        this.qAttrDims = new NxAttributeDimValues(qAttrDims, this.auth);
      }
    }
    if (qAttrExps !== void 0 && qAttrExps !== null) {
      if (qAttrExps instanceof NxAttributeExpressionValues) {
        this.qAttrExps = qAttrExps;
      } else {
        this.qAttrExps = new NxAttributeExpressionValues(qAttrExps, this.auth);
      }
    }
    this.qElemNumber = qElemNumber;
    this.qFrequency = qFrequency;
    if (qHighlightRanges !== void 0 && qHighlightRanges !== null) {
      if (qHighlightRanges instanceof NxHighlightRanges) {
        this.qHighlightRanges = qHighlightRanges;
      } else {
        this.qHighlightRanges = new NxHighlightRanges(qHighlightRanges, this.auth);
      }
    }
    this.qInExtRow = qInExtRow;
    this.qIsEmpty = qIsEmpty;
    this.qIsNull = qIsNull;
    this.qIsOtherCell = qIsOtherCell;
    this.qIsTotalCell = qIsTotalCell;
    if (qMiniChart !== void 0 && qMiniChart !== null) {
      if (qMiniChart instanceof NxMiniChartData) {
        this.qMiniChart = qMiniChart;
      } else {
        this.qMiniChart = new NxMiniChartData(qMiniChart, this.auth);
      }
    }
    this.qNum = qNum;
    this.qState = qState;
    this.qText = qText;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxCellPosition {
  constructor({
    qx,
    qy,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qx = qx;
    this.qy = qy;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxCellRows extends Array {
  constructor(arr, auth) {
    super();
    this.auth = auth;
    for (const e of arr) {
      this.push(new NxCell(e, this.auth));
    }
  }
}
class NxContainerEntry {
  constructor({
    qData,
    qInfo,
    qMeta,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qData !== void 0 && qData !== null) {
      if (qData instanceof JsonObject) {
        this.qData = qData;
      } else {
        this.qData = new JsonObject(qData, this.auth);
      }
    }
    if (qInfo !== void 0 && qInfo !== null) {
      if (qInfo instanceof NxInfo) {
        this.qInfo = qInfo;
      } else {
        this.qInfo = new NxInfo(qInfo, this.auth);
      }
    }
    if (qMeta !== void 0 && qMeta !== null) {
      if (qMeta instanceof NxMeta) {
        this.qMeta = qMeta;
      } else {
        this.qMeta = new NxMeta(qMeta, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxContinuousDataOptions {
  constructor({
    qEnd,
    qMaxNbrTicks,
    qMaxNumberLines,
    qNbrPoints,
    qStart,
    ...rest
  }, auth) {
    this.qMaxNumberLines = -1;
    this.auth = auth;
    this.qEnd = qEnd;
    this.qMaxNbrTicks = qMaxNbrTicks;
    this.qMaxNumberLines = qMaxNumberLines;
    this.qNbrPoints = qNbrPoints;
    this.qStart = qStart;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxContinuousMode {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxContinuousRangeSelectInfo {
  constructor({
    qDimIx,
    qRange,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qDimIx = qDimIx;
    if (qRange !== void 0 && qRange !== null) {
      if (qRange instanceof Range) {
        this.qRange = qRange;
      } else {
        this.qRange = new Range(qRange, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxCurrentSelectionItem {
  constructor({
    qField,
    qIsHidden,
    qIsNum,
    qLocked,
    qNotSelectedFieldSelectionInfo,
    qOneAndOnlyOne,
    qRangeInfo,
    qReadableName,
    qSelected,
    qSelectedCount,
    qSelectedFieldSelectionInfo,
    qSelectionThreshold,
    qSortIndex,
    qStateCounts,
    qTextSearch,
    qTotal,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qField = qField;
    this.qIsHidden = qIsHidden;
    this.qIsNum = qIsNum;
    this.qLocked = qLocked;
    if (qNotSelectedFieldSelectionInfo !== void 0 && qNotSelectedFieldSelectionInfo !== null) {
      if (qNotSelectedFieldSelectionInfo.length > 0 && qNotSelectedFieldSelectionInfo[0] instanceof NxFieldSelectionInfo) {
        this.qNotSelectedFieldSelectionInfo = qNotSelectedFieldSelectionInfo;
      } else {
        this.qNotSelectedFieldSelectionInfo = qNotSelectedFieldSelectionInfo.map((element) => new NxFieldSelectionInfo(element, this.auth));
      }
    }
    this.qOneAndOnlyOne = qOneAndOnlyOne;
    if (qRangeInfo !== void 0 && qRangeInfo !== null) {
      if (qRangeInfo.length > 0 && qRangeInfo[0] instanceof RangeSelectInfo) {
        this.qRangeInfo = qRangeInfo;
      } else {
        this.qRangeInfo = qRangeInfo.map((element) => new RangeSelectInfo(element, this.auth));
      }
    }
    this.qReadableName = qReadableName;
    this.qSelected = qSelected;
    this.qSelectedCount = qSelectedCount;
    if (qSelectedFieldSelectionInfo !== void 0 && qSelectedFieldSelectionInfo !== null) {
      if (qSelectedFieldSelectionInfo.length > 0 && qSelectedFieldSelectionInfo[0] instanceof NxFieldSelectionInfo) {
        this.qSelectedFieldSelectionInfo = qSelectedFieldSelectionInfo;
      } else {
        this.qSelectedFieldSelectionInfo = qSelectedFieldSelectionInfo.map((element) => new NxFieldSelectionInfo(element, this.auth));
      }
    }
    this.qSelectionThreshold = qSelectionThreshold;
    this.qSortIndex = qSortIndex;
    if (qStateCounts !== void 0 && qStateCounts !== null) {
      if (qStateCounts instanceof NxStateCounts) {
        this.qStateCounts = qStateCounts;
      } else {
        this.qStateCounts = new NxStateCounts(qStateCounts, this.auth);
      }
    }
    this.qTextSearch = qTextSearch;
    this.qTotal = qTotal;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxDataAreaPage {
  constructor({
    qHeight,
    qLeft,
    qTop,
    qWidth,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qHeight = qHeight;
    this.qLeft = qLeft;
    this.qTop = qTop;
    this.qWidth = qWidth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxDataPage {
  constructor({
    qArea,
    qIsReduced,
    qMatrix,
    qTails,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qArea !== void 0 && qArea !== null) {
      if (qArea instanceof Rect) {
        this.qArea = qArea;
      } else {
        this.qArea = new Rect(qArea, this.auth);
      }
    }
    this.qIsReduced = qIsReduced;
    if (qMatrix !== void 0 && qMatrix !== null) {
      if (qMatrix.length > 0 && qMatrix[0] instanceof NxCellRows) {
        this.qMatrix = qMatrix;
      } else {
        this.qMatrix = qMatrix.map((element) => new NxCellRows(element, this.auth));
      }
    }
    if (qTails !== void 0 && qTails !== null) {
      if (qTails.length > 0 && qTails[0] instanceof NxGroupTail) {
        this.qTails = qTails;
      } else {
        this.qTails = qTails.map((element) => new NxGroupTail(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxDataReductionMode {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxDerivedField {
  constructor({
    qExpr,
    qId,
    qMethod,
    qName,
    qTags,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qExpr = qExpr;
    this.qId = qId;
    this.qMethod = qMethod;
    this.qName = qName;
    this.qTags = qTags;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxDerivedFieldDescriptionList {
  constructor({
    qDerivedFieldLists,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qDerivedFieldLists !== void 0 && qDerivedFieldLists !== null) {
      if (qDerivedFieldLists.length > 0 && qDerivedFieldLists[0] instanceof NxDerivedFieldsData) {
        this.qDerivedFieldLists = qDerivedFieldLists;
      } else {
        this.qDerivedFieldLists = qDerivedFieldLists.map((element) => new NxDerivedFieldsData(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxDerivedFieldsData {
  constructor({
    qDerivedDefinitionName,
    qFieldDefs,
    qGroupDefs,
    qTags,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qDerivedDefinitionName = qDerivedDefinitionName;
    if (qFieldDefs !== void 0 && qFieldDefs !== null) {
      if (qFieldDefs.length > 0 && qFieldDefs[0] instanceof NxDerivedField) {
        this.qFieldDefs = qFieldDefs;
      } else {
        this.qFieldDefs = qFieldDefs.map((element) => new NxDerivedField(element, this.auth));
      }
    }
    if (qGroupDefs !== void 0 && qGroupDefs !== null) {
      if (qGroupDefs.length > 0 && qGroupDefs[0] instanceof NxDerivedGroup) {
        this.qGroupDefs = qGroupDefs;
      } else {
        this.qGroupDefs = qGroupDefs.map((element) => new NxDerivedGroup(element, this.auth));
      }
    }
    this.qTags = qTags;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxDerivedGroup {
  constructor({
    qFieldDefs,
    qGrouping,
    qId,
    qName,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qFieldDefs = qFieldDefs;
    this.qGrouping = qGrouping;
    this.qId = qId;
    this.qName = qName;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxDimCellType {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxDimension {
  constructor({
    qAttributeDimensions,
    qAttributeExpressions,
    qCalcCond,
    qCalcCondition,
    qDef,
    qIncludeElemValue,
    qLibraryId,
    qNullSuppression,
    qOtherLabel,
    qOtherTotalSpec,
    qShowAll,
    qShowTotal,
    qTotalLabel,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qAttributeDimensions !== void 0 && qAttributeDimensions !== null) {
      if (qAttributeDimensions.length > 0 && qAttributeDimensions[0] instanceof NxAttrDimDef) {
        this.qAttributeDimensions = qAttributeDimensions;
      } else {
        this.qAttributeDimensions = qAttributeDimensions.map((element) => new NxAttrDimDef(element, this.auth));
      }
    }
    if (qAttributeExpressions !== void 0 && qAttributeExpressions !== null) {
      if (qAttributeExpressions.length > 0 && qAttributeExpressions[0] instanceof NxAttrExprDef) {
        this.qAttributeExpressions = qAttributeExpressions;
      } else {
        this.qAttributeExpressions = qAttributeExpressions.map((element) => new NxAttrExprDef(element, this.auth));
      }
    }
    if (qCalcCond !== void 0 && qCalcCond !== null) {
      if (qCalcCond instanceof ValueExpr) {
        this.qCalcCond = qCalcCond;
      } else {
        this.qCalcCond = new ValueExpr(qCalcCond, this.auth);
      }
    }
    if (qCalcCondition !== void 0 && qCalcCondition !== null) {
      if (qCalcCondition instanceof NxCalcCond) {
        this.qCalcCondition = qCalcCondition;
      } else {
        this.qCalcCondition = new NxCalcCond(qCalcCondition, this.auth);
      }
    }
    if (qDef !== void 0 && qDef !== null) {
      if (qDef instanceof NxInlineDimensionDef) {
        this.qDef = qDef;
      } else {
        this.qDef = new NxInlineDimensionDef(qDef, this.auth);
      }
    }
    this.qIncludeElemValue = qIncludeElemValue;
    this.qLibraryId = qLibraryId;
    this.qNullSuppression = qNullSuppression;
    if (qOtherLabel !== void 0 && qOtherLabel !== null) {
      if (qOtherLabel instanceof StringExpr) {
        this.qOtherLabel = qOtherLabel;
      } else {
        this.qOtherLabel = new StringExpr(qOtherLabel, this.auth);
      }
    }
    if (qOtherTotalSpec !== void 0 && qOtherTotalSpec !== null) {
      if (qOtherTotalSpec instanceof OtherTotalSpecProp) {
        this.qOtherTotalSpec = qOtherTotalSpec;
      } else {
        this.qOtherTotalSpec = new OtherTotalSpecProp(qOtherTotalSpec, this.auth);
      }
    }
    this.qShowAll = qShowAll;
    this.qShowTotal = qShowTotal;
    if (qTotalLabel !== void 0 && qTotalLabel !== null) {
      if (qTotalLabel instanceof StringExpr) {
        this.qTotalLabel = qTotalLabel;
      } else {
        this.qTotalLabel = new StringExpr(qTotalLabel, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxDimensionInfo {
  constructor({
    qApprMaxGlyphCount,
    qAttrDimInfo,
    qAttrExprInfo,
    qCalcCondMsg,
    qCardinal,
    qCardinalities,
    qContinuousAxes,
    qDerivedField,
    qDimensionType,
    qError,
    qFallbackTitle,
    qGroupFallbackTitles,
    qGroupFieldDefs,
    qGroupPos,
    qGrouping,
    qIsAutoFormat,
    qIsCalculated,
    qIsCyclic,
    qIsOneAndOnlyOne,
    qIsSemantic,
    qLibraryId,
    qLocked,
    qMax,
    qMin,
    qNumFormat,
    qReverseSort,
    qSortIndicator,
    qStateCounts,
    qTags,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qApprMaxGlyphCount = qApprMaxGlyphCount;
    if (qAttrDimInfo !== void 0 && qAttrDimInfo !== null) {
      if (qAttrDimInfo.length > 0 && qAttrDimInfo[0] instanceof NxAttrDimInfo) {
        this.qAttrDimInfo = qAttrDimInfo;
      } else {
        this.qAttrDimInfo = qAttrDimInfo.map((element) => new NxAttrDimInfo(element, this.auth));
      }
    }
    if (qAttrExprInfo !== void 0 && qAttrExprInfo !== null) {
      if (qAttrExprInfo.length > 0 && qAttrExprInfo[0] instanceof NxAttrExprInfo) {
        this.qAttrExprInfo = qAttrExprInfo;
      } else {
        this.qAttrExprInfo = qAttrExprInfo.map((element) => new NxAttrExprInfo(element, this.auth));
      }
    }
    this.qCalcCondMsg = qCalcCondMsg;
    this.qCardinal = qCardinal;
    if (qCardinalities !== void 0 && qCardinalities !== null) {
      if (qCardinalities instanceof NxCardinalities) {
        this.qCardinalities = qCardinalities;
      } else {
        this.qCardinalities = new NxCardinalities(qCardinalities, this.auth);
      }
    }
    this.qContinuousAxes = qContinuousAxes;
    this.qDerivedField = qDerivedField;
    this.qDimensionType = qDimensionType;
    if (qError !== void 0 && qError !== null) {
      if (qError instanceof NxValidationError) {
        this.qError = qError;
      } else {
        this.qError = new NxValidationError(qError, this.auth);
      }
    }
    this.qFallbackTitle = qFallbackTitle;
    this.qGroupFallbackTitles = qGroupFallbackTitles;
    this.qGroupFieldDefs = qGroupFieldDefs;
    this.qGroupPos = qGroupPos;
    this.qGrouping = qGrouping;
    this.qIsAutoFormat = qIsAutoFormat;
    this.qIsCalculated = qIsCalculated;
    this.qIsCyclic = qIsCyclic;
    this.qIsOneAndOnlyOne = qIsOneAndOnlyOne;
    this.qIsSemantic = qIsSemantic;
    this.qLibraryId = qLibraryId;
    this.qLocked = qLocked;
    this.qMax = qMax;
    this.qMin = qMin;
    if (qNumFormat !== void 0 && qNumFormat !== null) {
      if (qNumFormat instanceof FieldAttributes) {
        this.qNumFormat = qNumFormat;
      } else {
        this.qNumFormat = new FieldAttributes(qNumFormat, this.auth);
      }
    }
    this.qReverseSort = qReverseSort;
    this.qSortIndicator = qSortIndicator;
    if (qStateCounts !== void 0 && qStateCounts !== null) {
      if (qStateCounts instanceof NxStateCounts) {
        this.qStateCounts = qStateCounts;
      } else {
        this.qStateCounts = new NxStateCounts(qStateCounts, this.auth);
      }
    }
    this.qTags = qTags;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxDimensionType {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxDownloadInfo {
  constructor({
    qFileSize,
    qUrl,
    ...rest
  }, auth) {
    this.qFileSize = -1;
    this.auth = auth;
    this.qFileSize = qFileSize;
    this.qUrl = qUrl;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxDownloadOptions {
  constructor({
    qBookmarkId,
    qExpires,
    qServeOnce,
    ...rest
  }, auth) {
    this.qExpires = 3600;
    this.auth = auth;
    this.qBookmarkId = qBookmarkId;
    this.qExpires = qExpires;
    this.qServeOnce = qServeOnce;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxEngineVersion {
  constructor({
    qComponentVersion,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qComponentVersion = qComponentVersion;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxExportFileType {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxExportState {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxFeature {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxFieldDescription {
  constructor({
    qAndMode,
    qCardinal,
    qDerivedFieldData,
    qIsDefinitionOnly,
    qIsDetail,
    qIsHidden,
    qIsImplicit,
    qIsSemantic,
    qIsSystem,
    qName,
    qReadableName,
    qTags,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qAndMode = qAndMode;
    this.qCardinal = qCardinal;
    if (qDerivedFieldData !== void 0 && qDerivedFieldData !== null) {
      if (qDerivedFieldData instanceof NxDerivedFieldDescriptionList) {
        this.qDerivedFieldData = qDerivedFieldData;
      } else {
        this.qDerivedFieldData = new NxDerivedFieldDescriptionList(qDerivedFieldData, this.auth);
      }
    }
    this.qIsDefinitionOnly = qIsDefinitionOnly;
    this.qIsDetail = qIsDetail;
    this.qIsHidden = qIsHidden;
    this.qIsImplicit = qIsImplicit;
    this.qIsSemantic = qIsSemantic;
    this.qIsSystem = qIsSystem;
    this.qName = qName;
    this.qReadableName = qReadableName;
    this.qTags = qTags;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxFieldProperties {
  constructor({
    qOneAndOnlyOne,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qOneAndOnlyOne = qOneAndOnlyOne;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxFieldResourceId {
  constructor({
    qName,
    qResourceIds,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qName = qName;
    if (qResourceIds !== void 0 && qResourceIds !== null) {
      if (qResourceIds.length > 0 && qResourceIds[0] instanceof NxFieldTableResourceId) {
        this.qResourceIds = qResourceIds;
      } else {
        this.qResourceIds = qResourceIds.map((element) => new NxFieldTableResourceId(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxFieldSelectionInfo {
  constructor({
    qFieldSelectionMode,
    qName,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qFieldSelectionMode = qFieldSelectionMode;
    this.qName = qName;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxFieldSelectionMode {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxFieldTableResourceId {
  constructor({
    qResourceId,
    qTable,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qResourceId = qResourceId;
    this.qTable = qTable;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxFrequencyMode {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxGetBookmarkOptions {
  constructor({
    qData,
    qIncludePatches,
    qTypes,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qData !== void 0 && qData !== null) {
      if (qData instanceof JsonObject) {
        this.qData = qData;
      } else {
        this.qData = new JsonObject(qData, this.auth);
      }
    }
    this.qIncludePatches = qIncludePatches;
    this.qTypes = qTypes;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxGetObjectOptions {
  constructor({
    qData,
    qIncludeSessionObjects,
    qTypes,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qData !== void 0 && qData !== null) {
      if (qData instanceof JsonObject) {
        this.qData = qData;
      } else {
        this.qData = new JsonObject(qData, this.auth);
      }
    }
    this.qIncludeSessionObjects = qIncludeSessionObjects;
    this.qTypes = qTypes;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxGroupTail {
  constructor({
    qDown,
    qUp,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qDown = qDown;
    this.qUp = qUp;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxGrpType {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxHighlightRanges {
  constructor({
    qRanges,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qRanges !== void 0 && qRanges !== null) {
      if (qRanges.length > 0 && qRanges[0] instanceof CharRange) {
        this.qRanges = qRanges;
      } else {
        this.qRanges = qRanges.map((element) => new CharRange(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxHypercubeMode {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxInfo {
  constructor({
    qId,
    qType,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qId = qId;
    this.qType = qType;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxInlineDimensionDef {
  constructor({
    qActiveField,
    qFieldDefs,
    qFieldLabels,
    qGrouping,
    qLabelExpression,
    qNumberPresentations,
    qReverseSort,
    qSortCriterias,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qActiveField = qActiveField;
    this.qFieldDefs = qFieldDefs;
    this.qFieldLabels = qFieldLabels;
    this.qGrouping = qGrouping;
    this.qLabelExpression = qLabelExpression;
    if (qNumberPresentations !== void 0 && qNumberPresentations !== null) {
      if (qNumberPresentations.length > 0 && qNumberPresentations[0] instanceof FieldAttributes) {
        this.qNumberPresentations = qNumberPresentations;
      } else {
        this.qNumberPresentations = qNumberPresentations.map((element) => new FieldAttributes(element, this.auth));
      }
    }
    this.qReverseSort = qReverseSort;
    if (qSortCriterias !== void 0 && qSortCriterias !== null) {
      if (qSortCriterias.length > 0 && qSortCriterias[0] instanceof SortCriteria) {
        this.qSortCriterias = qSortCriterias;
      } else {
        this.qSortCriterias = qSortCriterias.map((element) => new SortCriteria(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxInlineMeasureDef {
  constructor({
    qAccumulate,
    qActiveExpression,
    qAggrFunc,
    qBrutalSum,
    qDef,
    qDescription,
    qExpressions,
    qGrouping,
    qLabel,
    qLabelExpression,
    qNumFormat,
    qRelative,
    qReverseSort,
    qTags,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qAccumulate = qAccumulate;
    this.qActiveExpression = qActiveExpression;
    this.qAggrFunc = qAggrFunc;
    this.qBrutalSum = qBrutalSum;
    this.qDef = qDef;
    this.qDescription = qDescription;
    this.qExpressions = qExpressions;
    this.qGrouping = qGrouping;
    this.qLabel = qLabel;
    this.qLabelExpression = qLabelExpression;
    if (qNumFormat !== void 0 && qNumFormat !== null) {
      if (qNumFormat instanceof FieldAttributes) {
        this.qNumFormat = qNumFormat;
      } else {
        this.qNumFormat = new FieldAttributes(qNumFormat, this.auth);
      }
    }
    this.qRelative = qRelative;
    this.qReverseSort = qReverseSort;
    this.qTags = qTags;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxLTrendlineType {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxLayoutErrors {
  constructor({
    qErrorCode,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qErrorCode = qErrorCode;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxLibraryDimension {
  constructor({
    qFieldDefs,
    qFieldLabels,
    qGrouping,
    qLabelExpression,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qFieldDefs = qFieldDefs;
    this.qFieldLabels = qFieldLabels;
    this.qGrouping = qGrouping;
    this.qLabelExpression = qLabelExpression;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxLibraryDimensionDef {
  constructor({
    qFieldDefs,
    qFieldLabels,
    qGrouping,
    qLabelExpression,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qFieldDefs = qFieldDefs;
    this.qFieldLabels = qFieldLabels;
    this.qGrouping = qGrouping;
    this.qLabelExpression = qLabelExpression;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxLibraryMeasure {
  constructor({
    qActiveExpression,
    qDef,
    qExpressions,
    qGrouping,
    qLabel,
    qLabelExpression,
    qNumFormat,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qActiveExpression = qActiveExpression;
    this.qDef = qDef;
    this.qExpressions = qExpressions;
    this.qGrouping = qGrouping;
    this.qLabel = qLabel;
    this.qLabelExpression = qLabelExpression;
    if (qNumFormat !== void 0 && qNumFormat !== null) {
      if (qNumFormat instanceof FieldAttributes) {
        this.qNumFormat = qNumFormat;
      } else {
        this.qNumFormat = new FieldAttributes(qNumFormat, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxLibraryMeasureDef {
  constructor({
    qActiveExpression,
    qDef,
    qExpressions,
    qGrouping,
    qLabel,
    qLabelExpression,
    qNumFormat,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qActiveExpression = qActiveExpression;
    this.qDef = qDef;
    this.qExpressions = qExpressions;
    this.qGrouping = qGrouping;
    this.qLabel = qLabel;
    this.qLabelExpression = qLabelExpression;
    if (qNumFormat !== void 0 && qNumFormat !== null) {
      if (qNumFormat instanceof FieldAttributes) {
        this.qNumFormat = qNumFormat;
      } else {
        this.qNumFormat = new FieldAttributes(qNumFormat, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxLinkedObjectInfo {
  constructor({
    qInfo,
    qRootId,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qInfo !== void 0 && qInfo !== null) {
      if (qInfo instanceof NxInfo) {
        this.qInfo = qInfo;
      } else {
        this.qInfo = new NxInfo(qInfo, this.auth);
      }
    }
    this.qRootId = qRootId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxListObjectExpression {
  constructor({
    qError,
    qExpr,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qError !== void 0 && qError !== null) {
      if (qError instanceof NxLayoutErrors) {
        this.qError = qError;
      } else {
        this.qError = new NxLayoutErrors(qError, this.auth);
      }
    }
    this.qExpr = qExpr;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxListObjectExpressionDef {
  constructor({
    qExpr,
    qLibraryId,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qExpr = qExpr;
    this.qLibraryId = qLibraryId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxLocalizedErrorCode {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxLocalizedWarningCode {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxMatchingFieldInfo {
  constructor({
    qName,
    qTags,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qName = qName;
    this.qTags = qTags;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxMatchingFieldMode {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxMeasure {
  constructor({
    qAttributeDimensions,
    qAttributeExpressions,
    qCalcCond,
    qCalcCondition,
    qDef,
    qLibraryId,
    qMiniChartDef,
    qSortBy,
    qTrendLines,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qAttributeDimensions !== void 0 && qAttributeDimensions !== null) {
      if (qAttributeDimensions.length > 0 && qAttributeDimensions[0] instanceof NxAttrDimDef) {
        this.qAttributeDimensions = qAttributeDimensions;
      } else {
        this.qAttributeDimensions = qAttributeDimensions.map((element) => new NxAttrDimDef(element, this.auth));
      }
    }
    if (qAttributeExpressions !== void 0 && qAttributeExpressions !== null) {
      if (qAttributeExpressions.length > 0 && qAttributeExpressions[0] instanceof NxAttrExprDef) {
        this.qAttributeExpressions = qAttributeExpressions;
      } else {
        this.qAttributeExpressions = qAttributeExpressions.map((element) => new NxAttrExprDef(element, this.auth));
      }
    }
    if (qCalcCond !== void 0 && qCalcCond !== null) {
      if (qCalcCond instanceof ValueExpr) {
        this.qCalcCond = qCalcCond;
      } else {
        this.qCalcCond = new ValueExpr(qCalcCond, this.auth);
      }
    }
    if (qCalcCondition !== void 0 && qCalcCondition !== null) {
      if (qCalcCondition instanceof NxCalcCond) {
        this.qCalcCondition = qCalcCondition;
      } else {
        this.qCalcCondition = new NxCalcCond(qCalcCondition, this.auth);
      }
    }
    if (qDef !== void 0 && qDef !== null) {
      if (qDef instanceof NxInlineMeasureDef) {
        this.qDef = qDef;
      } else {
        this.qDef = new NxInlineMeasureDef(qDef, this.auth);
      }
    }
    this.qLibraryId = qLibraryId;
    if (qMiniChartDef !== void 0 && qMiniChartDef !== null) {
      if (qMiniChartDef instanceof NxMiniChartDef) {
        this.qMiniChartDef = qMiniChartDef;
      } else {
        this.qMiniChartDef = new NxMiniChartDef(qMiniChartDef, this.auth);
      }
    }
    if (qSortBy !== void 0 && qSortBy !== null) {
      if (qSortBy instanceof SortCriteria) {
        this.qSortBy = qSortBy;
      } else {
        this.qSortBy = new SortCriteria(qSortBy, this.auth);
      }
    }
    if (qTrendLines !== void 0 && qTrendLines !== null) {
      if (qTrendLines.length > 0 && qTrendLines[0] instanceof NxTrendlineDef) {
        this.qTrendLines = qTrendLines;
      } else {
        this.qTrendLines = qTrendLines.map((element) => new NxTrendlineDef(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxMeasureInfo {
  constructor({
    qApprMaxGlyphCount,
    qAttrDimInfo,
    qAttrExprInfo,
    qCalcCondMsg,
    qCardinal,
    qError,
    qFallbackTitle,
    qIsAutoFormat,
    qLibraryId,
    qMax,
    qMin,
    qMiniChart,
    qNumFormat,
    qReverseSort,
    qSortIndicator,
    qTrendLines,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qApprMaxGlyphCount = qApprMaxGlyphCount;
    if (qAttrDimInfo !== void 0 && qAttrDimInfo !== null) {
      if (qAttrDimInfo.length > 0 && qAttrDimInfo[0] instanceof NxAttrDimInfo) {
        this.qAttrDimInfo = qAttrDimInfo;
      } else {
        this.qAttrDimInfo = qAttrDimInfo.map((element) => new NxAttrDimInfo(element, this.auth));
      }
    }
    if (qAttrExprInfo !== void 0 && qAttrExprInfo !== null) {
      if (qAttrExprInfo.length > 0 && qAttrExprInfo[0] instanceof NxAttrExprInfo) {
        this.qAttrExprInfo = qAttrExprInfo;
      } else {
        this.qAttrExprInfo = qAttrExprInfo.map((element) => new NxAttrExprInfo(element, this.auth));
      }
    }
    this.qCalcCondMsg = qCalcCondMsg;
    this.qCardinal = qCardinal;
    if (qError !== void 0 && qError !== null) {
      if (qError instanceof NxValidationError) {
        this.qError = qError;
      } else {
        this.qError = new NxValidationError(qError, this.auth);
      }
    }
    this.qFallbackTitle = qFallbackTitle;
    this.qIsAutoFormat = qIsAutoFormat;
    this.qLibraryId = qLibraryId;
    this.qMax = qMax;
    this.qMin = qMin;
    if (qMiniChart !== void 0 && qMiniChart !== null) {
      if (qMiniChart instanceof NxMiniChart) {
        this.qMiniChart = qMiniChart;
      } else {
        this.qMiniChart = new NxMiniChart(qMiniChart, this.auth);
      }
    }
    if (qNumFormat !== void 0 && qNumFormat !== null) {
      if (qNumFormat instanceof FieldAttributes) {
        this.qNumFormat = qNumFormat;
      } else {
        this.qNumFormat = new FieldAttributes(qNumFormat, this.auth);
      }
    }
    this.qReverseSort = qReverseSort;
    this.qSortIndicator = qSortIndicator;
    if (qTrendLines !== void 0 && qTrendLines !== null) {
      if (qTrendLines.length > 0 && qTrendLines[0] instanceof NxTrendline) {
        this.qTrendLines = qTrendLines;
      } else {
        this.qTrendLines = qTrendLines.map((element) => new NxTrendline(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxMeta {
  constructor({
    qName,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qName = qName;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxMetaDef {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxMiniChart {
  constructor({
    qAttrExprInfo,
    qError,
    qXMax,
    qXMin,
    qYMax,
    qYMin,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qAttrExprInfo !== void 0 && qAttrExprInfo !== null) {
      if (qAttrExprInfo.length > 0 && qAttrExprInfo[0] instanceof NxAttrExprInfo) {
        this.qAttrExprInfo = qAttrExprInfo;
      } else {
        this.qAttrExprInfo = qAttrExprInfo.map((element) => new NxAttrExprInfo(element, this.auth));
      }
    }
    if (qError !== void 0 && qError !== null) {
      if (qError instanceof NxValidationError) {
        this.qError = qError;
      } else {
        this.qError = new NxValidationError(qError, this.auth);
      }
    }
    this.qXMax = qXMax;
    this.qXMin = qXMin;
    this.qYMax = qYMax;
    this.qYMin = qYMin;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxMiniChartCell {
  constructor({
    qAttrExps,
    qElemNumber,
    qNum,
    qText,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qAttrExps !== void 0 && qAttrExps !== null) {
      if (qAttrExps instanceof NxAttributeExpressionValues) {
        this.qAttrExps = qAttrExps;
      } else {
        this.qAttrExps = new NxAttributeExpressionValues(qAttrExps, this.auth);
      }
    }
    this.qElemNumber = qElemNumber;
    this.qNum = qNum;
    this.qText = qText;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxMiniChartData {
  constructor({
    qError,
    qMatrix,
    qMax,
    qMin,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qError !== void 0 && qError !== null) {
      if (qError instanceof NxValidationError) {
        this.qError = qError;
      } else {
        this.qError = new NxValidationError(qError, this.auth);
      }
    }
    if (qMatrix !== void 0 && qMatrix !== null) {
      if (qMatrix.length > 0 && qMatrix[0] instanceof NxMiniChartRows) {
        this.qMatrix = qMatrix;
      } else {
        this.qMatrix = qMatrix.map((element) => new NxMiniChartRows(element, this.auth));
      }
    }
    this.qMax = qMax;
    this.qMin = qMin;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxMiniChartDef {
  constructor({
    qAttributeExpressions,
    qDef,
    qLibraryId,
    qMaxNumberPoints,
    qNullSuppression,
    qOtherTotalSpec,
    qSortBy,
    ...rest
  }, auth) {
    this.qMaxNumberPoints = -1;
    this.auth = auth;
    if (qAttributeExpressions !== void 0 && qAttributeExpressions !== null) {
      if (qAttributeExpressions.length > 0 && qAttributeExpressions[0] instanceof NxAttrExprDef) {
        this.qAttributeExpressions = qAttributeExpressions;
      } else {
        this.qAttributeExpressions = qAttributeExpressions.map((element) => new NxAttrExprDef(element, this.auth));
      }
    }
    this.qDef = qDef;
    this.qLibraryId = qLibraryId;
    this.qMaxNumberPoints = qMaxNumberPoints;
    this.qNullSuppression = qNullSuppression;
    if (qOtherTotalSpec !== void 0 && qOtherTotalSpec !== null) {
      if (qOtherTotalSpec instanceof OtherTotalSpecProp) {
        this.qOtherTotalSpec = qOtherTotalSpec;
      } else {
        this.qOtherTotalSpec = new OtherTotalSpecProp(qOtherTotalSpec, this.auth);
      }
    }
    if (qSortBy !== void 0 && qSortBy !== null) {
      if (qSortBy instanceof SortCriteria) {
        this.qSortBy = qSortBy;
      } else {
        this.qSortBy = new SortCriteria(qSortBy, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxMiniChartRows extends Array {
  constructor(arr, auth) {
    super();
    this.auth = auth;
    for (const e of arr) {
      this.push(new NxMiniChartCell(e, this.auth));
    }
  }
}
class NxMultiRangeSelectInfo {
  constructor({
    qColumnsToSelect,
    qRanges,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qColumnsToSelect = qColumnsToSelect;
    if (qRanges !== void 0 && qRanges !== null) {
      if (qRanges.length > 0 && qRanges[0] instanceof NxRangeSelectInfo) {
        this.qRanges = qRanges;
      } else {
        this.qRanges = qRanges.map((element) => new NxRangeSelectInfo(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxPage {
  constructor({
    qHeight,
    qLeft,
    qTop,
    qWidth,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qHeight = qHeight;
    this.qLeft = qLeft;
    this.qTop = qTop;
    this.qWidth = qWidth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxPageTreeLevel {
  constructor({
    qDepth,
    qLeft,
    ...rest
  }, auth) {
    this.qDepth = -1;
    this.auth = auth;
    this.qDepth = qDepth;
    this.qLeft = qLeft;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxPageTreeNode {
  constructor({
    qAllValues,
    qArea,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qAllValues = qAllValues;
    if (qArea !== void 0 && qArea !== null) {
      if (qArea instanceof Rect) {
        this.qArea = qArea;
      } else {
        this.qArea = new Rect(qArea, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxPatch {
  constructor({
    qOp,
    qPath,
    qValue,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qOp = qOp;
    this.qPath = qPath;
    this.qValue = qValue;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxPatchOperationType {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxPatches {
  constructor({
    qChildren,
    qInfo,
    qPatches,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qChildren !== void 0 && qChildren !== null) {
      if (qChildren.length > 0 && qChildren[0] instanceof NxPatches) {
        this.qChildren = qChildren;
      } else {
        this.qChildren = qChildren.map((element) => new NxPatches(element, this.auth));
      }
    }
    if (qInfo !== void 0 && qInfo !== null) {
      if (qInfo instanceof NxInfo) {
        this.qInfo = qInfo;
      } else {
        this.qInfo = new NxInfo(qInfo, this.auth);
      }
    }
    if (qPatches !== void 0 && qPatches !== null) {
      if (qPatches.length > 0 && qPatches[0] instanceof NxPatch) {
        this.qPatches = qPatches;
      } else {
        this.qPatches = qPatches.map((element) => new NxPatch(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxPivotDimensionCell {
  constructor({
    qAttrDims,
    qAttrExps,
    qCanCollapse,
    qCanExpand,
    qDown,
    qElemNo,
    qSubNodes,
    qText,
    qType,
    qUp,
    qValue,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qAttrDims !== void 0 && qAttrDims !== null) {
      if (qAttrDims instanceof NxAttributeDimValues) {
        this.qAttrDims = qAttrDims;
      } else {
        this.qAttrDims = new NxAttributeDimValues(qAttrDims, this.auth);
      }
    }
    if (qAttrExps !== void 0 && qAttrExps !== null) {
      if (qAttrExps instanceof NxAttributeExpressionValues) {
        this.qAttrExps = qAttrExps;
      } else {
        this.qAttrExps = new NxAttributeExpressionValues(qAttrExps, this.auth);
      }
    }
    this.qCanCollapse = qCanCollapse;
    this.qCanExpand = qCanExpand;
    this.qDown = qDown;
    this.qElemNo = qElemNo;
    if (qSubNodes !== void 0 && qSubNodes !== null) {
      if (qSubNodes.length > 0 && qSubNodes[0] instanceof NxPivotDimensionCell) {
        this.qSubNodes = qSubNodes;
      } else {
        this.qSubNodes = qSubNodes.map((element) => new NxPivotDimensionCell(element, this.auth));
      }
    }
    this.qText = qText;
    this.qType = qType;
    this.qUp = qUp;
    this.qValue = qValue;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxPivotPage {
  constructor({
    qArea,
    qData,
    qLeft,
    qTop,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qArea !== void 0 && qArea !== null) {
      if (qArea instanceof Rect) {
        this.qArea = qArea;
      } else {
        this.qArea = new Rect(qArea, this.auth);
      }
    }
    if (qData !== void 0 && qData !== null) {
      if (qData.length > 0 && qData[0] instanceof ArrayOfNxValuePoint) {
        this.qData = qData;
      } else {
        this.qData = qData.map((element) => new ArrayOfNxValuePoint(element, this.auth));
      }
    }
    if (qLeft !== void 0 && qLeft !== null) {
      if (qLeft.length > 0 && qLeft[0] instanceof NxPivotDimensionCell) {
        this.qLeft = qLeft;
      } else {
        this.qLeft = qLeft.map((element) => new NxPivotDimensionCell(element, this.auth));
      }
    }
    if (qTop !== void 0 && qTop !== null) {
      if (qTop.length > 0 && qTop[0] instanceof NxPivotDimensionCell) {
        this.qTop = qTop;
      } else {
        this.qTop = qTop.map((element) => new NxPivotDimensionCell(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxPivotValuePoint {
  constructor({
    qAttrDims,
    qAttrExps,
    qLabel,
    qNum,
    qText,
    qType,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qAttrDims !== void 0 && qAttrDims !== null) {
      if (qAttrDims instanceof NxAttributeDimValues) {
        this.qAttrDims = qAttrDims;
      } else {
        this.qAttrDims = new NxAttributeDimValues(qAttrDims, this.auth);
      }
    }
    if (qAttrExps !== void 0 && qAttrExps !== null) {
      if (qAttrExps instanceof NxAttributeExpressionValues) {
        this.qAttrExps = qAttrExps;
      } else {
        this.qAttrExps = new NxAttributeExpressionValues(qAttrExps, this.auth);
      }
    }
    this.qLabel = qLabel;
    this.qNum = qNum;
    this.qText = qText;
    this.qType = qType;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxRange {
  constructor({
    qCount,
    qFrom,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qCount = qCount;
    this.qFrom = qFrom;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxRangeSelectInfo {
  constructor({
    qMeasureIx,
    qRange,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qMeasureIx = qMeasureIx;
    if (qRange !== void 0 && qRange !== null) {
      if (qRange instanceof Range) {
        this.qRange = qRange;
      } else {
        this.qRange = new Range(qRange, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxSelectionCell {
  constructor({
    qCol,
    qRow,
    qType,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qCol = qCol;
    this.qRow = qRow;
    this.qType = qType;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxSelectionCellType {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxSelectionInfo {
  constructor({
    qInSelections,
    qMadeSelections,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qInSelections = qInSelections;
    this.qMadeSelections = qMadeSelections;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxSimpleDimValue {
  constructor({
    qElemNo,
    qText,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qElemNo = qElemNo;
    this.qText = qText;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxSimpleValue {
  constructor({
    qNum,
    qText,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qNum = qNum;
    this.qText = qText;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxSortIndicatorType {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxStackPage {
  constructor({
    qArea,
    qData,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qArea !== void 0 && qArea !== null) {
      if (qArea instanceof Rect) {
        this.qArea = qArea;
      } else {
        this.qArea = new Rect(qArea, this.auth);
      }
    }
    if (qData !== void 0 && qData !== null) {
      if (qData.length > 0 && qData[0] instanceof NxStackedPivotCell) {
        this.qData = qData;
      } else {
        this.qData = qData.map((element) => new NxStackedPivotCell(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxStackedPivotCell {
  constructor({
    qAttrDims,
    qAttrExps,
    qCanCollapse,
    qCanExpand,
    qDown,
    qElemNo,
    qMaxPos,
    qMinNeg,
    qRow,
    qSubNodes,
    qText,
    qType,
    qUp,
    qValue,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qAttrDims !== void 0 && qAttrDims !== null) {
      if (qAttrDims instanceof NxAttributeDimValues) {
        this.qAttrDims = qAttrDims;
      } else {
        this.qAttrDims = new NxAttributeDimValues(qAttrDims, this.auth);
      }
    }
    if (qAttrExps !== void 0 && qAttrExps !== null) {
      if (qAttrExps instanceof NxAttributeExpressionValues) {
        this.qAttrExps = qAttrExps;
      } else {
        this.qAttrExps = new NxAttributeExpressionValues(qAttrExps, this.auth);
      }
    }
    this.qCanCollapse = qCanCollapse;
    this.qCanExpand = qCanExpand;
    this.qDown = qDown;
    this.qElemNo = qElemNo;
    this.qMaxPos = qMaxPos;
    this.qMinNeg = qMinNeg;
    this.qRow = qRow;
    if (qSubNodes !== void 0 && qSubNodes !== null) {
      if (qSubNodes.length > 0 && qSubNodes[0] instanceof NxStackedPivotCell) {
        this.qSubNodes = qSubNodes;
      } else {
        this.qSubNodes = qSubNodes.map((element) => new NxStackedPivotCell(element, this.auth));
      }
    }
    this.qText = qText;
    this.qType = qType;
    this.qUp = qUp;
    this.qValue = qValue;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxStateCounts {
  constructor({
    qAlternative,
    qDeselected,
    qExcluded,
    qLocked,
    qLockedExcluded,
    qOption,
    qSelected,
    qSelectedExcluded,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qAlternative = qAlternative;
    this.qDeselected = qDeselected;
    this.qExcluded = qExcluded;
    this.qLocked = qLocked;
    this.qLockedExcluded = qLockedExcluded;
    this.qOption = qOption;
    this.qSelected = qSelected;
    this.qSelectedExcluded = qSelectedExcluded;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxStreamListEntry {
  constructor({
    qId,
    qName,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qId = qId;
    this.qName = qName;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxTempBookmarkOptions {
  constructor({
    qIncludeAllPatches,
    qIncludeVariables,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qIncludeAllPatches = qIncludeAllPatches;
    this.qIncludeVariables = qIncludeVariables;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxTickCell {
  constructor({
    qEnd,
    qStart,
    qText,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qEnd = qEnd;
    this.qStart = qStart;
    this.qText = qText;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxTreeDataOption {
  constructor({
    qMaxNbrOfNodes,
    qTreeLevels,
    qTreeNodes,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qMaxNbrOfNodes = qMaxNbrOfNodes;
    if (qTreeLevels !== void 0 && qTreeLevels !== null) {
      if (qTreeLevels instanceof NxPageTreeLevel) {
        this.qTreeLevels = qTreeLevels;
      } else {
        this.qTreeLevels = new NxPageTreeLevel(qTreeLevels, this.auth);
      }
    }
    if (qTreeNodes !== void 0 && qTreeNodes !== null) {
      if (qTreeNodes.length > 0 && qTreeNodes[0] instanceof NxPageTreeNode) {
        this.qTreeNodes = qTreeNodes;
      } else {
        this.qTreeNodes = qTreeNodes.map((element) => new NxPageTreeNode(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxTreeDimensionDef {
  constructor({
    qAttributeDimensions,
    qAttributeExpressions,
    qCalcCondition,
    qDef,
    qLibraryId,
    qNullSuppression,
    qOtherLabel,
    qOtherTotalSpec,
    qShowAll,
    qTotalLabel,
    qValueExprs,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qAttributeDimensions !== void 0 && qAttributeDimensions !== null) {
      if (qAttributeDimensions.length > 0 && qAttributeDimensions[0] instanceof NxAttrDimDef) {
        this.qAttributeDimensions = qAttributeDimensions;
      } else {
        this.qAttributeDimensions = qAttributeDimensions.map((element) => new NxAttrDimDef(element, this.auth));
      }
    }
    if (qAttributeExpressions !== void 0 && qAttributeExpressions !== null) {
      if (qAttributeExpressions.length > 0 && qAttributeExpressions[0] instanceof NxAttrExprDef) {
        this.qAttributeExpressions = qAttributeExpressions;
      } else {
        this.qAttributeExpressions = qAttributeExpressions.map((element) => new NxAttrExprDef(element, this.auth));
      }
    }
    if (qCalcCondition !== void 0 && qCalcCondition !== null) {
      if (qCalcCondition instanceof NxCalcCond) {
        this.qCalcCondition = qCalcCondition;
      } else {
        this.qCalcCondition = new NxCalcCond(qCalcCondition, this.auth);
      }
    }
    if (qDef !== void 0 && qDef !== null) {
      if (qDef instanceof NxInlineDimensionDef) {
        this.qDef = qDef;
      } else {
        this.qDef = new NxInlineDimensionDef(qDef, this.auth);
      }
    }
    this.qLibraryId = qLibraryId;
    this.qNullSuppression = qNullSuppression;
    if (qOtherLabel !== void 0 && qOtherLabel !== null) {
      if (qOtherLabel instanceof StringExpr) {
        this.qOtherLabel = qOtherLabel;
      } else {
        this.qOtherLabel = new StringExpr(qOtherLabel, this.auth);
      }
    }
    if (qOtherTotalSpec !== void 0 && qOtherTotalSpec !== null) {
      if (qOtherTotalSpec instanceof OtherTotalSpecProp) {
        this.qOtherTotalSpec = qOtherTotalSpec;
      } else {
        this.qOtherTotalSpec = new OtherTotalSpecProp(qOtherTotalSpec, this.auth);
      }
    }
    this.qShowAll = qShowAll;
    if (qTotalLabel !== void 0 && qTotalLabel !== null) {
      if (qTotalLabel instanceof StringExpr) {
        this.qTotalLabel = qTotalLabel;
      } else {
        this.qTotalLabel = new StringExpr(qTotalLabel, this.auth);
      }
    }
    if (qValueExprs !== void 0 && qValueExprs !== null) {
      if (qValueExprs.length > 0 && qValueExprs[0] instanceof NxMeasure) {
        this.qValueExprs = qValueExprs;
      } else {
        this.qValueExprs = qValueExprs.map((element) => new NxMeasure(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxTreeDimensionInfo {
  constructor({
    qApprMaxGlyphCount,
    qAttrDimInfo,
    qAttrExprInfo,
    qCalcCondMsg,
    qCardinal,
    qCardinalities,
    qContinuousAxes,
    qDerivedField,
    qDimensionType,
    qError,
    qFallbackTitle,
    qGroupFallbackTitles,
    qGroupFieldDefs,
    qGroupPos,
    qGrouping,
    qIsAutoFormat,
    qIsCalculated,
    qIsCyclic,
    qIsOneAndOnlyOne,
    qIsSemantic,
    qLibraryId,
    qLocked,
    qMax,
    qMeasureInfo,
    qMin,
    qNumFormat,
    qReverseSort,
    qSortIndicator,
    qStateCounts,
    qTags,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qApprMaxGlyphCount = qApprMaxGlyphCount;
    if (qAttrDimInfo !== void 0 && qAttrDimInfo !== null) {
      if (qAttrDimInfo.length > 0 && qAttrDimInfo[0] instanceof NxAttrDimInfo) {
        this.qAttrDimInfo = qAttrDimInfo;
      } else {
        this.qAttrDimInfo = qAttrDimInfo.map((element) => new NxAttrDimInfo(element, this.auth));
      }
    }
    if (qAttrExprInfo !== void 0 && qAttrExprInfo !== null) {
      if (qAttrExprInfo.length > 0 && qAttrExprInfo[0] instanceof NxAttrExprInfo) {
        this.qAttrExprInfo = qAttrExprInfo;
      } else {
        this.qAttrExprInfo = qAttrExprInfo.map((element) => new NxAttrExprInfo(element, this.auth));
      }
    }
    this.qCalcCondMsg = qCalcCondMsg;
    this.qCardinal = qCardinal;
    if (qCardinalities !== void 0 && qCardinalities !== null) {
      if (qCardinalities instanceof NxCardinalities) {
        this.qCardinalities = qCardinalities;
      } else {
        this.qCardinalities = new NxCardinalities(qCardinalities, this.auth);
      }
    }
    this.qContinuousAxes = qContinuousAxes;
    this.qDerivedField = qDerivedField;
    this.qDimensionType = qDimensionType;
    if (qError !== void 0 && qError !== null) {
      if (qError instanceof NxValidationError) {
        this.qError = qError;
      } else {
        this.qError = new NxValidationError(qError, this.auth);
      }
    }
    this.qFallbackTitle = qFallbackTitle;
    this.qGroupFallbackTitles = qGroupFallbackTitles;
    this.qGroupFieldDefs = qGroupFieldDefs;
    this.qGroupPos = qGroupPos;
    this.qGrouping = qGrouping;
    this.qIsAutoFormat = qIsAutoFormat;
    this.qIsCalculated = qIsCalculated;
    this.qIsCyclic = qIsCyclic;
    this.qIsOneAndOnlyOne = qIsOneAndOnlyOne;
    this.qIsSemantic = qIsSemantic;
    this.qLibraryId = qLibraryId;
    this.qLocked = qLocked;
    this.qMax = qMax;
    if (qMeasureInfo !== void 0 && qMeasureInfo !== null) {
      if (qMeasureInfo.length > 0 && qMeasureInfo[0] instanceof NxMeasureInfo) {
        this.qMeasureInfo = qMeasureInfo;
      } else {
        this.qMeasureInfo = qMeasureInfo.map((element) => new NxMeasureInfo(element, this.auth));
      }
    }
    this.qMin = qMin;
    if (qNumFormat !== void 0 && qNumFormat !== null) {
      if (qNumFormat instanceof FieldAttributes) {
        this.qNumFormat = qNumFormat;
      } else {
        this.qNumFormat = new FieldAttributes(qNumFormat, this.auth);
      }
    }
    this.qReverseSort = qReverseSort;
    this.qSortIndicator = qSortIndicator;
    if (qStateCounts !== void 0 && qStateCounts !== null) {
      if (qStateCounts instanceof NxStateCounts) {
        this.qStateCounts = qStateCounts;
      } else {
        this.qStateCounts = new NxStateCounts(qStateCounts, this.auth);
      }
    }
    this.qTags = qTags;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxTreeMultiRangeSelectInfo {
  constructor({
    qRanges,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qRanges !== void 0 && qRanges !== null) {
      if (qRanges.length > 0 && qRanges[0] instanceof NxTreeRangeSelectInfo) {
        this.qRanges = qRanges;
      } else {
        this.qRanges = qRanges.map((element) => new NxTreeRangeSelectInfo(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxTreeNode {
  constructor({
    qAttrDims,
    qAttrExps,
    qCanCollapse,
    qCanExpand,
    qElemNo,
    qGroupPos,
    qGroupSize,
    qMaxPos,
    qMinNeg,
    qNodes,
    qRow,
    qState,
    qText,
    qTreePath,
    qType,
    qValue,
    qValues,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qAttrDims !== void 0 && qAttrDims !== null) {
      if (qAttrDims instanceof NxAttributeDimValues) {
        this.qAttrDims = qAttrDims;
      } else {
        this.qAttrDims = new NxAttributeDimValues(qAttrDims, this.auth);
      }
    }
    if (qAttrExps !== void 0 && qAttrExps !== null) {
      if (qAttrExps instanceof NxAttributeExpressionValues) {
        this.qAttrExps = qAttrExps;
      } else {
        this.qAttrExps = new NxAttributeExpressionValues(qAttrExps, this.auth);
      }
    }
    this.qCanCollapse = qCanCollapse;
    this.qCanExpand = qCanExpand;
    this.qElemNo = qElemNo;
    this.qGroupPos = qGroupPos;
    this.qGroupSize = qGroupSize;
    this.qMaxPos = qMaxPos;
    this.qMinNeg = qMinNeg;
    if (qNodes !== void 0 && qNodes !== null) {
      if (qNodes.length > 0 && qNodes[0] instanceof NxTreeNode) {
        this.qNodes = qNodes;
      } else {
        this.qNodes = qNodes.map((element) => new NxTreeNode(element, this.auth));
      }
    }
    this.qRow = qRow;
    this.qState = qState;
    this.qText = qText;
    this.qTreePath = qTreePath;
    this.qType = qType;
    this.qValue = qValue;
    if (qValues !== void 0 && qValues !== null) {
      if (qValues.length > 0 && qValues[0] instanceof NxTreeValue) {
        this.qValues = qValues;
      } else {
        this.qValues = qValues.map((element) => new NxTreeValue(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxTreeRangeSelectInfo {
  constructor({
    qDimensionIx,
    qMeasureIx,
    qRange,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qDimensionIx = qDimensionIx;
    this.qMeasureIx = qMeasureIx;
    if (qRange !== void 0 && qRange !== null) {
      if (qRange instanceof Range) {
        this.qRange = qRange;
      } else {
        this.qRange = new Range(qRange, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxTreeValue {
  constructor({
    qAttrDims,
    qAttrExps,
    qText,
    qValue,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qAttrDims !== void 0 && qAttrDims !== null) {
      if (qAttrDims instanceof NxAttributeDimValues) {
        this.qAttrDims = qAttrDims;
      } else {
        this.qAttrDims = new NxAttributeDimValues(qAttrDims, this.auth);
      }
    }
    if (qAttrExps !== void 0 && qAttrExps !== null) {
      if (qAttrExps instanceof NxAttributeExpressionValues) {
        this.qAttrExps = qAttrExps;
      } else {
        this.qAttrExps = new NxAttributeExpressionValues(qAttrExps, this.auth);
      }
    }
    this.qText = qText;
    this.qValue = qValue;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxTrendline {
  constructor({
    qCoeff,
    qElemNo,
    qError,
    qExpression,
    qR2,
    qType,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qCoeff = qCoeff;
    this.qElemNo = qElemNo;
    if (qError !== void 0 && qError !== null) {
      if (qError instanceof NxValidationError) {
        this.qError = qError;
      } else {
        this.qError = new NxValidationError(qError, this.auth);
      }
    }
    this.qExpression = qExpression;
    this.qR2 = qR2;
    this.qType = qType;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxTrendlineDef {
  constructor({
    qCalcR2,
    qContinuousXAxis,
    qMultiDimMode,
    qType,
    qXColIx,
    ...rest
  }, auth) {
    this.qXColIx = -1;
    this.auth = auth;
    this.qCalcR2 = qCalcR2;
    this.qContinuousXAxis = qContinuousXAxis;
    this.qMultiDimMode = qMultiDimMode;
    this.qType = qType;
    this.qXColIx = qXColIx;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxTrendlineMode {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxValidationError {
  constructor({
    qContext,
    qErrorCode,
    qExtendedMessage,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qContext = qContext;
    this.qErrorCode = qErrorCode;
    this.qExtendedMessage = qExtendedMessage;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxVariableListItem {
  constructor({
    qData,
    qDefinition,
    qDescription,
    qInfo,
    qIsConfig,
    qIsReserved,
    qIsScriptCreated,
    qMeta,
    qName,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qData !== void 0 && qData !== null) {
      if (qData instanceof JsonObject) {
        this.qData = qData;
      } else {
        this.qData = new JsonObject(qData, this.auth);
      }
    }
    this.qDefinition = qDefinition;
    this.qDescription = qDescription;
    if (qInfo !== void 0 && qInfo !== null) {
      if (qInfo instanceof NxInfo) {
        this.qInfo = qInfo;
      } else {
        this.qInfo = new NxInfo(qInfo, this.auth);
      }
    }
    this.qIsConfig = qIsConfig;
    this.qIsReserved = qIsReserved;
    this.qIsScriptCreated = qIsScriptCreated;
    if (qMeta !== void 0 && qMeta !== null) {
      if (qMeta instanceof NxMeta) {
        this.qMeta = qMeta;
      } else {
        this.qMeta = new NxMeta(qMeta, this.auth);
      }
    }
    this.qName = qName;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxVariableProperties {
  constructor({
    qIncludeInBookmark,
    qName,
    qNumberPresentation,
    qPreDefinedList,
    qUsePredefListedValues,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qIncludeInBookmark = qIncludeInBookmark;
    this.qName = qName;
    if (qNumberPresentation !== void 0 && qNumberPresentation !== null) {
      if (qNumberPresentation instanceof FieldAttributes) {
        this.qNumberPresentation = qNumberPresentation;
      } else {
        this.qNumberPresentation = new FieldAttributes(qNumberPresentation, this.auth);
      }
    }
    this.qPreDefinedList = qPreDefinedList;
    this.qUsePredefListedValues = qUsePredefListedValues;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class NxViewPort {
  constructor({
    qHeight,
    qWidth,
    qZoomLevel,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qHeight = qHeight;
    this.qWidth = qWidth;
    this.qZoomLevel = qZoomLevel;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ObjectInterface {
  constructor({
    qGenericId,
    qGenericType,
    qHandle,
    qType,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qGenericId = qGenericId;
    this.qGenericType = qGenericType;
    this.qHandle = qHandle;
    this.qType = qType;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class OdbcDsn {
  constructor({
    qBit32,
    qDescription,
    qName,
    qUserOnly,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qBit32 = qBit32;
    this.qDescription = qDescription;
    this.qName = qName;
    this.qUserOnly = qUserOnly;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class OleDbProvider {
  constructor({
    qBit32,
    qDescription,
    qName,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qBit32 = qBit32;
    this.qDescription = qDescription;
    this.qName = qName;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class OtherLimitMode {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class OtherMode {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class OtherSortMode {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class OtherTotalSpecProp {
  constructor({
    qApplyEvenWhenPossiblyWrongResult,
    qForceBadValueKeeping,
    qGlobalOtherGrouping,
    qOtherCollapseInnerDimensions,
    qOtherCounted,
    qOtherLimit,
    qOtherLimitMode,
    qOtherMode,
    qOtherSortMode,
    qReferencedExpression,
    qSuppressOther,
    qTotalMode,
    ...rest
  }, auth) {
    this.qApplyEvenWhenPossiblyWrongResult = true;
    this.qForceBadValueKeeping = true;
    this.auth = auth;
    this.qApplyEvenWhenPossiblyWrongResult = qApplyEvenWhenPossiblyWrongResult;
    this.qForceBadValueKeeping = qForceBadValueKeeping;
    this.qGlobalOtherGrouping = qGlobalOtherGrouping;
    this.qOtherCollapseInnerDimensions = qOtherCollapseInnerDimensions;
    if (qOtherCounted !== void 0 && qOtherCounted !== null) {
      if (qOtherCounted instanceof ValueExpr) {
        this.qOtherCounted = qOtherCounted;
      } else {
        this.qOtherCounted = new ValueExpr(qOtherCounted, this.auth);
      }
    }
    if (qOtherLimit !== void 0 && qOtherLimit !== null) {
      if (qOtherLimit instanceof ValueExpr) {
        this.qOtherLimit = qOtherLimit;
      } else {
        this.qOtherLimit = new ValueExpr(qOtherLimit, this.auth);
      }
    }
    this.qOtherLimitMode = qOtherLimitMode;
    this.qOtherMode = qOtherMode;
    this.qOtherSortMode = qOtherSortMode;
    if (qReferencedExpression !== void 0 && qReferencedExpression !== null) {
      if (qReferencedExpression instanceof StringExpr) {
        this.qReferencedExpression = qReferencedExpression;
      } else {
        this.qReferencedExpression = new StringExpr(qReferencedExpression, this.auth);
      }
    }
    this.qSuppressOther = qSuppressOther;
    this.qTotalMode = qTotalMode;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Point {
  constructor({
    qx,
    qy,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qx = qx;
    this.qy = qy;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class PositionMark {
  constructor({
    qDimName,
    qElemNo,
    qElemValues,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qDimName = qDimName;
    this.qElemNo = qElemNo;
    if (qElemValues !== void 0 && qElemValues !== null) {
      if (qElemValues.length > 0 && qElemValues[0] instanceof Blob) {
        this.qElemValues = qElemValues;
      } else {
        this.qElemValues = qElemValues.map((element) => new Blob(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ProgressData {
  constructor({
    qCompleted,
    qErrorData,
    qFinished,
    qKB,
    qMillisecs,
    qPersistentProgress,
    qPersistentProgressMessages,
    qStarted,
    qTotal,
    qTransientProgress,
    qTransientProgressMessage,
    qUserInteractionWanted,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qCompleted = qCompleted;
    if (qErrorData !== void 0 && qErrorData !== null) {
      if (qErrorData.length > 0 && qErrorData[0] instanceof ErrorData) {
        this.qErrorData = qErrorData;
      } else {
        this.qErrorData = qErrorData.map((element) => new ErrorData(element, this.auth));
      }
    }
    this.qFinished = qFinished;
    this.qKB = qKB;
    this.qMillisecs = qMillisecs;
    this.qPersistentProgress = qPersistentProgress;
    if (qPersistentProgressMessages !== void 0 && qPersistentProgressMessages !== null) {
      if (qPersistentProgressMessages.length > 0 && qPersistentProgressMessages[0] instanceof ProgressMessage) {
        this.qPersistentProgressMessages = qPersistentProgressMessages;
      } else {
        this.qPersistentProgressMessages = qPersistentProgressMessages.map((element) => new ProgressMessage(element, this.auth));
      }
    }
    this.qStarted = qStarted;
    this.qTotal = qTotal;
    this.qTransientProgress = qTransientProgress;
    if (qTransientProgressMessage !== void 0 && qTransientProgressMessage !== null) {
      if (qTransientProgressMessage instanceof ProgressMessage) {
        this.qTransientProgressMessage = qTransientProgressMessage;
      } else {
        this.qTransientProgressMessage = new ProgressMessage(qTransientProgressMessage, this.auth);
      }
    }
    this.qUserInteractionWanted = qUserInteractionWanted;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ProgressMessage {
  constructor({
    qMessageCode,
    qMessageParameters,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qMessageCode = qMessageCode;
    this.qMessageParameters = qMessageParameters;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Range {
  constructor({
    qMax,
    qMaxInclEq,
    qMin,
    qMinInclEq,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qMax = qMax;
    this.qMaxInclEq = qMaxInclEq;
    this.qMin = qMin;
    this.qMinInclEq = qMinInclEq;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class RangeSelectInfo {
  constructor({
    qMeasure,
    qRangeHi,
    qRangeLo,
    ...rest
  }, auth) {
    this.qRangeHi = -1e300;
    this.qRangeLo = -1e300;
    this.auth = auth;
    this.qMeasure = qMeasure;
    this.qRangeHi = qRangeHi;
    this.qRangeLo = qRangeLo;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Rect {
  constructor({
    qHeight,
    qLeft,
    qTop,
    qWidth,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qHeight = qHeight;
    this.qLeft = qLeft;
    this.qTop = qTop;
    this.qWidth = qWidth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SampleResult {
  constructor({
    qFieldOrColumn,
    qValues,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qFieldOrColumn !== void 0 && qFieldOrColumn !== null) {
      if (qFieldOrColumn instanceof FieldOrColumn) {
        this.qFieldOrColumn = qFieldOrColumn;
      } else {
        this.qFieldOrColumn = new FieldOrColumn(qFieldOrColumn, this.auth);
      }
    }
    if (qValues !== void 0 && qValues !== null) {
      if (qValues.length > 0 && qValues[0] instanceof FieldValue) {
        this.qValues = qValues;
      } else {
        this.qValues = qValues.map((element) => new FieldValue(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ScriptSyntaxError {
  constructor({
    qColInLine,
    qErrLen,
    qLineInTab,
    qSecondaryFailure,
    qTabIx,
    qTextPos,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qColInLine = qColInLine;
    this.qErrLen = qErrLen;
    this.qLineInTab = qLineInTab;
    this.qSecondaryFailure = qSecondaryFailure;
    this.qTabIx = qTabIx;
    this.qTextPos = qTextPos;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ScrollPosition {
  constructor({
    qPos,
    qUsePosition,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qPos !== void 0 && qPos !== null) {
      if (qPos instanceof Point) {
        this.qPos = qPos;
      } else {
        this.qPos = new Point(qPos, this.auth);
      }
    }
    this.qUsePosition = qUsePosition;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SearchAssociationResult {
  constructor({
    qFieldDictionaries,
    qFieldNames,
    qSearchTerms,
    qSearchTermsMatched,
    qTotalSearchResults,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qFieldDictionaries !== void 0 && qFieldDictionaries !== null) {
      if (qFieldDictionaries.length > 0 && qFieldDictionaries[0] instanceof SearchFieldDictionary) {
        this.qFieldDictionaries = qFieldDictionaries;
      } else {
        this.qFieldDictionaries = qFieldDictionaries.map((element) => new SearchFieldDictionary(element, this.auth));
      }
    }
    this.qFieldNames = qFieldNames;
    this.qSearchTerms = qSearchTerms;
    if (qSearchTermsMatched !== void 0 && qSearchTermsMatched !== null) {
      if (qSearchTermsMatched.length > 0 && qSearchTermsMatched[0] instanceof SearchMatchCombinations) {
        this.qSearchTermsMatched = qSearchTermsMatched;
      } else {
        this.qSearchTermsMatched = qSearchTermsMatched.map((element) => new SearchMatchCombinations(element, this.auth));
      }
    }
    this.qTotalSearchResults = qTotalSearchResults;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SearchAttribute {
  constructor({
    qKey,
    qValue,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qKey = qKey;
    this.qValue = qValue;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SearchCharRange {
  constructor({
    qCharCount,
    qCharPos,
    qTerm,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qCharCount = qCharCount;
    this.qCharPos = qCharPos;
    this.qTerm = qTerm;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SearchCombinationOptions {
  constructor({
    qAttributes,
    qCharEncoding,
    qContext,
    qSearchFields,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qAttributes = qAttributes;
    this.qCharEncoding = qCharEncoding;
    this.qContext = qContext;
    this.qSearchFields = qSearchFields;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SearchContextType {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SearchFieldDictionary {
  constructor({
    qField,
    qResult,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qField = qField;
    if (qResult !== void 0 && qResult !== null) {
      if (qResult.length > 0 && qResult[0] instanceof SearchTermResult) {
        this.qResult = qResult;
      } else {
        this.qResult = qResult.map((element) => new SearchTermResult(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SearchFieldMatch {
  constructor({
    qField,
    qNoOfMatches,
    qTerms,
    qValues,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qField = qField;
    this.qNoOfMatches = qNoOfMatches;
    this.qTerms = qTerms;
    this.qValues = qValues;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SearchFieldMatchType {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SearchFieldMatchesItem {
  constructor({
    qElemNo,
    qSearchTermsMatched,
    qText,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qElemNo = qElemNo;
    this.qSearchTermsMatched = qSearchTermsMatched;
    this.qText = qText;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SearchFieldSelectionMode {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SearchFieldValueItem {
  constructor({
    qFieldName,
    qValues,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qFieldName = qFieldName;
    if (qValues !== void 0 && qValues !== null) {
      if (qValues.length > 0 && qValues[0] instanceof SearchFieldMatchesItem) {
        this.qValues = qValues;
      } else {
        this.qValues = qValues.map((element) => new SearchFieldMatchesItem(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SearchGroup {
  constructor({
    qGroupType,
    qId,
    qItems,
    qSearchTermsMatched,
    qTotalNumberOfItems,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qGroupType = qGroupType;
    this.qId = qId;
    if (qItems !== void 0 && qItems !== null) {
      if (qItems.length > 0 && qItems[0] instanceof SearchGroupItem) {
        this.qItems = qItems;
      } else {
        this.qItems = qItems.map((element) => new SearchGroupItem(element, this.auth));
      }
    }
    this.qSearchTermsMatched = qSearchTermsMatched;
    this.qTotalNumberOfItems = qTotalNumberOfItems;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SearchGroupItem {
  constructor({
    qIdentifier,
    qItemMatches,
    qItemType,
    qMatchType,
    qSearchTermsMatched,
    qTotalNumberOfMatches,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qIdentifier = qIdentifier;
    if (qItemMatches !== void 0 && qItemMatches !== null) {
      if (qItemMatches.length > 0 && qItemMatches[0] instanceof SearchGroupItemMatch) {
        this.qItemMatches = qItemMatches;
      } else {
        this.qItemMatches = qItemMatches.map((element) => new SearchGroupItemMatch(element, this.auth));
      }
    }
    this.qItemType = qItemType;
    this.qMatchType = qMatchType;
    this.qSearchTermsMatched = qSearchTermsMatched;
    this.qTotalNumberOfMatches = qTotalNumberOfMatches;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SearchGroupItemMatch {
  constructor({
    qAttributes,
    qFieldSelectionMode,
    qRanges,
    qText,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qAttributes !== void 0 && qAttributes !== null) {
      if (qAttributes.length > 0 && qAttributes[0] instanceof SearchAttribute) {
        this.qAttributes = qAttributes;
      } else {
        this.qAttributes = qAttributes.map((element) => new SearchAttribute(element, this.auth));
      }
    }
    this.qFieldSelectionMode = qFieldSelectionMode;
    if (qRanges !== void 0 && qRanges !== null) {
      if (qRanges.length > 0 && qRanges[0] instanceof SearchCharRange) {
        this.qRanges = qRanges;
      } else {
        this.qRanges = qRanges.map((element) => new SearchCharRange(element, this.auth));
      }
    }
    this.qText = qText;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SearchGroupItemOptions {
  constructor({
    qCount,
    qGroupItemType,
    qOffset,
    ...rest
  }, auth) {
    this.qCount = -1;
    this.auth = auth;
    this.qCount = qCount;
    this.qGroupItemType = qGroupItemType;
    this.qOffset = qOffset;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SearchGroupItemType {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SearchGroupOptions {
  constructor({
    qCount,
    qGroupType,
    qOffset,
    ...rest
  }, auth) {
    this.qCount = -1;
    this.auth = auth;
    this.qCount = qCount;
    this.qGroupType = qGroupType;
    this.qOffset = qOffset;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SearchGroupType {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SearchMatchCombination {
  constructor({
    qFieldMatches,
    qId,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qFieldMatches !== void 0 && qFieldMatches !== null) {
      if (qFieldMatches.length > 0 && qFieldMatches[0] instanceof SearchFieldMatch) {
        this.qFieldMatches = qFieldMatches;
      } else {
        this.qFieldMatches = qFieldMatches.map((element) => new SearchFieldMatch(element, this.auth));
      }
    }
    this.qId = qId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SearchMatchCombinations extends Array {
  constructor(arr, auth) {
    super();
    this.auth = auth;
    for (const e of arr) {
      this.push(new SearchMatchCombination(e, this.auth));
    }
  }
}
class SearchObjectOptions {
  constructor({
    qAttributes,
    qCharEncoding,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qAttributes = qAttributes;
    this.qCharEncoding = qCharEncoding;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SearchPage {
  constructor({
    qCount,
    qGroupItemOptions,
    qGroupOptions,
    qMaxNbrFieldMatches,
    qOffset,
    ...rest
  }, auth) {
    this.qMaxNbrFieldMatches = -1;
    this.auth = auth;
    this.qCount = qCount;
    if (qGroupItemOptions !== void 0 && qGroupItemOptions !== null) {
      if (qGroupItemOptions.length > 0 && qGroupItemOptions[0] instanceof SearchGroupItemOptions) {
        this.qGroupItemOptions = qGroupItemOptions;
      } else {
        this.qGroupItemOptions = qGroupItemOptions.map((element) => new SearchGroupItemOptions(element, this.auth));
      }
    }
    if (qGroupOptions !== void 0 && qGroupOptions !== null) {
      if (qGroupOptions.length > 0 && qGroupOptions[0] instanceof SearchGroupOptions) {
        this.qGroupOptions = qGroupOptions;
      } else {
        this.qGroupOptions = qGroupOptions.map((element) => new SearchGroupOptions(element, this.auth));
      }
    }
    this.qMaxNbrFieldMatches = qMaxNbrFieldMatches;
    this.qOffset = qOffset;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SearchResult {
  constructor({
    qSearchGroupArray,
    qSearchTerms,
    qTotalNumberOfGroups,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qSearchGroupArray !== void 0 && qSearchGroupArray !== null) {
      if (qSearchGroupArray.length > 0 && qSearchGroupArray[0] instanceof SearchGroup) {
        this.qSearchGroupArray = qSearchGroupArray;
      } else {
        this.qSearchGroupArray = qSearchGroupArray.map((element) => new SearchGroup(element, this.auth));
      }
    }
    this.qSearchTerms = qSearchTerms;
    this.qTotalNumberOfGroups = qTotalNumberOfGroups;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SearchSuggestItem {
  constructor({
    qTerm,
    qValue,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qTerm = qTerm;
    this.qValue = qValue;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SearchSuggestionResult {
  constructor({
    qFieldNames,
    qSuggestions,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qFieldNames = qFieldNames;
    if (qSuggestions !== void 0 && qSuggestions !== null) {
      if (qSuggestions.length > 0 && qSuggestions[0] instanceof SearchSuggestItem) {
        this.qSuggestions = qSuggestions;
      } else {
        this.qSuggestions = qSuggestions.map((element) => new SearchSuggestItem(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SearchTermResult {
  constructor({
    qElemNumber,
    qRanges,
    qText,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qElemNumber = qElemNumber;
    if (qRanges !== void 0 && qRanges !== null) {
      if (qRanges.length > 0 && qRanges[0] instanceof SearchCharRange) {
        this.qRanges = qRanges;
      } else {
        this.qRanges = qRanges.map((element) => new SearchCharRange(element, this.auth));
      }
    }
    this.qText = qText;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SearchValueOptions {
  constructor({
    qSearchFields,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qSearchFields = qSearchFields;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SearchValuePage {
  constructor({
    qCount,
    qMaxNbrFieldMatches,
    qOffset,
    ...rest
  }, auth) {
    this.qMaxNbrFieldMatches = -1;
    this.auth = auth;
    this.qCount = qCount;
    this.qMaxNbrFieldMatches = qMaxNbrFieldMatches;
    this.qOffset = qOffset;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SearchValueResult {
  constructor({
    qFieldMatches,
    qSearchTerms,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qFieldMatches !== void 0 && qFieldMatches !== null) {
      if (qFieldMatches.length > 0 && qFieldMatches[0] instanceof SearchFieldValueItem) {
        this.qFieldMatches = qFieldMatches;
      } else {
        this.qFieldMatches = qFieldMatches.map((element) => new SearchFieldValueItem(element, this.auth));
      }
    }
    this.qSearchTerms = qSearchTerms;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SelectInfo {
  constructor({
    qContinuousRangeInfo,
    qNumberFormat,
    qRangeHi,
    qRangeInfo,
    qRangeLo,
    qSelectFieldSearch,
    qSoftLock,
    qTextSearch,
    ...rest
  }, auth) {
    this.qRangeHi = -1e300;
    this.qRangeLo = -1e300;
    this.auth = auth;
    if (qContinuousRangeInfo !== void 0 && qContinuousRangeInfo !== null) {
      if (qContinuousRangeInfo.length > 0 && qContinuousRangeInfo[0] instanceof Range) {
        this.qContinuousRangeInfo = qContinuousRangeInfo;
      } else {
        this.qContinuousRangeInfo = qContinuousRangeInfo.map((element) => new Range(element, this.auth));
      }
    }
    if (qNumberFormat !== void 0 && qNumberFormat !== null) {
      if (qNumberFormat instanceof FieldAttributes) {
        this.qNumberFormat = qNumberFormat;
      } else {
        this.qNumberFormat = new FieldAttributes(qNumberFormat, this.auth);
      }
    }
    this.qRangeHi = qRangeHi;
    if (qRangeInfo !== void 0 && qRangeInfo !== null) {
      if (qRangeInfo.length > 0 && qRangeInfo[0] instanceof RangeSelectInfo) {
        this.qRangeInfo = qRangeInfo;
      } else {
        this.qRangeInfo = qRangeInfo.map((element) => new RangeSelectInfo(element, this.auth));
      }
    }
    this.qRangeLo = qRangeLo;
    this.qSelectFieldSearch = qSelectFieldSearch;
    this.qSoftLock = qSoftLock;
    this.qTextSearch = qTextSearch;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SelectionObject {
  constructor({
    qBackCount,
    qForwardCount,
    qSelections,
    qStateName,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qBackCount = qBackCount;
    this.qForwardCount = qForwardCount;
    if (qSelections !== void 0 && qSelections !== null) {
      if (qSelections.length > 0 && qSelections[0] instanceof NxCurrentSelectionItem) {
        this.qSelections = qSelections;
      } else {
        this.qSelections = qSelections.map((element) => new NxCurrentSelectionItem(element, this.auth));
      }
    }
    this.qStateName = qStateName;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SelectionObjectDef {
  constructor({
    qStateName,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qStateName = qStateName;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Size {
  constructor({
    qcx,
    qcy,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qcx = qcx;
    this.qcy = qcy;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SortCriteria {
  constructor({
    qExpression,
    qSortByAscii,
    qSortByExpression,
    qSortByFrequency,
    qSortByGreyness,
    qSortByLoadOrder,
    qSortByNumeric,
    qSortByState,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qExpression !== void 0 && qExpression !== null) {
      if (qExpression instanceof ValueExpr) {
        this.qExpression = qExpression;
      } else {
        this.qExpression = new ValueExpr(qExpression, this.auth);
      }
    }
    this.qSortByAscii = qSortByAscii;
    this.qSortByExpression = qSortByExpression;
    this.qSortByFrequency = qSortByFrequency;
    this.qSortByGreyness = qSortByGreyness;
    this.qSortByLoadOrder = qSortByLoadOrder;
    this.qSortByNumeric = qSortByNumeric;
    this.qSortByState = qSortByState;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SourceKeyRecord {
  constructor({
    qKeyFields,
    qTables,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qKeyFields = qKeyFields;
    this.qTables = qTables;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class StateEnumType {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class StaticContentList {
  constructor({
    qItems,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qItems !== void 0 && qItems !== null) {
      if (qItems.length > 0 && qItems[0] instanceof StaticContentListItem) {
        this.qItems = qItems;
      } else {
        this.qItems = qItems.map((element) => new StaticContentListItem(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class StaticContentListItem {
  constructor({
    qUrl,
    qUrlDef,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qUrl = qUrl;
    this.qUrlDef = qUrlDef;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class StaticContentUrl {
  constructor({
    qUrl,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qUrl = qUrl;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class StaticContentUrlDef {
  constructor({
    qUrl,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qUrl = qUrl;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class StoreTempSelectionStateReturn {
  constructor({
    qId,
    qReturn,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qId = qId;
    this.qReturn = qReturn;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class StringExpr {
  constructor({
    qv,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qv = qv;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class StringExpression {
  constructor({
    qExpr,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qExpr = qExpr;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SymbolFrequency {
  constructor({
    qFrequency,
    qSymbol,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qFrequency = qFrequency;
    if (qSymbol !== void 0 && qSymbol !== null) {
      if (qSymbol instanceof SymbolValue) {
        this.qSymbol = qSymbol;
      } else {
        this.qSymbol = new SymbolValue(qSymbol, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SymbolValue {
  constructor({
    qNumber,
    qText,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qNumber = qNumber;
    this.qText = qText;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class TableProfilingData {
  constructor({
    qFieldProfiling,
    qNoOfRows,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qFieldProfiling !== void 0 && qFieldProfiling !== null) {
      if (qFieldProfiling.length > 0 && qFieldProfiling[0] instanceof FieldInTableProfilingData) {
        this.qFieldProfiling = qFieldProfiling;
      } else {
        this.qFieldProfiling = qFieldProfiling.map((element) => new FieldInTableProfilingData(element, this.auth));
      }
    }
    this.qNoOfRows = qNoOfRows;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class TableRecord {
  constructor({
    qComment,
    qFields,
    qIsDirectDiscovery,
    qIsSynthetic,
    qLoose,
    qName,
    qNoOfRows,
    qPos,
    qProfilingData,
    qTableTags,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qComment = qComment;
    if (qFields !== void 0 && qFields !== null) {
      if (qFields.length > 0 && qFields[0] instanceof FieldInTableData) {
        this.qFields = qFields;
      } else {
        this.qFields = qFields.map((element) => new FieldInTableData(element, this.auth));
      }
    }
    this.qIsDirectDiscovery = qIsDirectDiscovery;
    this.qIsSynthetic = qIsSynthetic;
    this.qLoose = qLoose;
    this.qName = qName;
    this.qNoOfRows = qNoOfRows;
    if (qPos !== void 0 && qPos !== null) {
      if (qPos instanceof Point) {
        this.qPos = qPos;
      } else {
        this.qPos = new Point(qPos, this.auth);
      }
    }
    if (qProfilingData !== void 0 && qProfilingData !== null) {
      if (qProfilingData instanceof TableProfilingData) {
        this.qProfilingData = qProfilingData;
      } else {
        this.qProfilingData = new TableProfilingData(qProfilingData, this.auth);
      }
    }
    this.qTableTags = qTableTags;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class TableRow {
  constructor({
    qValue,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qValue !== void 0 && qValue !== null) {
      if (qValue.length > 0 && qValue[0] instanceof FieldValue) {
        this.qValue = qValue;
      } else {
        this.qValue = qValue.map((element) => new FieldValue(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class TableViewBroomPointSaveInfo {
  constructor({
    qFields,
    qPos,
    qTable,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qFields = qFields;
    if (qPos !== void 0 && qPos !== null) {
      if (qPos instanceof Point) {
        this.qPos = qPos;
      } else {
        this.qPos = new Point(qPos, this.auth);
      }
    }
    this.qTable = qTable;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class TableViewConnectionPointSaveInfo {
  constructor({
    qFields,
    qPos,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qFields = qFields;
    if (qPos !== void 0 && qPos !== null) {
      if (qPos instanceof Point) {
        this.qPos = qPos;
      } else {
        this.qPos = new Point(qPos, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class TableViewCtlSaveInfo {
  constructor({
    qInternalView,
    qSourceView,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qInternalView !== void 0 && qInternalView !== null) {
      if (qInternalView instanceof TableViewSaveInfo) {
        this.qInternalView = qInternalView;
      } else {
        this.qInternalView = new TableViewSaveInfo(qInternalView, this.auth);
      }
    }
    if (qSourceView !== void 0 && qSourceView !== null) {
      if (qSourceView instanceof TableViewSaveInfo) {
        this.qSourceView = qSourceView;
      } else {
        this.qSourceView = new TableViewSaveInfo(qSourceView, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class TableViewDlgSaveInfo {
  constructor({
    qCtlInfo,
    qMode,
    qPos,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qCtlInfo !== void 0 && qCtlInfo !== null) {
      if (qCtlInfo instanceof TableViewCtlSaveInfo) {
        this.qCtlInfo = qCtlInfo;
      } else {
        this.qCtlInfo = new TableViewCtlSaveInfo(qCtlInfo, this.auth);
      }
    }
    this.qMode = qMode;
    if (qPos !== void 0 && qPos !== null) {
      if (qPos instanceof Rect) {
        this.qPos = qPos;
      } else {
        this.qPos = new Rect(qPos, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class TableViewSaveInfo {
  constructor({
    qBroomPoints,
    qConnectionPoints,
    qTables,
    qZoomFactor,
    ...rest
  }, auth) {
    this.qZoomFactor = 1;
    this.auth = auth;
    if (qBroomPoints !== void 0 && qBroomPoints !== null) {
      if (qBroomPoints.length > 0 && qBroomPoints[0] instanceof TableViewBroomPointSaveInfo) {
        this.qBroomPoints = qBroomPoints;
      } else {
        this.qBroomPoints = qBroomPoints.map((element) => new TableViewBroomPointSaveInfo(element, this.auth));
      }
    }
    if (qConnectionPoints !== void 0 && qConnectionPoints !== null) {
      if (qConnectionPoints.length > 0 && qConnectionPoints[0] instanceof TableViewConnectionPointSaveInfo) {
        this.qConnectionPoints = qConnectionPoints;
      } else {
        this.qConnectionPoints = qConnectionPoints.map((element) => new TableViewConnectionPointSaveInfo(element, this.auth));
      }
    }
    if (qTables !== void 0 && qTables !== null) {
      if (qTables.length > 0 && qTables[0] instanceof TableViewTableWinSaveInfo) {
        this.qTables = qTables;
      } else {
        this.qTables = qTables.map((element) => new TableViewTableWinSaveInfo(element, this.auth));
      }
    }
    this.qZoomFactor = qZoomFactor;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class TableViewTableWinSaveInfo {
  constructor({
    qCaption,
    qPos,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qCaption = qCaption;
    if (qPos !== void 0 && qPos !== null) {
      if (qPos instanceof Rect) {
        this.qPos = qPos;
      } else {
        this.qPos = new Rect(qPos, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class TextMacro {
  constructor({
    qDisplayString,
    qIsReserved,
    qIsSystem,
    qRefSeqNo,
    qSetSeqNo,
    qTag,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qDisplayString = qDisplayString;
    this.qIsReserved = qIsReserved;
    this.qIsSystem = qIsSystem;
    this.qRefSeqNo = qRefSeqNo;
    this.qSetSeqNo = qSetSeqNo;
    this.qTag = qTag;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class TotalMode {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class TransformAppParameters {
  constructor({
    qName,
    qScriptParameterPrefix,
    qSpaceId,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qName = qName;
    this.qScriptParameterPrefix = qScriptParameterPrefix;
    this.qSpaceId = qSpaceId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class TransformAppResult {
  constructor({
    qAppId,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qAppId = qAppId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class TreeData {
  constructor({
    qCalcCondMsg,
    qDimensionInfo,
    qEffectiveInterColumnSortOrder,
    qError,
    qHasOtherValues,
    qLastExpandedPos,
    qMeasureInfo,
    qNodesOnDim,
    qStateName,
    qTitle,
    qTreeDataPages,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qCalcCondMsg = qCalcCondMsg;
    if (qDimensionInfo !== void 0 && qDimensionInfo !== null) {
      if (qDimensionInfo.length > 0 && qDimensionInfo[0] instanceof NxTreeDimensionInfo) {
        this.qDimensionInfo = qDimensionInfo;
      } else {
        this.qDimensionInfo = qDimensionInfo.map((element) => new NxTreeDimensionInfo(element, this.auth));
      }
    }
    this.qEffectiveInterColumnSortOrder = qEffectiveInterColumnSortOrder;
    if (qError !== void 0 && qError !== null) {
      if (qError instanceof NxValidationError) {
        this.qError = qError;
      } else {
        this.qError = new NxValidationError(qError, this.auth);
      }
    }
    this.qHasOtherValues = qHasOtherValues;
    if (qLastExpandedPos !== void 0 && qLastExpandedPos !== null) {
      if (qLastExpandedPos instanceof NxCellPosition) {
        this.qLastExpandedPos = qLastExpandedPos;
      } else {
        this.qLastExpandedPos = new NxCellPosition(qLastExpandedPos, this.auth);
      }
    }
    if (qMeasureInfo !== void 0 && qMeasureInfo !== null) {
      if (qMeasureInfo.length > 0 && qMeasureInfo[0] instanceof NxMeasureInfo) {
        this.qMeasureInfo = qMeasureInfo;
      } else {
        this.qMeasureInfo = qMeasureInfo.map((element) => new NxMeasureInfo(element, this.auth));
      }
    }
    this.qNodesOnDim = qNodesOnDim;
    this.qStateName = qStateName;
    this.qTitle = qTitle;
    if (qTreeDataPages !== void 0 && qTreeDataPages !== null) {
      if (qTreeDataPages.length > 0 && qTreeDataPages[0] instanceof NxTreeNode) {
        this.qTreeDataPages = qTreeDataPages;
      } else {
        this.qTreeDataPages = qTreeDataPages.map((element) => new NxTreeNode(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class TreeDataDef {
  constructor({
    qCalcCondition,
    qContextSetExpression,
    qDimensions,
    qExpansionState,
    qInitialDataFetch,
    qInterColumnSortOrder,
    qOpenFullyExpanded,
    qPopulateMissing,
    qStateName,
    qSuppressMissing,
    qSuppressZero,
    qTitle,
    qValueExprs,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qCalcCondition !== void 0 && qCalcCondition !== null) {
      if (qCalcCondition instanceof NxCalcCond) {
        this.qCalcCondition = qCalcCondition;
      } else {
        this.qCalcCondition = new NxCalcCond(qCalcCondition, this.auth);
      }
    }
    this.qContextSetExpression = qContextSetExpression;
    if (qDimensions !== void 0 && qDimensions !== null) {
      if (qDimensions.length > 0 && qDimensions[0] instanceof NxTreeDimensionDef) {
        this.qDimensions = qDimensions;
      } else {
        this.qDimensions = qDimensions.map((element) => new NxTreeDimensionDef(element, this.auth));
      }
    }
    if (qExpansionState !== void 0 && qExpansionState !== null) {
      if (qExpansionState.length > 0 && qExpansionState[0] instanceof ExpansionData) {
        this.qExpansionState = qExpansionState;
      } else {
        this.qExpansionState = qExpansionState.map((element) => new ExpansionData(element, this.auth));
      }
    }
    if (qInitialDataFetch !== void 0 && qInitialDataFetch !== null) {
      if (qInitialDataFetch.length > 0 && qInitialDataFetch[0] instanceof NxTreeDataOption) {
        this.qInitialDataFetch = qInitialDataFetch;
      } else {
        this.qInitialDataFetch = qInitialDataFetch.map((element) => new NxTreeDataOption(element, this.auth));
      }
    }
    this.qInterColumnSortOrder = qInterColumnSortOrder;
    this.qOpenFullyExpanded = qOpenFullyExpanded;
    this.qPopulateMissing = qPopulateMissing;
    this.qStateName = qStateName;
    this.qSuppressMissing = qSuppressMissing;
    this.qSuppressZero = qSuppressZero;
    if (qTitle !== void 0 && qTitle !== null) {
      if (qTitle instanceof StringExpr) {
        this.qTitle = qTitle;
      } else {
        this.qTitle = new StringExpr(qTitle, this.auth);
      }
    }
    if (qValueExprs !== void 0 && qValueExprs !== null) {
      if (qValueExprs.length > 0 && qValueExprs[0] instanceof NxMeasure) {
        this.qValueExprs = qValueExprs;
      } else {
        this.qValueExprs = qValueExprs.map((element) => new NxMeasure(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class UndoInfo {
  constructor({
    qRedoCount,
    qUndoCount,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qRedoCount = qRedoCount;
    this.qUndoCount = qUndoCount;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class UndoInfoDef {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ValueExpr {
  constructor({
    qv,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qv = qv;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ValueExpression {
  constructor({
    qExpr,
    ...rest
  }, auth) {
    this.auth = auth;
    this.qExpr = qExpr;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Variable {
  constructor({
    qGenericId,
    qGenericType,
    qHandle,
    qType,
    ...rest
  }, session, auth) {
    this.auth = auth;
    this.session = session;
    this.qGenericId = qGenericId;
    this.qGenericType = qGenericType;
    this.qHandle = qHandle;
    this.qType = qType;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  async getContent() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetContent",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qContent"];
    const obj = new AlfaNumString(response, this.auth);
    return obj;
  }
  async getRawContent() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetRawContent",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    return response;
  }
  async setContent(qContent, qUpdateMRU) {
    const params = {};
    params.qContent = qContent;
    params.qUpdateMRU = qUpdateMRU;
    const rawResponse = await this.session.send({
      method: "SetContent",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qReturn"];
    return response;
  }
  async forceContent(qs, qd) {
    const params = {};
    params.qs = qs;
    params.qd = qd;
    const rawResponse = await this.session.send({
      method: "ForceContent",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
  async getNxProperties() {
    const params = {};
    const rawResponse = await this.session.send({
      method: "GetNxProperties",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"]["qProperties"];
    const obj = new NxVariableProperties(response, this.auth);
    return obj;
  }
  async setNxProperties(qProperties) {
    const params = {};
    params.qProperties = qProperties;
    const rawResponse = await this.session.send({
      method: "SetNxProperties",
      handle: this.qHandle || -1,
      params
    });
    const response = rawResponse["result"];
    return response;
  }
}
class VariableList {
  constructor({
    qItems,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qItems !== void 0 && qItems !== null) {
      if (qItems.length > 0 && qItems[0] instanceof NxVariableListItem) {
        this.qItems = qItems;
      } else {
        this.qItems = qItems.map((element) => new NxVariableListItem(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class VariableListDef {
  constructor({
    qData,
    qShowConfig,
    qShowReserved,
    qShowSession,
    qType,
    ...rest
  }, auth) {
    this.auth = auth;
    if (qData !== void 0 && qData !== null) {
      if (qData instanceof JsonObject) {
        this.qData = qData;
      } else {
        this.qData = new JsonObject(qData, this.auth);
      }
    }
    this.qShowConfig = qShowConfig;
    this.qShowReserved = qShowReserved;
    this.qShowSession = qShowSession;
    this.qType = qType;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Qix extends Global {
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AlfaNumString,
  AlternateStateData,
  AppEntry,
  AppObjectList,
  AppObjectListDef,
  AppScript,
  ArrayOfNxValuePoint,
  AssociationScore,
  BNFDef,
  BNFDefMetaType,
  BNFType,
  Blob,
  Bookmark,
  BookmarkApplyAndVerifyResult,
  BookmarkFieldItem,
  BookmarkFieldPage,
  BookmarkFieldVerifyResultState,
  BookmarkFieldVerifyWarning,
  BookmarkList,
  BookmarkListDef,
  BookmarkVariableItem,
  CalendarStrings,
  CharEncodingType,
  CharRange,
  CheckExpressionReturn,
  CheckNumberOrExpressionReturn,
  ChildList,
  ChildListDef,
  CodePage,
  CondDef,
  Connection,
  ContentLibraryList,
  ContentLibraryListItem,
  CreateTemporaryBookmarkReturn,
  CustomConnector,
  DataField,
  DataRecord,
  DataTable,
  DataTableEx,
  Database,
  DatabaseInfo,
  DatabaseOwner,
  DelimiterInfo,
  DerivedFieldsInTableData,
  DimensionList,
  DimensionListDef,
  DoReloadExParams,
  DoReloadExResult,
  Doc,
  DocListEntry,
  DriveInfo,
  DriveType,
  EditorBreakpoint,
  EmbeddedSnapshot,
  EmbeddedSnapshotDef,
  ErrorData,
  ErrorDataCode,
  ExpansionData,
  ExportDataReturn,
  ExtendedLayoutBookmarkData,
  ExtendedPivotStateData,
  ExtensionList,
  ExtensionListDef,
  Field,
  FieldAttrType,
  FieldAttributes,
  FieldDefEx,
  FieldDescription,
  FieldInTableData,
  FieldInTableProfilingData,
  FieldList,
  FieldListDef,
  FieldOrColumn,
  FieldScores,
  FieldType,
  FieldValue,
  FileDataFormat,
  FileType,
  FilterInfo,
  FilterType,
  FolderItem,
  FolderItemType,
  FrequencyDistributionData,
  Function,
  FunctionGroup,
  GenericBookmark,
  GenericBookmarkEntry,
  GenericBookmarkLayout,
  GenericBookmarkProperties,
  GenericConnectMachine,
  GenericDimension,
  GenericDimensionInfo,
  GenericDimensionLayout,
  GenericDimensionProperties,
  GenericMeasure,
  GenericMeasureLayout,
  GenericMeasureProperties,
  GenericObject,
  GenericObjectEntry,
  GenericObjectLayout,
  GenericObjectProperties,
  GenericVariable,
  GenericVariableLayout,
  GenericVariableProperties,
  GetBaseBNFReturn,
  GetBaseBNFStringReturn,
  GetDatabaseTablePreviewReturn,
  GetExpressionBNFReturn,
  GetFileTableFieldsReturn,
  GetFileTablePreviewReturn,
  GetHyperCubeContinuousDataReturn,
  GetInteractReturn,
  GetMediaListReturn,
  GetTablesAndKeysReturn,
  Global,
  GraphMode,
  GroupBookmarkData,
  GroupStateInfo,
  HyperCube,
  HyperCubeDef,
  InputFieldItem,
  InterFieldSortData,
  InteractDef,
  InteractType,
  JsonObject,
  KeyType,
  LayoutBookmarkData,
  LayoutExclude,
  LayoutFieldInfo,
  LineageInfo,
  ListObject,
  ListObjectDef,
  LocaleInfo,
  LogOnType,
  MeasureList,
  MeasureListDef,
  MediaList,
  MediaListDef,
  MediaListItem,
  MetaData,
  NxAppLayout,
  NxAppProperties,
  NxAttrDimDef,
  NxAttrDimInfo,
  NxAttrExprDef,
  NxAttrExprInfo,
  NxAttributeDimValues,
  NxAttributeExpressionValues,
  NxAutoSortByStateDef,
  NxAxisData,
  NxAxisTicks,
  NxBookmark,
  NxCalcCond,
  NxCardinalities,
  NxCell,
  NxCellPosition,
  NxCellRows,
  NxContainerEntry,
  NxContinuousDataOptions,
  NxContinuousMode,
  NxContinuousRangeSelectInfo,
  NxCurrentSelectionItem,
  NxDataAreaPage,
  NxDataPage,
  NxDataReductionMode,
  NxDerivedField,
  NxDerivedFieldDescriptionList,
  NxDerivedFieldsData,
  NxDerivedGroup,
  NxDimCellType,
  NxDimension,
  NxDimensionInfo,
  NxDimensionType,
  NxDownloadInfo,
  NxDownloadOptions,
  NxEngineVersion,
  NxExportFileType,
  NxExportState,
  NxFeature,
  NxFieldDescription,
  NxFieldProperties,
  NxFieldResourceId,
  NxFieldSelectionInfo,
  NxFieldSelectionMode,
  NxFieldTableResourceId,
  NxFrequencyMode,
  NxGetBookmarkOptions,
  NxGetObjectOptions,
  NxGroupTail,
  NxGrpType,
  NxHighlightRanges,
  NxHypercubeMode,
  NxInfo,
  NxInlineDimensionDef,
  NxInlineMeasureDef,
  NxLTrendlineType,
  NxLayoutErrors,
  NxLibraryDimension,
  NxLibraryDimensionDef,
  NxLibraryMeasure,
  NxLibraryMeasureDef,
  NxLinkedObjectInfo,
  NxListObjectExpression,
  NxListObjectExpressionDef,
  NxLocalizedErrorCode,
  NxLocalizedWarningCode,
  NxMatchingFieldInfo,
  NxMatchingFieldMode,
  NxMeasure,
  NxMeasureInfo,
  NxMeta,
  NxMetaDef,
  NxMiniChart,
  NxMiniChartCell,
  NxMiniChartData,
  NxMiniChartDef,
  NxMiniChartRows,
  NxMultiRangeSelectInfo,
  NxPage,
  NxPageTreeLevel,
  NxPageTreeNode,
  NxPatch,
  NxPatchOperationType,
  NxPatches,
  NxPivotDimensionCell,
  NxPivotPage,
  NxPivotValuePoint,
  NxRange,
  NxRangeSelectInfo,
  NxSelectionCell,
  NxSelectionCellType,
  NxSelectionInfo,
  NxSimpleDimValue,
  NxSimpleValue,
  NxSortIndicatorType,
  NxStackPage,
  NxStackedPivotCell,
  NxStateCounts,
  NxStreamListEntry,
  NxTempBookmarkOptions,
  NxTickCell,
  NxTreeDataOption,
  NxTreeDimensionDef,
  NxTreeDimensionInfo,
  NxTreeMultiRangeSelectInfo,
  NxTreeNode,
  NxTreeRangeSelectInfo,
  NxTreeValue,
  NxTrendline,
  NxTrendlineDef,
  NxTrendlineMode,
  NxValidationError,
  NxVariableListItem,
  NxVariableProperties,
  NxViewPort,
  ObjectInterface,
  OdbcDsn,
  OleDbProvider,
  OtherLimitMode,
  OtherMode,
  OtherSortMode,
  OtherTotalSpecProp,
  Point,
  PositionMark,
  ProgressData,
  ProgressMessage,
  Qix,
  Range,
  RangeSelectInfo,
  Rect,
  SampleResult,
  ScriptSyntaxError,
  ScrollPosition,
  SearchAssociationResult,
  SearchAttribute,
  SearchCharRange,
  SearchCombinationOptions,
  SearchContextType,
  SearchFieldDictionary,
  SearchFieldMatch,
  SearchFieldMatchType,
  SearchFieldMatchesItem,
  SearchFieldSelectionMode,
  SearchFieldValueItem,
  SearchGroup,
  SearchGroupItem,
  SearchGroupItemMatch,
  SearchGroupItemOptions,
  SearchGroupItemType,
  SearchGroupOptions,
  SearchGroupType,
  SearchMatchCombination,
  SearchMatchCombinations,
  SearchObjectOptions,
  SearchPage,
  SearchResult,
  SearchSuggestItem,
  SearchSuggestionResult,
  SearchTermResult,
  SearchValueOptions,
  SearchValuePage,
  SearchValueResult,
  SelectInfo,
  SelectionObject,
  SelectionObjectDef,
  Size,
  SortCriteria,
  SourceKeyRecord,
  StateEnumType,
  StaticContentList,
  StaticContentListItem,
  StaticContentUrl,
  StaticContentUrlDef,
  StoreTempSelectionStateReturn,
  StringExpr,
  StringExpression,
  SymbolFrequency,
  SymbolValue,
  TableProfilingData,
  TableRecord,
  TableRow,
  TableViewBroomPointSaveInfo,
  TableViewConnectionPointSaveInfo,
  TableViewCtlSaveInfo,
  TableViewDlgSaveInfo,
  TableViewSaveInfo,
  TableViewTableWinSaveInfo,
  TextMacro,
  TotalMode,
  TransformAppParameters,
  TransformAppResult,
  TreeData,
  TreeDataDef,
  UndoInfo,
  UndoInfoDef,
  ValueExpr,
  ValueExpression,
  Variable,
  VariableList,
  VariableListDef
});
