var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Csp_Origins_exports = {};
__export(Csp_Origins_exports, {
  CSPEntry: () => CSPEntry,
  CSPEntryContent: () => CSPEntryContent,
  CSPEntryList: () => CSPEntryList,
  CSPEntryListLinks: () => CSPEntryListLinks,
  CSPHeader: () => CSPHeader,
  CspOrigins: () => CspOrigins,
  Link: () => Link
});
module.exports = __toCommonJS(Csp_Origins_exports);
var import_auth = __toESM(require("../auth/auth.js"));
class CSPEntry {
  constructor({
    id,
    childSrc,
    connectSrc,
    connectSrcWSS,
    createdDate,
    description,
    fontSrc,
    formAction,
    frameAncestors,
    frameSrc,
    imgSrc,
    mediaSrc,
    modifiedDate,
    name,
    objectSrc,
    origin,
    scriptSrc,
    styleSrc,
    workerSrc,
    ...rest
  }, auth) {
    this.auth = auth;
    this.id = id;
    this.childSrc = childSrc;
    this.connectSrc = connectSrc;
    this.connectSrcWSS = connectSrcWSS;
    this.createdDate = createdDate;
    this.description = description;
    this.fontSrc = fontSrc;
    this.formAction = formAction;
    this.frameAncestors = frameAncestors;
    this.frameSrc = frameSrc;
    this.imgSrc = imgSrc;
    this.mediaSrc = mediaSrc;
    this.modifiedDate = modifiedDate;
    this.name = name;
    this.objectSrc = objectSrc;
    this.origin = origin;
    this.scriptSrc = scriptSrc;
    this.styleSrc = styleSrc;
    this.workerSrc = workerSrc;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  async delete() {
    await this.auth.rest(
      "/csp-origins/{id}".replace("{id}", this.id ?? ""),
      {
        method: "DELETE"
      }
    );
  }
  async set(data) {
    const response = await this.auth.rest(
      "/csp-origins/{id}".replace("{id}", this.id ?? ""),
      {
        method: "PUT",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    Object.keys(responseJson).forEach((key) => {
      if (this[key]) {
        this[key] = responseJson[key];
      }
    });
    return this;
  }
}
class CSPEntryContent {
  constructor({
    childSrc,
    connectSrc,
    connectSrcWSS,
    createdDate,
    description,
    fontSrc,
    formAction,
    frameAncestors,
    frameSrc,
    imgSrc,
    mediaSrc,
    modifiedDate,
    name,
    objectSrc,
    origin,
    scriptSrc,
    styleSrc,
    workerSrc,
    ...rest
  }, auth) {
    this.auth = auth;
    this.childSrc = childSrc;
    this.connectSrc = connectSrc;
    this.connectSrcWSS = connectSrcWSS;
    this.createdDate = createdDate;
    this.description = description;
    this.fontSrc = fontSrc;
    this.formAction = formAction;
    this.frameAncestors = frameAncestors;
    this.frameSrc = frameSrc;
    this.imgSrc = imgSrc;
    this.mediaSrc = mediaSrc;
    this.modifiedDate = modifiedDate;
    this.name = name;
    this.objectSrc = objectSrc;
    this.origin = origin;
    this.scriptSrc = scriptSrc;
    this.styleSrc = styleSrc;
    this.workerSrc = workerSrc;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class CSPEntryList {
  constructor({
    data,
    links,
    ...rest
  }, auth) {
    this.auth = auth;
    if (data !== void 0 && data !== null) {
      if (data.length > 0 && data[0] instanceof CSPEntry) {
        this.data = data;
      } else {
        this.data = data.map((element) => new CSPEntry(element, this.auth));
      }
    }
    if (links !== void 0 && links !== null) {
      if (links instanceof CSPEntryListLinks) {
        this.links = links;
      } else {
        this.links = new CSPEntryListLinks(links, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class CSPEntryListLinks {
  constructor({
    next,
    prev,
    self,
    ...rest
  }, auth) {
    this.auth = auth;
    if (next !== void 0 && next !== null) {
      if (next instanceof Link) {
        this.next = next;
      } else {
        this.next = new Link(next, this.auth);
      }
    }
    if (prev !== void 0 && prev !== null) {
      if (prev instanceof Link) {
        this.prev = prev;
      } else {
        this.prev = new Link(prev, this.auth);
      }
    }
    if (self !== void 0 && self !== null) {
      if (self instanceof Link) {
        this.self = self;
      } else {
        this.self = new Link(self, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class CSPHeader {
  constructor({
    ContentSecurityPolicy,
    ...rest
  }, auth) {
    this.auth = auth;
    if (ContentSecurityPolicy) {
      this.ContentSecurityPolicy = ContentSecurityPolicy;
    } else if (rest["Content-Security-Policy"]) {
      this.ContentSecurityPolicy = rest["Content-Security-Policy"];
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Link {
  constructor({
    href,
    ...rest
  }, auth) {
    this.auth = auth;
    this.href = href;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class CspOrigins {
  constructor(config) {
    this.config = config instanceof import_auth.default ? config.config : config;
    this.auth = config instanceof import_auth.default ? config : new import_auth.default(config);
  }
  async generateHeader() {
    const response = await this.auth.rest(
      "/csp-origins/actions/generate-header",
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new CSPHeader(responseJson, this.auth);
  }
  async get(id) {
    const response = await this.auth.rest(
      "/csp-origins/{id}".replace("{id}", id),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new CSPEntry(responseJson, this.auth);
  }
  async getCspOrigins(queryParams = { limit: 20 }) {
    const response = await this.auth.rest(
      `/csp-origins?${Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => `${k}=${v}`).join("&")}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new CSPEntryList(responseJson, this.auth);
  }
  async create(data) {
    const response = await this.auth.rest(
      "/csp-origins",
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    return new CSPEntry(responseJson, this.auth);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CSPEntry,
  CSPEntryContent,
  CSPEntryList,
  CSPEntryListLinks,
  CSPHeader,
  CspOrigins,
  Link
});
