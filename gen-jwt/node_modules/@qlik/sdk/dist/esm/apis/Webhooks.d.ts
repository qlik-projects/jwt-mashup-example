/**
This is spectacularly generated code by spectacular v0.13.0 based on
Qlik Cloud Services 0.554.4
*/
import Auth from '../auth/auth.js';
import type { Config } from '../types/types.js';
/**
  @param createdAt - The UTC timestamp when the webhook was created
  @param createdByUserId - The id of the user that created the webhook
  @param description - The reason for creating the webhook
  @param disabledReason - The reason for the webhook to be disabled
  @param disabledReasonCode - The unique code for the reason
  @param enabled - Whether the webhook is active and sending requests
  @param eventTypes - Types of events for which the webhook should trigger.
  @param filter - Filter that should match for a webhook to be triggered.
Supported attribute names are 'id', 'spaceId' and 'topLevelResourceId'.
Supported attribute operators are 'eq' and 'ne'.
Supported logical operators are 'and' and 'or'.
Note that attribute values must be valid JSON strings, hence they're enclosed with double quotes
For more detailed information regarding the SCIM filter syntax (RFC7644) used please following link to external documentation.
  @param headers - Additional headers in the post request
  @param id - The webhook's unique identifier
  @param level - Defines at what level the webhook should operate: for all resources belonging to a tenant or restricted to only those accessible by the webhook-creator.
  @param name - The name for the webhook
  @param ownerId - The id of the user that owns the webhook, only applicable for user level webhooks
  @param secret - String used as secret for calculating HMAC hash sent as header
  @param updatedAt - The UTC timestamp when the webhook was last updated
  @param updatedByUserId - The id of the user that last updated the webhook
  @param url - Target URL for webhook HTTPS requests
  @param auth - Auth object used to make requests
 */
export declare class Webhook {
    auth: Auth;
    createdAt?: string;
    createdByUserId?: string;
    description?: string;
    disabledReason?: string;
    disabledReasonCode?: string;
    enabled?: boolean;
    eventTypes?: Array<string>;
    filter?: string;
    headers?: object;
    id?: string;
    level?: 'tenant' | 'user' | string;
    name: string;
    ownerId?: string;
    secret?: string;
    updatedAt?: string;
    updatedByUserId?: string;
    url: string;
    [key: string]: any;
    constructor({ createdAt, createdByUserId, description, disabledReason, disabledReasonCode, enabled, eventTypes, filter, headers, id, level, name, ownerId, secret, updatedAt, updatedByUserId, url, ...rest }: {
        createdAt?: string;
        createdByUserId?: string;
        description?: string;
        disabledReason?: string;
        disabledReasonCode?: string;
        enabled?: boolean;
        eventTypes?: Array<string>;
        filter?: string;
        headers?: object;
        id?: string;
        level?: 'tenant' | 'user' | string;
        name: string;
        ownerId?: string;
        secret?: string;
        updatedAt?: string;
        updatedByUserId?: string;
        url: string;
    }, auth?: Auth);
    /**
    Returns deliveries for a specific webhook
  
      @param eventType - Filter resources by event-type
      @param limit - Maximum number of deliveries to retrieve
      @param next - Cursor to the next page
      @param prev - Cursor to previous next page
      @param sort - Field to sort by, prefix with -/+ to indicate order
      @param status - Filter resources by status (success or fail)
    */
    getDeliveries(queryParams?: {
        eventType?: string;
        limit?: number;
        next?: string;
        prev?: string;
        sort?: 'status' | '+status' | '-status' | 'triggeredAt' | '+triggeredAt' | '-triggeredAt';
        status?: 'success' | 'fail';
    }): Promise<DeliveryList>;
    /**
    Deletes a specific webhook
  
    */
    delete(): Promise<void>;
    /**
    Patches a webhook
  
      @param WebhookPatchData
    */
    patch(WebhookPatchData: Array<WebhookPatch>): Promise<void>;
    /**
    Updates a webhook
  
      @param data
    */
    set(data: WebhookDef): Promise<Webhook>;
}
/**
  @param eventType - The name of the triggering event-type
  @param id - The delivery's unique identifier
  @param request
  @param response
  @param status - The status of delivery
  @param statusMessage - The status message of the delivery
  @param triggeredAt - The UTC timestamp when the delivery was triggered
  @param webhookId - The unique webhook identifier that the delivery is for
  @param auth - Auth object used to make requests
 */
export declare class Delivery {
    auth?: Auth;
    eventType: string;
    id: string;
    request?: DeliveryRequest;
    response?: DeliveryResponse;
    status: 'success' | 'fail' | string;
    statusMessage?: string;
    triggeredAt: string;
    webhookId: string;
    [key: string]: any;
    constructor({ eventType, id, request, response, status, statusMessage, triggeredAt, webhookId, ...rest }: {
        eventType: string;
        id: string;
        request?: DeliveryRequest;
        response?: DeliveryResponse;
        status: 'success' | 'fail' | string;
        statusMessage?: string;
        triggeredAt: string;
        webhookId: string;
    }, auth?: Auth);
}
/**
  @param data
  @param links
  @param auth - Auth object used to make requests
 */
export declare class DeliveryList {
    auth?: Auth;
    data?: Array<Delivery>;
    links?: DeliveryListLinks;
    [key: string]: any;
    constructor({ data, links, ...rest }: {
        data?: Array<Delivery>;
        links?: DeliveryListLinks;
    }, auth?: Auth);
}
/**
  @param next
  @param prev
  @param self
  @param auth - Auth object used to make requests
 */
export declare class DeliveryListLinks {
    auth?: Auth;
    next?: Link;
    prev?: Link;
    self?: Link;
    [key: string]: any;
    constructor({ next, prev, self, ...rest }: {
        next?: Link;
        prev?: Link;
        self?: Link;
    }, auth?: Auth);
}
/**
  @param body - The sent body/payload of the delivery
  @param headers - Headers sent for this delivery
  @param url - URL used for this delivery
  @param auth - Auth object used to make requests
 */
export declare class DeliveryRequest {
    auth?: Auth;
    body?: object;
    headers?: object;
    url?: string;
    [key: string]: any;
    constructor({ body, headers, url, ...rest }: {
        body?: object;
        headers?: object;
        url?: string;
    }, auth?: Auth);
}
/**
  @param body - The received body of the delivery
  @param headers - Headers received for this delivery
  @param statusCode - The HTTP status code of the response
  @param auth - Auth object used to make requests
 */
export declare class DeliveryResponse {
    auth?: Auth;
    body?: string;
    headers?: object;
    statusCode?: number;
    [key: string]: any;
    constructor({ body, headers, statusCode, ...rest }: {
        body?: string;
        headers?: object;
        statusCode?: number;
    }, auth?: Auth);
}
/**
  @param description - Description of the event type
  @param levels - Specifies which levels that are supported for this event type
  @param name - Name of the event type
  @param title - Title of the event type
  @param auth - Auth object used to make requests
 */
export declare class EventType {
    auth?: Auth;
    description?: string;
    levels?: Array<string>;
    name?: string;
    title?: string;
    [key: string]: any;
    constructor({ description, levels, name, title, ...rest }: {
        description?: string;
        levels?: Array<string>;
        name?: string;
        title?: string;
    }, auth?: Auth);
}
/**
  @param data
  @param auth - Auth object used to make requests
 */
export declare class EventTypes {
    auth?: Auth;
    data?: Array<EventType>;
    [key: string]: any;
    constructor({ data, ...rest }: {
        data?: Array<EventType>;
    }, auth?: Auth);
}
/**
  @param href - URL to a resource request
  @param auth - Auth object used to make requests
 */
export declare class Link {
    auth?: Auth;
    href: string;
    [key: string]: any;
    constructor({ href, ...rest }: {
        href: string;
    }, auth?: Auth);
}
/**
  @param description - The reason for creating the webhook
  @param enabled - Whether the webhook is active and sending requests
  @param eventTypes - Types of events for which the webhook should trigger.
  @param filter - Filter that should match for a webhook to be triggered.
Supported attribute names are 'id', 'spaceId' and 'topLevelResourceId'.
Supported attribute operators are 'eq' and 'ne'.
Supported logical operators are 'and' and 'or'.
Note that attribute values must be valid JSON strings, hence they're enclosed with double quotes
For more detailed information regarding the SCIM filter syntax (RFC7644) used please following link to external documentation.
  @param headers - Additional headers in the post request
  @param level - Defines at what level the webhook should operate: for all resources belonging to a tenant or restricted to only those accessible by the webhook-creator.
  @param name - The name for the webhook
  @param ownerId - The id of the user that owns the webhook, only applicable for user level webhooks
  @param secret - String used as secret for calculating HMAC hash sent as header
  @param url - Target URL for webhook HTTPS requests
  @param auth - Auth object used to make requests
 */
export declare class WebhookDef {
    auth?: Auth;
    description?: string;
    enabled?: boolean;
    eventTypes?: Array<string>;
    filter?: string;
    headers?: object;
    level?: 'tenant' | 'user' | string;
    name: string;
    ownerId?: string;
    secret?: string;
    url: string;
    [key: string]: any;
    constructor({ description, enabled, eventTypes, filter, headers, level, name, ownerId, secret, url, ...rest }: {
        description?: string;
        enabled?: boolean;
        eventTypes?: Array<string>;
        filter?: string;
        headers?: object;
        level?: 'tenant' | 'user' | string;
        name: string;
        ownerId?: string;
        secret?: string;
        url: string;
    }, auth?: Auth);
}
/**
  @param data
  @param links
  @param auth - Auth object used to make requests
 */
export declare class WebhookList {
    auth?: Auth;
    data?: Array<Webhook>;
    links?: WebhookListLinks;
    [key: string]: any;
    constructor({ data, links, ...rest }: {
        data?: Array<Webhook>;
        links?: WebhookListLinks;
    }, auth?: Auth);
}
/**
  @param next
  @param prev
  @param self
  @param auth - Auth object used to make requests
 */
export declare class WebhookListLinks {
    auth?: Auth;
    next?: Link;
    prev?: Link;
    self?: Link;
    [key: string]: any;
    constructor({ next, prev, self, ...rest }: {
        next?: Link;
        prev?: Link;
        self?: Link;
    }, auth?: Auth);
}
/**
  A JSON Patch document as defined in https://datatracker.ietf.org/doc/html/rfc6902
  @param op - The operation to be performed
  @param path - The path for the given resource field to patch
  @param value - The value to be used for this operation.
  @param auth - Auth object used to make requests
 */
export declare class WebhookPatch {
    auth?: Auth;
    op: 'add' | 'remove' | 'replace' | string;
    path: '/name' | '/description' | '/url' | '/eventTypes' | '/headers' | '/enabled' | '/secret' | string;
    value?: any;
    [key: string]: any;
    constructor({ op, path, value, ...rest }: {
        op: 'add' | 'remove' | 'replace' | string;
        path: '/name' | '/description' | '/url' | '/eventTypes' | '/headers' | '/enabled' | '/secret' | string;
        value?: string;
    }, auth?: Auth);
}
export declare class Webhooks {
    auth: Auth;
    config: Config;
    constructor(config: Config | Auth);
    /**
    List of event-types that are possible to subscribe to.
  
    */
    getEventTypes(): Promise<EventTypes>;
    /**
    Resend the delivery with the same payload
  
      @param deliveryId - The delivery's unique identifier.
      @param id - The webhook's unique identifier.
    */
    resend(deliveryId: string, id: string): Promise<Delivery>;
    /**
    Returns details for a specific delivery
  
      @param deliveryId - The delivery's unique identifier.
      @param id - The webhook's unique identifier.
    */
    getDeliverie(deliveryId: string, id: string): Promise<Delivery>;
    /**
    Returns details for a specific webhook
  
      @param id - The webhook's unique identifier.
    */
    get(id: string): Promise<Webhook>;
    /**
    Retrieves all webhooks entries for a tenant
  
      @param createdByUserId - Filter resources by user that created it
      @param enabled - Filter resources by enabled true/false
      @param eventType - Filter resources by event-type
      @param level - Filter resources by level that user has access to (either user or level)
      @param limit - Maximum number of webhooks to retrieve
      @param name - Filter resources by name (wildcard and case insensitive)
      @param next - Cursor to the next page
      @param ownerId - Filter resources by user that owns it, only applicable for user level webhooks
      @param prev - Cursor to previous next page
      @param sort - Field to sort by, prefix with -/+ to indicate order
      @param updatedByUserId - Filter resources by user that last updated the webhook
      @param url - Filter resources by url (wildcard and case insensitive)
    */
    getWebhooks(queryParams?: {
        createdByUserId?: string;
        enabled?: boolean;
        eventType?: string;
        level?: string;
        limit?: number;
        name?: string;
        next?: string;
        ownerId?: string;
        prev?: string;
        sort?: 'name' | '+name' | '-name' | 'url' | '+url' | '-url' | 'createdAt' | '+createdAt' | '-createdAt' | 'updatedAt' | '+updatedAt' | '-updatedAt';
        updatedByUserId?: string;
        url?: string;
    }): Promise<WebhookList>;
    /**
    Creates a new webhook
  
      @param data
    */
    create(data: WebhookDef): Promise<Webhook>;
}
