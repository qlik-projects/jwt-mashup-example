/**
This is spectacularly generated code by spectacular v0.13.0 based on
Qlik Cloud Services 0.554.4
*/
/// <reference types="node" />
import Auth from '../auth/auth.js';
import type { Config } from '../types/types.js';
/**
  The extension model.
  @param author - Author of the extension.
  @param bundle - Object containing meta data regarding the bundle the extension belongs to. If it does not belong to a bundle, this object is not defined.
  @param bundled - If the extension is part of an extension bundle.
  @param checksum - Checksum of the extension contents.
  @param createdAt
  @param dependencies - Map of dependencies describing version of the component it requires.
  @param deprecated - A date noting when the extension was deprecated.
  @param description - Description of the extension.
  @param file - The file that was uploaded with the extension.
  @param homepage - Home page of the extension.
  @param icon - Icon to show in the client.
  @param id
  @param keywords - Keywords for the extension.
  @param license - Under which license this extension is published.
  @param name - The display name of this extension.
  @param preview - Path to an image that enables users to preview the extension.
  @param qextFilename - The name of the qext file that was uploaded with this extension.
  @param qextVersion - The version from the qext file that was uploaded with this extension.
  @param repository - Link to the extension source code.
  @param supernova - If the extension is a supernova extension or not.
  @param supplier - Supplier of the extension.
  @param tags - List of tags.
  @param tenantId
  @param type - The type of this extension (visualization, etc.).
  @param updateAt
  @param userId
  @param version - Version of the extension.
  @param auth - Auth object used to make requests
 */
export declare class Extension {
    auth: Auth;
    author?: string;
    bundle?: BundleMeta;
    bundled?: boolean;
    checksum?: string;
    createdAt?: string;
    dependencies?: object;
    deprecated?: string;
    description?: string;
    file?: object;
    homepage?: string;
    icon?: string;
    id?: string;
    keywords?: string;
    license?: string;
    name?: string;
    preview?: string;
    qextFilename?: string;
    qextVersion?: string;
    repository?: string;
    supernova?: boolean;
    supplier?: string;
    tags?: Array<string>;
    tenantId?: string;
    type?: string;
    updateAt?: string;
    userId?: string;
    version?: string;
    [key: string]: any;
    constructor({ author, bundle, bundled, checksum, createdAt, dependencies, deprecated, description, file, homepage, icon, id, keywords, license, name, preview, qextFilename, qextVersion, repository, supernova, supplier, tags, tenantId, type, updateAt, userId, version, ...rest }: {
        author?: string;
        bundle?: BundleMeta;
        bundled?: boolean;
        checksum?: string;
        createdAt?: string;
        dependencies?: object;
        deprecated?: string;
        description?: string;
        file?: object;
        homepage?: string;
        icon?: string;
        id?: string;
        keywords?: string;
        license?: string;
        name?: string;
        preview?: string;
        qextFilename?: string;
        qextVersion?: string;
        repository?: string;
        supernova?: boolean;
        supplier?: string;
        tags?: Array<string>;
        tenantId?: string;
        type?: string;
        updateAt?: string;
        userId?: string;
        version?: string;
    }, auth?: Auth);
    /**
    Downloads the extension as an archive.
  
    */
    getFile(): Promise<void>;
    /**
    Deletes a specific extension.
  
    */
    delete(): Promise<void>;
    /**
    Updates a specific extension with provided data. If a file is provided, the data field is not required.
  
      @param data
      @param file - Extension archive.
    */
    patch(data?: ExtensionDef, file?: Buffer): Promise<Extension>;
}
/**
  The extension model.
  @param author - Author of the extension.
  @param bundle - Object containing meta data regarding the bundle the extension belongs to. If it does not belong to a bundle, this object is not defined.
  @param bundled - If the extension is part of an extension bundle.
  @param checksum - Checksum of the extension contents.
  @param dependencies - Map of dependencies describing version of the component it requires.
  @param deprecated - A date noting when the extension was deprecated.
  @param description - Description of the extension.
  @param file - The file that was uploaded with the extension.
  @param homepage - Home page of the extension.
  @param icon - Icon to show in the client.
  @param keywords - Keywords for the extension.
  @param license - Under which license this extension is published.
  @param name - The display name of this extension.
  @param preview - Path to an image that enables users to preview the extension.
  @param qextFilename - The name of the qext file that was uploaded with this extension.
  @param qextVersion - The version from the qext file that was uploaded with this extension.
  @param repository - Link to the extension source code.
  @param supernova - If the extension is a supernova extension or not.
  @param supplier - Supplier of the extension.
  @param tags - List of tags.
  @param type - The type of this extension (visualization, etc.).
  @param version - Version of the extension.
  @param auth - Auth object used to make requests
 */
export declare class ExtensionDef {
    auth?: Auth;
    author?: string;
    bundle?: BundleMeta;
    bundled?: boolean;
    checksum?: string;
    dependencies?: object;
    deprecated?: string;
    description?: string;
    file?: object;
    homepage?: string;
    icon?: string;
    keywords?: string;
    license?: string;
    name?: string;
    preview?: string;
    qextFilename?: string;
    qextVersion?: string;
    repository?: string;
    supernova?: boolean;
    supplier?: string;
    tags?: Array<string>;
    type?: string;
    version?: string;
    [key: string]: any;
    constructor({ author, bundle, bundled, checksum, dependencies, deprecated, description, file, homepage, icon, keywords, license, name, preview, qextFilename, qextVersion, repository, supernova, supplier, tags, type, version, ...rest }: {
        author?: string;
        bundle?: BundleMeta;
        bundled?: boolean;
        checksum?: string;
        dependencies?: object;
        deprecated?: string;
        description?: string;
        file?: object;
        homepage?: string;
        icon?: string;
        keywords?: string;
        license?: string;
        name?: string;
        preview?: string;
        qextFilename?: string;
        qextVersion?: string;
        repository?: string;
        supernova?: boolean;
        supplier?: string;
        tags?: Array<string>;
        type?: string;
        version?: string;
    }, auth?: Auth);
}
/**
  Object containing meta data regarding the bundle the extension belongs to. If it does not belong to a bundle, this object is not defined.
  @param description - Description of the bundle.
  @param id - Unique identifier of the bundle.
  @param name - Name of the bundle.
  @param auth - Auth object used to make requests
 */
export declare class BundleMeta {
    auth?: Auth;
    description?: string;
    id?: string;
    name?: string;
    [key: string]: any;
    constructor({ description, id, name, ...rest }: {
        description?: string;
        id?: string;
        name?: string;
    }, auth?: Auth);
}
/**
  @param data
  @param auth - Auth object used to make requests
 */
export declare class ExtensionsClass {
    auth?: Auth;
    data?: Array<Extension>;
    [key: string]: any;
    constructor({ data, ...rest }: {
        data?: Array<Extension>;
    }, auth?: Auth);
}
export declare class Extensions {
    auth: Auth;
    config: Config;
    constructor(config: Config | Auth);
    /**
    Downloads a file from the extension archive.
  
      @param filepath - Path to the file archive for the specified extension archive. Folders separated with forward slashes.
      @param id - Extension identifier or its qextFilename.
    */
    getFile(filepath: string, id: string): Promise<void>;
    /**
    Returns a specific extension.
  
      @param id - Extension identifier or its qextFilename.
    */
    get(id: string): Promise<Extension>;
    /**
    Lists all extensions.
  
    */
    getExtensions(): Promise<ExtensionsClass>;
    /**
    Creates a new extension. If a file is provided, the data field is not required.
  
      @param data
      @param file - Extension archive.
    */
    create(data?: ExtensionDef, file?: Buffer): Promise<Extension>;
}
