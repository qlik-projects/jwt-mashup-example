/**
This is spectacularly generated code by spectacular v0.13.0 based on
Qlik Cloud Services 0.554.4
*/
import Auth from '../auth/auth.js';
import type { Config } from '../types/types.js';
import { Doc } from './Qix.js';
/**
  Application attributes and user privileges.
  @param attributes - App attributes. This structure can also contain extra user-defined attributes.
  @param create - Object create privileges. Hints to the client what type of objects the user is allowed to create.
  @param privileges - Application privileges.
Hints to the client what actions the user is allowed to perform.
Could be any of:

• read

• create

• update

• delete

• reload

• import

• publish

• duplicate

• export

• exportdata

• change_owner

• change_space
  @param auth - Auth object used to make requests
 */
export declare class NxApp extends Doc {
    auth: Auth;
    attributes?: NxAttributes;
    create?: Array<NxAppCreatePrivileges>;
    privileges?: Array<string>;
    [key: string]: any;
    constructor({ attributes, create, privileges, ...rest }: {
        attributes?: NxAttributes;
        create?: Array<NxAppCreatePrivileges>;
        privileges?: Array<string>;
    }, auth?: Auth);
    /**    Copies a specific app.
  
      @param data - Attributes that should be set in the copy.
    */
    createCopy(data: CreateApp): Promise<NxApp>;
    /**    Retrieves the lineage for an app.
  Returns a JSON-formatted array of strings describing the lineage of the app.
  
    */
    getDataLineages(): Promise<Array<LineageInfoRest>>;
    /**    Retrieves the data model and reload statistics metadata of an app.
  An empty metadata structure is returned if the metadata is not available in the app.
  
    */
    getDataMetadata(): Promise<DataModelMetadata>;
    /**    Exports a specific app.
  
      @param NoData - The flag indicating if only object contents should be exported.
    */
    export(queryParams?: {
        NoData?: boolean;
    }): Promise<string>;
    /**    Gets media content from file currently used as application thumbnail.
  Returns a stream of bytes containing the media file content on success, or error if file is not found.
  The image selected as thumbnail is only updated when application is saved.
  
    */
    getMediaThumbnail(): Promise<ArrayBuffer>;
    /**    Changes owner of the app.
  
      @param data - New owner.
    */
    setOwner(data: UpdateOwner): Promise<NxApp>;
    /**    Publishes a specific app to a managed space.
  
      @param data - Publish information for the app.
    */
    publish(data: PublishApp): Promise<NxApp>;
    /**    Republishes a published app to a managed space.
  
      @param data - Republish information for the app.
    */
    setPublish(data: RepublishApp): Promise<NxApp>;
    /**    Retrieves the metadata about all script logs stored for an app.
  Returns an array of ScriptLogMeta objects.
  
    */
    getReloadsLogs(): Promise<ScriptLogList>;
    /**    Removes space from a specific app.
  
    */
    deleteSpace(): Promise<NxApp>;
    /**    Sets space on a specific app.
  
      @param data - New space.
    */
    setSpace(data: UpdateSpace): Promise<NxApp>;
    /**    Deletes a specific app.
  
    */
    delete(): Promise<void>;
    /**    Updates the information for a specific app.
  
      @param data - Attributes that user wants to set.
    */
    set(data: UpdateApp): Promise<NxApp>;
}
/**
  @param description - The description of the application
  @param locale - Set custom locale instead of the system default
  @param name - The name (title) of the application
  @param spaceId - The space ID of the application
  @param auth - Auth object used to make requests
 */
export declare class AppAttributes {
    auth?: Auth;
    description?: string;
    locale?: string;
    name?: string;
    spaceId?: string;
    [key: string]: any;
    constructor({ description, locale, name, spaceId, ...rest }: {
        description?: string;
        locale?: string;
        name?: string;
        spaceId?: string;
    }, auth?: Auth);
}
/**
  @param data - Content list items.
  @param library - Content library name.
  @param subpath - Content library relative listing path. Empty in case of root listed or representing actual subpath listed.
  @param auth - Auth object used to make requests
 */
export declare class AppContentList {
    auth?: Auth;
    data?: Array<AppContentListItem>;
    library?: string;
    subpath?: string;
    [key: string]: any;
    constructor({ data, library, subpath, ...rest }: {
        data?: Array<AppContentListItem>;
        library?: string;
        subpath?: string;
    }, auth?: Auth);
}
/**
  @param id - Unique content identifier.
  @param link - Unique content link.
  @param name - Content name.
  @param type - Content type.
  @param auth - Auth object used to make requests
 */
export declare class AppContentListItem {
    auth?: Auth;
    id?: string;
    link?: string;
    name?: string;
    type?: string;
    [key: string]: any;
    constructor({ id, link, name, type, ...rest }: {
        id?: string;
        link?: string;
        name?: string;
        type?: string;
    }, auth?: Auth);
}
/**
  @param description - The description of the application.
  @param name - The name (title) of the application.
  @param auth - Auth object used to make requests
 */
export declare class AppUpdateAttributes {
    auth?: Auth;
    description?: string;
    name?: string;
    [key: string]: any;
    constructor({ description, name, ...rest }: {
        description?: string;
        name?: string;
    }, auth?: Auth);
}
/**
  @param attributes
  @param auth - Auth object used to make requests
 */
export declare class CreateApp {
    auth?: Auth;
    attributes?: AppAttributes;
    [key: string]: any;
    constructor({ attributes, ...rest }: {
        attributes?: AppAttributes;
    }, auth?: Auth);
}
/**
  @param fields - List of field descriptions.
  @param has_section_access - If set to true, the app has section access configured.
  @param is_direct_query_mode
  @param reload_meta
  @param static_byte_size - Static memory usage for the app.
  @param tables - List of table descriptions.
  @param tables_profiling_data - Profiling data of the tables in the app.
  @param auth - Auth object used to make requests
 */
export declare class DataModelMetadata {
    auth?: Auth;
    fields?: Array<FieldMetadata>;
    has_section_access?: boolean;
    is_direct_query_mode?: boolean;
    reload_meta?: LastReloadMetadata;
    static_byte_size?: number;
    tables?: Array<TableMetadata>;
    tables_profiling_data?: Array<TableProfilingData>;
    [key: string]: any;
    constructor({ fields, has_section_access, is_direct_query_mode, reload_meta, static_byte_size, tables, tables_profiling_data, ...rest }: {
        fields?: Array<FieldMetadata>;
        has_section_access?: boolean;
        is_direct_query_mode?: boolean;
        reload_meta?: LastReloadMetadata;
        static_byte_size?: number;
        tables?: Array<TableMetadata>;
        tables_profiling_data?: Array<TableProfilingData>;
    }, auth?: Auth);
}
/**
  Sets the formatting of a field.
The properties of qFieldAttributes and the formatting mechanism are described below.

 Formatting mechanism:
The formatting mechanism depends on the type set in qType, as shown below:
In case of inconsistencies between the type and the format pattern, the format pattern takes precedence over the type.

 Type is DATE, TIME, TIMESTAMP or INTERVAL:
The following applies:

• If a format pattern is defined in qFmt , the formatting is as defined in qFmt .

• If qFmt is empty, the formatting is defined by the number interpretation variables included at the top of the script ( TimeFormat , DateFormat , TimeStampFormat ).

• The properties qDec , qThou , qnDec , qUseThou are not used.

 Type is INTEGER:
The following applies:

• If a format pattern is defined in qFmt , the engine looks at the values set in qDec and qThou . If these properties are not defined, the formatting mechanism uses the number interpretation variables included at the top of the script ( DecimalSep and ThousandSep ).

• If no format pattern is defined in qFmt , no formatting is applied. The properties qDec , qThou , qnDec , qUseThou and the number interpretation variables defined in the script are not used .

 Type is REAL:
The following applies:

• If a format pattern is defined in qFmt , the engine looks at the values set in qDec and qThou . If these properties are not defined, the engine uses the number interpretation variables included at the top of the script ( DecimalSep and ThousandSep ).

• If no format pattern is defined in qFmt , and if the value is almost an integer value (for example, 14,000012), the value is formatted as an integer. The properties qDec , qThou , qnDec , qUseThou are not used.

• If no format pattern is defined in qFmt , and if qnDec is defined and not 0, the property qDec is used. If qDec is not defined, the variable DecimalSep defined at the top of the script is used.

• If no format pattern is defined in qFmt , and if qnDec is 0, the number of decimals is 14 and the property qDec is used. If qDec is not defined, the variable DecimalSep defined at the top of the script is used.

 Type is FIX:
The following applies:

• If a format pattern is defined in qFmt , the engine looks at the values set in qDec and qThou . If these properties are not defined, the engine uses the number interpretation variables included at the top of the script ( DecimalSep and ThousandSep ).

• If no format pattern is defined in qFmt , the properties qDec and qnDec are used. If qDec is not defined, the variable DecimalSep defined at the top of the script is used.

 Type is MONEY:
The following applies:

• If a format pattern is defined in qFmt , the engine looks at the values set in qDec and qThou . If these properties are not defined, the engine uses the number interpretation variables included at the top of any script ( MoneyDecimalSep and MoneyThousandSep ).

• If no format pattern is defined in qFmt , the engine uses the number interpretation variables included at the top of the script ( MoneyDecimalSep and MoneyThousandSep ).

 Type is ASCII:
No formatting, qFmt is ignored.
  @param Dec - Defines the decimal separator.
Example: .
  @param Fmt - Defines the format pattern that applies to qText .
Is used in connection to the type of the field (parameter qType ).
For more information, see Formatting mechanism.
Example: YYYY-MM-DD for a date.
  @param Thou - Defines the thousand separator (if any).
Is used if qUseThou is set to 1.
Example: ,
  @param Type - Type of the field.
Default is U.

One of:

• U or UNKNOWN

• A or ASCII

• I or INTEGER

• R or REAL

• F or FIX

• M or MONEY

• D or DATE

• T or TIME

• TS or TIMESTAMP

• IV or INTERVAL
  @param UseThou - Defines whether or not a thousands separator must be used.
Default is 0.
  @param nDec - Number of decimals.
Default is 10.
  @param auth - Auth object used to make requests
 */
export declare class FieldAttributes {
    auth?: Auth;
    Dec?: string;
    Fmt?: string;
    Thou?: string;
    Type?: 'UNKNOWN' | 'ASCII' | 'INTEGER' | 'REAL' | 'FIX' | 'MONEY' | 'DATE' | 'TIME' | 'TIMESTAMP' | 'INTERVAL' | string;
    UseThou?: number;
    nDec?: number;
    [key: string]: any;
    constructor({ Dec, Fmt, Thou, Type, UseThou, nDec, ...rest }: {
        Dec?: string;
        Fmt?: string;
        Thou?: string;
        Type?: 'UNKNOWN' | 'ASCII' | 'INTEGER' | 'REAL' | 'FIX' | 'MONEY' | 'DATE' | 'TIME' | 'TIMESTAMP' | 'INTERVAL' | string;
        UseThou?: number;
        nDec?: number;
    }, auth?: Auth);
}
/**
  @param Average - Average of all numerical values. NaN otherwise.
  @param AvgStringLen - Average string length of textual values. 0 otherwise.
  @param DistinctNumericValues - Number of distinct numeric values
  @param DistinctTextValues - Number of distinct text values
  @param DistinctValues - Number of distinct values
  @param EmptyStrings - Number of empty strings
  @param FieldTags - List of tags related to the field.
  @param FirstSorted - For textual values the first sorted string.
  @param Fractiles - The .01, .05, .1, .25, .5, .75, .9, .95, .99 fractiles. Array of NaN otherwise.
  @param FrequencyDistribution
  @param Kurtosis - Kurtosis of the numerical values. NaN otherwise.
  @param LastSorted - For textual values the last sorted string.
  @param Max - Maximum value of numerical values. NaN otherwise.
  @param MaxStringLen - Maximum string length of textual values. 0 otherwise.
  @param Median - Median of all numerical values. NaN otherwise.
  @param Min - Minimum value of numerical values. NaN otherwise.
  @param MinStringLen - Minimum string length of textual values. 0 otherwise.
  @param MostFrequent - Three most frequent values and their frequencies
  @param Name - Name of the field.
  @param NegValues - Number of negative values
  @param NullValues - Number of null values
  @param NumberFormat - Sets the formatting of a field.
The properties of qFieldAttributes and the formatting mechanism are described below.

 Formatting mechanism:
The formatting mechanism depends on the type set in qType, as shown below:
In case of inconsistencies between the type and the format pattern, the format pattern takes precedence over the type.

 Type is DATE, TIME, TIMESTAMP or INTERVAL:
The following applies:

• If a format pattern is defined in qFmt , the formatting is as defined in qFmt .

• If qFmt is empty, the formatting is defined by the number interpretation variables included at the top of the script ( TimeFormat , DateFormat , TimeStampFormat ).

• The properties qDec , qThou , qnDec , qUseThou are not used.

 Type is INTEGER:
The following applies:

• If a format pattern is defined in qFmt , the engine looks at the values set in qDec and qThou . If these properties are not defined, the formatting mechanism uses the number interpretation variables included at the top of the script ( DecimalSep and ThousandSep ).

• If no format pattern is defined in qFmt , no formatting is applied. The properties qDec , qThou , qnDec , qUseThou and the number interpretation variables defined in the script are not used .

 Type is REAL:
The following applies:

• If a format pattern is defined in qFmt , the engine looks at the values set in qDec and qThou . If these properties are not defined, the engine uses the number interpretation variables included at the top of the script ( DecimalSep and ThousandSep ).

• If no format pattern is defined in qFmt , and if the value is almost an integer value (for example, 14,000012), the value is formatted as an integer. The properties qDec , qThou , qnDec , qUseThou are not used.

• If no format pattern is defined in qFmt , and if qnDec is defined and not 0, the property qDec is used. If qDec is not defined, the variable DecimalSep defined at the top of the script is used.

• If no format pattern is defined in qFmt , and if qnDec is 0, the number of decimals is 14 and the property qDec is used. If qDec is not defined, the variable DecimalSep defined at the top of the script is used.

 Type is FIX:
The following applies:

• If a format pattern is defined in qFmt , the engine looks at the values set in qDec and qThou . If these properties are not defined, the engine uses the number interpretation variables included at the top of the script ( DecimalSep and ThousandSep ).

• If no format pattern is defined in qFmt , the properties qDec and qnDec are used. If qDec is not defined, the variable DecimalSep defined at the top of the script is used.

 Type is MONEY:
The following applies:

• If a format pattern is defined in qFmt , the engine looks at the values set in qDec and qThou . If these properties are not defined, the engine uses the number interpretation variables included at the top of any script ( MoneyDecimalSep and MoneyThousandSep ).

• If no format pattern is defined in qFmt , the engine uses the number interpretation variables included at the top of the script ( MoneyDecimalSep and MoneyThousandSep ).

 Type is ASCII:
No formatting, qFmt is ignored.
  @param NumericValues - Number of numeric values
  @param PosValues - Number of positive values
  @param Skewness - Skewness of the numerical values. NaN otherwise.
  @param Std - Standard deviation of numerical values. NaN otherwise.
  @param Sum - Sum of all numerical values. NaN otherwise.
  @param Sum2 - Squared sum of all numerical values. NaN otherwise.
  @param SumStringLen - Sum of all characters in strings in the field
  @param TextValues - Number of textual values
  @param ZeroValues - Number of zero values for numerical values
  @param auth - Auth object used to make requests
 */
export declare class FieldInTableProfilingData {
    auth?: Auth;
    Average?: number;
    AvgStringLen?: number;
    DistinctNumericValues?: number;
    DistinctTextValues?: number;
    DistinctValues?: number;
    EmptyStrings?: number;
    FieldTags?: Array<string>;
    FirstSorted?: string;
    Fractiles?: Array<number>;
    FrequencyDistribution?: FrequencyDistributionData;
    Kurtosis?: number;
    LastSorted?: string;
    Max?: number;
    MaxStringLen?: number;
    Median?: number;
    Min?: number;
    MinStringLen?: number;
    MostFrequent?: Array<SymbolFrequency>;
    Name?: string;
    NegValues?: number;
    NullValues?: number;
    NumberFormat?: FieldAttributes;
    NumericValues?: number;
    PosValues?: number;
    Skewness?: number;
    Std?: number;
    Sum?: number;
    Sum2?: number;
    SumStringLen?: number;
    TextValues?: number;
    ZeroValues?: number;
    [key: string]: any;
    constructor({ Average, AvgStringLen, DistinctNumericValues, DistinctTextValues, DistinctValues, EmptyStrings, FieldTags, FirstSorted, Fractiles, FrequencyDistribution, Kurtosis, LastSorted, Max, MaxStringLen, Median, Min, MinStringLen, MostFrequent, Name, NegValues, NullValues, NumberFormat, NumericValues, PosValues, Skewness, Std, Sum, Sum2, SumStringLen, TextValues, ZeroValues, ...rest }: {
        Average?: number;
        AvgStringLen?: number;
        DistinctNumericValues?: number;
        DistinctTextValues?: number;
        DistinctValues?: number;
        EmptyStrings?: number;
        FieldTags?: Array<string>;
        FirstSorted?: string;
        Fractiles?: Array<number>;
        FrequencyDistribution?: FrequencyDistributionData;
        Kurtosis?: number;
        LastSorted?: string;
        Max?: number;
        MaxStringLen?: number;
        Median?: number;
        Min?: number;
        MinStringLen?: number;
        MostFrequent?: Array<SymbolFrequency>;
        Name?: string;
        NegValues?: number;
        NullValues?: number;
        NumberFormat?: FieldAttributes;
        NumericValues?: number;
        PosValues?: number;
        Skewness?: number;
        Std?: number;
        Sum?: number;
        Sum2?: number;
        SumStringLen?: number;
        TextValues?: number;
        ZeroValues?: number;
    }, auth?: Auth);
}
/**
  @param always_one_selected - If set to true, the field has one and only one selection (not 0 and not more than 1).
If this property is set to true, the field cannot be cleared anymore and no more selections can be performed in that field.
The default value is false.
  @param byte_size - Static RAM memory used in bytes.
  @param cardinal - Number of distinct field values.
  @param comment - Field comment.
  @param distinct_only - If set to true, only distinct field values are shown.
The default value is false.
  @param hash - Hash of the data in the field. If the data in a reload is the same, the hash will be consistent.
  @param is_hidden - If set to true, the field is hidden.
The default value is false.
  @param is_locked - If set to true, the field is locked.
The default value is false.
  @param is_numeric - Is set to true if the value is a numeric.
The default value is false.
  @param is_semantic - If set to true, the field is semantic.
The default value is false.
  @param is_system - If set to true, the field is a system field.
The default value is false.
  @param name - Name of the field.
  @param src_tables - List of table names.
  @param tags - Gives information on a field. For example, it can return the type of the field.
Examples: key, text, ASCII.
  @param total_count - Total number of field values.
  @param auth - Auth object used to make requests
 */
export declare class FieldMetadata {
    auth?: Auth;
    always_one_selected?: boolean;
    byte_size?: number;
    cardinal?: number;
    comment?: string;
    distinct_only?: boolean;
    hash?: string;
    is_hidden?: boolean;
    is_locked?: boolean;
    is_numeric?: boolean;
    is_semantic?: boolean;
    is_system?: boolean;
    name?: string;
    src_tables?: Array<string>;
    tags?: Array<string>;
    total_count?: number;
    [key: string]: any;
    constructor({ always_one_selected, byte_size, cardinal, comment, distinct_only, hash, is_hidden, is_locked, is_numeric, is_semantic, is_system, name, src_tables, tags, total_count, ...rest }: {
        always_one_selected?: boolean;
        byte_size?: number;
        cardinal?: number;
        comment?: string;
        distinct_only?: boolean;
        hash?: string;
        is_hidden?: boolean;
        is_locked?: boolean;
        is_numeric?: boolean;
        is_semantic?: boolean;
        is_system?: boolean;
        name?: string;
        src_tables?: Array<string>;
        tags?: Array<string>;
        total_count?: number;
    }, auth?: Auth);
}
export declare class FileData {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param BinsEdges - Bins edges.
  @param Frequencies - Bins frequencies.
  @param NumberOfBins - Number of bins.
  @param auth - Auth object used to make requests
 */
export declare class FrequencyDistributionData {
    auth?: Auth;
    BinsEdges?: Array<number>;
    Frequencies?: Array<number>;
    NumberOfBins?: number;
    [key: string]: any;
    constructor({ BinsEdges, Frequencies, NumberOfBins, ...rest }: {
        BinsEdges?: Array<number>;
        Frequencies?: Array<number>;
        NumberOfBins?: number;
    }, auth?: Auth);
}
/**
  @param logical_cores - Number of logical cores available.
  @param total_memory - RAM available.
  @param auth - Auth object used to make requests
 */
export declare class HardwareMeta {
    auth?: Auth;
    logical_cores?: number;
    total_memory?: number;
    [key: string]: any;
    constructor({ logical_cores, total_memory, ...rest }: {
        logical_cores?: number;
        total_memory?: number;
    }, auth?: Auth);
}
/**
  Contains dynamic JSON data specified by the client.

  @param auth - Auth object used to make requests
 */
export declare class JsonObject {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param cpu_time_spent_ms - Number of CPU milliseconds it took to reload the app.
  @param hardware
  @param peak_memory_bytes - Maximum number of bytes used during reload of the app.
  @param auth - Auth object used to make requests
 */
export declare class LastReloadMetadata {
    auth?: Auth;
    cpu_time_spent_ms?: number;
    hardware?: HardwareMeta;
    peak_memory_bytes?: number;
    [key: string]: any;
    constructor({ cpu_time_spent_ms, hardware, peak_memory_bytes, ...rest }: {
        cpu_time_spent_ms?: number;
        hardware?: HardwareMeta;
        peak_memory_bytes?: number;
    }, auth?: Auth);
}
/**
  @param discriminator - A string indicating the origin of the data:

• [filename]: the data comes from a local file.

• INLINE: the data is entered inline in the load script.

• RESIDENT: the data comes from a resident table. The table name is listed.

• AUTOGENERATE: the data is generated from the load script (no external table of data source).

• Provider: the data comes from a data connection. The connector source name is listed.

• [webfile]: the data comes from a web-based file.

• STORE: path to QVD or TXT file where data is stored.

• EXTENSION: the data comes from a Server Side Extension (SSE).
  @param statement - The LOAD and SELECT script statements from the data load script.
  @param auth - Auth object used to make requests
 */
export declare class LineageInfoRest {
    auth?: Auth;
    discriminator?: string;
    statement?: string;
    [key: string]: any;
    constructor({ discriminator, statement, ...rest }: {
        discriminator?: string;
        statement?: string;
    }, auth?: Auth);
}
/**
  @param log - Provides a link to download the log file.
  @param auth - Auth object used to make requests
 */
export declare class Log {
    auth?: Auth;
    log?: string;
    [key: string]: any;
    constructor({ log, ...rest }: {
        log?: string;
    }, auth?: Auth);
}
/**
  @param canCreate - Is set to true if the user has privileges to create the resource.
  @param resource - Type of resource. For example, sheet, story, bookmark, etc.
  @param auth - Auth object used to make requests
 */
export declare class NxAppCreatePrivileges {
    auth?: Auth;
    canCreate?: boolean;
    resource?: string;
    [key: string]: any;
    constructor({ canCreate, resource, ...rest }: {
        canCreate?: boolean;
        resource?: string;
    }, auth?: Auth);
}
/**
  App attributes. This structure can also contain extra user-defined attributes.
  @param createdDate - The date and time when the app was created.
  @param custom - Contains dynamic JSON data specified by the client.
  @param description - App description.
  @param dynamicColor - The dynamic color of the app.
  @param encrypted - If set to true, the app is encrypted.
  @param hasSectionAccess - If set to true, the app has section access configured,
  @param id - The App ID.
  @param isDirectQueryMode - True if the app is a Direct Query app, false if not
  @param lastReloadTime - Date and time of the last reload of the app.
  @param modifiedDate - The date and time when the app was modified.
  @param name - App name.
  @param originAppId - The Origin App ID for published apps.
  @param owner - The owner of the app.
  @param ownerId
  @param publishTime - The date and time when the app was published, empty if unpublished.
  @param published - True if the app is published on-prem, distributed in QCS, false if not.
  @param thumbnail - App thumbnail.
  @param auth - Auth object used to make requests
 */
export declare class NxAttributes {
    auth?: Auth;
    createdDate?: string;
    custom?: JsonObject;
    description?: string;
    dynamicColor?: string;
    encrypted?: boolean;
    hasSectionAccess?: boolean;
    id?: string;
    isDirectQueryMode?: boolean;
    lastReloadTime?: string;
    modifiedDate?: string;
    name?: string;
    originAppId?: string;
    owner?: string;
    ownerId?: string;
    publishTime?: string;
    published?: boolean;
    thumbnail?: string;
    [key: string]: any;
    constructor({ createdDate, custom, description, dynamicColor, encrypted, hasSectionAccess, id, isDirectQueryMode, lastReloadTime, modifiedDate, name, originAppId, owner, ownerId, publishTime, published, thumbnail, ...rest }: {
        createdDate?: string;
        custom?: JsonObject;
        description?: string;
        dynamicColor?: string;
        encrypted?: boolean;
        hasSectionAccess?: boolean;
        id?: string;
        isDirectQueryMode?: boolean;
        lastReloadTime?: string;
        modifiedDate?: string;
        name?: string;
        originAppId?: string;
        owner?: string;
        ownerId?: string;
        publishTime?: string;
        published?: boolean;
        thumbnail?: string;
    }, auth?: Auth);
}
/**
  @param attributes
  @param data - The published app will have data from source or target app.
The default is source.

• source: Publish with source data

• target: Publish with target data
  @param spaceId - The managed space ID where the app will be published.
  @param auth - Auth object used to make requests
 */
export declare class PublishApp {
    auth?: Auth;
    attributes?: AppUpdateAttributes;
    data?: 'source' | 'target' | string;
    spaceId?: string;
    [key: string]: any;
    constructor({ attributes, data, spaceId, ...rest }: {
        attributes?: AppUpdateAttributes;
        data?: 'source' | 'target' | string;
        spaceId?: string;
    }, auth?: Auth);
}
/**
  @param attributes
  @param checkOriginAppId - Validate that source app is same as originally published.
  @param data - The republished app will have data from source or target app.
The default is source.

• source: Publish with source data

• target: Publish with target data
  @param targetId - The target ID to be republished.
  @param auth - Auth object used to make requests
 */
export declare class RepublishApp {
    auth?: Auth;
    attributes?: AppUpdateAttributes;
    checkOriginAppId?: boolean;
    data?: 'source' | 'target' | string;
    targetId?: string;
    [key: string]: any;
    constructor({ attributes, checkOriginAppId, data, targetId, ...rest }: {
        attributes?: AppUpdateAttributes;
        checkOriginAppId?: boolean;
        data?: 'source' | 'target' | string;
        targetId?: string;
    }, auth?: Auth);
}
/**
  @param data - Array of scriptLogMeta.
  @param auth - Auth object used to make requests
 */
export declare class ScriptLogList {
    auth?: Auth;
    data?: Array<ScriptLogMeta>;
    [key: string]: any;
    constructor({ data, ...rest }: {
        data?: Array<ScriptLogMeta>;
    }, auth?: Auth);
}
/**
  @param duration - Duration of reload (ms).
  @param endTime - Time when reload ended.
  @param links
  @param reloadId - Reload identifier.
  @param success - True if the reload was successful.
  @param auth - Auth object used to make requests
 */
export declare class ScriptLogMeta {
    auth?: Auth;
    duration?: number;
    endTime?: string;
    links?: Log;
    reloadId?: string;
    success?: boolean;
    [key: string]: any;
    constructor({ duration, endTime, links, reloadId, success, ...rest }: {
        duration?: number;
        endTime?: string;
        links?: Log;
        reloadId?: string;
        success?: boolean;
    }, auth?: Auth);
}
/**
  @param Frequency - Frequency of the above symbol in the field
  @param Symbol
  @param auth - Auth object used to make requests
 */
export declare class SymbolFrequency {
    auth?: Auth;
    Frequency?: number;
    Symbol?: SymbolValue;
    [key: string]: any;
    constructor({ Frequency, Symbol, ...rest }: {
        Frequency?: number;
        Symbol?: SymbolValue;
    }, auth?: Auth);
}
/**
  @param Number - Numeric value of the symbol. NaN otherwise.
  @param Text - String value of the symbol. This parameter is optional and present only if Symbol is a string.
  @param auth - Auth object used to make requests
 */
export declare class SymbolValue {
    auth?: Auth;
    Number?: number;
    Text?: string;
    [key: string]: any;
    constructor({ Number, Text, ...rest }: {
        Number?: number;
        Text?: string;
    }, auth?: Auth);
}
/**
  @param byte_size - Static RAM memory used in bytes.
  @param comment - Table comment.
  @param is_loose - If set to true, the table is loose due to circular connection.
The default value is false.
  @param is_semantic - If set to true, the table is semantic.
The default value is false.
  @param is_system - If set to true, the table is a system table.
The default value is false.
  @param name - Name of the table.
  @param no_of_fields - Number of fields.
  @param no_of_key_fields - Number of key fields.
  @param no_of_rows - Number of rows.
  @param auth - Auth object used to make requests
 */
export declare class TableMetadata {
    auth?: Auth;
    byte_size?: number;
    comment?: string;
    is_loose?: boolean;
    is_semantic?: boolean;
    is_system?: boolean;
    name?: string;
    no_of_fields?: number;
    no_of_key_fields?: number;
    no_of_rows?: number;
    [key: string]: any;
    constructor({ byte_size, comment, is_loose, is_semantic, is_system, name, no_of_fields, no_of_key_fields, no_of_rows, ...rest }: {
        byte_size?: number;
        comment?: string;
        is_loose?: boolean;
        is_semantic?: boolean;
        is_system?: boolean;
        name?: string;
        no_of_fields?: number;
        no_of_key_fields?: number;
        no_of_rows?: number;
    }, auth?: Auth);
}
/**
  @param FieldProfiling - Field values profiling info
  @param NoOfRows - Number of rows in the table.
  @param auth - Auth object used to make requests
 */
export declare class TableProfilingData {
    auth?: Auth;
    FieldProfiling?: Array<FieldInTableProfilingData>;
    NoOfRows?: number;
    [key: string]: any;
    constructor({ FieldProfiling, NoOfRows, ...rest }: {
        FieldProfiling?: Array<FieldInTableProfilingData>;
        NoOfRows?: number;
    }, auth?: Auth);
}
/**
  @param attributes
  @param auth - Auth object used to make requests
 */
export declare class UpdateApp {
    auth?: Auth;
    attributes?: AppUpdateAttributes;
    [key: string]: any;
    constructor({ attributes, ...rest }: {
        attributes?: AppUpdateAttributes;
    }, auth?: Auth);
}
/**
  @param ownerId
  @param auth - Auth object used to make requests
 */
export declare class UpdateOwner {
    auth?: Auth;
    ownerId?: string;
    [key: string]: any;
    constructor({ ownerId, ...rest }: {
        ownerId?: string;
    }, auth?: Auth);
}
/**
  @param spaceId
  @param auth - Auth object used to make requests
 */
export declare class UpdateSpace {
    auth?: Auth;
    spaceId?: string;
    [key: string]: any;
    constructor({ spaceId, ...rest }: {
        spaceId?: string;
    }, auth?: Auth);
}
/**
  @param absoluteDiff
  @param diff
  @param trend
  @param baseline
  @param comparison
  @param auth - Auth object used to make requests
 */
export declare class Cmpbool {
    auth?: Auth;
    absoluteDiff?: number;
    diff?: number;
    trend?: string;
    baseline?: boolean;
    comparison?: boolean;
    [key: string]: any;
    constructor({ absoluteDiff, diff, trend, baseline, comparison, ...rest }: {
        absoluteDiff?: number;
        diff?: number;
        trend?: string;
        baseline?: boolean;
        comparison?: boolean;
    }, auth?: Auth);
}
/**
  @param absoluteDiff
  @param diff
  @param trend
  @param baseline
  @param comparison
  @param auth - Auth object used to make requests
 */
export declare class Cmpfloat {
    auth?: Auth;
    absoluteDiff?: number;
    diff?: number;
    trend?: string;
    baseline?: number;
    comparison?: number;
    [key: string]: any;
    constructor({ absoluteDiff, diff, trend, baseline, comparison, ...rest }: {
        absoluteDiff?: number;
        diff?: number;
        trend?: string;
        baseline?: number;
        comparison?: number;
    }, auth?: Auth);
}
/**
  @param absoluteDiff
  @param diff
  @param trend
  @param baseline
  @param comparison
  @param auth - Auth object used to make requests
 */
export declare class Cmpint {
    auth?: Auth;
    absoluteDiff?: number;
    diff?: number;
    trend?: string;
    baseline?: number;
    comparison?: number;
    [key: string]: any;
    constructor({ absoluteDiff, diff, trend, baseline, comparison, ...rest }: {
        absoluteDiff?: number;
        diff?: number;
        trend?: string;
        baseline?: number;
        comparison?: number;
    }, auth?: Auth);
}
/**
  @param appOpenTimeSeconds
  @param dataModelSizeMib
  @param documentSizeMib
  @param fileSizeMib
  @param hasSectionAccess
  @param maxMemoryMib
  @param objHeavy
  @param objNoCache
  @param objSingleThreaded
  @param objSlowCached
  @param objSlowUncached
  @param objectCount
  @param rowCount
  @param sheetCount
  @param sheetsCached
  @param sheetsUncached
  @param topFieldsByBytes
  @param topTablesByBytes
  @param auth - Auth object used to make requests
 */
export declare class Comparison {
    auth?: Auth;
    appOpenTimeSeconds?: Cmpfloat;
    dataModelSizeMib?: Cmpfloat;
    documentSizeMib?: Cmpfloat;
    fileSizeMib?: Cmpfloat;
    hasSectionAccess?: Cmpbool;
    maxMemoryMib?: Cmpfloat;
    objHeavy?: Sortedcomparisonoobjheavy;
    objNoCache?: Sortedcomparisonobjresponsetime;
    objSingleThreaded?: Sortedcomparisonobjresponsetime;
    objSlowCached?: Sortedcomparisonobjresponsetime;
    objSlowUncached?: Sortedcomparisonobjresponsetime;
    objectCount?: Cmpint;
    rowCount?: Cmpint;
    sheetCount?: Cmpint;
    sheetsCached?: Sortedcomparisonobjresponsetime;
    sheetsUncached?: Sortedcomparisonobjresponsetime;
    topFieldsByBytes?: Sortedcomparisonfields;
    topTablesByBytes?: Sortedcomparisontables;
    [key: string]: any;
    constructor({ appOpenTimeSeconds, dataModelSizeMib, documentSizeMib, fileSizeMib, hasSectionAccess, maxMemoryMib, objHeavy, objNoCache, objSingleThreaded, objSlowCached, objSlowUncached, objectCount, rowCount, sheetCount, sheetsCached, sheetsUncached, topFieldsByBytes, topTablesByBytes, ...rest }: {
        appOpenTimeSeconds?: Cmpfloat;
        dataModelSizeMib?: Cmpfloat;
        documentSizeMib?: Cmpfloat;
        fileSizeMib?: Cmpfloat;
        hasSectionAccess?: Cmpbool;
        maxMemoryMib?: Cmpfloat;
        objHeavy?: Sortedcomparisonoobjheavy;
        objNoCache?: Sortedcomparisonobjresponsetime;
        objSingleThreaded?: Sortedcomparisonobjresponsetime;
        objSlowCached?: Sortedcomparisonobjresponsetime;
        objSlowUncached?: Sortedcomparisonobjresponsetime;
        objectCount?: Cmpint;
        rowCount?: Cmpint;
        sheetCount?: Cmpint;
        sheetsCached?: Sortedcomparisonobjresponsetime;
        sheetsUncached?: Sortedcomparisonobjresponsetime;
        topFieldsByBytes?: Sortedcomparisonfields;
        topTablesByBytes?: Sortedcomparisontables;
    }, auth?: Auth);
}
/**
  @param appId
  @param appItemId
  @param appName
  @param details
  @param ended
  @param events
  @param id
  @param metadata
  @param result
  @param sheetId
  @param sheetTitle
  @param started
  @param status
  @param tenantId
  @param timestamp
  @param version
  @param auth - Auth object used to make requests
 */
export declare class Evaluation {
    auth: Auth;
    appId?: string;
    appItemId?: string;
    appName?: string;
    details?: EvaluationDetails;
    ended?: string;
    events?: Array<Event>;
    id?: string;
    metadata?: Metadata;
    result?: Result;
    sheetId?: string;
    sheetTitle?: string;
    started?: string;
    status?: string;
    tenantId?: string;
    timestamp?: string;
    version?: number;
    [key: string]: any;
    constructor({ appId, appItemId, appName, details, ended, events, id, metadata, result, sheetId, sheetTitle, started, status, tenantId, timestamp, version, ...rest }: {
        appId?: string;
        appItemId?: string;
        appName?: string;
        details?: EvaluationDetails;
        ended?: string;
        events?: Array<Event>;
        id?: string;
        metadata?: Metadata;
        result?: Result;
        sheetId?: string;
        sheetTitle?: string;
        started?: string;
        status?: string;
        tenantId?: string;
        timestamp?: string;
        version?: number;
    }, auth?: Auth);
    /**    Find and download an evaluation log by a specific evaluation id.
  
    Download a detailed XML log of a specific evaluation
  
    */
    download(): Promise<Evaluation>;
}
/**
  @param concurrentReload
  @param dedicated
  @param engineHasCache
  @param errors
  @param objectMetrics
  @param warnings
  @param auth - Auth object used to make requests
 */
export declare class EvaluationDetails {
    auth?: Auth;
    concurrentReload?: boolean;
    dedicated?: boolean;
    engineHasCache?: boolean;
    errors?: Array<string>;
    objectMetrics?: object;
    warnings?: Array<string>;
    [key: string]: any;
    constructor({ concurrentReload, dedicated, engineHasCache, errors, objectMetrics, warnings, ...rest }: {
        concurrentReload?: boolean;
        dedicated?: boolean;
        engineHasCache?: boolean;
        errors?: Array<string>;
        objectMetrics?: object;
        warnings?: Array<string>;
    }, auth?: Auth);
}
/**
  @param data
  @param links
  @param auth - Auth object used to make requests
 */
export declare class Evaluations {
    auth?: Auth;
    data?: Array<Evaluation>;
    links?: EvaluationsLinks;
    [key: string]: any;
    constructor({ data, links, ...rest }: {
        data?: Array<Evaluation>;
        links?: EvaluationsLinks;
    }, auth?: Auth);
}
/**
  @param next
  @param prev
  @param auth - Auth object used to make requests
 */
export declare class EvaluationsLinks {
    auth?: Auth;
    next?: EvaluationsLinksNext;
    prev?: EvaluationsLinksPrev;
    [key: string]: any;
    constructor({ next, prev, ...rest }: {
        next?: EvaluationsLinksNext;
        prev?: EvaluationsLinksPrev;
    }, auth?: Auth);
}
/**
  @param href
  @param auth - Auth object used to make requests
 */
export declare class EvaluationsLinksNext {
    auth?: Auth;
    href?: string;
    [key: string]: any;
    constructor({ href, ...rest }: {
        href?: string;
    }, auth?: Auth);
}
/**
  @param href
  @param auth - Auth object used to make requests
 */
export declare class EvaluationsLinksPrev {
    auth?: Auth;
    href?: string;
    [key: string]: any;
    constructor({ href, ...rest }: {
        href?: string;
    }, auth?: Auth);
}
/**
  @param details
  @param errorCode
  @param objectId
  @param objectTitle
  @param objectType
  @param objectVisualization
  @param severity
  @param sheetId
  @param sheetTitle
  @param auth - Auth object used to make requests
 */
export declare class Event {
    auth?: Auth;
    details?: string;
    errorCode?: string;
    objectId?: string;
    objectTitle?: string;
    objectType?: string;
    objectVisualization?: string;
    severity?: string;
    sheetId?: string;
    sheetTitle?: string;
    [key: string]: any;
    constructor({ details, errorCode, objectId, objectTitle, objectType, objectVisualization, severity, sheetId, sheetTitle, ...rest }: {
        details?: string;
        errorCode?: string;
        objectId?: string;
        objectTitle?: string;
        objectType?: string;
        objectVisualization?: string;
        severity?: string;
        sheetId?: string;
        sheetTitle?: string;
    }, auth?: Auth);
}
/**
  @param amountofcardinalfieldvalues
  @param amountoffields
  @param amountoffieldvalues
  @param amountofrows
  @param amountoftables
  @param hassectionaccess
  @param reloadmeta
  @param staticbytesize
  @param auth - Auth object used to make requests
 */
export declare class Metadata {
    auth?: Auth;
    amountofcardinalfieldvalues?: number;
    amountoffields?: number;
    amountoffieldvalues?: number;
    amountofrows?: number;
    amountoftables?: number;
    hassectionaccess?: boolean;
    reloadmeta?: MetadataReloadmeta;
    staticbytesize?: number;
    [key: string]: any;
    constructor({ amountofcardinalfieldvalues, amountoffields, amountoffieldvalues, amountofrows, amountoftables, hassectionaccess, reloadmeta, staticbytesize, ...rest }: {
        amountofcardinalfieldvalues?: number;
        amountoffields?: number;
        amountoffieldvalues?: number;
        amountofrows?: number;
        amountoftables?: number;
        hassectionaccess?: boolean;
        reloadmeta?: MetadataReloadmeta;
        staticbytesize?: number;
    }, auth?: Auth);
}
/**
  @param cpuspent
  @param peakmemorybytes
  @param auth - Auth object used to make requests
 */
export declare class MetadataReloadmeta {
    auth?: Auth;
    cpuspent?: number;
    peakmemorybytes?: number;
    [key: string]: any;
    constructor({ cpuspent, peakmemorybytes, ...rest }: {
        cpuspent?: number;
        peakmemorybytes?: number;
    }, auth?: Auth);
}
/**
  @param id
  @param objectType
  @param sheetId
  @param title
  @param auth - Auth object used to make requests
 */
export declare class Objectspec {
    auth?: Auth;
    id?: string;
    objectType?: number;
    sheetId?: string;
    title?: string;
    [key: string]: any;
    constructor({ id, objectType, sheetId, title, ...rest }: {
        id?: string;
        objectType?: number;
        sheetId?: string;
        title?: string;
    }, auth?: Auth);
}
/**
  @param documentSizeMiB
  @param hasSectionAccess
  @param objNoCache
  @param objSingleThreaded
  @param objSlowCached
  @param objSlowUncached
  @param objectCount
  @param rowCount
  @param sheetCount
  @param sheets
  @param topFieldsByBytes
  @param topTablesByBytes
  @param auth - Auth object used to make requests
 */
export declare class Result {
    auth?: Auth;
    documentSizeMiB?: number;
    hasSectionAccess?: boolean;
    objNoCache?: Array<Resultobjresponsetime>;
    objSingleThreaded?: Array<Resultsingle>;
    objSlowCached?: Array<Resultobjsinglethreaded>;
    objSlowUncached?: Array<Resultobjresponsetime>;
    objectCount?: number;
    rowCount?: number;
    sheetCount?: number;
    sheets?: Array<Resultobjsheet>;
    topFieldsByBytes?: Array<Resultmetadatatopfields>;
    topTablesByBytes?: Array<Resultmetadatatoptables>;
    [key: string]: any;
    constructor({ documentSizeMiB, hasSectionAccess, objNoCache, objSingleThreaded, objSlowCached, objSlowUncached, objectCount, rowCount, sheetCount, sheets, topFieldsByBytes, topTablesByBytes, ...rest }: {
        documentSizeMiB?: number;
        hasSectionAccess?: boolean;
        objNoCache?: Array<Resultobjresponsetime>;
        objSingleThreaded?: Array<Resultsingle>;
        objSlowCached?: Array<Resultobjsinglethreaded>;
        objSlowUncached?: Array<Resultobjresponsetime>;
        objectCount?: number;
        rowCount?: number;
        sheetCount?: number;
        sheets?: Array<Resultobjsheet>;
        topFieldsByBytes?: Array<Resultmetadatatopfields>;
        topTablesByBytes?: Array<Resultmetadatatoptables>;
    }, auth?: Auth);
}
/**
  @param byte_size
  @param is_system
  @param name
  @param auth - Auth object used to make requests
 */
export declare class Resultmetadatatopfields {
    auth?: Auth;
    byte_size?: number;
    is_system?: boolean;
    name?: string;
    [key: string]: any;
    constructor({ byte_size, is_system, name, ...rest }: {
        byte_size?: number;
        is_system?: boolean;
        name?: string;
    }, auth?: Auth);
}
/**
  @param byte_size
  @param is_system
  @param name
  @param auth - Auth object used to make requests
 */
export declare class Resultmetadatatoptables {
    auth?: Auth;
    byte_size?: number;
    is_system?: boolean;
    name?: string;
    [key: string]: any;
    constructor({ byte_size, is_system, name, ...rest }: {
        byte_size?: number;
        is_system?: boolean;
        name?: string;
    }, auth?: Auth);
}
/**
  @param id
  @param objectType
  @param sheetId
  @param title
  @param responseTimeSeconds
  @param auth - Auth object used to make requests
 */
export declare class Resultobjresponsetime {
    auth?: Auth;
    id?: string;
    objectType?: number;
    sheetId?: string;
    title?: string;
    responseTimeSeconds?: number;
    [key: string]: any;
    constructor({ id, objectType, sheetId, title, responseTimeSeconds, ...rest }: {
        id?: string;
        objectType?: number;
        sheetId?: string;
        title?: string;
        responseTimeSeconds?: number;
    }, auth?: Auth);
}
/**
  @param objectCount
  @param sheet
  @param sheetObjects
  @param auth - Auth object used to make requests
 */
export declare class Resultobjsheet {
    auth?: Auth;
    objectCount?: number;
    sheet?: Resultobjresponsetime;
    sheetObjects?: Array<Resultobjresponsetime>;
    [key: string]: any;
    constructor({ objectCount, sheet, sheetObjects, ...rest }: {
        objectCount?: number;
        sheet?: Resultobjresponsetime;
        sheetObjects?: Array<Resultobjresponsetime>;
    }, auth?: Auth);
}
/**
  @param id
  @param objectType
  @param sheetId
  @param title
  @param cpuQuotients
  @param responseTimeSeconds
  @param schema
  @param auth - Auth object used to make requests
 */
export declare class Resultobjsinglethreaded {
    auth?: Auth;
    id?: string;
    objectType?: number;
    sheetId?: string;
    title?: string;
    cpuQuotients?: Array<number>;
    responseTimeSeconds?: number;
    schema?: Objectspec;
    [key: string]: any;
    constructor({ id, objectType, sheetId, title, cpuQuotients, responseTimeSeconds, schema, ...rest }: {
        id?: string;
        objectType?: number;
        sheetId?: string;
        title?: string;
        cpuQuotients?: Array<number>;
        responseTimeSeconds?: number;
        schema?: Objectspec;
    }, auth?: Auth);
}
/**
  @param id
  @param objectType
  @param sheetId
  @param title
  @param cpuQuotient1
  @param auth - Auth object used to make requests
 */
export declare class Resultsingle {
    auth?: Auth;
    id?: string;
    objectType?: number;
    sheetId?: string;
    title?: string;
    cpuQuotient1?: number;
    [key: string]: any;
    constructor({ id, objectType, sheetId, title, cpuQuotient1, ...rest }: {
        id?: string;
        objectType?: number;
        sheetId?: string;
        title?: string;
        cpuQuotient1?: number;
    }, auth?: Auth);
}
/**
  @param absoluteDiffAsc
  @param absoluteDiffDesc
  @param dataSourceStatus
  @param list
  @param relativeDiffAsc
  @param relativeDiffDesc
  @param auth - Auth object used to make requests
 */
export declare class Sortedcomparisonfields {
    auth?: Auth;
    absoluteDiffAsc?: Array<any>;
    absoluteDiffDesc?: Array<any>;
    dataSourceStatus?: 'full' | 'none' | 'baselinemissing' | 'comparisonmissing' | string;
    list?: Array<any>;
    relativeDiffAsc?: Array<any>;
    relativeDiffDesc?: Array<any>;
    [key: string]: any;
    constructor({ absoluteDiffAsc, absoluteDiffDesc, dataSourceStatus, list, relativeDiffAsc, relativeDiffDesc, ...rest }: {
        absoluteDiffAsc?: Array<any>;
        absoluteDiffDesc?: Array<any>;
        dataSourceStatus?: 'full' | 'none' | 'baselinemissing' | 'comparisonmissing' | string;
        list?: Array<any>;
        relativeDiffAsc?: Array<any>;
        relativeDiffDesc?: Array<any>;
    }, auth?: Auth);
}
/**
  @param absoluteDiffAsc
  @param absoluteDiffDesc
  @param dataSourceStatus
  @param list
  @param relativeDiffAsc
  @param relativeDiffDesc
  @param auth - Auth object used to make requests
 */
export declare class Sortedcomparisonobjresponsetime {
    auth?: Auth;
    absoluteDiffAsc?: Array<any>;
    absoluteDiffDesc?: Array<any>;
    dataSourceStatus?: 'full' | 'none' | 'baselinemissing' | 'comparisonmissing' | string;
    list?: Array<any>;
    relativeDiffAsc?: Array<any>;
    relativeDiffDesc?: Array<any>;
    [key: string]: any;
    constructor({ absoluteDiffAsc, absoluteDiffDesc, dataSourceStatus, list, relativeDiffAsc, relativeDiffDesc, ...rest }: {
        absoluteDiffAsc?: Array<any>;
        absoluteDiffDesc?: Array<any>;
        dataSourceStatus?: 'full' | 'none' | 'baselinemissing' | 'comparisonmissing' | string;
        list?: Array<any>;
        relativeDiffAsc?: Array<any>;
        relativeDiffDesc?: Array<any>;
    }, auth?: Auth);
}
/**
  @param absoluteDiffAsc
  @param absoluteDiffDesc
  @param dataSourceStatus
  @param list
  @param relativeDiffAsc
  @param relativeDiffDesc
  @param auth - Auth object used to make requests
 */
export declare class Sortedcomparisonoobjheavy {
    auth?: Auth;
    absoluteDiffAsc?: Array<any>;
    absoluteDiffDesc?: Array<any>;
    dataSourceStatus?: 'full' | 'none' | 'baselinemissing' | 'comparisonmissing' | string;
    list?: Array<any>;
    relativeDiffAsc?: Array<any>;
    relativeDiffDesc?: Array<any>;
    [key: string]: any;
    constructor({ absoluteDiffAsc, absoluteDiffDesc, dataSourceStatus, list, relativeDiffAsc, relativeDiffDesc, ...rest }: {
        absoluteDiffAsc?: Array<any>;
        absoluteDiffDesc?: Array<any>;
        dataSourceStatus?: 'full' | 'none' | 'baselinemissing' | 'comparisonmissing' | string;
        list?: Array<any>;
        relativeDiffAsc?: Array<any>;
        relativeDiffDesc?: Array<any>;
    }, auth?: Auth);
}
/**
  @param absoluteDiffAsc
  @param absoluteDiffDesc
  @param dataSourceStatus
  @param list
  @param relativeDiffAsc
  @param relativeDiffDesc
  @param auth - Auth object used to make requests
 */
export declare class Sortedcomparisontables {
    auth?: Auth;
    absoluteDiffAsc?: Array<any>;
    absoluteDiffDesc?: Array<any>;
    dataSourceStatus?: 'full' | 'none' | 'baselinemissing' | 'comparisonmissing' | string;
    list?: Array<any>;
    relativeDiffAsc?: Array<any>;
    relativeDiffDesc?: Array<any>;
    [key: string]: any;
    constructor({ absoluteDiffAsc, absoluteDiffDesc, dataSourceStatus, list, relativeDiffAsc, relativeDiffDesc, ...rest }: {
        absoluteDiffAsc?: Array<any>;
        absoluteDiffDesc?: Array<any>;
        dataSourceStatus?: 'full' | 'none' | 'baselinemissing' | 'comparisonmissing' | string;
        list?: Array<any>;
        relativeDiffAsc?: Array<any>;
        relativeDiffDesc?: Array<any>;
    }, auth?: Auth);
}
export declare class Apps {
    auth: Auth;
    config: Config;
    constructor(config: Config | Auth);
    /**    Accepts two evaluation ids and downloads a log, in XML format, denoting the differences between the two.
  
    Download a comparison log of two evaluations
  
      @param baseid - Id of the baseline evaluation
      @param comparisonid - Id of the comparison evaluation
    */
    downloadAppsEvaluationsCompare(baseid: string, comparisonid: string): Promise<Comparison>;
    /**    Accepts two evaluation ids and returns a comparison denoting the differences between the two.
  
    Compare two evaluations
  
      @param baseid - Id of the baseline evaluation
      @param comparisonid - Id of the comparison evaluation
      @param all - Get the full list of comparisons including non-significant diffs
      @param format - Specify output format, currently supported are 'json' and 'xml'
    */
    compareAppsEvaluations(baseid: string, comparisonid: string, queryParams?: {
        all?: boolean;
        format?: string;
    }): Promise<Comparison>;
    /**    Find an evaluation by a specific id.
  
    Retrieve a specific evaluation
  
      @param id - Id of the desired evaluation.
      @param all - Get the full data of the evaluation
      @param format - Specify output format, currently supported are 'json' and 'xml'
    */
    getEvaluation(id: string, queryParams?: {
        all?: boolean;
        format?: string;
    }): Promise<Evaluation>;
    /**    Imports an app into the system.
  
      @param appId - The app ID of the target app when source is qvw file.
      @param fallbackName - The name of the target app when source does not have a specified name, applicable if source is qvw file.
      @param fileId - The file ID to be downloaded from Temporary Content Service (TCS) and used during import.
      @param mode - The import mode. In `new` mode (default), the source app will be imported as a new app.The `autoreplace` mode is an internal mode only and is not permitted for external use.
  
  One of:
  
  • NEW
  
  • AUTOREPLACE
      @param name - The name of the target app.
      @param NoData - If NoData is true, the data of the existing app will be kept as is, otherwise it will be replaced by the new incoming data.
      @param spaceId - The space ID of the target app.
      @param data - Path of the source app.
    */
    importApp(data: FileData, queryParams?: {
        appId?: string;
        fallbackName?: string;
        fileId?: string;
        mode?: string;
        name?: string;
        NoData?: boolean;
        spaceId?: string;
    }): Promise<NxApp>;
    /**    Gets the app privileges for the current user, such as create app and import app. Empty means that the current user has no app privileges.
  
    */
    getPrivileges(): Promise<Array<string>>;
    /**    Deletes a media content file or complete directory.
  Returns OK if the bytes containing the media file (or the complete content of a directory) were successfully deleted, or error in case of failure or lack of permission.
  
      @param appId - Unique application identifier.
      @param path - Path to file content.
    */
    deleteMediaFile(appId: string, path: string): Promise<void>;
    /**    Gets media content from file.
  Returns a stream of bytes containing the media file content on success, or error if file is not found.
  
      @param appId - Unique application identifier.
      @param path - Path to file content.
    */
    getMediaFile(appId: string, path: string): Promise<ArrayBuffer>;
    /**    Stores the media content file.
  Returns OK if the bytes containing the media file content were successfully stored, or error in case of failure, lack of permission or file already exists on the supplied path.
  
      @param appId - Unique application identifier.
      @param path - Path to file content.
      @param data
    */
    setMediaFile(appId: string, path: string, data: FileData): Promise<void>;
    /**    Lists media content.
  Returns a JSON formatted array of strings describing the available media content or error if the optional path supplied is not found.
  
      @param appId - Unique application identifier.
      @param path - The path to sub folder with static content relative to the root folder. Use empty path to access the root folder.
      @param show - Optional. List output can include files and folders in different ways:
  
  • Not recursive, default if show option is not supplied or incorrectly specified, results in output with files and empty directories for the path specified only.
  
  • Recursive(r), use ?show=r or ?show=recursive, results in a recursive output with files, all empty folders are excluded.
  
  • All(a), use ?show=a or ?show=all, results in a recursive output with files and empty directories.
    */
    getMediaLists(appId: string, path: string, queryParams?: {
        show?: string;
    }): Promise<AppContentList>;
    /**    Retrieves the log of a specific reload.
  Returns the log as "text/plain; charset=UTF-8".
  
      @param appId - Identifier of the app.
      @param reloadId - Identifier of the reload.
    */
    getReloadsLog(appId: string, reloadId: string): Promise<ArrayBuffer>;
    /**    Retrieves information for a specific app.
  
      @param appId - Identifier of the app.
    */
    get(appId: string): Promise<NxApp>;
    /**    Find all evaluations for an app GUID.
  Supports paging via next, prev which are sent in the response body
  
    Retrieve a list of all historic evaluations for an app GUID
  
      @param guid - The app guid.
      @param all - Get the full data of the evaluation
      @param fileMode - Add file transfer headers to response
      @param format - Specify output format, currently supported are 'json' and 'xml'
      @param limit - Number of results to return per page.
      @param next - The app evaluation id to get next page from
      @param prev - The app evaluation id to get previous page from
      @param sort - Property to sort list on
    */
    getEvaluations(guid: string, queryParams?: {
        all?: boolean;
        fileMode?: boolean;
        format?: string;
        limit?: number;
        next?: string;
        prev?: string;
        sort?: string;
    }): Promise<Evaluations>;
    /**    Queue an app evaluation by its app guid.
  
    Queue an app evaluation
  
      @param guid - Guid of the app.
    */
    createEvaluation(guid: string): Promise<Evaluation>;
    /**    Creates a new app.
  
      @param data - Attributes that the user wants to set in new app.
    */
    create(data: CreateApp): Promise<NxApp>;
    /** Creates an empty session app
   * @param sessionAppId - a self generated 'app_id' prefixed with SessionApp_
   *
   * @example
   * ```js
   * const randomId = Math.random().toString(32).substring(3);
   * const appId = `SessionApp_${randomId}`;
   * const app = qlik.apps.createSessionApp(appId);
   * await app.open();
   * const script = `
   *   TempTable:
   *   Load
   *   RecNo() as Field1,
   *   Rand() as Field2,
   *   Rand() as Field3
   *   AutoGenerate 100
   *   `;
   * await app.setScript(script);
   * await app.doReload();
   * ```
   */
    createSessionApp(sessionAppId: string): NxApp;
}
