import Auth from "../auth/auth.js";
class WebIntegration {
  constructor({
    created,
    createdBy,
    id,
    lastUpdated,
    name,
    tenantId,
    validOrigins,
    ...rest
  }, auth) {
    this.auth = auth;
    this.created = created;
    this.createdBy = createdBy;
    this.id = id;
    this.lastUpdated = lastUpdated;
    this.name = name;
    this.tenantId = tenantId;
    this.validOrigins = validOrigins;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  async delete() {
    await this.auth.rest(
      "/web-integrations/{id}".replace("{id}", this.id ?? ""),
      {
        method: "DELETE"
      }
    );
  }
  async patch(data) {
    await this.auth.rest(
      "/web-integrations/{id}".replace("{id}", this.id ?? ""),
      {
        method: "PATCH",
        body: JSON.stringify(data)
      }
    );
  }
}
class WebIntegrationPatch {
  constructor({
    op,
    path,
    value,
    ...rest
  }, auth) {
    this.auth = auth;
    this.op = op;
    this.path = path;
    this.value = value;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class WebIntegrationPatchSchema extends Array {
  constructor(arr, auth) {
    super();
    this.auth = auth;
    for (const e of arr) {
      this.push(new WebIntegrationPatch(e, this.auth));
    }
  }
}
class WebIntegrationPost {
  constructor({
    created,
    createdBy,
    id,
    lastUpdated,
    links,
    name,
    tenantId,
    validOrigins,
    ...rest
  }, auth) {
    this.auth = auth;
    this.created = created;
    this.createdBy = createdBy;
    this.id = id;
    this.lastUpdated = lastUpdated;
    if (links !== void 0 && links !== null) {
      if (links instanceof WebIntegrationPostLinks) {
        this.links = links;
      } else {
        this.links = new WebIntegrationPostLinks(links, this.auth);
      }
    }
    this.name = name;
    this.tenantId = tenantId;
    this.validOrigins = validOrigins;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class WebIntegrationPostLinks {
  constructor({
    self,
    ...rest
  }, auth) {
    this.auth = auth;
    if (self instanceof WebIntegrationPostLinksSelf) {
      this.self = self;
    } else {
      this.self = new WebIntegrationPostLinksSelf(self, this.auth);
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class WebIntegrationPostLinksSelf {
  constructor({
    href,
    ...rest
  }, auth) {
    this.auth = auth;
    this.href = href;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class WebIntegrationPostSchema {
  constructor({
    name,
    validOrigins,
    ...rest
  }, auth) {
    this.auth = auth;
    this.name = name;
    this.validOrigins = validOrigins;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class WebIntegrationsClass {
  constructor({
    data,
    links,
    ...rest
  }, auth) {
    this.auth = auth;
    if (data !== void 0 && data !== null) {
      if (data.length > 0 && data[0] instanceof WebIntegration) {
        this.data = data;
      } else {
        this.data = data.map((element) => new WebIntegration(element, this.auth));
      }
    }
    if (links !== void 0 && links !== null) {
      if (links instanceof WebIntegrationsLinks) {
        this.links = links;
      } else {
        this.links = new WebIntegrationsLinks(links, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class WebIntegrationsLinks {
  constructor({
    next,
    prev,
    self,
    ...rest
  }, auth) {
    this.auth = auth;
    if (next !== void 0 && next !== null) {
      if (next instanceof WebIntegrationsLinksNext) {
        this.next = next;
      } else {
        this.next = new WebIntegrationsLinksNext(next, this.auth);
      }
    }
    if (prev !== void 0 && prev !== null) {
      if (prev instanceof WebIntegrationsLinksPrev) {
        this.prev = prev;
      } else {
        this.prev = new WebIntegrationsLinksPrev(prev, this.auth);
      }
    }
    if (self instanceof WebIntegrationsLinksSelf) {
      this.self = self;
    } else {
      this.self = new WebIntegrationsLinksSelf(self, this.auth);
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class WebIntegrationsLinksNext {
  constructor({
    href,
    ...rest
  }, auth) {
    this.auth = auth;
    this.href = href;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class WebIntegrationsLinksPrev {
  constructor({
    href,
    ...rest
  }, auth) {
    this.auth = auth;
    this.href = href;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class WebIntegrationsLinksSelf {
  constructor({
    href,
    ...rest
  }, auth) {
    this.auth = auth;
    this.href = href;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class WebIntegrations {
  constructor(config) {
    this.config = config instanceof Auth ? config.config : config;
    this.auth = config instanceof Auth ? config : new Auth(config);
  }
  async get(id) {
    const response = await this.auth.rest(
      "/web-integrations/{id}".replace("{id}", id),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new WebIntegration(responseJson, this.auth);
  }
  async getWebIntegrations(queryParams = { limit: 10, sort: "+name" }) {
    const response = await this.auth.rest(
      `/web-integrations?${Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => `${k}=${v}`).join("&")}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new WebIntegrationsClass(responseJson, this.auth);
  }
  async create(data) {
    const response = await this.auth.rest(
      "/web-integrations",
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    return new WebIntegrationPost(responseJson, this.auth);
  }
}
export {
  WebIntegration,
  WebIntegrationPatch,
  WebIntegrationPatchSchema,
  WebIntegrationPost,
  WebIntegrationPostLinks,
  WebIntegrationPostLinksSelf,
  WebIntegrationPostSchema,
  WebIntegrations,
  WebIntegrationsClass,
  WebIntegrationsLinks,
  WebIntegrationsLinksNext,
  WebIntegrationsLinksPrev,
  WebIntegrationsLinksSelf
};
