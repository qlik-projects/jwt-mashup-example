var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var rpcClient_exports = {};
__export(rpcClient_exports, {
  default: () => RpcClient
});
module.exports = __toCommonJS(rpcClient_exports);
var import_enigma = __toESM(require("enigma.js"));
var import_types = require("../types/types.js");
var import_restClient = __toESM(require("./restClient.js"));
var import_utils = require("../utils/utils.js");
const WS = true ? require("ws") : WebSocket;
function use(intercept) {
  const interceptArr = Array.isArray(intercept) ? intercept : [intercept];
  this.handlers = this.handlers.concat(interceptArr);
}
class RpcClient {
  constructor(config, rest) {
    this.interceptors = {
      request: {
        handlers: [],
        use
      },
      response: {
        handlers: [],
        use
      }
    };
    this.sessions = {};
    this.config = config;
    this.rest = rest ?? new import_restClient.default(config).restClientInstance;
  }
  async rpc(appId) {
    const { url, createSocket } = await this.buildUrlAndCreateSocket(appId);
    const createSession = () => {
      const session = import_enigma.default.create({
        schema: {
          structs: {
            Global: {},
            Doc: {},
            GenericMeasure: {},
            GenericVariable: {},
            GenericBookmark: {},
            GenericDimension: {},
            GenericObject: {},
            Field: {}
          }
        },
        url,
        createSocket,
        protocol: { delta: false }
      });
      session.intercept.response = this.interceptors.response.handlers;
      session.intercept.request = this.interceptors.request.handlers;
      return session;
    };
    this.sessions[url.toString()] = this.sessions[url.toString()] || createSession();
    return this.sessions[url.toString()];
  }
  async buildUrlAndCreateSocket(appId) {
    const url = await (0, import_utils.generateWebsocketUrl)(appId, this.rest, this.config);
    let createSocket;
    if (this.config.authType === import_types.AuthType.APIKey || this.config.authType === import_types.AuthType.OAuth2 && !import_utils.isBrowser) {
      createSocket = (wsUrl) => new WS(wsUrl, {
        headers: { Authorization: `Bearer ${this.config.apiKey}` }
      });
    } else {
      createSocket = (wsUrl) => new WS(wsUrl);
    }
    return { url, createSocket };
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
