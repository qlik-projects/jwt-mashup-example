/**
This is spectacularly generated code by spectacular v0.13.0 based on
QIX 12.1561.0
*/
import Auth from '../auth/auth.js';
import { RpcSession } from '../qlik.js';
/**
  @param qIsNum - Is set to true if the value is a numeric.
  @param qString - Calculated value.
  @param auth - Auth object used to make requests
 */
export declare class AlfaNumString {
    auth?: Auth;
    qIsNum?: boolean;
    qString?: string;
    [key: string]: any;
    constructor({ qIsNum, qString, ...rest }: {
        qIsNum?: boolean;
        qString?: string;
    }, auth?: Auth);
}
/**
  @param qFieldItems - List of the selections.
  @param qStateName - Name of the alternate state.
Default is current selections: $
  @param auth - Auth object used to make requests
 */
export declare class AlternateStateData {
    auth?: Auth;
    qFieldItems?: Array<BookmarkFieldItem>;
    qStateName?: string;
    [key: string]: any;
    constructor({ qFieldItems, qStateName, ...rest }: {
        qFieldItems?: Array<BookmarkFieldItem>;
        qStateName?: string;
    }, auth?: Auth);
}
/**
  @param qFileSize
  @param qHasSectionAccess - If true the app has section access configured.
  @param qID - Identifier of the app.
  @param qLastReloadTime - Last reload time of the app.
  @param qMeta - Meta data.
  @param qPath - Path of the app.
  @param qReadOnly - Is set to true if the app is read-only.
  @param qThumbnail - App thumbnail.
  @param qTitle - Title of the app.
  @param auth - Auth object used to make requests
 */
export declare class AppEntry {
    auth?: Auth;
    qFileSize?: number;
    qHasSectionAccess?: boolean;
    qID?: string;
    qLastReloadTime?: string;
    qMeta?: NxMeta;
    qPath?: string;
    qReadOnly?: boolean;
    qThumbnail?: StaticContentUrl;
    qTitle?: string;
    [key: string]: any;
    constructor({ qFileSize, qHasSectionAccess, qID, qLastReloadTime, qMeta, qPath, qReadOnly, qThumbnail, qTitle, ...rest }: {
        qFileSize?: number;
        qHasSectionAccess?: boolean;
        qID?: string;
        qLastReloadTime?: string;
        qMeta?: NxMeta;
        qPath?: string;
        qReadOnly?: boolean;
        qThumbnail?: StaticContentUrl;
        qTitle?: string;
    }, auth?: Auth);
}
/**
  Lists the app objects. Is the layout for AppObjectListDef.
An app object is a generic object created at app level.
  @param qItems - Information about the list of dimensions.
  @param auth - Auth object used to make requests
 */
export declare class AppObjectList {
    auth?: Auth;
    qItems?: Array<NxContainerEntry>;
    [key: string]: any;
    constructor({ qItems, ...rest }: {
        qItems?: Array<NxContainerEntry>;
    }, auth?: Auth);
}
/**
  Defines the list of objects in an app.
An app object is a generic object created at app level.
  @param qData - Data that you want to include in the app list definition.
You need to enter the paths to the information you want to retrieve.
  @param qType - Type of the app list.
  @param auth - Auth object used to make requests
 */
export declare class AppObjectListDef {
    auth?: Auth;
    qData?: JsonObject;
    qType?: string;
    [key: string]: any;
    constructor({ qData, qType, ...rest }: {
        qData?: JsonObject;
        qType?: string;
    }, auth?: Auth);
}
/**
  @param qIsLocked - True if user is temporarily locked from modifying the script. Meta contains the ID of the last modifier. Only applicable to QCS.
  @param qMeta - Information about publishing and permissions.
This parameter is optional.
  @param qScript - Script text.
  @param auth - Auth object used to make requests
 */
export declare class AppScript {
    auth?: Auth;
    qIsLocked?: boolean;
    qMeta?: NxMeta;
    qScript?: string;
    [key: string]: any;
    constructor({ qIsLocked, qMeta, qScript, ...rest }: {
        qIsLocked?: boolean;
        qMeta?: NxMeta;
        qScript?: string;
    }, auth?: Auth);
}
export declare class ArrayOfNxValuePoint extends Array<NxPivotValuePoint> {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor(arr: Array<NxPivotValuePoint>, auth?: Auth);
}
/**
  @param qField1Scores - Association information about the field FieldName1 defined in qFieldPairName .
  @param qField2Scores - Association information about the field FieldName2 defined in qFieldPairName .
  @param qFieldPairName - Pair of fields.
< FieldName1> / < FieldName2>
Where:
< FieldName1 > is a field in the table 1 (defined in qTable1 )
< FieldName2 > is a field in the table 2 (defined in qTable2 )
If the field is a synthetic key, the name of the field is preceded by [Synthetic key]: .
  @param qScoreSummary - Flag used to interpret calculated scores.
One of the following values or sum of values that apply:

• 0: The cardinal ratio cannot be zero but the symbol score and the row score can be zero.

• -1: The fields do not have the same type.

• -2: The number of rows of the field FieldName1 is zero.

• -4: The number of distinct values of the field FieldName1 is zero.

• -8: The number of rows of the field FieldName2 is zero.

• -16: The number of distinct values of the field FieldName2 is zero.

Example:
The number of rows of the field FieldName1 is zero, and the number of distinct values of the field FieldName2 is zero, then qScoreSummary is -18.
  @param auth - Auth object used to make requests
 */
export declare class AssociationScore {
    auth?: Auth;
    qField1Scores?: FieldScores;
    qField2Scores?: FieldScores;
    qFieldPairName?: string;
    qScoreSummary?: number;
    [key: string]: any;
    constructor({ qField1Scores, qField2Scores, qFieldPairName, qScoreSummary, ...rest }: {
        qField1Scores?: FieldScores;
        qField2Scores?: FieldScores;
        qFieldPairName?: string;
        qScoreSummary?: number;
    }, auth?: Auth);
}
/**
  @param qAggrFunc - If set to true, the definition is related to an aggregation function.
This parameter is optional. The default value is false.
  @param qBnf - Array of token references that all together build up the definition of the current token.
Generally, if the array is not empty, the definition is a BNF rule (qIsBnfRule is set to true). However, some BNF  rules do have an empty array (qIsBnfRule is set to true, but qBnf is empty).
  @param qBnfLiteral - If set to true, the definition specifies a literal token.
This parameter is optional. The default value is false.
  @param qControlStatement - If set to true, the definition specifies a control statement.
This parameter is optional. The default value is false.
  @param qDepr - Indicates whether a script statement, a chart or a script function is deprecated (not recommended for use).
If set to true, the script statement or the function is not recommended for use in Qlik Sense.
This parameter is optional. The default value is false.
  @param qFG - Group of the function.

One of:

• ALL or FUNC_GROUP_ALL

• U or FUNC_GROUP_UNKNOWN

• NONE or FUNC_GROUP_NONE

• AGGR or FUNC_GROUP_AGGR

• NUM or FUNC_GROUP_NUMERIC

• RNG or FUNC_GROUP_RANGE

• EXP or FUNC_GROUP_EXPONENTIAL_AND_LOGARITHMIC

• TRIG or FUNC_GROUP_TRIGONOMETRIC_AND_HYPERBOLIC

• FIN or FUNC_GROUP_FINANCIAL

• MATH or FUNC_GROUP_MATH_CONSTANT_AND_PARAM_FREE

• COUNT or FUNC_GROUP_COUNTER

• STR or FUNC_GROUP_STRING

• MAPP or FUNC_GROUP_MAPPING

• RCRD or FUNC_GROUP_INTER_RECORD

• CND or FUNC_GROUP_CONDITIONAL

• LOG or FUNC_GROUP_LOGICAL

• NULL or FUNC_GROUP_NULL

• SYS or FUNC_GROUP_SYSTEM

• FILE or FUNC_GROUP_FILE

• TBL or FUNC_GROUP_TABLE

• DATE or FUNC_GROUP_DATE_AND_TIME

• NUMI or FUNC_GROUP_NUMBER_INTERPRET

• FRMT or FUNC_GROUP_FORMATTING

• CLR or FUNC_GROUP_COLOR

• RNK or FUNC_GROUP_RANKING

• GEO or FUNC_GROUP_GEO

• EXT or FUNC_GROUP_EXTERNAL

• PROB or FUNC_GROUP_PROBABILITY

• ARRAY or FUNC_GROUP_ARRAY

• LEG or FUNC_GROUP_LEGACY

• DB or FUNC_GROUP_DB_NATIVE
  @param qFGList - List of groups the function belongs to.
  @param qFieldFlag - If set to true, the definition is related to a field.
This parameter is optional. The default value is false.
  @param qHelpId - Reference identifier to a function described in the documentation. The identifier is stored in the definition of the token containing the function name.
Is not used in Qlik Sense.
  @param qIsBnfRule - If set to true, a list of related rule tokens is assigned to qBnf .
This parameter is optional. The default value is false.
  @param qMT - Type of the data.

One of:

• N or NOT_META

• D or META_DOC_NAME

• R or META_RET_TYPE

• V or META_DEFAULT_VALUE
  @param qName - Token name.
One of:

• A rule name

• An identifier

• A literal value
  @param qNbr - Number of the current token definition.
  @param qPNbr - Number of the parent rule definition.
  @param qQvFunc - If set to true, the definition is related to a Qlik Sense function. It cannot be an aggregation function.
This parameter is optional. The default value is false.
  @param qScriptStatement - If set to true, the definition specifies a script statement.
This parameter is optional. The default value is false.
  @param qStr - Literal string of the token.
Examples: 'Round' and '('.
  @param auth - Auth object used to make requests
 */
export declare class BNFDef {
    auth?: Auth;
    qAggrFunc?: boolean;
    qBnf?: Array<number>;
    qBnfLiteral?: boolean;
    qControlStatement?: boolean;
    qDepr?: boolean;
    qFG?: 'FUNC_GROUP_ALL' | 'FUNC_GROUP_UNKNOWN' | 'FUNC_GROUP_NONE' | 'FUNC_GROUP_AGGR' | 'FUNC_GROUP_NUMERIC' | 'FUNC_GROUP_RANGE' | 'FUNC_GROUP_EXPONENTIAL_AND_LOGARITHMIC' | 'FUNC_GROUP_TRIGONOMETRIC_AND_HYPERBOLIC' | 'FUNC_GROUP_FINANCIAL' | 'FUNC_GROUP_MATH_CONSTANT_AND_PARAM_FREE' | 'FUNC_GROUP_COUNTER' | 'FUNC_GROUP_STRING' | 'FUNC_GROUP_MAPPING' | 'FUNC_GROUP_INTER_RECORD' | 'FUNC_GROUP_CONDITIONAL' | 'FUNC_GROUP_LOGICAL' | 'FUNC_GROUP_NULL' | 'FUNC_GROUP_SYSTEM' | 'FUNC_GROUP_FILE' | 'FUNC_GROUP_TABLE' | 'FUNC_GROUP_DATE_AND_TIME' | 'FUNC_GROUP_NUMBER_INTERPRET' | 'FUNC_GROUP_FORMATTING' | 'FUNC_GROUP_COLOR' | 'FUNC_GROUP_RANKING' | 'FUNC_GROUP_GEO' | 'FUNC_GROUP_EXTERNAL' | 'FUNC_GROUP_PROBABILITY' | 'FUNC_GROUP_ARRAY' | 'FUNC_GROUP_LEGACY' | 'FUNC_GROUP_DB_NATIVE' | string;
    qFGList?: Array<string>;
    qFieldFlag?: boolean;
    qHelpId?: number;
    qIsBnfRule?: boolean;
    qMT?: 'NOT_META' | 'META_DOC_NAME' | 'META_RET_TYPE' | 'META_DEFAULT_VALUE' | string;
    qName?: string;
    qNbr?: number;
    qPNbr?: number;
    qQvFunc?: boolean;
    qScriptStatement?: boolean;
    qStr?: string;
    [key: string]: any;
    constructor({ qAggrFunc, qBnf, qBnfLiteral, qControlStatement, qDepr, qFG, qFGList, qFieldFlag, qHelpId, qIsBnfRule, qMT, qName, qNbr, qPNbr, qQvFunc, qScriptStatement, qStr, ...rest }: {
        qAggrFunc?: boolean;
        qBnf?: Array<number>;
        qBnfLiteral?: boolean;
        qControlStatement?: boolean;
        qDepr?: boolean;
        qFG?: 'FUNC_GROUP_ALL' | 'FUNC_GROUP_UNKNOWN' | 'FUNC_GROUP_NONE' | 'FUNC_GROUP_AGGR' | 'FUNC_GROUP_NUMERIC' | 'FUNC_GROUP_RANGE' | 'FUNC_GROUP_EXPONENTIAL_AND_LOGARITHMIC' | 'FUNC_GROUP_TRIGONOMETRIC_AND_HYPERBOLIC' | 'FUNC_GROUP_FINANCIAL' | 'FUNC_GROUP_MATH_CONSTANT_AND_PARAM_FREE' | 'FUNC_GROUP_COUNTER' | 'FUNC_GROUP_STRING' | 'FUNC_GROUP_MAPPING' | 'FUNC_GROUP_INTER_RECORD' | 'FUNC_GROUP_CONDITIONAL' | 'FUNC_GROUP_LOGICAL' | 'FUNC_GROUP_NULL' | 'FUNC_GROUP_SYSTEM' | 'FUNC_GROUP_FILE' | 'FUNC_GROUP_TABLE' | 'FUNC_GROUP_DATE_AND_TIME' | 'FUNC_GROUP_NUMBER_INTERPRET' | 'FUNC_GROUP_FORMATTING' | 'FUNC_GROUP_COLOR' | 'FUNC_GROUP_RANKING' | 'FUNC_GROUP_GEO' | 'FUNC_GROUP_EXTERNAL' | 'FUNC_GROUP_PROBABILITY' | 'FUNC_GROUP_ARRAY' | 'FUNC_GROUP_LEGACY' | 'FUNC_GROUP_DB_NATIVE' | string;
        qFGList?: Array<string>;
        qFieldFlag?: boolean;
        qHelpId?: number;
        qIsBnfRule?: boolean;
        qMT?: 'NOT_META' | 'META_DOC_NAME' | 'META_RET_TYPE' | 'META_DEFAULT_VALUE' | string;
        qName?: string;
        qNbr?: number;
        qPNbr?: number;
        qQvFunc?: boolean;
        qScriptStatement?: boolean;
        qStr?: string;
    }, auth?: Auth);
}
export declare class BNFDefMetaType {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
export declare class BNFType {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
export declare class Blob {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qAlternateStateData
  @param qApplyAdditive
  @param qApplyInputFieldValues
  @param qApplyLayoutState
  @param qFieldItems
  @param qForAnnotations
  @param qGroups
  @param qId
  @param qIncludeAllVariables
  @param qIncludeScrollPosition
  @param qIncludeSelectionState
  @param qInfoText
  @param qInputFieldItems
  @param qName
  @param qObjects
  @param qObjectsLayout
  @param qOwner
  @param qRecallCount
  @param qSheetId
  @param qShow
  @param qShowPopupInfo
  @param qUtcModifyTime
  @param qUtcRecallTime
  @param qVariableItems
  @param auth - Auth object used to make requests
 */
export declare class Bookmark {
    auth?: Auth;
    qAlternateStateData?: Array<AlternateStateData>;
    qApplyAdditive?: boolean;
    qApplyInputFieldValues?: boolean;
    qApplyLayoutState?: boolean;
    qFieldItems?: Array<BookmarkFieldItem>;
    qForAnnotations?: boolean;
    qGroups?: Array<GroupBookmarkData>;
    qId?: string;
    qIncludeAllVariables?: boolean;
    qIncludeScrollPosition?: boolean;
    qIncludeSelectionState?: boolean;
    qInfoText?: string;
    qInputFieldItems?: Array<InputFieldItem>;
    qName?: string;
    qObjects?: Array<LayoutBookmarkData>;
    qObjectsLayout?: Array<ExtendedLayoutBookmarkData>;
    qOwner?: string;
    qRecallCount?: number;
    qSheetId?: string;
    qShow?: CondDef;
    qShowPopupInfo?: boolean;
    qUtcModifyTime?: number;
    qUtcRecallTime?: number;
    qVariableItems?: Array<BookmarkVariableItem>;
    [key: string]: any;
    constructor({ qAlternateStateData, qApplyAdditive, qApplyInputFieldValues, qApplyLayoutState, qFieldItems, qForAnnotations, qGroups, qId, qIncludeAllVariables, qIncludeScrollPosition, qIncludeSelectionState, qInfoText, qInputFieldItems, qName, qObjects, qObjectsLayout, qOwner, qRecallCount, qSheetId, qShow, qShowPopupInfo, qUtcModifyTime, qUtcRecallTime, qVariableItems, ...rest }: {
        qAlternateStateData?: Array<AlternateStateData>;
        qApplyAdditive?: boolean;
        qApplyInputFieldValues?: boolean;
        qApplyLayoutState?: boolean;
        qFieldItems?: Array<BookmarkFieldItem>;
        qForAnnotations?: boolean;
        qGroups?: Array<GroupBookmarkData>;
        qId?: string;
        qIncludeAllVariables?: boolean;
        qIncludeScrollPosition?: boolean;
        qIncludeSelectionState?: boolean;
        qInfoText?: string;
        qInputFieldItems?: Array<InputFieldItem>;
        qName?: string;
        qObjects?: Array<LayoutBookmarkData>;
        qObjectsLayout?: Array<ExtendedLayoutBookmarkData>;
        qOwner?: string;
        qRecallCount?: number;
        qSheetId?: string;
        qShow?: CondDef;
        qShowPopupInfo?: boolean;
        qUtcModifyTime?: number;
        qUtcRecallTime?: number;
        qVariableItems?: Array<BookmarkVariableItem>;
    }, auth?: Auth);
}
/**
  @param qApplySuccess - Apply successfully or not *
  @param qWarnings - Field values verfication result *
  @param auth - Auth object used to make requests
 */
export declare class BookmarkApplyAndVerifyResult {
    auth?: Auth;
    qApplySuccess?: boolean;
    qWarnings?: Array<BookmarkFieldVerifyWarning>;
    [key: string]: any;
    constructor({ qApplySuccess, qWarnings, ...rest }: {
        qApplySuccess?: boolean;
        qWarnings?: Array<BookmarkFieldVerifyWarning>;
    }, auth?: Auth);
}
/**
  @param qAndMode - If set to true, selections within a list object are made in AND mode; If you have a list object that lists all customers, by selecting Customer 1 and Customer 2 while in and-mode, all records that are associated with Customer 1 and Customer 2 are selected.
The default value is false; selections within a list object are made in OR mode. If you have a list object that lists all customers, by selecting Customer 1 and Customer 2 while in or-mode, all records that are associated with either Customer 1 or Customer 2 are selected.
This parameter is not returned if set to false.
  @param qDef - Name and type of the field.
  @param qExcludedValues - List of excluded values.
Either the list of selected values or the list of excluded values is displayed.
  @param qLocked - Indicates if the field is locked.
Default is false.
  @param qOneAndOnlyOne - If set to true, the field has always one selection (not 0 and not more than 1). If another value is selected, the previous one is unselected.
The default value is false. This parameter is not returned if set to false.
  @param qSelectInfo - Information on the selections criteria.
  @param qValues
  @param auth - Auth object used to make requests
 */
export declare class BookmarkFieldItem {
    auth?: Auth;
    qAndMode?: boolean;
    qDef?: FieldDefEx;
    qExcludedValues?: Array<FieldValue>;
    qLocked?: boolean;
    qOneAndOnlyOne?: boolean;
    qSelectInfo?: SelectInfo;
    qValues?: Array<FieldValue>;
    [key: string]: any;
    constructor({ qAndMode, qDef, qExcludedValues, qLocked, qOneAndOnlyOne, qSelectInfo, qValues, ...rest }: {
        qAndMode?: boolean;
        qDef?: FieldDefEx;
        qExcludedValues?: Array<FieldValue>;
        qLocked?: boolean;
        qOneAndOnlyOne?: boolean;
        qSelectInfo?: SelectInfo;
        qValues?: Array<FieldValue>;
    }, auth?: Auth);
}
/**
  Defines the range of the bookmark fields that are returned.
  @param qEndIndex - The end value of the range.
  @param qStartIndex - The start value of the range.
  @param auth - Auth object used to make requests
 */
export declare class BookmarkFieldPage {
    auth?: Auth;
    qEndIndex?: number;
    qStartIndex?: number;
    [key: string]: any;
    constructor({ qEndIndex, qStartIndex, ...rest }: {
        qEndIndex?: number;
        qStartIndex?: number;
    }, auth?: Auth);
}
export declare class BookmarkFieldVerifyResultState {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qField - Field Name *
  @param qMissingValues
  @param qState - Alternate State *
  @param qVerifyResult - Field/values verfication result *
Defines result of ApplyAndVerify.
One of:

• NOT_VERIFIED

• FIELD_VALUE_MATCH_ALL

• FIELD_MISSING

• FIELD_VALUE_MISSING

• STATE_MISSING
  @param auth - Auth object used to make requests
 */
export declare class BookmarkFieldVerifyWarning {
    auth?: Auth;
    qField?: string;
    qMissingValues?: Array<string>;
    qState?: string;
    qVerifyResult?: 'NOT_VERIFIED' | 'FIELD_VALUE_MATCH_ALL' | 'FIELD_MISSING' | 'FIELD_VALUE_MISSING' | 'STATE_MISSING' | string;
    [key: string]: any;
    constructor({ qField, qMissingValues, qState, qVerifyResult, ...rest }: {
        qField?: string;
        qMissingValues?: Array<string>;
        qState?: string;
        qVerifyResult?: 'NOT_VERIFIED' | 'FIELD_VALUE_MATCH_ALL' | 'FIELD_MISSING' | 'FIELD_VALUE_MISSING' | 'STATE_MISSING' | string;
    }, auth?: Auth);
}
/**
  Lists the bookmarks. Is the layout for BookmarkListDef.
  @param qItems - Information about the list of bookmarks.
  @param auth - Auth object used to make requests
 */
export declare class BookmarkList {
    auth?: Auth;
    qItems?: Array<NxContainerEntry>;
    [key: string]: any;
    constructor({ qItems, ...rest }: {
        qItems?: Array<NxContainerEntry>;
    }, auth?: Auth);
}
/**
  Defines the list of bookmarks.
  @param qData - Data
  @param qIncludePatches - Include the bookmark patches. Patches can be very large and may make the list result unmanageable.
  @param qType - Type of the list.
  @param auth - Auth object used to make requests
 */
export declare class BookmarkListDef {
    auth?: Auth;
    qData?: JsonObject;
    qIncludePatches?: boolean;
    qType?: string;
    [key: string]: any;
    constructor({ qData, qIncludePatches, qType, ...rest }: {
        qData?: JsonObject;
        qIncludePatches?: boolean;
        qType?: string;
    }, auth?: Auth);
}
/**
  @param qName - Name of the variable.
  @param qValue - Value of the variable.
  @param auth - Auth object used to make requests
 */
export declare class BookmarkVariableItem {
    auth?: Auth;
    qName?: string;
    qValue?: FieldValue;
    [key: string]: any;
    constructor({ qName, qValue, ...rest }: {
        qName?: string;
        qValue?: FieldValue;
    }, auth?: Auth);
}
/**
  @param qDayNames - List of short day names.
  @param qLongDayNames - List of long day names.
  @param qLongMonthNames - List of long month names.
  @param qMonthNames - List of short month names.
  @param auth - Auth object used to make requests
 */
export declare class CalendarStrings {
    auth?: Auth;
    qDayNames?: Array<string>;
    qLongDayNames?: Array<string>;
    qLongMonthNames?: Array<string>;
    qMonthNames?: Array<string>;
    [key: string]: any;
    constructor({ qDayNames, qLongDayNames, qLongMonthNames, qMonthNames, ...rest }: {
        qDayNames?: Array<string>;
        qLongDayNames?: Array<string>;
        qLongMonthNames?: Array<string>;
        qMonthNames?: Array<string>;
    }, auth?: Auth);
}
export declare class CharEncodingType {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qCharCount - Number of occurrences found.
  @param qCharPos - Position of the first search occurrence.
  @param auth - Auth object used to make requests
 */
export declare class CharRange {
    auth?: Auth;
    qCharCount?: number;
    qCharPos?: number;
    [key: string]: any;
    constructor({ qCharCount, qCharPos, ...rest }: {
        qCharCount?: number;
        qCharPos?: number;
    }, auth?: Auth);
}
/**
  @param qBadFieldNames
  @param qDangerousFieldNames
  @param qErrorMsg
  @param auth - Auth object used to make requests
 */
export declare class CheckExpressionReturn {
    auth?: Auth;
    qBadFieldNames?: Array<NxRange>;
    qDangerousFieldNames?: Array<NxRange>;
    qErrorMsg?: string;
    [key: string]: any;
    constructor({ qBadFieldNames, qDangerousFieldNames, qErrorMsg, ...rest }: {
        qBadFieldNames?: Array<NxRange>;
        qDangerousFieldNames?: Array<NxRange>;
        qErrorMsg?: string;
    }, auth?: Auth);
}
/**
  @param qBadFieldNames
  @param qErrorMsg
  @param auth - Auth object used to make requests
 */
export declare class CheckNumberOrExpressionReturn {
    auth?: Auth;
    qBadFieldNames?: Array<NxRange>;
    qErrorMsg?: string;
    [key: string]: any;
    constructor({ qBadFieldNames, qErrorMsg, ...rest }: {
        qBadFieldNames?: Array<NxRange>;
        qErrorMsg?: string;
    }, auth?: Auth);
}
/**
  Lists the children of a generic object. Is the layout for ChildListDef.
ChildList is used by the GetLayout Method to list the children of a generic object.
  @param qItems - Information about the items in the app object.
  @param auth - Auth object used to make requests
 */
export declare class ChildList {
    auth?: Auth;
    qItems?: Array<NxContainerEntry>;
    [key: string]: any;
    constructor({ qItems, ...rest }: {
        qItems?: Array<NxContainerEntry>;
    }, auth?: Auth);
}
/**
  Defines the list of children of a generic object.
What is defined in ChildListDef has an impact on what the GetLayout method returns. See Example for more information.
  @param qData - Data that you want to include in the child list definition.
You need to enter the paths to the information you want to retrieve.
  @param auth - Auth object used to make requests
 */
export declare class ChildListDef {
    auth?: Auth;
    qData?: JsonObject;
    [key: string]: any;
    constructor({ qData, ...rest }: {
        qData?: JsonObject;
    }, auth?: Auth);
}
/**
  @param qDescription - Description of the code page.
  @param qName - Name of the code page.
  @param qNumber - Number of the code page.
  @param auth - Auth object used to make requests
 */
export declare class CodePage {
    auth?: Auth;
    qDescription?: string;
    qName?: string;
    qNumber?: number;
    [key: string]: any;
    constructor({ qDescription, qName, qNumber, ...rest }: {
        qDescription?: string;
        qName?: string;
        qNumber?: number;
    }, auth?: Auth);
}
/**
  @param qAlways
  @param qExpression
  @param auth - Auth object used to make requests
 */
export declare class CondDef {
    auth?: Auth;
    qAlways?: boolean;
    qExpression?: ValueExpr;
    [key: string]: any;
    constructor({ qAlways, qExpression, ...rest }: {
        qAlways?: boolean;
        qExpression?: ValueExpr;
    }, auth?: Auth);
}
/**
  @param qConnectionString - One of:

• ODBC CONNECT TO [<provider name>]

• OLEDB CONNECT TO [<provider name>]

• CUSTOM CONNECT TO [<provider name>]

• "<local absolute or relative path, UNC path>"

• "<URL>"

Connection string.
This parameter is mandatory and must be set when creating or modifying a connection.
  @param qId - Identifier of the connection.
Is generated by the engine and is unique.
  @param qLogOn - Select which user credentials to use to connect to the source.

• LOG_ON_SERVICE_USER: Disables

• LOG_ON_CURRENT_USER: Enables

One of:

• LOG_ON_SERVICE_USER

• LOG_ON_CURRENT_USER
  @param qMeta - Information about the connection.
  @param qModifiedDate - Is generated by the engine.
Creation date of the connection or last modification date of the connection.
  @param qName - Name of the connection.
This parameter is mandatory and must be set when creating or modifying a connection.
  @param qPassword - Password of the user who creates the connection.
This parameter is optional; it is only used for OLEDB, ODBC and CUSTOM connections.
A call to GetConnection Method does not return the password.
  @param qType - One of:

• ODBC

• OLEDB

• <Name of the custom connection file>

• folder

• internet

Type of the connection.
This parameter is mandatory and must be set when creating or modifying a connection.
For ODBC, OLEDB and custom connections, the engine checks that the connection type matches the connection string.
The type is not case sensitive.
  @param qUserName - Name of the user who creates the connection.
This parameter is optional; it is only used for OLEDB, ODBC and CUSTOM connections.
A call to GetConnection Method does not return the user name.
  @param auth - Auth object used to make requests
 */
export declare class Connection {
    auth?: Auth;
    qConnectionString?: string;
    qId?: string;
    qLogOn?: 'LOG_ON_SERVICE_USER' | 'LOG_ON_CURRENT_USER' | string;
    qMeta?: NxMeta;
    qModifiedDate?: string;
    qName?: string;
    qPassword?: string;
    qType?: string;
    qUserName?: string;
    [key: string]: any;
    constructor({ qConnectionString, qId, qLogOn, qMeta, qModifiedDate, qName, qPassword, qType, qUserName, ...rest }: {
        qConnectionString?: string;
        qId?: string;
        qLogOn?: 'LOG_ON_SERVICE_USER' | 'LOG_ON_CURRENT_USER' | string;
        qMeta?: NxMeta;
        qModifiedDate?: string;
        qName?: string;
        qPassword?: string;
        qType?: string;
        qUserName?: string;
    }, auth?: Auth);
}
/**
  @param qItems - Information about the content library.
  @param auth - Auth object used to make requests
 */
export declare class ContentLibraryList {
    auth?: Auth;
    qItems?: Array<ContentLibraryListItem>;
    [key: string]: any;
    constructor({ qItems, ...rest }: {
        qItems?: Array<ContentLibraryListItem>;
    }, auth?: Auth);
}
/**
  @param qAppSpecific - Is set to true if the library is specific to the app (not a global content library).
  @param qMeta - Information about publishing and permissions.
  @param qName - Name of the library.
  @param auth - Auth object used to make requests
 */
export declare class ContentLibraryListItem {
    auth?: Auth;
    qAppSpecific?: boolean;
    qMeta?: NxMeta;
    qName?: string;
    [key: string]: any;
    constructor({ qAppSpecific, qMeta, qName, ...rest }: {
        qAppSpecific?: boolean;
        qMeta?: NxMeta;
        qName?: string;
    }, auth?: Auth);
}
/**
  @param qId
  @param qReturn
  @param auth - Auth object used to make requests
 */
export declare class CreateTemporaryBookmarkReturn {
    auth?: Auth;
    qId?: string;
    qReturn?: boolean;
    [key: string]: any;
    constructor({ qId, qReturn, ...rest }: {
        qId?: string;
        qReturn?: boolean;
    }, auth?: Auth);
}
/**
  @param qDisplayName - Name of the custom connector as displayed in the Qlik interface.
  @param qMachineMode - Mode of the machine (64 or 32 bits).

One of:

• CONNECT_DEFAULT

• CONNECT_64

• CONNECT_32
  @param qParent - Name of the parent folder that contains the custom connector file.
  @param qProvider - Name of the custom connector file.
  @param qSupportFileStreaming
  @param auth - Auth object used to make requests
 */
export declare class CustomConnector {
    auth?: Auth;
    qDisplayName?: string;
    qMachineMode?: 'CONNECT_DEFAULT' | 'CONNECT_64' | 'CONNECT_32' | string;
    qParent?: string;
    qProvider?: string;
    qSupportFileStreaming?: boolean;
    [key: string]: any;
    constructor({ qDisplayName, qMachineMode, qParent, qProvider, qSupportFileStreaming, ...rest }: {
        qDisplayName?: string;
        qMachineMode?: 'CONNECT_DEFAULT' | 'CONNECT_64' | 'CONNECT_32' | string;
        qParent?: string;
        qProvider?: string;
        qSupportFileStreaming?: boolean;
    }, auth?: Auth);
}
/**
  @param qIsKey - Is set to true if the field is a primary key.
  @param qName - Name of the field.
  @param qOriginalFieldName - Is shown for fixed records.
qOriginalFieldName and qName are identical if no field names are used in the file.
qOriginalFieldName differs from qName if embedded file names are used in the file.
  @param auth - Auth object used to make requests
 */
export declare class DataField {
    auth?: Auth;
    qIsKey?: boolean;
    qName?: string;
    qOriginalFieldName?: string;
    [key: string]: any;
    constructor({ qIsKey, qName, qOriginalFieldName, ...rest }: {
        qIsKey?: boolean;
        qName?: string;
        qOriginalFieldName?: string;
    }, auth?: Auth);
}
/**
  @param qValues - List of values inside the table.
The first values (in result/qPreview/0/qValues ) correspond to the field names in the table.
The following values (from result/qPreview/1/qValues ) are the values of the fields in the table.
  @param auth - Auth object used to make requests
 */
export declare class DataRecord {
    auth?: Auth;
    qValues?: Array<string>;
    [key: string]: any;
    constructor({ qValues, ...rest }: {
        qValues?: Array<string>;
    }, auth?: Auth);
}
/**
  @param qName - Name of the table.
  @param qType - Type of the table.
For example: Table or View.
  @param auth - Auth object used to make requests
 */
export declare class DataTable {
    auth?: Auth;
    qName?: string;
    qType?: string;
    [key: string]: any;
    constructor({ qName, qType, ...rest }: {
        qName?: string;
        qType?: string;
    }, auth?: Auth);
}
/**
  @param qFields - List of the fields in the table.
  @param qFormatSpec - List of format specification items, within brackets.
Examples of specification items:

• file type

• embedded labels, no labels

• table is <table name>
  @param qName - Name of the table.
  @param auth - Auth object used to make requests
 */
export declare class DataTableEx {
    auth?: Auth;
    qFields?: Array<DataField>;
    qFormatSpec?: string;
    qName?: string;
    [key: string]: any;
    constructor({ qFields, qFormatSpec, qName, ...rest }: {
        qFields?: Array<DataField>;
        qFormatSpec?: string;
        qName?: string;
    }, auth?: Auth);
}
/**
  @param qIsDefault - Is set to true if the database is set by default.
  @param qName - Name of the database.
  @param auth - Auth object used to make requests
 */
export declare class Database {
    auth?: Auth;
    qIsDefault?: boolean;
    qName?: string;
    [key: string]: any;
    constructor({ qIsDefault, qName, ...rest }: {
        qIsDefault?: boolean;
        qName?: string;
    }, auth?: Auth);
}
/**
  @param qDBFirst - If set to true, it means that the database is displayed first, before the owners and tables.
  @param qDBMSName - Name of the product accessed by the provider.
  @param qDBSeparator - Character string used after the database name.
Example with separator " . ":
FROM LinkedTablesData.dbo.Months
Where:

• LinkedTablesData is the database name

• dbo is the owner name

• Months is the table name
  @param qDBUsage - If set to true, it means that the data source contains some databases.
  @param qDefaultDatabase - Name of the default database.
  @param qKeywords - List of the script keywords.
  @param qOwnerSeparator - Character string used after the owner name.
Example with separator " . ":
FROM LinkedTablesData.dbo.Months
Where:

• LinkedTablesData is the database name

• dbo is the owner name

• Months is the table name
  @param qOwnerUsage - If set to true, it means that the data source contains some owners.
  @param qQuotePreffix - Prefix used with field, database or owner names that contain special characters or keywords.
  @param qQuoteSuffix - Suffix used with field, database or owner names that contain special characters or keywords.
  @param qSpecialChars - List of the special characters.
  @param auth - Auth object used to make requests
 */
export declare class DatabaseInfo {
    auth?: Auth;
    qDBFirst?: boolean;
    qDBMSName?: string;
    qDBSeparator?: string;
    qDBUsage?: boolean;
    qDefaultDatabase?: string;
    qKeywords?: Array<string>;
    qOwnerSeparator?: string;
    qOwnerUsage?: boolean;
    qQuotePreffix?: string;
    qQuoteSuffix?: string;
    qSpecialChars?: string;
    [key: string]: any;
    constructor({ qDBFirst, qDBMSName, qDBSeparator, qDBUsage, qDefaultDatabase, qKeywords, qOwnerSeparator, qOwnerUsage, qQuotePreffix, qQuoteSuffix, qSpecialChars, ...rest }: {
        qDBFirst?: boolean;
        qDBMSName?: string;
        qDBSeparator?: string;
        qDBUsage?: boolean;
        qDefaultDatabase?: string;
        qKeywords?: Array<string>;
        qOwnerSeparator?: string;
        qOwnerUsage?: boolean;
        qQuotePreffix?: string;
        qQuoteSuffix?: string;
        qSpecialChars?: string;
    }, auth?: Auth);
}
/**
  @param qName - Name of the owner.
  @param auth - Auth object used to make requests
 */
export declare class DatabaseOwner {
    auth?: Auth;
    qName?: string;
    [key: string]: any;
    constructor({ qName, ...rest }: {
        qName?: string;
    }, auth?: Auth);
}
/**
  @param qIsMultiple - Is set to true if multiple spaces are used to separate the values.
  @param qName - Name of the delimiter.
Example:
"Tab_DELIMITER"
  @param qNumber - Delimiter character number used by the engine to determine how to separate the values.
  @param qScriptCode - Representation of the delimiter value that is used in the script.
Example:
"'\t'"
  @param auth - Auth object used to make requests
 */
export declare class DelimiterInfo {
    auth?: Auth;
    qIsMultiple?: boolean;
    qName?: string;
    qNumber?: number;
    qScriptCode?: string;
    [key: string]: any;
    constructor({ qIsMultiple, qName, qNumber, qScriptCode, ...rest }: {
        qIsMultiple?: boolean;
        qName?: string;
        qNumber?: number;
        qScriptCode?: string;
    }, auth?: Auth);
}
/**
  @param qActive - Is set to true is the derived field is in use.
  @param qDefinitionName - Name of the derived definition.
  @param qTags - List of tags.
  @param auth - Auth object used to make requests
 */
export declare class DerivedFieldsInTableData {
    auth?: Auth;
    qActive?: boolean;
    qDefinitionName?: string;
    qTags?: Array<string>;
    [key: string]: any;
    constructor({ qActive, qDefinitionName, qTags, ...rest }: {
        qActive?: boolean;
        qDefinitionName?: string;
        qTags?: Array<string>;
    }, auth?: Auth);
}
/**
  Lists the dimensions. Is the layout for DimensionListDef.
  @param qItems - Information about the list of dimensions.
  @param auth - Auth object used to make requests
 */
export declare class DimensionList {
    auth?: Auth;
    qItems?: Array<NxContainerEntry>;
    [key: string]: any;
    constructor({ qItems, ...rest }: {
        qItems?: Array<NxContainerEntry>;
    }, auth?: Auth);
}
/**
  Defines the lists of dimensions.
  @param qData - Data
  @param qType - Type of the list.
  @param auth - Auth object used to make requests
 */
export declare class DimensionListDef {
    auth?: Auth;
    qData?: JsonObject;
    qType?: string;
    [key: string]: any;
    constructor({ qData, qType, ...rest }: {
        qData?: JsonObject;
        qType?: string;
    }, auth?: Auth);
}
/**
  Parameters for a reload.
  @param qDebug - Set to true to debug reload.
The default value is false.
  @param qMode - 0: for default mode.
1: for ABEND; the reload of the script ends if an error occurs.
2: for ignore; the reload of the script continues even if an error is detected in the script.
  @param qPartial - Set to true for partial reload.
The default value is false.
  @param qReloadId - Optional reload ID.
ID will be automatically generated if not set.
  @param auth - Auth object used to make requests
 */
export declare class DoReloadExParams {
    auth?: Auth;
    qDebug?: boolean;
    qMode?: number;
    qPartial?: boolean;
    qReloadId?: string;
    [key: string]: any;
    constructor({ qDebug, qMode, qPartial, qReloadId, ...rest }: {
        qDebug?: boolean;
        qMode?: number;
        qPartial?: boolean;
        qReloadId?: string;
    }, auth?: Auth);
}
/**
  The result and path to script log for a reload.
  @param qEndedWithMemoryConstraint - true if memory limits were exhausted during reload.
  @param qScriptLogFile - Path to the script log file.
  @param qSuccess - The reload is successful if True.
  @param auth - Auth object used to make requests
 */
export declare class DoReloadExResult {
    auth?: Auth;
    qEndedWithMemoryConstraint?: boolean;
    qScriptLogFile?: string;
    qSuccess?: boolean;
    [key: string]: any;
    constructor({ qEndedWithMemoryConstraint, qScriptLogFile, qSuccess, ...rest }: {
        qEndedWithMemoryConstraint?: boolean;
        qScriptLogFile?: string;
        qSuccess?: boolean;
    }, auth?: Auth);
}
/**
  @param qGenericId - Object ID.
  @param qGenericType - The type of the object.
  @param qHandle - The handle used to connect to object.
  @param qType - The native type of the object.
  @param auth - Auth object used to make requests
 */
export declare class Doc {
    attributes?: any;
    global: Global;
    session: RpcSession;
    auth: Auth;
    qGenericId?: string;
    qGenericType?: string;
    qHandle?: number;
    qType?: string;
    [key: string]: any;
    constructor({ qGenericId, qGenericType, qHandle, qType, ...rest }: {
        qGenericId?: string;
        qGenericType?: string;
        qHandle?: number;
        qType?: string;
    }, session?: RpcSession, auth?: Auth);
    /**    Returns a handle to a field.
  
      @param qFieldName - Name of the field.
      @param qStateName - Name of the alternate state.
  Default state is current selections.
    */
    getField(qFieldName: string, qStateName?: string): Promise<Field>;
    /**    Returns the description of a field.
  
      @param qFieldName - Name of the field.
    */
    getFieldDescription(qFieldName: string): Promise<FieldDescription>;
    /**    Returns a handle to a variable.
  
      @deprecated
  
      @param qName - Name of the variable.
    */
    getVariable(qName: string): Promise<GenericVariable>;
    /**    Returns a list of table states.
  
  The following states apply:
  
  • 0 The table is not loosely coupled.
  
  • 1 The table is loosely coupled.
  
  • 2 The table is loosely coupled and cannot be changed to another state using the Qlik Engine API.
  
  The last three values in the vector are for internal use.
  In case of circular references, the engine automatically sets the table state to loosely coupled to avoid creating loops.
  
    */
    getLooselyCoupledVector(): Promise<Array<number>>;
    /**    Sets a list of table states, one for each table.
  
  The following states apply:
  
  • 0 The table is not loosely coupled.
  
  • 1 The table is loosely coupled.
  
  • 2 The table is loosely coupled and cannot be changed to another state using the Qlik Engine API.
  
  The last three values in the vector are for internal use.
  
      @param qv - The list of table states to set. A state will not be changed if already set to 2.
    */
    setLooselyCoupledVector(qv: Array<number>): Promise<boolean>;
    /**    Evaluates an expression and returns the result as a string.
  
   Example:
  The client sends:
  ```
  {
      "handle": 1,
      "method": "Evaluate",
      "params": {
          "qExpression": "Sum(Holes)"
      },
      "id": 6,
      "jsonrpc": "2.0"
  }
  ```
  The engine returns:
  ```
  {
      "jsonrpc": "2.0",
      "id": 6,
      "result": {
          "qReturn": "361716"
      }
  }
  ```
  
      @param qExpression - Expression to evaluate.
    */
    evaluate(qExpression: string): Promise<string>;
    /**    Evaluates an expression and returns the result as a dual.
  
   Example:
  The client sends:
  ```
  {
      "handle": 1,
      "method": "EvaluateEx",
      "params": {
          "qExpression": "Sum(Holes)"
      },
      "id": 7,
      "jsonrpc": "2.0"
  }
  ```
  The engine returns:
  ```
  {
      "jsonrpc": "2.0",
      "id": 7,
      "result": {
          "qReturn": "361716"
      }
  }
  ```
  
      @param qExpression - Expression to evaluate.
    */
    evaluateEx(qExpression: string): Promise<FieldValue>;
    /**    Clear selections in fields for current state. Locked fields are not cleared by default.
  
      @param qLockedAlso - When true, clears the selection for locked fields.
      @param qStateName - Alternate state name. When set, applies to alternate state instead of current
    */
    clearAll(qLockedAlso?: boolean, qStateName?: string): Promise<object>;
    /**    Locks all selections in fields for current state.
  
      @param qStateName - Alternate state name. When set, applies to alternate state instead of current.
    */
    lockAll(qStateName?: string): Promise<object>;
    /**    Unlocks all selections in fields for current state.
  
      @param qStateName - Alternate state name. When set, applies to alternate state instead of current.
    */
    unlockAll(qStateName?: string): Promise<object>;
    /**    Loads the last logical operation (if any).
  
    */
    back(): Promise<object>;
    /**    Loads the next logical operation (if any).
  
    */
    forward(): Promise<object>;
    /**    Creates a variable.
  
      @deprecated
  
      @param qName - Name of the variable. Variable names are case sensitive.
    */
    createVariable(qName: string): Promise<boolean>;
    /**    Removes a variable.
  
      @deprecated
  
      @param qName - Name of the variable. Variable names are case sensitive.
    */
    removeVariable(qName: string): Promise<boolean>;
    /**    Returns locale information.
  
    */
    getLocaleInfo(): Promise<LocaleInfo>;
    /**    Returns:
  
  • The list of tables in an app and the fields inside each table.
  
  • The list of derived fields.
  
  • The list of key fields.
  
      @param qWindowSize - Size of the window that is used to display the results.
      @param qNullSize
      @param qCellHeight - Height of a cell in a table in pixels.
      @param qSyntheticMode - One of:
  
  • true for internal table viewer:
  Shows a more detailed view on how the Qlik engine defines the relations between fields and the quality of the keys.
  
  • false for source table viewer:
  Shows the natural relation between fields without reference to synthetic keys and resultant linking synthetic tables. Instead synthetic keys are represented by multiple connectors between tables.
      @param qIncludeSysVars - If set to true, the system variables are included.
      @param qIncludeProfiling - If set to true, profiling information is included.
    */
    getTablesAndKeys(qWindowSize: Size, qNullSize: Size, qCellHeight: number, qSyntheticMode: boolean, qIncludeSysVars: boolean, qIncludeProfiling?: boolean): Promise<GetTablesAndKeysReturn>;
    /**    Returns information about the position of the tables in the data model viewer.
  The position of the broom points and the position of the connection points cannot be retrieved in Qlik Sense.
  
   Representation of tables, broom points and connection points:
  
  The green circles represent the broom points.
  The red circle represents a connection point.
  
    */
    getViewDlgSaveInfo(): Promise<TableViewDlgSaveInfo>;
    /**    Sets the positions of the tables in the data model viewer.
  The position of the broom points and the position of the connection points cannot be set in Qlik Sense.
  
   Representation of tables, broom points and connection points:
  
  The green circles represent the broom points.
  The red circle represents a connection point.
  
      @param qInfo - Information about the table.
    */
    setViewDlgSaveInfo(qInfo: TableViewDlgSaveInfo): Promise<object>;
    /**    Creates a script that contains one section. This section contains SET statements that give localized information from the regional settings of the computer.
  The computer regional settings are retrieved when the engine starts.
  
      @param qLocalizedMainSection - Name of the script section.
  The default value is Main .
    */
    getEmptyScript(qLocalizedMainSection?: string): Promise<string>;
    /**    Reloads the script that is set in an app.
  
   Logs:
  When this method is called, audit activity logs are produced to track the user activity.
  In the case of errors, both audit activity logs and system services logs are produced.
  The log files are named as follows:
  | Audit activity log                                                                                                                        | System service log                                                                                                            |
  |-------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------|
  | _\_AuditActivity\_Engine.txt_ in Qlik Sense Enterprise  _\_AuditActivity\_Engine.log_ in Qlik Sense Desktop | _\_Service\_Engine.txt_ in Qlik Sense Enterprise  _\_Service\_Engine.log_ in Qlik Sense Desktop |
  
   Where to find the log files:
  The location of the log files depends on whether you have installed Qlik Sense Enterprise or Qlik Sense Desktop.
  | Qlik Sense Enterprise                 | Qlik Sense Desktop                       |
  |---------------------------------------|------------------------------------------|
  | _%ProgramData%/Qlik/Sense/Log/Engine_ | _%UserProfile%/Documents/Qlik/Sense/Log_ |
  
      @param qMode - Error handling mode
  One of:
  
  • 0: for default mode.
  
  • 1: for ABEND; the reload of the script ends if an error occurs.
  
  • 2: for ignore; the reload of the script continues even if an error is detected in the script.
      @param qPartial - Set to true for partial reload.
  The default value is false.
      @param qDebug - Set to true if debug breakpoints are to be honored. The execution of the script will be in debug mode.
  The default value is false.
    */
    doReload(qMode?: number, qPartial?: boolean, qDebug?: boolean): Promise<boolean>;
    /**    Lists the breakpoints in the script of an app.
  
    */
    getScriptBreakpoints(): Promise<Array<EditorBreakpoint>>;
    /**    Set some breakpoints in the script of an app.
  
      @param qBreakpoints - Information about the breakpoints.
    */
    setScriptBreakpoints(qBreakpoints: Array<EditorBreakpoint>): Promise<object>;
    /**    Gets values in script.
  
    */
    getScript(): Promise<string>;
    /**    Fetches updated variables after a statement execution.
  
  If qRefSeqNo and qSetSeqNo are set to 0, it means that the variables were not updated.
  
    */
    getTextMacros(): Promise<Array<TextMacro>>;
    /**    Limits the number of rows of data to load from a data source.
  This method works when reloading in debug mode.
  
      @param qLimit - Fetch limit.
  Number of rows to load.
    */
    setFetchLimit(qLimit: number): Promise<object>;
    /**    Saves an app. All objects and data in the data model are saved.
  
      @param qFileName - Name of the file to save.
    */
    doSave(qFileName?: string): Promise<object>;
    /**    Retrieves the data of a specific table.
  
      @param qOffset - Position from the top, starting from 0.
  If the offset is set to 0, the rows starting from the position/index 0 are shown.
      @param qRows - Number of rows to show.
      @param qSyntheticMode - If this parameter is set to true, the internal data/table representation is shown. Synthetic fields are present (if any).
      @param qTableName - Name of the table.
    */
    getTableData(qOffset: number, qRows: number, qSyntheticMode: boolean, qTableName: string): Promise<Array<TableRow>>;
    /**    Evaluates an app.
  Returns dynamic properties (if any) in addition to the engine (fixed) properties.
  A data set is returned.
  
    */
    getAppLayout(): Promise<NxAppLayout>;
    /**    Sets properties to an app.
  The qLastReloadTime, qMigrationHash and qSavedInProductVersion properties does not need to be set but if they are, they should match the current values in the app layout.
  
      @param qProp - Information about the properties of an app.
    */
    setAppProperties(qProp: NxAppProperties): Promise<object>;
    /**    Gets the properties of an app.
  
    */
    getAppProperties(): Promise<NxAppProperties>;
    /**    Gets the lineage information of the app. The lineage information includes the LOAD and STORE statements from the data load script associated with this app.
  An array of lineage information.
  
    */
    getLineage(): Promise<Array<LineageInfo>>;
    /**    Creates a transient object. For example, you can use a transient object to create an app overview or a story overview.
  It is possible to create a transient object that is linked to another object.
  A linked object is an object that points to a linking object. The linking object is defined in the properties of the linked object (in qExtendsId ).
  The linked object has the same properties as the linking object.
  The linking object cannot be a transient object.
  
      @param qProp - Information about the object.
    */
    createSessionObject(qProp: GenericObjectProperties): Promise<GenericObject>;
    /**    Removes a transient object.
  
  The operation is successful if qSuccess is set to true.
  
      @param qId - Identifier of the transient object to remove.
    */
    destroySessionObject(qId: string): Promise<boolean>;
    /**    Creates a generic object at app level. For more information on generic objects, see Generic object.
  It is possible to create a generic object that is linked to another object.
  A linked object is an object that points to a linking object. The linking object is defined in the properties of the linked object (in qExtendsId ).
  The linked object has the same properties as the linking object.
  The linking object cannot be a transient object.
  
      @param qProp - Information about the object.
    */
    createObject(qProp: GenericObjectProperties): Promise<GenericObject>;
    /**    Removes an app object.
  The children of the object (if any) are removed as well.
  
  The operation is successful if qSuccess is set to true.
  
      @param qId - Identifier of the object to remove.
    */
    destroyObject(qId: string): Promise<boolean>;
    /**    Returns the type of the app object and the corresponding handle.
  
      @param qId - Identifier of the object to retrieve.
    */
    getObject(qId: string): Promise<GenericObject>;
    /**    Returns all objects compatible with options.
  
      @param qOptions - Object type filter and requested properties.
    */
    getObjects(qOptions: NxGetObjectOptions): Promise<Array<NxContainerEntry>>;
    /**    Returns all bookmarks compatible with options.
  
      @param qOptions - Bookmark type filter and requested properties.
    */
    getBookmarks(qOptions: NxGetBookmarkOptions): Promise<Array<NxContainerEntry>>;
    /**    Clones root level objects, such as sheets and stories. The CloneObject method works for both app objects and child objects.
  When you clone an object that contains children, the children are cloned as well.
  If you for example want to clone a visualization, you must provide the qID of the root object, in this case the sheet since CloneObject clones root level objects.
  It is not possible to clone a session object.
  
  The identifier is set by the engine.
  
      @param qId - Identifier of the object to clone. The identifier must be a root object.
    */
    cloneObject(qId: string): Promise<string>;
    /**    Creates a draft of an object.
  This method can be used to create a draft of a sheet or a story that is published. This is a way to continue working on a sheet or a story that is published.
  Replace the published object by the content of the draft by invoking the CommitDraft method.
  
  The identifier is set by the engine.
  
      @deprecated
  
      @param qId - Identifier of the object to create a draft from.
    */
    createDraft(qId: string): Promise<string>;
    /**    Commits the draft of an object that was previously created by invoking the CreateDraft method.
  Committing a draft replaces the corresponding published object.
  
      @deprecated
  
      @param qId - Identifier of the draft to commit.
    */
    commitDraft(qId: string): Promise<object>;
    /**    Removes the draft of an object.
  The children of the draft object (if any) are removed as well.
  This method can be used to cancel the work on the draft of an object. For example, if you had created a draft of a sheet that is published, you might not want anymore to replace the published sheet.
  
  The operation is successful if qSuccess is set to true.
  
      @deprecated
  
      @param qId - Identifier of the draft object to remove.
      @param qSourceId - Identifier of the source object (the object from which a draft was created).
    */
    destroyDraft(qId: string, qSourceId: string): Promise<boolean>;
    /**    Undoes the previous operation.
  
  The operation is successful if qSuccess is set to true.
  
    */
    undo(): Promise<boolean>;
    /**    Redoes the previous operation.
  
  The operation is successful if qSuccess is set to true.
  
    */
    redo(): Promise<boolean>;
    /**    Clears entirely the undo and redo buffer.
  
    */
    clearUndoBuffer(): Promise<object>;
    /**    Creates a master dimension.
  A master dimension is stored in the library of an app and can be used in many objects. Several generic objects can contain the same dimension.
  
      @param qProp - Information about the properties.
    */
    createDimension(qProp: GenericDimensionProperties): Promise<GenericDimension>;
    /**    Removes a dimension.
  
  The operation is successful if qSuccess is set to true.
  
      @param qId - Identifier of the dimension to remove.
    */
    destroyDimension(qId: string): Promise<boolean>;
    /**    Returns the handle of a dimension.
  
      @param qId - Identifier of the dimension.
    */
    getDimension(qId: string): Promise<GenericDimension>;
    /**    Clones a dimension.
  
  The identifier is set by the engine.
  
      @param qId - Identifier of the object to clone.
    */
    cloneDimension(qId: string): Promise<string>;
    /**    Creates a master measure.
  A master measure is stored in the library of an app and can be used in many objects. Several generic objects can contain the same measure.
  
      @param qProp - Information about the properties.
    */
    createMeasure(qProp: GenericMeasureProperties): Promise<GenericMeasure>;
    /**    Removes a generic measure.
  
  The operation is successful if qSuccess is set to true.
  
      @param qId - Identifier of the measure to remove.
    */
    destroyMeasure(qId: string): Promise<boolean>;
    /**    Returns the handle of a measure.
  
      @param qId - Identifier of the measure.
    */
    getMeasure(qId: string): Promise<GenericMeasure>;
    /**    Clones a measure.
  
  The identifier is set by the engine.
  
      @param qId - Identifier of the object to clone.
    */
    cloneMeasure(qId: string): Promise<string>;
    /**    Creates a transient variable.
  To set some properties to the variable, use the SetProperties method.
  
   Definition:
  A variable in Qlik Sense is a named entity, containing a data value. This value can be static or be the result of a calculation. A variable acquires its value at the same time that the variable is created or after when updating the properties of the variable. Variables can be used in bookmarks and can contain numeric or alphanumeric data. Any change made to the variable is applied everywhere the variable is used.
  When a variable is used in an expression, it is substituted by its value or the variable's definition.
  
   Example:
  The variable x contains the text string Sum(Sales) .
  In a chart, you define the expression $(x)/12 . The effect is exactly the same as having the chart expression Sum(Sales)/12 .
  However, if you change the value of the variable x to Sum(Budget) , the data in the chart are immediately recalculated with the expression interpreted as Sum(Budget)/12 .
  
      @param qProp - Name of the variable. Variable names are case sensitive.
    */
    createSessionVariable(qProp: GenericVariableProperties): Promise<GenericVariable>;
    /**    Removes a transient variable.
  
  The operation is successful if qSuccess is set to true.
  
      @param qId - Identifier of the variable.
    */
    destroySessionVariable(qId: string): Promise<boolean>;
    /**    Creates a variable.
  To create a variable via a script, you need to use the SetScript method. For more information, see Create a variable.
  To set some properties to the variable, use the SetProperties method.  In a published app, only transient variables can be created. See CreateSessionVariable method.
  
   Definition:
  A variable in Qlik Sense is a named entity, containing a data value. This value can be static or be the result of a calculation. A variable acquires its value at the same time that the variable is created or after when updating the properties of the variable. Variables can be used in bookmarks and can contain numeric or alphanumeric data. Any change made to the variable is applied everywhere the variable is used.
  When a variable is used in an expression, it is substituted by its value or the variable's definition.
  
   Example:
  The variable x contains the text string Sum(Sales) .
  In a chart, you define the expression $(x)/12 . The effect is exactly the same as having the chart expression Sum(Sales)/12 .
  However, if you change the value of the variable x to Sum(Budget) , the data in the chart are immediately recalculated with the expression interpreted as Sum(Budget)/12 .
  
      @param qProp - Name of the variable. Variable names are case sensitive and must be unique.
    */
    createVariableEx(qProp: GenericVariableProperties): Promise<GenericVariable>;
    /**    Removes a variable.
  Script-defined variables cannot be removed using the DestroyVariableById method or the DestroyVariableByName method. For more information, see Remove a variable.
  
  The operation is successful if qSuccess is set to true.
  
      @param qId - Identifier of the variable.
    */
    destroyVariableById(qId: string): Promise<boolean>;
    /**    Removes a variable.
  Script-defined variables cannot be removed using the DestroyVariableById method or the DestroyVariableByName method. For more information, see Remove a variable.
  
  The operation is successful if qSuccess is set to true.
  
      @param qName - Name of the variable.
    */
    destroyVariableByName(qName: string): Promise<boolean>;
    /**    Gets the handle of a variable.
  
      @param qId - Identifier of the variable.
    */
    getVariableById(qId: string): Promise<GenericVariable>;
    /**    Gets the handle of a variable.
  
      @param qName - Name of the variable.
    */
    getVariableByName(qName: string): Promise<GenericVariable>;
    /**    Checks if a given expression is valid.
  The expression is correct if the parameters qErrorMsg , qBadFieldNames and qDangerousFieldNames are empty.
  
      @param qExpr - Expression to check.
      @param qLabels - List of labels.
    */
    checkExpression(qExpr: string, qLabels?: Array<string>): Promise<CheckExpressionReturn>;
    /**    Checks if:
  
  • A given expression is valid.
  
  • A number is correct according to the locale.
  
      @param qExpr - Expression to check.
    */
    checkNumberOrExpression(qExpr: string): Promise<CheckNumberOrExpressionReturn>;
    /**    Adds an alternate state in the app.
  You can create multiple states within a Qlik Sense app and apply these states to specific objects within the app. Objects in a given state are not affected by user selections in the other states.
  
      @param qStateName - Name of the alternate state.
    */
    addAlternateState(qStateName: string): Promise<object>;
    /**    Removes an alternate state in the app.
  
      @param qStateName - Name of the alternate state.
    */
    removeAlternateState(qStateName: string): Promise<object>;
    /**    Adds an session alternate state in the app.
  You can create multiple states within a Qlik Sense app and apply these states to specific objects within the app. Objects in a given state are not affected by user selections in the other states.
  A session alternate state is not persisted and is not included in the StateNames array in the AppLayout.
  You can use the optional second parameter to choose any other state to get the initial selection on the new state from
  
      @param qStateName - Name of the alternate state.
      @param qSourceStateName - Name of existing state to copy the initial selections from
    */
    addSessionAlternateState(qStateName: string, qSourceStateName?: string): Promise<object>;
    /**    Removes an session alternate state in the app.
  The operation is successful if qSuccess is set to true.
  
      @param qStateName - Name of the alternate state.
    */
    removeSessionAlternateState(qStateName: string): Promise<boolean>;
    /**    Creates a bookmark.
  
      @param qProp - Properties for the object.
    */
    createBookmark(qProp: GenericBookmarkProperties): Promise<GenericBookmark>;
    /**    Removes a bookmark.
  The operation is successful if qSuccess is set to true.
  
      @param qId - Identifier of the bookmark.
    */
    destroyBookmark(qId: string): Promise<boolean>;
    /**    Returns the handle of a bookmark.
  
      @param qId - Identifier of the bookmark.
    */
    getBookmark(qId: string): Promise<GenericBookmark>;
    /**    Applies a bookmark.
  The operation is successful if qSuccess is set to true.
  
      @param qId - Identifier of the bookmark.
    */
    applyBookmark(qId: string): Promise<boolean>;
    /**    Applies a bookmark and verifies result dataset against originally selected values.
  The operation is successful if qApplySuccess is set to true. qWarnings lists state and field with unmatching values
  
      @experimental
  
      @param qId - Identifier of the bookmark.
    */
    applyAndVerifyBookmark(qId: string): Promise<BookmarkApplyAndVerifyResult>;
    /**    Clones a bookmark.
  The identifier is set by the engine.
  
      @param qId - Identifier of the object to clone.
    */
    cloneBookmark(qId: string): Promise<string>;
    /**    Adds a field on the fly.
  The expression of a field on the fly is persisted but not its values.
  The operation is successful if qSuccess is set to true.
  
      @param qName - Name of the field.
      @param qExpr - Expression value.
  It is not possible to use all aggregation functions. For example, you cannot add a field on the fly with an expression that uses the Sum or Count aggregation functions.
    */
    addFieldFromExpression(qName: string, qExpr: string): Promise<boolean>;
    /**    Find the field-on-the-fly by passing its readable name.
  
      @param qReadableName - Readable name of the field-on-the-fly.
    */
    getFieldOnTheFlyByName(qReadableName: string): Promise<string>;
    /**    Returns the identifier and the type of any generic object in the app.
  
    */
    getAllInfos(): Promise<Array<NxInfo>>;
    /**    Resumes the app as the user left it.
  
    */
    resume(): Promise<object>;
    /**    Aborts any selection mode in an app. For more information about selection mode, see BeginSelections method.
  
      @param qAccept - Set this parameter to true to accept the selections before exiting the selection mode.
    */
    abortModal(qAccept: boolean): Promise<object>;
    /**    Retrieves any fields that match all of the specified tags or just one of them in the data model of an app.
  Tags set by Qlik Sense are prefixed by the $ sign.
  
      @param qTags - List of tags.
  The GetMatchingFields method looks for fields that match one or all of the tags in this list, depending on the value of qMatchingFieldMode .
      @param qMatchingFieldMode - Matching field mode.
  The default value is MATCHINGFIELDMODE_MATCH_ALL.
  
  One of:
  
  • MATCHINGFIELDMODE_MATCH_ALL
  
  • MATCHINGFIELDMODE_MATCH_ONE
    */
    getMatchingFields(qTags: Array<string>, qMatchingFieldMode?: string): Promise<Array<NxMatchingFieldInfo>>;
    /**    Retrieves any fields that belong to the same archipelago as the specified field and that match at least one of the specified tags.
  Tags set by Qlik Sense are prefixed by the $ sign.
  
      @param qFieldName - Name of the field.
  This method looks for fields that belong to the same archipelago as this specified field.
      @param qTags - List of tags.
  This method looks for fields that match at least one of the tags in this list.
    */
    findMatchingFields(qFieldName: string, qTags: Array<string>): Promise<Array<NxMatchingFieldInfo>>;
    /**    Scrambles a field so the data is not recognizable. Some properties are retained to help debugging. For example, special characters are not changed, and small numbers are scrambled to another small number.
  Update access is required to use the function in Qlik Sense Enterprise.
  
      @param qFieldName - Name of the field to scramble.
    */
    scramble(qFieldName: string): Promise<object>;
    /**    Saves all objects that were modified in the app.
  Data from the data model are not saved. This operation is possible only in Qlik Sense Enterprise.
  
    */
    saveObjects(): Promise<object>;
    /**    Computes a set of association scores for each pair of fields between two given tables that have been loaded in an app.
  When a table contains some synthetic keys, all fields in the synthetic key tables are analyzed against fields in other tables. To denote that a field is a synthetic key, the field name is prefixed by [Synthetic Key]: .
  
      @param qTable1 - Name of the first table.
      @param qTable2 - Name of the second table.
    */
    getAssociationScores(qTable1: string, qTable2: string): Promise<Array<AssociationScore>>;
    /**    Lists the media files.
  
      @deprecated
  
    */
    getMediaList(): Promise<GetMediaListReturn>;
    /**    Lists the content libraries.
  To differentiate a global content library from an app specific content library, you can check the property qAppSpecific . If this property is set to true, it means that the content library is app specific.
  There is always one specific content library per app.
  
   Qlik Sense:
  Returns the global content libraries and the app specific content library.
  When using Qlik Sense, you can have more than one global content library. The global content libraries are common to all apps in the Qlik Sense repository.
  By default, there is one global content library named Default .
  
   Qlik Sense Desktop:
  Returns the global content library and the app specific content library from the disk.
  
    */
    getContentLibraries(): Promise<ContentLibraryList>;
    /**    Returns the content of a library.
  
   Global content library:
  In Qlik Sense Desktop, the content files are retrieved from:
  %userprofile%\Documents\Qlik\Sense\Content\Default
  In Qlik Sense Enterprise, the content files are retrieved from the Qlik Sense repository.
  
   App specific content library:
  The embedded files are returned.
  
      @param qName - Name of the content library.
  It corresponds to the property qContentLibraryListItem/qName returned by the GetContentLibraries method.
    */
    getLibraryContent(qName: string): Promise<StaticContentList>;
    /**    Reloads the script that is set in an app and returns the path to the script log file.
  A log file is created per reload.
  
   Logs:
  When this method is called, audit activity logs are produced to track the user activity.
  In the case of errors, both audit activity logs and system services logs are produced.
  The log files are named as follows:
  | Audit activity log                                                                                                                      | System service log                                                                                                          |
  |-----------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|
  | __AuditActivity_Engine.txt_ in Qlik Sense Enterprise  __AuditActivity_Engine.log_ in Qlik Sense Desktop | __Service_Engine.txt_ in Qlik Sense Enterprise  __Service_Engine.log_ in Qlik Sense Desktop |
  
   Where to find the log files:
  The location of the log files depends on whether you have installed Qlik Sense Enterprise or Qlik Sense Desktop.
  | Qlik Sense Enterprise                 | Qlik Sense Desktop                       |
  |---------------------------------------|------------------------------------------|
  | _%ProgramData%/Qlik/Sense/Log/Engine_ | _%UserProfile%/Documents/Qlik/Sense/Log_ |
  
   DoReloadExParams:
  | Name     | Description                                                                                                                                                                                                                                    | Type    |
  |----------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------|
  | qMode    | Error handling mode  One of:  *   0: for default mode.*   1: for ABEND; the reload of the script ends if an error occurs.*   2: for ignore; the reload of the script continues even if an error is detected in the script. | Integer |
  | qPartial | Set to true for partial reload.  The default value is false.                                                                                                                                                                               | Boolean |
  | qDebug   | Set to true if debug breakpoints are to be honored. The execution of the script will be in debug mode.  The default value is false.                                                                                                        | Boolean |
  
   DoReloadExResult:
  | Name           | Description                                               | Type    |
  |----------------|-----------------------------------------------------------|---------|
  | qSuccess       | The operation is successful if _qSuccess_ is set to True. | Boolean |
  | qScriptLogFile | Path to the script log file.                              | String  |
  
  If the data load has successfully finished, no matter how the indexing behaves, true is returned. This happens even if there is a timeout, a memory limit is reached or any other error occurs during the indexing.
  
      @param qParams
    */
    doReloadEx(qParams?: DoReloadExParams): Promise<DoReloadExResult>;
    /**    Returns the number of entries on the back stack.
  
    */
    backCount(): Promise<number>;
    /**    Returns the number of entries on the Forward stack.
  
    */
    forwardCount(): Promise<number>;
    /**    Applies a bookmark to reduce (slice) the data on. Returns a url and file size to the reduced application. Section Access is always applied.
  This API is only available on Sense Enterprise on Windows
  
      @param qOptions - BookmarkId used to reduced the app on and an expire time.
    */
    exportReducedData(qOptions?: NxDownloadOptions): Promise<NxDownloadInfo>;
    /**    Returns a set analysis expression from active selections or from a saved bookmark. Fields on the fly and Calculated dimensions will not be included in the generated expressions, instead a message indicating 'missing fields' will provided within the expression.
  |                       | BookmarkId empty                     | BookmarkId set                                     |
  |-----------------------|--------------------------------------|----------------------------------------------------|
  |StateName empty (or $) | Default selections state is returned.| Default state ($) in bookmark with id is returned. |
  |StateName set          | State selections is returned.        | State in bookmark with id is returned.             |
  
      @param qStateName - Optional. The name of the state to get set analysis expression for. If left empty, the default state will be retrieved.
      @param qBookmarkId - Optional. The Id of the bookmark to get the set analysis expression for. If left empty, the current selection will be retrieved.
    */
    getSetAnalysis(qStateName?: string, qBookmarkId?: string): Promise<string>;
    /**    Sets values in script.
  
      @param qScript - Script content.
    */
    setScript(qScript: string): Promise<object>;
    /**    Checks the syntax of a script.
  
   Example:
  "result": { "qErrors": [ { "qErrLen": 3, "qTabIx": 0, "qLineInTab": 0, "qColInLine": 0, "qTextPos": 0 }, { "qErrLen": 5, "qTabIx": 0, "qLineInTab": 0, "qColInLine": 1, "qTextPos": 4, "qSecondaryFailure": true } ] }
  The first area is the primary error area, the second area is the secondary error area. The second area is optional and is shown only if qSecondaryFailure is set to true. The second area ends when the next statement in the script begins.
  The list of syntax errors in the script.
  If there are no errors, the engine returns:
  If there are errors, the engine returns the following properties in the response:
  | Name              | Description                                                      | Type    |
  |-------------------|------------------------------------------------------------------|---------|
  | qErrLen           | Length of the word where the error is located.                   | Integer |
  | qTabIx            | Number of the faulty section.                                    | Integer |
  | qLineInTab        | Line number in the section where the error is located.           | Integer |
  | qColInLine        | Position of the erroneous text from the beginning of the line.   | Integer |
  | qTextPos          | Position of the erroneous text from the beginning of the script. | Integer |
  | qSecondaryFailure | The default value is false.                                      | Boolean |
  
    */
    checkScriptSyntax(): Promise<Array<ScriptSyntaxError>>;
    /**    Retrieves the variables that are tagged as favorite.
  
    */
    getFavoriteVariables(): Promise<Array<string>>;
    /**    Set some variables as favorite.
  
      @param qNames - Variables to set as favorite.
    */
    setFavoriteVariables(qNames: Array<string>): Promise<object>;
    /**    Gets the content of a file.
  
      @param qPath - ["lib://CONNECTION_NAME\\\<the name of the file you want to use>.txt"]
  OR
  ["lib://Connection_Name\\\<Folder under your connection>\\\<the name of the file you want to use>.txt"]
  [ ] should be used when the first variable contains a lib reference.
    */
    getIncludeFileContent(qPath: string): Promise<string>;
    /**    Creates a connection.
  A connection indicates from which data source the data should be taken.
  
      @param qConnection - Information about the connection.
    */
    createConnection(qConnection: Connection): Promise<string>;
    /**    Updates a connection.
  The identifier of a connection cannot be updated. qType cannot be modified with the ModifyConnection method.
  
      @param qConnectionId - Identifier of the connection.
      @param qConnection - Information about the connection.
  Properties that can be updated.
      @param qOverrideCredentials - Set this parameter to true to override the user name and password.
    */
    modifyConnection(qConnectionId: string, qConnection: Connection, qOverrideCredentials?: boolean): Promise<object>;
    /**    Deletes a connection.
  In Qlik Sense Enterprise, there is an additional file connection named AttachedFiles . The AttachedFiles connection can only be removed by the administrator of the system.
  
      @param qConnectionId - Identifier of the connection to remove.
    */
    deleteConnection(qConnectionId: string): Promise<object>;
    /**    Retrieves a connection and returns:
  
  • The creation time of the connection.
  
  • The identifier of the connection.
  
  • The type of the connection.
  
  • The name of the connection.
  
  • The connection string.
  
      @param qConnectionId - Identifier of the connection.
    */
    getConnection(qConnectionId: string): Promise<Connection>;
    /**    Lists the connections in an app.
  In Qlik Sense Enterprise, there is an additional file connection named AttachedFiles . This connection is stored in the Qlik Sense repository.
  
    */
    getConnections(): Promise<Array<Connection>>;
    /**    Gives information about an ODBC, OLEDB or CUSTOM connection. See Outputs for more details.
  
      @param qConnectionId - Name of the connection.
    */
    getDatabaseInfo(qConnectionId: string): Promise<DatabaseInfo>;
    /**    Lists the databases inside a ODBC, OLEDB or CUSTOM data source.
  
      @param qConnectionId - Identifier of the connection.
    */
    getDatabases(qConnectionId: string): Promise<Array<Database>>;
    /**    Lists the owners of a database for a ODBC, OLEDB or CUSTOM connection.
  
      @param qConnectionId - Identifier of the connection.
      @param qDatabase - Name of the database.
    */
    getDatabaseOwners(qConnectionId: string, qDatabase?: string): Promise<Array<DatabaseOwner>>;
    /**    Lists the tables inside a database for a ODBC, OLEDB or CUSTOM connection.
  
      @param qConnectionId - Identifier of the connection.
      @param qDatabase - Name of the database.
  If qDatabase is not set then qOwner must be set.
      @param qOwner - Owner of the database.
  If qOwner is not set then qDatabase must be set.
    */
    getDatabaseTables(qConnectionId: string, qDatabase?: string, qOwner?: string): Promise<Array<DataTable>>;
    /**    Lists the fields inside a table of a database for a ODBC, OLEDB or CUSTOM connection.
  
      @param qConnectionId - Identifier of the connection.
      @param qDatabase - Name of the database.
  If qDatabase is not set then qOwner must be set.
      @param qOwner - Owner of the database.
  If qOwner is not set then qDatabase must be set.
      @param qTable - Name of the table.
    */
    getDatabaseTableFields(qConnectionId: string, qTable: string, qDatabase?: string, qOwner?: string): Promise<Array<DataField>>;
    /**    Retrieves the values of the specified table of a database for a ODBC, OLEDB or CUSTOM connection.
  
      @param qConnectionId - Identifier of the connection.
      @param qDatabase - Name of the database.
  If qDatabase is not set then qOwner must be set.
      @param qOwner - Owner of the database.
  If qOwner is not set then qDatabase must be set.
      @param qTable - Name of the table.
      @param qConditions
    */
    getDatabaseTablePreview(qConnectionId: string, qTable: string, qDatabase?: string, qOwner?: string, qConditions?: FilterInfo): Promise<GetDatabaseTablePreviewReturn>;
    /**    Lists the items for a folder connection.
  
      @param qConnectionId - Identifier of the connection.
      @param qRelativePath - Relative path of the connection.
    */
    getFolderItemsForConnection(qConnectionId: string, qRelativePath?: string): Promise<Array<FolderItem>>;
    /**    Guesses the data format for a given file.
  Recognized file formats are:
  
  • CSV for Delimited
  
  • FIX for Fixed Record
  
  • DIF for Data Interchange Format
  
  • EXCEL_BIFF for Microsoft Excel (XLS)
  
  • EXCEL_OOXML for Microsoft Excel (XLSX)
  
  • HTML for HTML
  
  • QVD for QVD file
  
  • XML for XML
  
  • QVX for QVX file
  
  • JSON for JSON format
  
  • KML for KML file
  
  • PARQUET for PARQUET file
  
   FileType:
  Recognized file formats are:
  
  • CSV for Delimited
  
  • FIX for Fixed Record
  
  • DIF for Data Interchange Format
  
  • EXCEL_BIFF for Microsoft Excel (XLS)
  
  • EXCEL_OOXML for Microsoft Excel (XLSX)
  
  • HTML for HTML
  
  • QVD for QVD file
  
  • XML for XML
  
  • QVX for QVX file
  
  • JSON for JSON format
  
  • KML for KML file
  
  • PARQUET for PARQUET file
  
      @param qConnectionId - Identifier of the connection file.
      @param qRelativePath - Path of the connection file.
    */
    guessFileType(qConnectionId: string, qRelativePath?: string): Promise<FileDataFormat>;
    /**    Lists the tables for a folder connection.
  
   FileType:
  Recognized file formats are:
  
  • CSV for Delimited
  
  • FIX for Fixed Record
  
  • DIF for Data Interchange Format
  
  • EXCEL_BIFF for Microsoft Excel (XLS)
  
  • EXCEL_OOXML for Microsoft Excel (XLSX)
  
  • HTML for HTML
  
  • QVD for QVD file
  
  • XML for XML
  
  • QVX for QVX file
  
  • JSON for JSON format
  
  • KML for KML file
  
  • PARQUET for PARQUET file
  
      @param qConnectionId - Identifier of the connection.
      @param qRelativePath - Path of the connection file.
      @param qDataFormat - Type of the file.
    */
    getFileTables(qConnectionId: string, qDataFormat: FileDataFormat, qRelativePath?: string): Promise<Array<DataTable>>;
    /**    Lists the fields of a table for a folder connection.
  
   FileType:
  Recognized file formats are:
  
  • CSV for Delimited
  
  • FIX for Fixed Record
  
  • DIF for Data Interchange Format
  
  • EXCEL_BIFF for Microsoft Excel (XLS)
  
  • EXCEL_OOXML for Microsoft Excel (XLSX)
  
  • HTML for HTML
  
  • QVD for QVD file
  
  • XML for XML
  
  • QVX for QVX file
  
  • JSON for JSON format
  
  • KML for KML file
  
  • PARQUET for PARQUET file
  
      @param qConnectionId - Identifier of the connection.
      @param qRelativePath - Path of the connection file.
      @param qDataFormat - Type of the file.
      @param qTable - Name of the table.
  This parameter must be set for XLS , XLSX , HTML  _ and _XML files.
    */
    getFileTableFields(qConnectionId: string, qDataFormat: FileDataFormat, qTable: string, qRelativePath?: string): Promise<GetFileTableFieldsReturn>;
    /**    Lists the values in a table for a folder connection.
  
   FileType:
  Recognized file formats are:
  
  • CSV for Delimited
  
  • FIX for Fixed Record
  
  • DIF for Data Interchange Format
  
  • EXCEL_BIFF for Microsoft Excel (XLS)
  
  • EXCEL_OOXML for Microsoft Excel (XLSX)
  
  • HTML for HTML
  
  • QVD for QVD file
  
  • XML for XML
  
  • QVX for QVX file
  
  • JSON for JSON format
  
  • KML for KML file
  
  • PARQUET for PARQUET file
  
      @param qConnectionId - Identifier of the connection.
      @param qRelativePath - Path of the connection file.
      @param qDataFormat - Type of the file.
      @param qTable - Name of the table.
  This parameter must be set for XLS , XLSX , HTML  _ and _XML files.
    */
    getFileTablePreview(qConnectionId: string, qDataFormat: FileDataFormat, qTable: string, qRelativePath?: string): Promise<GetFileTablePreviewReturn>;
    /**    Lists the tables and fields of a JSON or XML file for a folder connection.
  
      @param qConnectionId - Identifier of the connection.
      @param qRelativePath - Path of the connection file.
      @param qDataFormat - Type of the file.
    */
    getFileTablesEx(qConnectionId: string, qDataFormat: FileDataFormat, qRelativePath?: string): Promise<Array<DataTableEx>>;
    /**    Sends a generic command to a custom connector.
  For more information on the commands that can be sent to a custom connector, see the QVX SDK help.
  
      @param qProvider - Connector file name.
  Command to be executed by the connector.
      @param qCommand - One of:
  
  • JsonRequest
  
  • GetCustomCaption
  
  • IsConnected
  
  • DisableQlikViewSelectButton
  
  • HaveStarField
      @param qMethod - Method name to be used within the command.
  The available methods depend on the chosen connector.
      @param qParameters - Parameters of the command.
  No parameters are required.
      @param qAppendConnection - Name of the connection.
    */
    sendGenericCommandToCustomConnector(qProvider: string, qCommand: string, qMethod: string, qParameters: Array<string>, qAppendConnection: string): Promise<string>;
    /**    Returns search terms suggestions.
  
      @param qOptions - Information about the search combinations.
      @param qTerms - Terms to search for.
    */
    searchSuggest(qOptions: SearchCombinationOptions, qTerms: Array<string>): Promise<SearchSuggestionResult>;
    /**    Returns the search matches for one or more search terms.
  The search results depend on the search context.
  SearchCombinationOptions
  
   SearchMatchCombinations:
  | Name                     | Description                   | Type                              |
  |--------------------------|-------------------------------|-----------------------------------|
  | qSearchMatchCombinations | Array of search combinations. | Array of _SearchMatchCombination_ |
  
      @deprecated
  
      @param qOptions - Information about the search fields and the search context.
      @param qTerms - List of terms to search for.
      @param qPage - Array of pages to retrieve.
    */
    searchAssociations(qOptions: SearchCombinationOptions, qTerms: Array<string>, qPage: SearchPage): Promise<SearchAssociationResult>;
    /**    Selects all search hits for a specified group.
  The results depend on the search context.
  SearchCombinationOptions.
  
      @param qOptions - Information about the search fields and the search context.
      @param qTerms - List of terms to search for.
      @param qMatchIx - Index (value of qId ) of the search result to select.
      @param qSoftLock - This parameter is deprecated and should not be set.
    */
    selectAssociations(qOptions: SearchCombinationOptions, qTerms: Array<string>, qMatchIx: number, qSoftLock?: boolean): Promise<object>;
    /**    Returns the search matches for one or more search terms.
  Search results are organized in search groups. The type of search group indicates where the search matches come from (from data for example).
  Each search group contains search results that correspond to a combination of search terms.
  For example, if the search terms are organic , pasta , and America , the possible combination of search groups are:
  
  • organic
  
  • pasta
  
  • America
  
  • organic, pasta, America
  
  • organic, pasta
  
  • organic, America
  
  • pasta, America
  
  For every search group, there are one or more search group items. Each subgroup item contains results that correspond to an item type (for example a field).
  For every search group item, there are one or several search matches. The position of the match in each search result is given.
  
      @param qOptions - Information about the search combinations.
      @param qTerms - Terms to search for.
      @param qPage - Array of pages to retrieve.
    */
    searchResults(qOptions: SearchCombinationOptions, qTerms: Array<string>, qPage: SearchPage): Promise<SearchResult>;
    /**    Returns the generic objects corresponding to one or more search terms. The search is performed within the title, subtitle, footnote and type. In addition, associated dimension values are also searched in. For example, if the country “Japan” is selected and the object contains the dimension City, the object will appear in the results for “Osaka” but not for “Johannesburg”. The generic objects with the following types will never appear in the results: slideitem , sheet , story , slide , masterobject , snapshot , LoadModel , appprops and searchhistory .
  
      @param qOptions - Information about attributes.
      @param qTerms - Terms to search for.
      @param qPage - Array of pages to retrieve.
    */
    searchObjects(qOptions: SearchObjectOptions, qTerms: Array<string>, qPage: SearchPage): Promise<SearchResult>;
    /**    Get sample values from either a column in a table or from a field.
  Supports wildcard matches in tables or field names:
  - '*' for zero or more characters.
  - '?' for one character.
  
      @param qFieldsOrColumnsWithWildcards - Pairs of table (optionally) and field names. Support wildcard matches.
      @param qMaxNumberOfValues - Max number of sample values returned. Depending on the column or field size the number of returned samples can be less than MaxNumberOfValues. If MaxNumberOfValues is negative all sample values are returned.
      @param qRandSeed - Optional. Sets the random number seed. Should only be set for test purposes.
    */
    getFieldAndColumnSamples(qFieldsOrColumnsWithWildcards: Array<FieldOrColumn>, qMaxNumberOfValues: number, qRandSeed?: number): Promise<Array<SampleResult>>;
    /**    Gets script and script meta-data.
  
    */
    getScriptEx(): Promise<AppScript>;
    /**
  
      @param qListDef
    */
    getVariables(qListDef: VariableListDef): Promise<Array<NxVariableListItem>>;
    /**    Expands the expression.
  
      @param qExpression - The expression string to expand.
    */
    expandExpression(qExpression: string): Promise<string>;
    /**    Removes a transient variable.
  
  qSuccess is set to true if the operation is successful.
  
      @param qId - Identifier of the variable.
    */
    destroySessionVariableById(qId: string): Promise<boolean>;
    /**    Removes a transient variable.
  
  qSuccess is set to true if the operation is successful.
  
      @param qName - Name of the variable.
    */
    destroySessionVariableByName(qName: string): Promise<boolean>;
    /**    Creates a bookmark with softpatches.
  
      @experimental
  
      @param qProp - Properties for the object.
      @param qObjectIdsToPatch - Add softpatches for this objects if available. If empty all softpatches are added to the bookmark.
    */
    createBookmarkEx(qProp: GenericBookmarkProperties, qObjectIdsToPatch?: Array<string>): Promise<GenericBookmark>;
    /**    Save a copy of an app with a different name.
  Can be used to save a session app as an ordinary app.
  
      @param qNewAppName - <Name of the saved app>
    */
    saveAs(qNewAppName: string): Promise<string>;
    /**    Store current selection state temporarily.
  The temporary selection state will be stored for 30min by default if TTL parameter is not present or positive.
  StoreTempSelectionState method is only supported in SaaS Editions of Qlik Sense.
  
      @param qTTLOfTempState - Time to live in seconds for stored selection state
    */
    storeTempSelectionState(qTTLOfTempState?: number): Promise<StoreTempSelectionStateReturn>;
    /**    Restore a temporary selection state identified by Id.
  RestoreTempSelectionState method is only supported in SaaS Editions of Qlik Sense.
  
      @param qId - Identifier of the temporary selection state
    */
    restoreTempSelectionState(qId: string): Promise<boolean>;
    /**    Change the owner of a session app.
  Can be used by a privileged user when creating a session app to be consumed by another user.
  Only useful in environments where it is possible to reconnect to a session app, currently only in cloud deployments.
  
      @experimental
  
      @param qNewOwnerId - Identifier of the new app owner.
    */
    changeSessionAppOwner(qNewOwnerId: string): Promise<boolean>;
    /**    Add a session app to a space.
  Can be used by a privileged user when creating a session app to be consumed by other users.
  Only useful in environments where it is possible to reconnect to a session app, currently only in cloud deployments.
  
      @experimental
  
      @param qSpaceId - Identifier of the new space.
    */
    changeSessionAppSpace(qSpaceId: string): Promise<boolean>;
    /**    Returns profile data for a given table.
  
      @experimental
  
      @param qTableName - Name of the table
    */
    getTableProfileData(qTableName: string): Promise<TableProfilingData>;
    /**    Returns the handle of a measure with a label.
  If multiple measures has the same label the first is returned.
  
      @param qLabel - is the label of the measure to be returned.
    */
    getMeasureWithLabel(qLabel: string): Promise<GenericMeasure>;
    /**
  
      @experimental
  
      @param qOptions
      @param qTerms
      @param qPage
    */
    searchValues(qOptions: SearchValueOptions, qTerms: Array<string>, qPage: SearchValuePage): Promise<SearchValueResult>;
    /**    Retrives any fields from an expression.
  
      @param qExpr - Expression to get fields from.
    */
    getFieldsFromExpression(qExpr: string): Promise<Array<string>>;
    /**    Returns a list of resource ids (QRI) for fields that belongs to the datamodel.
  Key fields (that belongs to multiple tables), returns one resource identifier per table.
  GetFieldsResourceIds method is only supported in SaaS Editions of Qlik Sense.
  
      @param qFieldNames - List of fields names that resource ids should be returned from.
    */
    getFieldsResourceIds(qFieldNames: Array<string>): Promise<Array<NxFieldResourceId>>;
    /**    Gets the current Backus-Naur Form (BNF) grammar of the Qlik chart expressions supported within a given App.
  
      @experimental
  
    */
    getExpressionBNF(): Promise<GetExpressionBNFReturn>;
    /**    Gets a string hash calculated from the current Backus-Naur Form (BNF) grammar  of the Qlik chart expressions supported within a given App.
  
      @experimental
  
    */
    getExpressionBNFHash(): Promise<string>;
    /**    Prohibit binary load of this app.
  An app with prohibit binary load set cannot be loaded binary. For the setting to have effect a save is required.
  
      @param qProhibit - True or false.
    */
    setProhibitBinaryLoad(qProhibit: boolean): Promise<object>;
    /**    Transform current app into an instance of the targeted mode
  
      @param qDstParameters - Attributes that should be set in the new app.
    */
    transformApp(qDstParameters: TransformAppParameters): Promise<TransformAppResult>;
    /**    Create temporary bookmark
  CreateTemporaryBookmark method is only supported in SaaS Editions of Qlik Sense.
  
      @experimental
  
      @param qOptions - Options for the temporary bookmark
      @param qObjectIdsToPatch - Add softpatches for this objects if available. If empty all softpatches are added to the bookmark. This is ignored if IncludePatches is false.
    */
    createTemporaryBookmark(qOptions: NxTempBookmarkOptions, qObjectIdsToPatch?: Array<string>): Promise<CreateTemporaryBookmarkReturn>;
    /**    Apply temporary bookmark identified by Id.
  ApplyTemporaryBookmark method is only supported in SaaS Editions of Qlik Sense.
  
      @experimental
  
      @param qId - Identifier of the temporary selection state
    */
    applyTemporaryBookmark(qId: string): Promise<boolean>;
    /**    Commits the current script version so that any future changes will be part of a new version.
  
      @experimental
  
      @param qCommitMessage - Name of the version.
   Only applicable to QCS.
    */
    commitScript(qCommitMessage?: string): Promise<object>;
    /** Establishes the websocket against the configured URL. Eventually resolved with
     * the QIX global interface when the connection has been established.
     *
     * @example
     * ```js
     * await app.open();
     * const script = 'Load RecNo() as N autogenerate(100);';
     * await app.setScript(script);
     * await app.doReload();
     * ```
     */
    open(): Promise<RpcSession>;
    /** Closes the websocket and cleans up internal caches, also triggers the closed
     * event on all generated APIs. Eventually resolved when the websocket has been closed.
     *
     * @example
     * ```js
     * await app.close();
     * ```
     */
    close(): Promise<void>;
}
/**
  @param qConnectedUsers - Not used.
  @param qDocId - Identifier of the app.

• In Qlik Sense Desktop, the identifier is the path and name of the app.

• In Qlik Sense Enterprise, the identifier is the app's GUID.
  @param qDocName - Name of the app.
  @param qFileSize - Size of remote app.
This property is used only with Qlik Sense Desktop.
It is set to 0 for Qlik Sense Enterprise.
  @param qFileTime - Last modified time stamp of the app.
This property is used only with Qlik Sense Desktop.
It is set to 0 for Qlik Sense Enterprise.
  @param qHasSectionAccess - If true the app has section access configured.
  @param qIsDirectQueryMode - Is the app a Direct Query app?
  @param qLastReloadTime - Last reload time of the app.
  @param qMeta - Meta data related to the app.
  @param qReadOnly - If set to true, the app is read-only.
  @param qThumbnail - Thumbnail of the app.
  @param qTitle - Title of the app.
  @param auth - Auth object used to make requests
 */
export declare class DocListEntry {
    auth?: Auth;
    qConnectedUsers?: number;
    qDocId?: string;
    qDocName?: string;
    qFileSize?: number;
    qFileTime?: number;
    qHasSectionAccess?: boolean;
    qIsDirectQueryMode?: boolean;
    qLastReloadTime?: string;
    qMeta?: NxMeta;
    qReadOnly?: boolean;
    qThumbnail?: StaticContentUrl;
    qTitle?: string;
    [key: string]: any;
    constructor({ qConnectedUsers, qDocId, qDocName, qFileSize, qFileTime, qHasSectionAccess, qIsDirectQueryMode, qLastReloadTime, qMeta, qReadOnly, qThumbnail, qTitle, ...rest }: {
        qConnectedUsers?: number;
        qDocId?: string;
        qDocName?: string;
        qFileSize?: number;
        qFileTime?: number;
        qHasSectionAccess?: boolean;
        qIsDirectQueryMode?: boolean;
        qLastReloadTime?: string;
        qMeta?: NxMeta;
        qReadOnly?: boolean;
        qThumbnail?: StaticContentUrl;
        qTitle?: string;
    }, auth?: Auth);
}
/**
  @param qDrive - Value of the drive.
Examples:
C:\\\, E:\\\
  @param qName - Name of the drive.
  @param qType - Type of the drive.
Fixed means physical drive.
  @param qTypeIdentifier - Information about the drive type.

One of:

• REMOVABLE

• FIXED

• NETWORK

• CD_ROM

• RAM

• UNKNOWN_TYPE
  @param qUnnamedDrive
  @param auth - Auth object used to make requests
 */
export declare class DriveInfo {
    auth?: Auth;
    qDrive?: string;
    qName?: string;
    qType?: string;
    qTypeIdentifier?: 'REMOVABLE' | 'FIXED' | 'NETWORK' | 'CD_ROM' | 'RAM' | 'UNKNOWN_TYPE' | string;
    qUnnamedDrive?: boolean;
    [key: string]: any;
    constructor({ qDrive, qName, qType, qTypeIdentifier, qUnnamedDrive, ...rest }: {
        qDrive?: string;
        qName?: string;
        qType?: string;
        qTypeIdentifier?: 'REMOVABLE' | 'FIXED' | 'NETWORK' | 'CD_ROM' | 'RAM' | 'UNKNOWN_TYPE' | string;
        qUnnamedDrive?: boolean;
    }, auth?: Auth);
}
export declare class DriveType {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qEnabled - If set to true then the breakpoint is enabled (in use).
  @param qbufferName - Name of the breakpoint.
  @param qlineIx - Line number in the script where the breakpoint is set.
  @param auth - Auth object used to make requests
 */
export declare class EditorBreakpoint {
    auth?: Auth;
    qEnabled?: boolean;
    qbufferName?: string;
    qlineIx?: number;
    [key: string]: any;
    constructor({ qEnabled, qbufferName, qlineIx, ...rest }: {
        qEnabled?: boolean;
        qbufferName?: string;
        qlineIx?: number;
    }, auth?: Auth);
}
/**
  Renders the embedded snapshot in an object.
The following is returned:

• Any dynamic properties defined in the bookmark

• Any properties defined in qEmbeddedSnapshot

 Properties:
"qEmbeddedSnapshot": {}

  @param auth - Auth object used to make requests
 */
export declare class EmbeddedSnapshot {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  Defines the embedded snapshot in a generic object.

 Properties:
"EmbeddedSnapshotDef": {}

  @param auth - Auth object used to make requests
 */
export declare class EmbeddedSnapshotDef {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qErrorDataCode - Type of the error messages.

One of:

• EDC_ERROR

• EDC_WARNING

• EDC_CIRCULAR_REFERENCE
  @param qErrorString - Detailed information about the error message.
  @param qLine - Script statement where the error occurs.
  @param qLineEnd - Line termination characters.
  @param qMessage
  @param auth - Auth object used to make requests
 */
export declare class ErrorData {
    auth?: Auth;
    qErrorDataCode?: 'EDC_ERROR' | 'EDC_WARNING' | 'EDC_CIRCULAR_REFERENCE' | string;
    qErrorString?: string;
    qLine?: string;
    qLineEnd?: string;
    qMessage?: ProgressMessage;
    [key: string]: any;
    constructor({ qErrorDataCode, qErrorString, qLine, qLineEnd, qMessage, ...rest }: {
        qErrorDataCode?: 'EDC_ERROR' | 'EDC_WARNING' | 'EDC_CIRCULAR_REFERENCE' | string;
        qErrorString?: string;
        qLine?: string;
        qLineEnd?: string;
        qMessage?: ProgressMessage;
    }, auth?: Auth);
}
export declare class ErrorDataCode {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qExcludeList
  @param qPos
  @param auth - Auth object used to make requests
 */
export declare class ExpansionData {
    auth?: Auth;
    qExcludeList?: boolean;
    qPos?: PositionMark;
    [key: string]: any;
    constructor({ qExcludeList, qPos, ...rest }: {
        qExcludeList?: boolean;
        qPos?: PositionMark;
    }, auth?: Auth);
}
/**
  @param qUrl
  @param qWarnings
  @param auth - Auth object used to make requests
 */
export declare class ExportDataReturn {
    auth?: Auth;
    qUrl?: string;
    qWarnings?: Array<number>;
    [key: string]: any;
    constructor({ qUrl, qWarnings, ...rest }: {
        qUrl?: string;
        qWarnings?: Array<number>;
    }, auth?: Auth);
}
/**
  @param qActive
  @param qActiveContainerChildObjectId
  @param qDimensionGroupPos
  @param qExpansionInfo
  @param qExpressionGroupPos
  @param qExtendedPivotState
  @param qGraphMode -
One of:

• GRAPH_MODE_BAR

• GRAPH_MODE_PIE

• GRAPH_MODE_PIVOTTABLE

• GRAPH_MODE_SCATTER

• GRAPH_MODE_LINE

• GRAPH_MODE_STRAIGHTTABLE

• GRAPH_MODE_COMBO

• GRAPH_MODE_RADAR

• GRAPH_MODE_GAUGE

• GRAPH_MODE_GRID

• GRAPH_MODE_BLOCK

• GRAPH_MODE_FUNNEL

• GRAPH_MODE_MEKKO

• GRAPH_MODE_LAST
  @param qId
  @param qLeftCollapsed
  @param qScrollPos
  @param qShowMode
  @param qSortData
  @param qTopCollapsed
  @param qUseGraphMode
  @param auth - Auth object used to make requests
 */
export declare class ExtendedLayoutBookmarkData {
    auth?: Auth;
    qActive?: boolean;
    qActiveContainerChildObjectId?: string;
    qDimensionGroupPos?: Array<GroupStateInfo>;
    qExpansionInfo?: Array<ExpansionData>;
    qExpressionGroupPos?: Array<GroupStateInfo>;
    qExtendedPivotState?: ExtendedPivotStateData;
    qGraphMode?: 'GRAPH_MODE_BAR' | 'GRAPH_MODE_PIE' | 'GRAPH_MODE_PIVOTTABLE' | 'GRAPH_MODE_SCATTER' | 'GRAPH_MODE_LINE' | 'GRAPH_MODE_STRAIGHTTABLE' | 'GRAPH_MODE_COMBO' | 'GRAPH_MODE_RADAR' | 'GRAPH_MODE_GAUGE' | 'GRAPH_MODE_GRID' | 'GRAPH_MODE_BLOCK' | 'GRAPH_MODE_FUNNEL' | 'GRAPH_MODE_MEKKO' | 'GRAPH_MODE_LAST' | string;
    qId?: string;
    qLeftCollapsed?: boolean;
    qScrollPos?: ScrollPosition;
    qShowMode?: number;
    qSortData?: Array<InterFieldSortData>;
    qTopCollapsed?: boolean;
    qUseGraphMode?: boolean;
    [key: string]: any;
    constructor({ qActive, qActiveContainerChildObjectId, qDimensionGroupPos, qExpansionInfo, qExpressionGroupPos, qExtendedPivotState, qGraphMode, qId, qLeftCollapsed, qScrollPos, qShowMode, qSortData, qTopCollapsed, qUseGraphMode, ...rest }: {
        qActive?: boolean;
        qActiveContainerChildObjectId?: string;
        qDimensionGroupPos?: Array<GroupStateInfo>;
        qExpansionInfo?: Array<ExpansionData>;
        qExpressionGroupPos?: Array<GroupStateInfo>;
        qExtendedPivotState?: ExtendedPivotStateData;
        qGraphMode?: 'GRAPH_MODE_BAR' | 'GRAPH_MODE_PIE' | 'GRAPH_MODE_PIVOTTABLE' | 'GRAPH_MODE_SCATTER' | 'GRAPH_MODE_LINE' | 'GRAPH_MODE_STRAIGHTTABLE' | 'GRAPH_MODE_COMBO' | 'GRAPH_MODE_RADAR' | 'GRAPH_MODE_GAUGE' | 'GRAPH_MODE_GRID' | 'GRAPH_MODE_BLOCK' | 'GRAPH_MODE_FUNNEL' | 'GRAPH_MODE_MEKKO' | 'GRAPH_MODE_LAST' | string;
        qId?: string;
        qLeftCollapsed?: boolean;
        qScrollPos?: ScrollPosition;
        qShowMode?: number;
        qSortData?: Array<InterFieldSortData>;
        qTopCollapsed?: boolean;
        qUseGraphMode?: boolean;
    }, auth?: Auth);
}
/**
  @param qDimensionNames
  @param qEnableConditions
  @param qExpressionPosition
  @param qNumberOfLeftDimensions
  @param auth - Auth object used to make requests
 */
export declare class ExtendedPivotStateData {
    auth?: Auth;
    qDimensionNames?: Array<string>;
    qEnableConditions?: Array<string>;
    qExpressionPosition?: number;
    qNumberOfLeftDimensions?: number;
    [key: string]: any;
    constructor({ qDimensionNames, qEnableConditions, qExpressionPosition, qNumberOfLeftDimensions, ...rest }: {
        qDimensionNames?: Array<string>;
        qEnableConditions?: Array<string>;
        qExpressionPosition?: number;
        qNumberOfLeftDimensions?: number;
    }, auth?: Auth);
}
/**
  Obsolete, use qrs API's to fetch extensions.
  @param qItems
  @param auth - Auth object used to make requests
 */
export declare class ExtensionList {
    auth?: Auth;
    qItems?: Array<string>;
    [key: string]: any;
    constructor({ qItems, ...rest }: {
        qItems?: Array<string>;
    }, auth?: Auth);
}
/**
  Obsolete, use qrs API's to fetch extensions.

  @param auth - Auth object used to make requests
 */
export declare class ExtensionListDef {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qGenericId - Object ID.
  @param qGenericType - The type of the object.
  @param qHandle - The handle used to connect to object.
  @param qType - The native type of the object.
  @param auth - Auth object used to make requests
 */
export declare class Field {
    session: RpcSession;
    auth: Auth;
    qGenericId?: string;
    qGenericType?: string;
    qHandle?: number;
    qType?: string;
    [key: string]: any;
    constructor({ qGenericId, qGenericType, qHandle, qType, ...rest }: {
        qGenericId?: string;
        qGenericType?: string;
        qHandle?: number;
        qType?: string;
    }, session: RpcSession, auth?: Auth);
    /**    Retrieves the number of distinct values in a field.
  
    */
    getCardinal(): Promise<number>;
    /**    Returns the AND mode status of a field.
  
    */
    getAndMode(): Promise<boolean>;
    /**    Selects some values in a field, by entering the values to select.
  
      @param qFieldValues - List of the values to select.
      @param qToggleMode - The default value is false.
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false.
    */
    selectValues(qFieldValues: Array<FieldValue>, qToggleMode?: boolean, qSoftLock?: boolean): Promise<boolean>;
    /**    Selects field values matching a search string.
  
      @param qMatch - String to search for.
  Can contain wild cards or numeric search criteria.
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false.
      @param qExcludedValuesMode - Include excluded values in search.
    */
    select(qMatch: string, qSoftLock?: boolean, qExcludedValuesMode?: number): Promise<boolean>;
    /**    Toggle selects field values matching a search string.
  
      @param qMatch - String to search for.
  Can contain wild cards or numeric search criteria.
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false.
      @param qExcludedValuesMode - Include excluded values in search.
    */
    toggleSelect(qMatch: string, qSoftLock?: boolean, qExcludedValuesMode?: number): Promise<boolean>;
    /**    Maintains the selections in the current field while clearing the selections in the other fields.
  
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false.
    */
    clearAllButThis(qSoftLock?: boolean): Promise<boolean>;
    /**    Selects all possible values in a specific field.
  
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false.
    */
    selectPossible(qSoftLock?: boolean): Promise<boolean>;
    /**    Inverts the current selections.
  
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false.
    */
    selectExcluded(qSoftLock?: boolean): Promise<boolean>;
    /**    Selects all values of a field. Excluded values are also selected.
  
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false.
    */
    selectAll(qSoftLock?: boolean): Promise<boolean>;
    /**    Locks all selected values of a specific field.
  
    */
    lock(): Promise<boolean>;
    /**    Unlocks all selected values of a specific field if the target (or handle ) is a field.
  
    */
    unlock(): Promise<boolean>;
    /**    Gets the properties of a field.
  
  The property OneAndOnlyOne is set to true if one and only value has been selected in the field prior setting the property.
  
    */
    getNxProperties(): Promise<NxFieldProperties>;
    /**    Sets some properties to a field.
  
      @param qProperties - Information about the properties of the field.
    */
    setNxProperties(qProperties: NxFieldProperties): Promise<object>;
    /**    Sets a field in the AND mode.
  
      @param qAndMode - Specifies if the AND mode applies to the field.
  Set this parameter to true to enter the AND mode.
    */
    setAndMode(qAndMode: boolean): Promise<object>;
    /**    Selects all alternatives values in a specific field.
  In a field that contains at least one selected value, the values that are neither selected nor excluded are alternatives values.
  
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false.
    */
    selectAlternative(qSoftLock?: boolean): Promise<boolean>;
    /**    Selects some values in a field, by entering the element numbers related to the values to select.
  
      @param qValues - Indexes (or element numbers) of the values to select.
      @param qToggleMode - Set to true to keep any selections present in the list object.
  If this parameter is set to false, selections made before accepting the list object search become alternative.
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false.
    */
    lowLevelSelect(qValues: Array<number>, qToggleMode: boolean, qSoftLock?: boolean): Promise<boolean>;
    /**    Clears the selections in a specific field.
  
    */
    clear(): Promise<boolean>;
}
export declare class FieldAttrType {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  Sets the formatting of a field.
The properties of qFieldAttributes and the formatting mechanism are described below.

 Formatting mechanism:
The formatting mechanism depends on the type set in qType, as shown below:
In case of inconsistencies between the type and the format pattern, the format pattern takes precedence over the type.

 Type is DATE, TIME, TIMESTAMP or INTERVAL:
The following applies:

• If a format pattern is defined in qFmt , the formatting is as defined in qFmt .

• If qFmt is empty, the formatting is defined by the number interpretation variables included at the top of the script ( TimeFormat , DateFormat , TimeStampFormat ).

• The properties qDec , qThou , qnDec , qUseThou are not used.

 Type is INTEGER:
The following applies:

• If a format pattern is defined in qFmt , the engine looks at the values set in qDec and qThou . If these properties are not defined, the formatting mechanism uses the number interpretation variables included at the top of the script ( DecimalSep and ThousandSep ).

• If no format pattern is defined in qFmt , no formatting is applied. The properties qDec , qThou , qnDec , qUseThou and the number interpretation variables defined in the script are not used .

 Type is REAL:
The following applies:

• If a format pattern is defined in qFmt , the engine looks at the values set in qDec and qThou . If these properties are not defined, the engine uses the number interpretation variables included at the top of the script ( DecimalSep and ThousandSep ).

• If no format pattern is defined in qFmt , and if the value is almost an integer value (for example, 14,000012), the value is formatted as an integer. The properties qDec , qThou , qnDec , qUseThou are not used.

• If no format pattern is defined in qFmt , and if qnDec is defined and not 0, the property qDec is used. If qDec is not defined, the variable DecimalSep defined at the top of the script is used.

• If no format pattern is defined in qFmt , and if qnDec is 0, the number of decimals is 14 and the property qDec is used. If qDec is not defined, the variable DecimalSep defined at the top of the script is used.

 Type is FIX:
The following applies:

• If a format pattern is defined in qFmt , the engine looks at the values set in qDec and qThou . If these properties are not defined, the engine uses the number interpretation variables included at the top of the script ( DecimalSep and ThousandSep ).

• If no format pattern is defined in qFmt , the properties qDec and qnDec are used. If qDec is not defined, the variable DecimalSep defined at the top of the script is used.

 Type is MONEY:
The following applies:

• If a format pattern is defined in qFmt , the engine looks at the values set in qDec and qThou . If these properties are not defined, the engine uses the number interpretation variables included at the top of any script ( MoneyDecimalSep and MoneyThousandSep ).

• If no format pattern is defined in qFmt , the engine uses the number interpretation variables included at the top of the script ( MoneyDecimalSep and MoneyThousandSep ).

 Type is ASCII:
No formatting, qFmt is ignored.
  @param qDec - Defines the decimal separator.
Example: .
  @param qFmt - Defines the format pattern that applies to qText .
Is used in connection to the type of the field (parameter qType ).
For more information, see Formatting mechanism.
Example: YYYY-MM-DD for a date.
  @param qThou - Defines the thousand separator (if any).
Is used if qUseThou is set to 1.
Example: ,
  @param qType - Type of the field.
Default is U.

One of:

• U or UNKNOWN

• A or ASCII

• I or INTEGER

• R or REAL

• F or FIX

• M or MONEY

• D or DATE

• T or TIME

• TS or TIMESTAMP

• IV or INTERVAL
  @param qUseThou - Defines whether or not a thousands separator must be used.
Default is 0.
  @param qnDec - Number of decimals.
Default is 10.
  @param auth - Auth object used to make requests
 */
export declare class FieldAttributes {
    auth?: Auth;
    qDec?: string;
    qFmt?: string;
    qThou?: string;
    qType?: 'UNKNOWN' | 'ASCII' | 'INTEGER' | 'REAL' | 'FIX' | 'MONEY' | 'DATE' | 'TIME' | 'TIMESTAMP' | 'INTERVAL' | string;
    qUseThou?: number;
    qnDec?: number;
    [key: string]: any;
    constructor({ qDec, qFmt, qThou, qType, qUseThou, qnDec, ...rest }: {
        qDec?: string;
        qFmt?: string;
        qThou?: string;
        qType?: 'UNKNOWN' | 'ASCII' | 'INTEGER' | 'REAL' | 'FIX' | 'MONEY' | 'DATE' | 'TIME' | 'TIMESTAMP' | 'INTERVAL' | string;
        qUseThou?: number;
        qnDec?: number;
    }, auth?: Auth);
}
/**
  @param qName - Name of the field.
  @param qType - Type of data entity.

One of:

• NOT_PRESENT

• PRESENT

• IS_CYCLIC_GROUP

• IS_DRILL_GROUP

• IS_VAR

• IS_EXPR

• IS_IMPLICIT

• IS_DETAIL
  @param auth - Auth object used to make requests
 */
export declare class FieldDefEx {
    auth?: Auth;
    qName?: string;
    qType?: 'NOT_PRESENT' | 'PRESENT' | 'IS_CYCLIC_GROUP' | 'IS_DRILL_GROUP' | 'IS_VAR' | 'IS_EXPR' | 'IS_IMPLICIT' | 'IS_DETAIL' | string;
    [key: string]: any;
    constructor({ qName, qType, ...rest }: {
        qName?: string;
        qType?: 'NOT_PRESENT' | 'PRESENT' | 'IS_CYCLIC_GROUP' | 'IS_DRILL_GROUP' | 'IS_VAR' | 'IS_EXPR' | 'IS_IMPLICIT' | 'IS_DETAIL' | string;
    }, auth?: Auth);
}
/**
  @param qAlwaysOneSelected - If set to true, it means that the field has one and only one selection (not 0 and not more than 1).
If this property is set to true, the field cannot be cleared anymore and no more selections can be performed in that field.
The default value is false.
  @param qAndMode - If set to true a logical AND (instead of a logical OR) is used when making selections in a field.
The default value is false.
  @param qByteSize - Static RAM memory used in bytes.
  @param qCardinal - Number of distinct field values.
  @param qComment - Field comment.
  @param qDistinctOnly - If set to true, only distinct field values are shown.
The default value is false.
  @param qHasInfo_OBSOLETE
  @param qInternalNumber - Internal number of the field.
  @param qIsDefinitionOnly - If set to true, it means that the field is a field on the fly.
The default value is false.
  @param qIsHidden - If set to true, it means that the field is hidden.
The default value is false.
  @param qIsLocked - If set to true, it means that the field is locked.
The default value is false.
  @param qIsNumeric - Is set to true if the value is a numeric.
The default value is false.
  @param qIsSemantic - If set to true, it means that the field is a semantic.
The default value is false.
  @param qIsSystem - If set to true, it means that the field is a system field.
The default value is false.
  @param qName - Name of the field.
  @param qPossibleCount_OBSOLETE
  @param qSrcTables - List of table names.
  @param qTags - Gives information on a field. For example, it can return the type of the field.
Examples: key, text, ASCII.
  @param qTotalCount - Total number of field values.
  @param auth - Auth object used to make requests
 */
export declare class FieldDescription {
    auth?: Auth;
    qAlwaysOneSelected?: boolean;
    qAndMode?: boolean;
    qByteSize?: number;
    qCardinal?: number;
    qComment?: string;
    qDistinctOnly?: boolean;
    qHasInfo_OBSOLETE?: boolean;
    qInternalNumber?: number;
    qIsDefinitionOnly?: boolean;
    qIsHidden?: boolean;
    qIsLocked?: boolean;
    qIsNumeric?: boolean;
    qIsSemantic?: boolean;
    qIsSystem?: boolean;
    qName?: string;
    qPossibleCount_OBSOLETE?: number;
    qSrcTables?: Array<string>;
    qTags?: Array<string>;
    qTotalCount?: number;
    [key: string]: any;
    constructor({ qAlwaysOneSelected, qAndMode, qByteSize, qCardinal, qComment, qDistinctOnly, qHasInfo_OBSOLETE, qInternalNumber, qIsDefinitionOnly, qIsHidden, qIsLocked, qIsNumeric, qIsSemantic, qIsSystem, qName, qPossibleCount_OBSOLETE, qSrcTables, qTags, qTotalCount, ...rest }: {
        qAlwaysOneSelected?: boolean;
        qAndMode?: boolean;
        qByteSize?: number;
        qCardinal?: number;
        qComment?: string;
        qDistinctOnly?: boolean;
        qHasInfo_OBSOLETE?: boolean;
        qInternalNumber?: number;
        qIsDefinitionOnly?: boolean;
        qIsHidden?: boolean;
        qIsLocked?: boolean;
        qIsNumeric?: boolean;
        qIsSemantic?: boolean;
        qIsSystem?: boolean;
        qName?: string;
        qPossibleCount_OBSOLETE?: number;
        qSrcTables?: Array<string>;
        qTags?: Array<string>;
        qTotalCount?: number;
    }, auth?: Auth);
}
/**
  @param qComment - Comment related to the field.
  @param qDerivedFields - List of the derived fields.
  @param qHasDuplicates - This property is set to true if the field contains some duplicate values.
  @param qHasNull - This property is set to true if the field contains some Null values.
  @param qHasWild
  @param qInformationDensity - Number of records that have values (for example, not NULL) in the field as compared to the total number of records in the table.
  @param qIsFieldOnTheFly
  @param qIsSynthetic - This property is set to true if the field contains a synthetic key.
  @param qKeyType - Tells if the field is a key field.

One of:

• NOT_KEY

• ANY_KEY

• PRIMARY_KEY

• PERFECT_KEY
  @param qName - Name of the field.
  @param qOriginalFields - Is shown for fixed records.
qOriginalFieldName and qName are identical if no field names are used in the file.
qOriginalFieldName differs from qName if embedded file names are used in the file.
  @param qPresent
  @param qReadableName
  @param qSubsetRatio - Number of distinct values in the field (in the current table) as compared to the total number of distinct values of this field (in all tables).
  @param qTags - List of tags related to the field.
  @param qnNonNulls - Number of values that are non Null.
  @param qnPresentDistinctValues
  @param qnRows - Number of rows in the field.
  @param qnTotalDistinctValues - Number of distinct values in the field.
  @param auth - Auth object used to make requests
 */
export declare class FieldInTableData {
    auth?: Auth;
    qComment?: string;
    qDerivedFields?: Array<DerivedFieldsInTableData>;
    qHasDuplicates?: boolean;
    qHasNull?: boolean;
    qHasWild?: boolean;
    qInformationDensity?: number;
    qIsFieldOnTheFly?: boolean;
    qIsSynthetic?: boolean;
    qKeyType?: 'NOT_KEY' | 'ANY_KEY' | 'PRIMARY_KEY' | 'PERFECT_KEY' | string;
    qName?: string;
    qOriginalFields?: Array<string>;
    qPresent?: boolean;
    qReadableName?: string;
    qSubsetRatio?: number;
    qTags?: Array<string>;
    qnNonNulls?: number;
    qnPresentDistinctValues?: number;
    qnRows?: number;
    qnTotalDistinctValues?: number;
    [key: string]: any;
    constructor({ qComment, qDerivedFields, qHasDuplicates, qHasNull, qHasWild, qInformationDensity, qIsFieldOnTheFly, qIsSynthetic, qKeyType, qName, qOriginalFields, qPresent, qReadableName, qSubsetRatio, qTags, qnNonNulls, qnPresentDistinctValues, qnRows, qnTotalDistinctValues, ...rest }: {
        qComment?: string;
        qDerivedFields?: Array<DerivedFieldsInTableData>;
        qHasDuplicates?: boolean;
        qHasNull?: boolean;
        qHasWild?: boolean;
        qInformationDensity?: number;
        qIsFieldOnTheFly?: boolean;
        qIsSynthetic?: boolean;
        qKeyType?: 'NOT_KEY' | 'ANY_KEY' | 'PRIMARY_KEY' | 'PERFECT_KEY' | string;
        qName?: string;
        qOriginalFields?: Array<string>;
        qPresent?: boolean;
        qReadableName?: string;
        qSubsetRatio?: number;
        qTags?: Array<string>;
        qnNonNulls?: number;
        qnPresentDistinctValues?: number;
        qnRows?: number;
        qnTotalDistinctValues?: number;
    }, auth?: Auth);
}
/**
  @param qAverage - Average of all numerical values. NaN otherwise.
  @param qAvgStringLen - Average string length of textual values. 0 otherwise.
  @param qDistinctNumericValues - Number of distinct numeric values
  @param qDistinctTextValues - Number of distinct text values
  @param qDistinctValues - Number of distinct values
  @param qEmptyStrings - Number of empty strings
  @param qFieldTags - List of tags related to the field.
  @param qFirstSorted - For textual values the first sorted string.
  @param qFractiles - The .01, .05, .1, .25, .5, .75, .9, .95, .99 fractiles. Array of NaN otherwise.
  @param qFrequencyDistribution - Frequency Distribution for numeric fields.
  @param qKurtosis - Kurtosis of the numerical values. NaN otherwise.
  @param qLastSorted - For textual values the last sorted string.
  @param qMax - Maximum value of numerical values. NaN otherwise.
  @param qMaxStringLen - Maximum string length of textual values. 0 otherwise.
  @param qMedian - Median of all numerical values. NaN otherwise.
  @param qMin - Minimum value of numerical values. NaN otherwise.
  @param qMinStringLen - Minimum string length of textual values. 0 otherwise.
  @param qMostFrequent - Three most frequent values and their frequencies
  @param qName - Name of the field.
  @param qNegValues - Number of negative values
  @param qNullValues - Number of null values
  @param qNumberFormat - Sets the formatting of a field.
The properties of qFieldAttributes and the formatting mechanism are described below.

 Formatting mechanism:
The formatting mechanism depends on the type set in qType, as shown below:
In case of inconsistencies between the type and the format pattern, the format pattern takes precedence over the type.

 Type is DATE, TIME, TIMESTAMP or INTERVAL:
The following applies:

• If a format pattern is defined in qFmt , the formatting is as defined in qFmt .

• If qFmt is empty, the formatting is defined by the number interpretation variables included at the top of the script ( TimeFormat , DateFormat , TimeStampFormat ).

• The properties qDec , qThou , qnDec , qUseThou are not used.

 Type is INTEGER:
The following applies:

• If a format pattern is defined in qFmt , the engine looks at the values set in qDec and qThou . If these properties are not defined, the formatting mechanism uses the number interpretation variables included at the top of the script ( DecimalSep and ThousandSep ).

• If no format pattern is defined in qFmt , no formatting is applied. The properties qDec , qThou , qnDec , qUseThou and the number interpretation variables defined in the script are not used .

 Type is REAL:
The following applies:

• If a format pattern is defined in qFmt , the engine looks at the values set in qDec and qThou . If these properties are not defined, the engine uses the number interpretation variables included at the top of the script ( DecimalSep and ThousandSep ).

• If no format pattern is defined in qFmt , and if the value is almost an integer value (for example, 14,000012), the value is formatted as an integer. The properties qDec , qThou , qnDec , qUseThou are not used.

• If no format pattern is defined in qFmt , and if qnDec is defined and not 0, the property qDec is used. If qDec is not defined, the variable DecimalSep defined at the top of the script is used.

• If no format pattern is defined in qFmt , and if qnDec is 0, the number of decimals is 14 and the property qDec is used. If qDec is not defined, the variable DecimalSep defined at the top of the script is used.

 Type is FIX:
The following applies:

• If a format pattern is defined in qFmt , the engine looks at the values set in qDec and qThou . If these properties are not defined, the engine uses the number interpretation variables included at the top of the script ( DecimalSep and ThousandSep ).

• If no format pattern is defined in qFmt , the properties qDec and qnDec are used. If qDec is not defined, the variable DecimalSep defined at the top of the script is used.

 Type is MONEY:
The following applies:

• If a format pattern is defined in qFmt , the engine looks at the values set in qDec and qThou . If these properties are not defined, the engine uses the number interpretation variables included at the top of any script ( MoneyDecimalSep and MoneyThousandSep ).

• If no format pattern is defined in qFmt , the engine uses the number interpretation variables included at the top of the script ( MoneyDecimalSep and MoneyThousandSep ).

 Type is ASCII:
No formatting, qFmt is ignored.
  @param qNumericValues - Number of numeric values
  @param qPosValues - Number of positive values
  @param qSkewness - Skewness of the numerical values. NaN otherwise.
  @param qStd - Standard deviation of numerical values. NaN otherwise.
  @param qSum - Sum of all numerical values. NaN otherwise.
  @param qSum2 - Squared sum of all numerical values. NaN otherwise.
  @param qSumStringLen - Sum of all characters in strings in the field
  @param qTextValues - Number of textual values
  @param qZeroValues - Number of zero values for numerical values
  @param auth - Auth object used to make requests
 */
export declare class FieldInTableProfilingData {
    auth?: Auth;
    qAverage?: number;
    qAvgStringLen?: number;
    qDistinctNumericValues?: number;
    qDistinctTextValues?: number;
    qDistinctValues?: number;
    qEmptyStrings?: number;
    qFieldTags?: Array<string>;
    qFirstSorted?: string;
    qFractiles?: Array<number>;
    qFrequencyDistribution?: FrequencyDistributionData;
    qKurtosis?: number;
    qLastSorted?: string;
    qMax?: number;
    qMaxStringLen?: number;
    qMedian?: number;
    qMin?: number;
    qMinStringLen?: number;
    qMostFrequent?: Array<SymbolFrequency>;
    qName?: string;
    qNegValues?: number;
    qNullValues?: number;
    qNumberFormat?: FieldAttributes;
    qNumericValues?: number;
    qPosValues?: number;
    qSkewness?: number;
    qStd?: number;
    qSum?: number;
    qSum2?: number;
    qSumStringLen?: number;
    qTextValues?: number;
    qZeroValues?: number;
    [key: string]: any;
    constructor({ qAverage, qAvgStringLen, qDistinctNumericValues, qDistinctTextValues, qDistinctValues, qEmptyStrings, qFieldTags, qFirstSorted, qFractiles, qFrequencyDistribution, qKurtosis, qLastSorted, qMax, qMaxStringLen, qMedian, qMin, qMinStringLen, qMostFrequent, qName, qNegValues, qNullValues, qNumberFormat, qNumericValues, qPosValues, qSkewness, qStd, qSum, qSum2, qSumStringLen, qTextValues, qZeroValues, ...rest }: {
        qAverage?: number;
        qAvgStringLen?: number;
        qDistinctNumericValues?: number;
        qDistinctTextValues?: number;
        qDistinctValues?: number;
        qEmptyStrings?: number;
        qFieldTags?: Array<string>;
        qFirstSorted?: string;
        qFractiles?: Array<number>;
        qFrequencyDistribution?: FrequencyDistributionData;
        qKurtosis?: number;
        qLastSorted?: string;
        qMax?: number;
        qMaxStringLen?: number;
        qMedian?: number;
        qMin?: number;
        qMinStringLen?: number;
        qMostFrequent?: Array<SymbolFrequency>;
        qName?: string;
        qNegValues?: number;
        qNullValues?: number;
        qNumberFormat?: FieldAttributes;
        qNumericValues?: number;
        qPosValues?: number;
        qSkewness?: number;
        qStd?: number;
        qSum?: number;
        qSum2?: number;
        qSumStringLen?: number;
        qTextValues?: number;
        qZeroValues?: number;
    }, auth?: Auth);
}
/**
  Lists the fields present in the data model viewer. Is the layout for FieldListDef.
  @param qItems - Array of items.
  @param auth - Auth object used to make requests
 */
export declare class FieldList {
    auth?: Auth;
    qItems?: Array<NxFieldDescription>;
    [key: string]: any;
    constructor({ qItems, ...rest }: {
        qItems?: Array<NxFieldDescription>;
    }, auth?: Auth);
}
/**
  Defines the fields to show.
  @param qShowDefinitionOnly - Shows the fields defined on the fly if set to true.
Default is false.
  @param qShowDerivedFields - Shows the fields and derived fields if set to true.
Default is false.
  @param qShowHidden - Shows the hidden fields if set to true.
Default is false.
  @param qShowImplicit - Shows the Direct Discovery measure fields if set to true.
Default is false.
  @param qShowSemantic - Show the semantic fields if set to true.
Default is false.
  @param qShowSrcTables - Shows the tables and fields present in the data model viewer if set to true.
Default is false.
  @param qShowSystem - Shows the system tables if set to true.
Default is false.
  @param auth - Auth object used to make requests
 */
export declare class FieldListDef {
    auth?: Auth;
    qShowDefinitionOnly?: boolean;
    qShowDerivedFields?: boolean;
    qShowHidden?: boolean;
    qShowImplicit?: boolean;
    qShowSemantic?: boolean;
    qShowSrcTables?: boolean;
    qShowSystem?: boolean;
    [key: string]: any;
    constructor({ qShowDefinitionOnly, qShowDerivedFields, qShowHidden, qShowImplicit, qShowSemantic, qShowSrcTables, qShowSystem, ...rest }: {
        qShowDefinitionOnly?: boolean;
        qShowDerivedFields?: boolean;
        qShowHidden?: boolean;
        qShowImplicit?: boolean;
        qShowSemantic?: boolean;
        qShowSrcTables?: boolean;
        qShowSystem?: boolean;
    }, auth?: Auth);
}
/**
  @param qFieldName - Name of the field or column to be matched.
  @param qTableName - Name of the table to be matched on. This parameter is optional. If TableName is set, FieldName represent the Table column with that name. If TableName is not set, FieldName represents the the field with that name.
  @param auth - Auth object used to make requests
 */
export declare class FieldOrColumn {
    auth?: Auth;
    qFieldName?: string;
    qTableName?: string;
    [key: string]: any;
    constructor({ qFieldName, qTableName, ...rest }: {
        qFieldName?: string;
        qTableName?: string;
    }, auth?: Auth);
}
/**
  @param qCardinalRatio - Cardinality of a column/field divided by the number of rows in the table.
If the cardinal ratio is 1, it means that the column is a candidate/primary key.
  @param qFieldName - Field name.
One of the field names defined in qFieldPairName.
  @param qReadableName
  @param qRowScore - Number of matches between the two fields defined in qFieldPairName divided by the number of values in the field qFieldName .
If 0, it means that there are no common values between the two fields defined in qFieldPairName .
  @param qSymbolScore - Number of distinct matches between the two fields defined in qFieldPairName divided by the number of distinct values in the field qFieldName .
If 0, it means that there are no common values between the two fields defined in qFieldPairName .
  @param auth - Auth object used to make requests
 */
export declare class FieldScores {
    auth?: Auth;
    qCardinalRatio?: number;
    qFieldName?: string;
    qReadableName?: string;
    qRowScore?: number;
    qSymbolScore?: number;
    [key: string]: any;
    constructor({ qCardinalRatio, qFieldName, qReadableName, qRowScore, qSymbolScore, ...rest }: {
        qCardinalRatio?: number;
        qFieldName?: string;
        qReadableName?: string;
        qRowScore?: number;
        qSymbolScore?: number;
    }, auth?: Auth);
}
export declare class FieldType {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qIsNumeric - Is set to true if the value is a numeric.
This parameter is optional. Default is false.
  @param qNumber - Numeric value of the field.
This parameter is displayed if qIsNumeric is set to true.
This parameter is optional.
  @param qText - Text related to the field value.
This parameter is optional.
  @param auth - Auth object used to make requests
 */
export declare class FieldValue {
    auth?: Auth;
    qIsNumeric?: boolean;
    qNumber?: number;
    qText?: string;
    [key: string]: any;
    constructor({ qIsNumeric, qNumber, qText, ...rest }: {
        qIsNumeric?: boolean;
        qNumber?: number;
        qText?: string;
    }, auth?: Auth);
}
/**
   FileType:
Recognized file formats are:

• CSV for Delimited

• FIX for Fixed Record

• DIF for Data Interchange Format

• EXCEL_BIFF for Microsoft Excel (XLS)

• EXCEL_OOXML for Microsoft Excel (XLSX)

• HTML for HTML

• QVD for QVD file

• XML for XML

• QVX for QVX file

• JSON for JSON format

• KML for KML file

• PARQUET for PARQUET file
  @param qCodePage - Character set used in the file.
  @param qComment - String that marks the beginning of the comment line.
Example: “” or “//”:
The engine ignores the commented lines during the data load.
This property is only used for delimited files.
  @param qDelimiter - Information about the delimiter.
This property is used for delimited files.
  @param qFixedWidthDelimiters - Positions of the field breaks in the table.
This property is used for fixed record data files.
  @param qHeaderSize - Size of the header.
Example: If the header size is 2, the first two rows in the file are considered as header and not as data. The header can contain the field names.
  @param qIgnoreEOF - Is set to true, the end-of-file character is not taken into account during reload.
This property is used for delimited files and fixed record data files.
  @param qLabel - One of:

• Embedded labels (field names are present in the file)

• No labels

• Explicit labels (for DIFfiles)
  @param qQuote - One of:

• None (no quotes)

• MSQ (Modern Style Quoting)

• Standard (quotes " " or ' ' can be used, but only if they are the first and last non blank characters of a field value)

This property is used for delimited files.
  @param qRecordSize - Record length.
Each record (row of data) contains a number of columns with a fixed field size.
This property is used for fixed record data files.
  @param qTabSize - Number of spaces that one tab character represents in the table file.
This property is used for fixed record data files.
  @param qType - Type of the file.

One of:

• CSV or FILE_TYPE_CSV

• FIX or FILE_TYPE_FIX

• DIF or FILE_TYPE_DIF

• EXCEL_BIFF or FILE_TYPE_EXCEL_BIFF

• EXCEL_OOXML or FILE_TYPE_EXCEL_OOXML

• HTML or FILE_TYPE_HTML

• QVD or FILE_TYPE_QVD

• XML or FILE_TYPE_XML

• QVX or FILE_TYPE_QVX

• JSON or FILE_TYPE_JSON

• KML or FILE_TYPE_KML

• PARQUET or FILE_TYPE_PARQUET
  @param auth - Auth object used to make requests
 */
export declare class FileDataFormat {
    auth?: Auth;
    qCodePage?: number;
    qComment?: string;
    qDelimiter?: DelimiterInfo;
    qFixedWidthDelimiters?: string;
    qHeaderSize?: number;
    qIgnoreEOF?: boolean;
    qLabel?: string;
    qQuote?: string;
    qRecordSize?: number;
    qTabSize?: number;
    qType?: 'FILE_TYPE_CSV' | 'FILE_TYPE_FIX' | 'FILE_TYPE_DIF' | 'FILE_TYPE_EXCEL_BIFF' | 'FILE_TYPE_EXCEL_OOXML' | 'FILE_TYPE_HTML' | 'FILE_TYPE_QVD' | 'FILE_TYPE_XML' | 'FILE_TYPE_QVX' | 'FILE_TYPE_JSON' | 'FILE_TYPE_KML' | 'FILE_TYPE_PARQUET' | string;
    [key: string]: any;
    constructor({ qCodePage, qComment, qDelimiter, qFixedWidthDelimiters, qHeaderSize, qIgnoreEOF, qLabel, qQuote, qRecordSize, qTabSize, qType, ...rest }: {
        qCodePage?: number;
        qComment?: string;
        qDelimiter?: DelimiterInfo;
        qFixedWidthDelimiters?: string;
        qHeaderSize?: number;
        qIgnoreEOF?: boolean;
        qLabel?: string;
        qQuote?: string;
        qRecordSize?: number;
        qTabSize?: number;
        qType?: 'FILE_TYPE_CSV' | 'FILE_TYPE_FIX' | 'FILE_TYPE_DIF' | 'FILE_TYPE_EXCEL_BIFF' | 'FILE_TYPE_EXCEL_OOXML' | 'FILE_TYPE_HTML' | 'FILE_TYPE_QVD' | 'FILE_TYPE_XML' | 'FILE_TYPE_QVX' | 'FILE_TYPE_JSON' | 'FILE_TYPE_KML' | 'FILE_TYPE_PARQUET' | string;
    }, auth?: Auth);
}
export declare class FileType {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qType -
One of:

• NONE or FILTER_TYPE_NONE

• RAW or FILTER_TYPE_RAW
  @param qWherePredicate
  @param auth - Auth object used to make requests
 */
export declare class FilterInfo {
    auth?: Auth;
    qType?: 'FILTER_TYPE_NONE' | 'FILTER_TYPE_RAW' | string;
    qWherePredicate?: string;
    [key: string]: any;
    constructor({ qType, qWherePredicate, ...rest }: {
        qType?: 'FILTER_TYPE_NONE' | 'FILTER_TYPE_RAW' | string;
        qWherePredicate?: string;
    }, auth?: Auth);
}
export declare class FilterType {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qName - Name of the folder item.
  @param qType - Type of the folder item.

One of:

• FOLDER or FOLDER_ITEM_FOLDER

• FILE or FOLDER_ITEM_FILE

• OTHER or FOLDER_ITEM_OTHER
  @param auth - Auth object used to make requests
 */
export declare class FolderItem {
    auth?: Auth;
    qName?: string;
    qType?: 'FOLDER_ITEM_FOLDER' | 'FOLDER_ITEM_FILE' | 'FOLDER_ITEM_OTHER' | string;
    [key: string]: any;
    constructor({ qName, qType, ...rest }: {
        qName?: string;
        qType?: 'FOLDER_ITEM_FOLDER' | 'FOLDER_ITEM_FILE' | 'FOLDER_ITEM_OTHER' | string;
    }, auth?: Auth);
}
export declare class FolderItemType {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qBinsEdges - Bins edges.
  @param qFrequencies - Bins frequencies.
  @param qNumberOfBins - Number of bins.
  @param auth - Auth object used to make requests
 */
export declare class FrequencyDistributionData {
    auth?: Auth;
    qBinsEdges?: Array<number>;
    qFrequencies?: Array<number>;
    qNumberOfBins?: number;
    [key: string]: any;
    constructor({ qBinsEdges, qFrequencies, qNumberOfBins, ...rest }: {
        qBinsEdges?: Array<number>;
        qFrequencies?: Array<number>;
        qNumberOfBins?: number;
    }, auth?: Auth);
}
/**
  @param qGroup - Group of the script function.

One of:

• ALL or FUNC_GROUP_ALL

• U or FUNC_GROUP_UNKNOWN

• NONE or FUNC_GROUP_NONE

• AGGR or FUNC_GROUP_AGGR

• NUM or FUNC_GROUP_NUMERIC

• RNG or FUNC_GROUP_RANGE

• EXP or FUNC_GROUP_EXPONENTIAL_AND_LOGARITHMIC

• TRIG or FUNC_GROUP_TRIGONOMETRIC_AND_HYPERBOLIC

• FIN or FUNC_GROUP_FINANCIAL

• MATH or FUNC_GROUP_MATH_CONSTANT_AND_PARAM_FREE

• COUNT or FUNC_GROUP_COUNTER

• STR or FUNC_GROUP_STRING

• MAPP or FUNC_GROUP_MAPPING

• RCRD or FUNC_GROUP_INTER_RECORD

• CND or FUNC_GROUP_CONDITIONAL

• LOG or FUNC_GROUP_LOGICAL

• NULL or FUNC_GROUP_NULL

• SYS or FUNC_GROUP_SYSTEM

• FILE or FUNC_GROUP_FILE

• TBL or FUNC_GROUP_TABLE

• DATE or FUNC_GROUP_DATE_AND_TIME

• NUMI or FUNC_GROUP_NUMBER_INTERPRET

• FRMT or FUNC_GROUP_FORMATTING

• CLR or FUNC_GROUP_COLOR

• RNK or FUNC_GROUP_RANKING

• GEO or FUNC_GROUP_GEO

• EXT or FUNC_GROUP_EXTERNAL

• PROB or FUNC_GROUP_PROBABILITY

• ARRAY or FUNC_GROUP_ARRAY

• LEG or FUNC_GROUP_LEGACY

• DB or FUNC_GROUP_DB_NATIVE
  @param qName - Name of the script function.
  @param qSignature - Signature of the script function.
Gives general information about the function.
  @param auth - Auth object used to make requests
 */
export declare class Function {
    auth?: Auth;
    qGroup?: 'FUNC_GROUP_ALL' | 'FUNC_GROUP_UNKNOWN' | 'FUNC_GROUP_NONE' | 'FUNC_GROUP_AGGR' | 'FUNC_GROUP_NUMERIC' | 'FUNC_GROUP_RANGE' | 'FUNC_GROUP_EXPONENTIAL_AND_LOGARITHMIC' | 'FUNC_GROUP_TRIGONOMETRIC_AND_HYPERBOLIC' | 'FUNC_GROUP_FINANCIAL' | 'FUNC_GROUP_MATH_CONSTANT_AND_PARAM_FREE' | 'FUNC_GROUP_COUNTER' | 'FUNC_GROUP_STRING' | 'FUNC_GROUP_MAPPING' | 'FUNC_GROUP_INTER_RECORD' | 'FUNC_GROUP_CONDITIONAL' | 'FUNC_GROUP_LOGICAL' | 'FUNC_GROUP_NULL' | 'FUNC_GROUP_SYSTEM' | 'FUNC_GROUP_FILE' | 'FUNC_GROUP_TABLE' | 'FUNC_GROUP_DATE_AND_TIME' | 'FUNC_GROUP_NUMBER_INTERPRET' | 'FUNC_GROUP_FORMATTING' | 'FUNC_GROUP_COLOR' | 'FUNC_GROUP_RANKING' | 'FUNC_GROUP_GEO' | 'FUNC_GROUP_EXTERNAL' | 'FUNC_GROUP_PROBABILITY' | 'FUNC_GROUP_ARRAY' | 'FUNC_GROUP_LEGACY' | 'FUNC_GROUP_DB_NATIVE' | string;
    qName?: string;
    qSignature?: string;
    [key: string]: any;
    constructor({ qGroup, qName, qSignature, ...rest }: {
        qGroup?: 'FUNC_GROUP_ALL' | 'FUNC_GROUP_UNKNOWN' | 'FUNC_GROUP_NONE' | 'FUNC_GROUP_AGGR' | 'FUNC_GROUP_NUMERIC' | 'FUNC_GROUP_RANGE' | 'FUNC_GROUP_EXPONENTIAL_AND_LOGARITHMIC' | 'FUNC_GROUP_TRIGONOMETRIC_AND_HYPERBOLIC' | 'FUNC_GROUP_FINANCIAL' | 'FUNC_GROUP_MATH_CONSTANT_AND_PARAM_FREE' | 'FUNC_GROUP_COUNTER' | 'FUNC_GROUP_STRING' | 'FUNC_GROUP_MAPPING' | 'FUNC_GROUP_INTER_RECORD' | 'FUNC_GROUP_CONDITIONAL' | 'FUNC_GROUP_LOGICAL' | 'FUNC_GROUP_NULL' | 'FUNC_GROUP_SYSTEM' | 'FUNC_GROUP_FILE' | 'FUNC_GROUP_TABLE' | 'FUNC_GROUP_DATE_AND_TIME' | 'FUNC_GROUP_NUMBER_INTERPRET' | 'FUNC_GROUP_FORMATTING' | 'FUNC_GROUP_COLOR' | 'FUNC_GROUP_RANKING' | 'FUNC_GROUP_GEO' | 'FUNC_GROUP_EXTERNAL' | 'FUNC_GROUP_PROBABILITY' | 'FUNC_GROUP_ARRAY' | 'FUNC_GROUP_LEGACY' | 'FUNC_GROUP_DB_NATIVE' | string;
        qName?: string;
        qSignature?: string;
    }, auth?: Auth);
}
export declare class FunctionGroup {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qGenericId - Object ID.
  @param qGenericType - The type of the object.
  @param qHandle - The handle used to connect to object.
  @param qType - The native type of the object.
  @param auth - Auth object used to make requests
 */
export declare class GenericBookmark {
    session: RpcSession;
    auth: Auth;
    qGenericId?: string;
    qGenericType?: string;
    qHandle?: number;
    qType?: string;
    [key: string]: any;
    constructor({ qGenericId, qGenericType, qHandle, qType, ...rest }: {
        qGenericId?: string;
        qGenericType?: string;
        qHandle?: number;
        qType?: string;
    }, session: RpcSession, auth?: Auth);
    /**    Retrieves the values of a field.
  
   Fieldvalue:
  | Name       | Description                                                                                  | Type    |
  |------------|----------------------------------------------------------------------------------------------|---------|
  | qText      | Text related to the field value.                                                             | String  |
  | qIsNumeric | Is set to true if the value is a numeric.  Default is false.                             | Boolean |
  | qNumber    | Numeric value of the field.  This parameter is displayed if _qIsNumeric_ is set to true. | Double  |
  
      @param qField - Name of the field.
      @param qGetExcludedValues - If set to true, only excluded values are returned.
      @param qDataPage - Range of returned values.
    */
    getFieldValues(qField: string, qGetExcludedValues: boolean, qDataPage: BookmarkFieldPage): Promise<Array<FieldValue>>;
    /**    Evaluates an object and displays its properties including the dynamic properties.
  If the member delta is set to true in the request object, only the delta is evaluated.
  
    */
    getLayout(): Promise<GenericBookmarkLayout>;
    /**    Applies a patch to the properties of an object. Allows an update to some of the properties. It should not be possible to patch "/qInfo/qId",
  and it will be forbidden in the near future.
  Applying a patch takes less time than resetting all the properties.
  
      @param qPatches - Array of patches.
    */
    applyPatches(qPatches: Array<NxPatch>): Promise<object>;
    /**    Sets some properties for a bookmark.
  
      @param qProp - Information about the bookmark.
    */
    setProperties(qProp: GenericBookmarkProperties): Promise<object>;
    /**    Shows the properties of an object.
  If the member delta is set to true in the request object, only the delta is retrieved.
  The following is always returned in the output:
  
    */
    getProperties(): Promise<GenericBookmarkProperties>;
    /**    Returns:
  
  • The type of the object.
  
  • The identifier of the object.
  
    */
    getInfo(): Promise<NxInfo>;
    /**    Applies a bookmark.
  
  The operation is successful if qSuccess is set to true.
  
    */
    apply(): Promise<boolean>;
    /**    Applies a bookmark and verify result dataset against originally selected values.
  
  The operation is successful if qApplySuccess is set to true. qWarnings lists state and field with unmatching values
  
      @experimental
  
    */
    applyAndVerify(): Promise<BookmarkApplyAndVerifyResult>;
    /**    Publishes a bookmark.
  This operation is not applicable for Qlik Sense Desktop.
  
    */
    publish(): Promise<object>;
    /**    Unpublishes a bookmark.
  This operation is not applicable for Qlik Sense Desktop.
  
    */
    unPublish(): Promise<object>;
    /**    Adds the generic bookmark to the list of approved objects
  This operation is possible only in Qlik Sense Enterprise.
  
    */
    approve(): Promise<object>;
    /**    Removes the generic bookmark from the list of approved objects
  This operation is possible only in Qlik Sense Enterprise.
  
    */
    unApprove(): Promise<object>;
}
/**
  @param qBookmark - Information about the bookmark.
  @param qClassicBookmark - Information about the Classic bookmark.
  @param qClassicMetadata - Information about the Classic bookmark metadata.
  @param qProperties - Information about the properties of the bookmark.
  @param auth - Auth object used to make requests
 */
export declare class GenericBookmarkEntry {
    auth?: Auth;
    qBookmark?: NxBookmark;
    qClassicBookmark?: Bookmark;
    qClassicMetadata?: MetaData;
    qProperties?: GenericBookmarkProperties;
    [key: string]: any;
    constructor({ qBookmark, qClassicBookmark, qClassicMetadata, qProperties, ...rest }: {
        qBookmark?: NxBookmark;
        qClassicBookmark?: Bookmark;
        qClassicMetadata?: MetaData;
        qProperties?: GenericBookmarkProperties;
    }, auth?: Auth);
}
/**
  Is the layout for GenericBookmarkProperties.
  @param qBookmark - Information about the bookmark.
  @param qFieldInfos - Information about the field selections associated with the bookmark.
  @param qInfo - Information about the object.
  @param qMeta - Information on publishing and permissions.
  @param auth - Auth object used to make requests
 */
export declare class GenericBookmarkLayout {
    auth?: Auth;
    qBookmark?: NxBookmark;
    qFieldInfos?: Array<LayoutFieldInfo>;
    qInfo?: NxInfo;
    qMeta?: NxMeta;
    [key: string]: any;
    constructor({ qBookmark, qFieldInfos, qInfo, qMeta, ...rest }: {
        qBookmark?: NxBookmark;
        qFieldInfos?: Array<LayoutFieldInfo>;
        qInfo?: NxInfo;
        qMeta?: NxMeta;
    }, auth?: Auth);
}
/**
  @param qDistinctValues - If true all selected values will be stored distinct, i.e. searchstrings will not be kept.
  @param qIncludeVariables - If true all variables will be stored in the bookmark.
  @param qInfo - Information about the bookmark.
This parameter is mandatory.
  @param qMetaDef - Definition of the dynamic properties.
  @param auth - Auth object used to make requests
 */
export declare class GenericBookmarkProperties {
    auth?: Auth;
    qDistinctValues?: boolean;
    qIncludeVariables?: boolean;
    qInfo?: NxInfo;
    qMetaDef?: NxMetaDef;
    [key: string]: any;
    constructor({ qDistinctValues, qIncludeVariables, qInfo, qMetaDef, ...rest }: {
        qDistinctValues?: boolean;
        qIncludeVariables?: boolean;
        qInfo?: NxInfo;
        qMetaDef?: NxMetaDef;
    }, auth?: Auth);
}
export declare class GenericConnectMachine {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qGenericId - Object ID.
  @param qGenericType - The type of the object.
  @param qHandle - The handle used to connect to object.
  @param qType - The native type of the object.
  @param auth - Auth object used to make requests
 */
export declare class GenericDimension {
    session: RpcSession;
    auth: Auth;
    qGenericId?: string;
    qGenericType?: string;
    qHandle?: number;
    qType?: string;
    [key: string]: any;
    constructor({ qGenericId, qGenericType, qHandle, qType, ...rest }: {
        qGenericId?: string;
        qGenericType?: string;
        qHandle?: number;
        qType?: string;
    }, session: RpcSession, auth?: Auth);
    /**    Evaluates a dimension and displays its properties, including the dynamic properties.
  
    */
    getLayout(): Promise<GenericDimensionLayout>;
    /**    Applies a patch to the properties of an object. Allows an update to some of the properties. It should not be possible to patch "/qInfo/qId",
  and it will be forbidden in the near future.
  Applying a patch takes less time than resetting all the properties.
  
      @param qPatches - Array of patches.
    */
    applyPatches(qPatches: Array<NxPatch>): Promise<object>;
    /**    Sets some properties for a dimension.
  
      @param qProp - Information about the dimension.
    */
    setProperties(qProp: GenericDimensionProperties): Promise<object>;
    /**    Shows the properties of an object.
  Returns the identifier and the definition of the dimension.
  If the member delta is set to true in the request object, only the delta is retrieved.
  
    */
    getProperties(): Promise<GenericDimensionProperties>;
    /**    Returns the type and identifier of the object.
  
    */
    getInfo(): Promise<NxInfo>;
    /**    Returns the definition of a dimension.
  
  The definition of the dimension is returned.
  
    */
    getDimension(): Promise<NxLibraryDimensionDef>;
    /**    Lists the linked objects to a generic object, a dimension or a measure.
  
    */
    getLinkedObjects(): Promise<Array<NxLinkedObjectInfo>>;
    /**    Publishes a dimension.
  This operation is not applicable for Qlik Sense Desktop.
  
    */
    publish(): Promise<object>;
    /**    Unpublishes a dimension.
  This operation is not applicable for Qlik Sense Desktop.
  
    */
    unPublish(): Promise<object>;
    /**    Adds the generic dimension to the list of approved objects
  This operation is possible only in Qlik Sense Enterprise.
  
    */
    approve(): Promise<object>;
    /**    Removes the generic dimension from the list of approved objects
  This operation is possible only in Qlik Sense Enterprise.
  
    */
    unApprove(): Promise<object>;
}
/**
  @param qAndMode - If set to true a logical AND (instead of a logical OR) is used when making selections in a field.
The default value is false.
  @param qApprMaxGlyphCount - Length of the longest value in the field.
  @param qCardinal - Number of distinct field values
  @param qIsSemantic - If set to true, it means that the field is a semantic.
  @param qTags - Gives information on a field. For example, it can return the type of the field.
Examples: key, text, ASCII
  @param auth - Auth object used to make requests
 */
export declare class GenericDimensionInfo {
    auth?: Auth;
    qAndMode?: boolean;
    qApprMaxGlyphCount?: number;
    qCardinal?: number;
    qIsSemantic?: boolean;
    qTags?: Array<string>;
    [key: string]: any;
    constructor({ qAndMode, qApprMaxGlyphCount, qCardinal, qIsSemantic, qTags, ...rest }: {
        qAndMode?: boolean;
        qApprMaxGlyphCount?: number;
        qCardinal?: number;
        qIsSemantic?: boolean;
        qTags?: Array<string>;
    }, auth?: Auth);
}
/**
  Is the layout for GenericDimensionProperties.
  @param qDim - Name and label of the dimension, information about grouping.
  @param qDimInfos - Cardinal and tags related to the dimension.
Length of the longest value in the field.
  @param qInfo - Identifier and type of the dimension.
  @param qMeta - Information about publishing and permissions.
  @param auth - Auth object used to make requests
 */
export declare class GenericDimensionLayout {
    auth?: Auth;
    qDim?: NxLibraryDimension;
    qDimInfos?: Array<GenericDimensionInfo>;
    qInfo?: NxInfo;
    qMeta?: NxMeta;
    [key: string]: any;
    constructor({ qDim, qDimInfos, qInfo, qMeta, ...rest }: {
        qDim?: NxLibraryDimension;
        qDimInfos?: Array<GenericDimensionInfo>;
        qInfo?: NxInfo;
        qMeta?: NxMeta;
    }, auth?: Auth);
}
/**
  @param qDim - Definition of the dimension.
This parameter is mandatory.
  @param qInfo - Identifier and type of the dimension.
This parameter is mandatory.
  @param qMetaDef - Definition of the dynamic properties.
  @param auth - Auth object used to make requests
 */
export declare class GenericDimensionProperties {
    auth?: Auth;
    qDim?: NxLibraryDimensionDef;
    qInfo?: NxInfo;
    qMetaDef?: NxMetaDef;
    [key: string]: any;
    constructor({ qDim, qInfo, qMetaDef, ...rest }: {
        qDim?: NxLibraryDimensionDef;
        qInfo?: NxInfo;
        qMetaDef?: NxMetaDef;
    }, auth?: Auth);
}
/**
  @param qGenericId - Object ID.
  @param qGenericType - The type of the object.
  @param qHandle - The handle used to connect to object.
  @param qType - The native type of the object.
  @param auth - Auth object used to make requests
 */
export declare class GenericMeasure {
    session: RpcSession;
    auth: Auth;
    qGenericId?: string;
    qGenericType?: string;
    qHandle?: number;
    qType?: string;
    [key: string]: any;
    constructor({ qGenericId, qGenericType, qHandle, qType, ...rest }: {
        qGenericId?: string;
        qGenericType?: string;
        qHandle?: number;
        qType?: string;
    }, session: RpcSession, auth?: Auth);
    /**    Evaluates a measure and displays its properties, including the dynamic properties.
  
    */
    getLayout(): Promise<GenericMeasureLayout>;
    /**    Applies a patch to the properties of an object. Allows an update to some of the properties. It should not be possible to patch "/qInfo/qId",
  and it will be forbidden in the near future.
  Applying a patch takes less time than resetting all the properties.
  
      @param qPatches - Array of patches.
    */
    applyPatches(qPatches: Array<NxPatch>): Promise<object>;
    /**    Sets some properties for a measure.
  
      @param qProp - Information about the measure.
    */
    setProperties(qProp: GenericMeasureProperties): Promise<object>;
    /**    Shows the properties of an object.
  Returns the identifier and the definition of the measure.
  If the member delta is set to true in the request object, only the delta is retrieved.
  The following is always returned in the output:
  
    */
    getProperties(): Promise<GenericMeasureProperties>;
    /**    Returns the type and identifier of the object.
  
    */
    getInfo(): Promise<NxInfo>;
    /**    Returns the definition of a measure.
  
    */
    getMeasure(): Promise<NxLibraryMeasureDef>;
    /**    Lists the linked objects to a generic object, a dimension or a measure.
  
    */
    getLinkedObjects(): Promise<Array<NxLinkedObjectInfo>>;
    /**    Publishes a measure.
  This operation is not applicable for Qlik Sense Desktop.
  
    */
    publish(): Promise<object>;
    /**    Unpublishes a measure.
  This operation is not applicable for Qlik Sense Desktop.
  
    */
    unPublish(): Promise<object>;
    /**    Adds the generic measure to the list of approved objects
  This operation is possible only in Qlik Sense Enterprise.
  
    */
    approve(): Promise<object>;
    /**    Removes the generic measure from the list of approved objects
  This operation is possible only in Qlik Sense Enterprise.
  
    */
    unApprove(): Promise<object>;
}
/**
  Is the layout for GenericMeasureProperties.
  @param qInfo - Information about the object.
  @param qMeasure - Information about the measure.
  @param qMeta - Information on publishing and permissions.
  @param auth - Auth object used to make requests
 */
export declare class GenericMeasureLayout {
    auth?: Auth;
    qInfo?: NxInfo;
    qMeasure?: NxLibraryMeasure;
    qMeta?: NxMeta;
    [key: string]: any;
    constructor({ qInfo, qMeasure, qMeta, ...rest }: {
        qInfo?: NxInfo;
        qMeasure?: NxLibraryMeasure;
        qMeta?: NxMeta;
    }, auth?: Auth);
}
/**
  @param qInfo - Information about the measure.
This parameter is mandatory.
  @param qMeasure - Definition of the measure.
This parameter is mandatory.
  @param qMetaDef - Definition of the dynamic properties.
  @param auth - Auth object used to make requests
 */
export declare class GenericMeasureProperties {
    auth?: Auth;
    qInfo?: NxInfo;
    qMeasure?: NxLibraryMeasureDef;
    qMetaDef?: NxMetaDef;
    [key: string]: any;
    constructor({ qInfo, qMeasure, qMetaDef, ...rest }: {
        qInfo?: NxInfo;
        qMeasure?: NxLibraryMeasureDef;
        qMetaDef?: NxMetaDef;
    }, auth?: Auth);
}
/**
  @param qGenericId - Object ID.
  @param qGenericType - The type of the object.
  @param qHandle - The handle used to connect to object.
  @param qType - The native type of the object.
  @param auth - Auth object used to make requests
 */
export declare class GenericObject {
    session: RpcSession;
    auth: Auth;
    qGenericId?: string;
    qGenericType?: string;
    qHandle?: number;
    qType?: string;
    [key: string]: any;
    constructor({ qGenericId, qGenericType, qHandle, qType, ...rest }: {
        qGenericId?: string;
        qGenericType?: string;
        qHandle?: number;
        qType?: string;
    }, session: RpcSession, auth?: Auth);
    /**    Evaluates an object and displays its properties including the dynamic properties.
  If the member delta is set to true in the request object, only the delta is evaluated. A GetLayout call on a generic object, returns up to one level down in the hierarchy.
  
   Example::
  A is a generic object and is the parent of the objects B and C. B is the parent of the objects D and E.
  
  A GetLayout call on A returns information on the objects A, B and C.
  A GetLayout call on B returns information on the objects B, D and E.
  A  GetLayout call on C returns information on the object C.
  
  In addition to the parameters displayed above, the GetLayout method can return other properties according to what is defined in the generic object.
  For example, if qHyperCubeDef is defined in the generic object, the GetLayout method returns the properties described in HyperCube.
  
    */
    getLayout(): Promise<GenericObjectLayout>;
    /**    Retrieves the values of a list object.
  A data set is returned.
  
      @param qPath - Path to the definition of the object to be selected.
  For example, /qListObjectDef .
      @param qPages - Array of pages you are interested in.
    */
    getListObjectData(qPath: string, qPages: Array<NxPage>): Promise<Array<NxDataPage>>;
    /**    Retrieves the calculated data for a chart, a table, or a scatter plot. It is possible to retrieve specific pages of data.
  This method works for a hypercube in DATA_MODE_STRAIGHT.
  A data set is returned.
  
      @param qPath - Path to the definition of the object to be selected.
  For example, /qHyperCubeDef .
      @param qPages - Array of pages to retrieve.
    */
    getHyperCubeData(qPath: string, qPages: Array<NxPage>): Promise<Array<NxDataPage>>;
    /**    Reduces the data of a bar chart, a line chart or a scatter plot chart and retrieves them.
  The reduction is dependent on the zoom factor (parameter qZoomFactor ) and on the reduction mode.
  This method can be used to create mini charts.
  
   Bar chart or line chart data reduction:
  For the data reduction to happen, the following conditions must be fulfilled:
  
  • The values cannot fit in the defined page (parameter qPages ).
  
  • The zoom factor is not 0 (parameter qZoomFactor ).
  
  • The reduction mode must be set to D1.
  
  The reduction algorithm keeps the shape of the visualizations and works whatever the number of dimensions in the chart. The global profile of the chart is reduced, and not only a specific dimension. A visualization that has been reduced contains fewer values but its shape is the same. Data of all types can be reduced. Therefore it is hard to relate the values before and after a reduction especially when reducing string values.
  
   Example:
  If you have a chart with 1 million data, and you have set the zoom factor to 5, the GetHyperCubeReducedData method reduces the chart and retrieves 200 000 data.
  
   Scatter plot chart data reduction:
  The reduction mode must be set to C.
  This reduction mechanism follows the 2D K-Means algorithm. Data are reduced into a number of clusters. Each data is assigned to a specific centroid.
  The number of centroids can be defined in the parameter qZoomFactor.
  
   Scatter plot chart resolution reduction:
  The reduction mode must be set to S.
  The resolution is reduced according to the zoom factor (parameter qZoomFactor ).
  
   Example:
  If you have a scatter plot chart and the zoom factor is set to 2, the scatter plot chart resolution is reduced by 4.
  
      @param qPath - Path to the definition of the object to be selected.
  For example, /qHyperCubeDef .
      @param qPages - Array of pages.
      @param qZoomFactor - Defines the zoom factor.
  If set to -1, the engine decides of the zoom factor.
  
  • If the reduction mode is D1 or S , the zoom factor is 2ⁿ. If the zoom factor is 5, the data are reduced by a factor 32.
  
  • If the reduction mode is C , the zoom factor defines the number of centroids.
      @param qReductionMode - Defines the reduction mode.
  
  One of:
  
  • N or DATA_REDUCTION_NONE
  
  • D1 or DATA_REDUCTION_ONEDIM
  
  • S or DATA_REDUCTION_SCATTERED
  
  • C or DATA_REDUCTION_CLUSTERED
  
  • ST or DATA_REDUCTION_STACKED
    */
    getHyperCubeReducedData(qPath: string, qPages: Array<NxPage>, qZoomFactor: number, qReductionMode: string): Promise<Array<NxDataPage>>;
    /**    Retrieves the values of a pivot table. It is possible to retrieve specific pages of data.
  This method works for a hypercube in DATA_MODE_PIVOT.
  
      @param qPath - Path to the definition of the object to be selected.
  For example, /qHyperCubeDef .
      @param qPages - Array of pages to retrieve.
    */
    getHyperCubePivotData(qPath: string, qPages: Array<NxPage>): Promise<Array<NxPivotPage>>;
    /**    Retrieves the values of a stacked pivot table. It is possible to retrieve specific pages of data.
  This method works for a hypercube in DATA_MODE_PIVOT_STACK.
  
      @param qPath - Path to the definition of the object to be selected.
  For example, /qHyperCubeDef .
      @param qPages - Array of pages to retrieve.
      @param qMaxNbrCells - Maximum number of cells at outer level.
  The default value is 10 000.
    */
    getHyperCubeStackData(qPath: string, qPages: Array<NxPage>, qMaxNbrCells?: number): Promise<Array<NxStackPage>>;
    /**    Retrieves and packs compressed hypercube and axis data. It is possible to retrieve specific pages of data.
  Binning is done on the time stamp data as well as the date. This means that you can zoom in to a level of granularity as low as seconds.
  
      @param qPath - Path to the definition of the object.
  For example, /qHyperCubeDef .
      @param qOptions - Defines the data to return.
      @param qReverseSort - If set to true the returned data pages are reverse sorted.
  Optional.
    */
    getHyperCubeContinuousData(qPath: string, qOptions: NxContinuousDataOptions, qReverseSort?: boolean): Promise<GetHyperCubeContinuousDataReturn>;
    /**    Retrieves data for nodes in a tree structure. It is possible to retrieve specific pages of data.
  This method works for a treedata object or a hypercube in DATA_MODE_TREE.
  
      @param qPath - Path to the definition of the object to be selected.
      @param qNodeOptions - Specifies all the paging filters needed to define the tree to be fetched. If left out the complete tree is returned.
    */
    getHyperCubeTreeData(qPath: string, qNodeOptions?: NxTreeDataOption): Promise<Array<NxTreeNode>>;
    /**    This method supports data binning.
  When a generic object with two or three measures and one dimension contains a lot of data, groups of points (for example, cells) can be rendered instead of points.
  A zone of interest can be refined (for zooming in) up to a maximum refinement level (set in the qQueryLevel parameter) or coarsened (for zoom out).
  The grid of cells is adaptive (not static), meaning that it adapts to different length scales.
  The GetHyperCubeBinnedData method gives information about the adaptive grid and the values of the generic object.
  The number of points in a cell and the coordinates (expressed in the measure range) of each cell are returned.
  Dimension values and measure values are rendered at point level (highest detailed level).
  The generic object should contain two or three measures and one dimension. When the refinement is high, the first two measures are represented on the x-axis and on the y-axis, while the third measure is visualized as color or point size.
  
   Adaptive Grid:
  More details about the properties of the adaptive grid are given in this paragraph.
  When the refinement is not the highest (cells are rendered), information about the adaptive grid is returned through several arrays.
  The first array contains the following properties:
  | Name        | Description                                       | Type                                                                                                                                                                                                             |
  |-------------|---------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
  | qNum        | Maximum number of points that a cell can contain. | String                                                                                                                                                                                                           |
  | qElemNumber | Is set to 0.                                      | Boolean                                                                                                                                                                                                          |
  | qState      | The default value is L.                           | One of:*   L for Locked*   S for Selected*   O for Optional*   D for Deselected*   A for Alternative*   X for eXcluded*   XS for eXcluded Selected*   XL for eXcluded Locked |
  
  The next arrays give the coordinates of each cell in the page.
  Each array contains the following properties:
  | Name        | Description                                                                                                                                                                                                                                                                                                     | Type                                                                                                                                                                                                             |
  |-------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
  | qText       | Coordinates of a cell in the measure range.  “qText”: “\[\[, , , \], \[, , , \], .... \[, , , \]\]  Where:  , _,  and  are the coordinates of the cell in the measure range. | String                                                                                                                                                                                                           |
  | qNum        | Number of points in the cell.                                                                                                                                                                                                                                                                                   | Double precision floating point                                                                                                                                                                                  |
  | qElemNumber | Unique identifier for each cell, calculated by the engine during the construction of the grid.  This element number is not stored in the database and can have a positive or a negative value.                                                                                                              | Integer                                                                                                                                                                                                          |
  | qState      | The default value is L.                                                                                                                                                                                                                                                                                         | One of:*   L for Locked*   S for Selected*   O for Optional*   D for Deselected*   A for Alternative*   X for eXcluded*   XS for eXcluded Selected*   XL for eXcluded Locked |
  
  Cells are represented as rectangles.
  
   Dimension values and measures values:
  More details about the properties, when dimension and measure values are returned, are given in this paragraph.
  When the refinement is high, points are rendered (not cells) and dimension and measure values for each cell are returned.
  The first array is empty because no information on the adaptive grid is needed.
  The next arrays bring information about the dimension and the measure values.
  | Name        | Description                                                                                                                                                                                        | Type                                                                                                                                                                                                             |
  |-------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
  | qText       | Text value of the dimension or the measure.                                                                                                                                                        | String                                                                                                                                                                                                           |
  | qNum        | Numerical value of the dimension or the measure.  Is set to 0 if the value is only text.                                                                                                       | Double precision floating point                                                                                                                                                                                  |
  | qElemNumber | Unique identifier for each cell, calculated by the engine during the construction of the grid.  This element number is not stored in the database and can have a positive or a negative value. | Integer                                                                                                                                                                                                          |
  | qState      | The default value is L.                                                                                                                                                                            | One of:*   L for Locked*   S for Selected*   O for Optional*   D for Deselected*   A for Alternative*   X for eXcluded*   XS for eXcluded Selected*   XL for eXcluded Locked |
  
      @param qPath - Path to the definition of the object.
  For example, /qHyperCubeDef .
      @param qPages - Array of pages to retrieve.
  Since the generic object contains two measures and one dimension, qWidth should be set to 3.
  If the value of a measure is Null, the value cannot be rendered. Therefore, the number of elements rendered in a page can be less than the number defined in the property qHeight .
      @param qViewport - Defines the canvas and the zoom level.
  This parameter is not yet used and is optional.
      @param qDataRanges - Range of the data to render.
  This range applies to the measure values.
  The lowest and highest values of a measure can be retrieved by using the GetLayout method (in /qHyperCube/qMeasureInfo ).
      @param qMaxNbrCells - Maximum number of cells in the grid.
      @param qQueryLevel - Level of details. The higher the level, the more detailed information you get (zoom-in).
  When the number of points to render falls below a certain threshold, the values are no longer rendered as cells but as points.
  The query level should be no greater than 20.
      @param qBinningMethod - Selects the algorithm.
  The default value is 0.
  One of:
  
  • 0: Adaptive grid
  
  • 1: Hexagonal grid
  
  • 2: Uniform grid
    */
    getHyperCubeBinnedData(qPath: string, qPages: Array<NxPage>, qViewport: NxViewPort, qDataRanges: Array<NxDataAreaPage>, qMaxNbrCells: number, qQueryLevel: number, qBinningMethod: number): Promise<Array<NxDataPage>>;
    /**    Applies a patch to the properties of an object. Allows an update to some of the properties.
  It is possible to apply a patch to the properties of a generic object, that is not persistent. Such a patch is called a soft patch.
  In that case, the result of the operation on the properties (add, remove or delete) is not shown when doing GetProperties , and only a GetLayout call shows the result of the operation.
  Properties that are not persistent are called soft properties. Once the engine session is over, soft properties are cleared. It should not be possible to patch "/qInfo/qId",
  and it will be forbidden in the near future.
  Soft properties apply only to generic objects.
  
      @param qPatches - Array of patches.
      @param qSoftPatch - If set to true, it means that the properties to be applied are not persistent. The patch is a soft patch.
  The default value is false.
    */
    applyPatches(qPatches: Array<NxPatch>, qSoftPatch?: boolean): Promise<object>;
    /**    Clears the soft properties of a generic object.
  For more information on how to add soft properties to a generic object, see ApplyPatches Method.
  
    */
    clearSoftPatches(): Promise<object>;
    /**    Sets some properties for a generic object.
  The properties depends on the generic object type, see properties genericobject-property.html.
  
      @param qProp - Information about the generic object.
    */
    setProperties(qProp: GenericObjectProperties): Promise<object>;
    /**    Returns the identifier, the type and the properties of the object.
  Because it is not mandatory to set all properties when you define an object, the GetProperties method may show properties that were not set. In that case, default values are given.
  If the object contains some soft properties, the soft properties are not returned by the GetProperties method. Use the GetEffectiveProperties method instead.
  If the object is linked to another object, the properties of the linking object are not returned by the GetProperties method. Use the GetEffectiveProperties method instead.
  The properties depends on the generic object type, see properties genericobject-layout.html.
  If the member delta is set to true in the request object, only the delta is retrieved.
  
    */
    getProperties(): Promise<GenericObjectProperties>;
    /**    Returns the identifier, the type and the properties of the object.
  If the object contains some soft properties, the soft properties are returned.
  If the object is linked to another object, the properties of the linking object are returned.
  
    */
    getEffectiveProperties(): Promise<GenericObjectProperties>;
    /**    Sets the properties of:
  
  • A generic object.
  
  • The children of the generic object.
  
  • The bookmarks/embedded snapshots of the generic object.
  
  If the SetFullPropertyTree method is asked to set some properties to a child that does not exist, it creates the child.  The type of an object cannot be updated.
  
      @param qPropEntry - Information about the generic object entry.
    */
    setFullPropertyTree(qPropEntry: GenericObjectEntry): Promise<object>;
    /**    Gets the properties of:
  
  • A generic object.
  
  • The children of the generic object.
  
  • The bookmarks/embedded snapshots of the generic object.
  
    */
    getFullPropertyTree(): Promise<GenericObjectEntry>;
    /**    Returns the type and identifier of the object.
  
    */
    getInfo(): Promise<NxInfo>;
    /**    Clears the selections in a dimension of a visualization.
  
      @param qPath - Path to the definition of the visualization.
  For example, /qListObjectDef .
      @param qColIndices - Array of dimension numbers or indexes. The selections are cleared in the specified dimensions.
  Dimension numbers/indexes start from 0.
  If this parameter is not set, all dimensions are cleared.
    */
    clearSelections(qPath: string, qColIndices?: Array<number>): Promise<object>;
    /**    Exports the data of any generic object to an Excel file or a open XML file. If the object contains excluded values, those excluded values are not exported.
  This API has limited functionality and will not support CSV export from all types of objects. Consider using Excel export instead. Treemap and bar chart are not supported.
  ExportData method is not supported in SaaS Editions of Qlik Sense.
  
   Default limitations in number of rows and columns:
  The default maximum number of rows and columns in the Excel export file is:
  
  • 1048566 rows per sheet. For pivot tables: 1048566 column dimensions. 10 rows can be added after the export.
  
  • 16384 columns per sheet. If the number of columns exceeds the limit, the exported file is truncated and a warning message is sent.
  
   Default limitation in number of columns:
  The default maximum number of columns in the export file is:
  
  • 1000 to export to a CSV file
  
  The exported file is truncated if the number of cells exceeds the limit. A warning message with code 1000 is sent.
  There is an option to export only the possible values ( qExportState is P).
  
   Default limitation in size:
  If the exported file is larger than the maximum value, then an out-of-memory error with code 13000 is returned.
  
  Exported files are temporary and are available only for a certain time span and only to the user who created them.
  
      @param qFileType - Type of the file to export.
  
  One of:
  
  • CSV_C or EXPORT_CSV_C
  
  • CSV_T or EXPORT_CSV_T
  
  • OOXML or EXPORT_OOXML
      @param qPath - Path to the definition of the object to be exported.
  For example, /qHyperCubeDef .
  This parameter is mandatory if the file type is CSV_C or CSV_T .
      @param qFileName - Name of the exported file after download from browser.
  This parameter is optional and only used in Qlik Sense Desktop.
      @param qExportState - Defines the values to be exported.
  The default value is A.
  
  One of:
  
  • P or EXPORT_POSSIBLE
  
  • A or EXPORT_ALL
      @param qServeOnce - If the exported file should be served only once
  This parameter is optional and only used in Qlik Sense Enterprise (Windows)
  Default value: false
    */
    exportData(qFileType: string, qPath?: string, qFileName?: string, qExportState?: string, qServeOnce?: boolean): Promise<ExportDataReturn>;
    /**    Makes single selections in dimensions.
  This method applies to list objects only.
  The member Change returns the handles of the objects that are updated following the selections.
  qSuccess is set to true if the selections are successful and is set to false in the following cases:
  
  • The object contains invalid fields (fields that are not in the data model).
  
  • The selection applies to a locked field.
  
  • A range selection is performed and the parameter OneAndOnlyOne is set to true in the definition of the object.
  
      @param qPath - Path to the definition of the object to be selected.
  For example, /qListObjectDef .
      @param qValues - Element numbers to select.
  You can select multiple values; the separator is the comma.
      @param qToggleMode - Set to true to toggle.
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false.
    */
    selectListObjectValues(qPath: string, qValues: Array<number>, qToggleMode: boolean, qSoftLock?: boolean): Promise<boolean>;
    /**    Selects all possible values of a list object.
  This method applies to list objects (objects with one dimension).
  The member Change returns the handles of the objects that are updated following the selections.
  qSuccess is set to true if the selections are successful and is set to false in the following cases:
  
  • The object contains invalid fields (fields that are not in the data model).
  
  • The selection applies to a locked field.
  
  • A range selection is performed and the parameter OneAndOnlyOne is set to true in the definition of the object.
  
      @param qPath - Path to the definition of the object to be selected.
  For example, /qListObjectDef .
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false.
    */
    selectListObjectPossible(qPath: string, qSoftLock?: boolean): Promise<boolean>;
    /**    Inverts the current selections in a specific field.
  This method applies to list objects (objects with one dimension).
  The member Change returns the handles of the objects that are updated following the selections.
  qSuccess is set to true if the selections are successful and is set to false in the following cases:
  
  • The object contains some invalid fields (fields that are not in the data model).
  
  • The selection applies to a locked field.
  
  • A range selection is performed and the parameter OneAndOnlyOne is set to true in the definition of the object.
  
      @param qPath - Path to the definition of the object to be selected.
  For example, /qListObjectDef .
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false.
    */
    selectListObjectExcluded(qPath: string, qSoftLock?: boolean): Promise<boolean>;
    /**    Selects all alternative values in a specific field.
  This method applies to list objects (objects with one dimension). If a field contains at least one selected value, the values that are neither selected nor excluded are alternatives values.
  The member Change returns the handles of the objects that are updated following the selections.
  qSuccess is set to true if the selections are successful and is set to false in the following cases:
  
  • The object contains some invalid fields (fields that are not in the data model).
  
  • The selection applies to a locked field.
  
  • A range selection is performed and the parameter OneAndOnlyOne is set to true in the definition of the object.
  
      @param qPath - Path to the definition of the object to be selected.
  For example, /qListObjectDef .
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false.
    */
    selectListObjectAlternative(qPath: string, qSoftLock?: boolean): Promise<boolean>;
    /**    Selects all values of a field.
  This method applies to list objects (objects with one dimension).
  The member Change returns the handles of the objects that are updated following the selections.
  qSuccess is set to true if the selections are successful and is set to false in the following cases:
  
  • The object contains some invalid fields (fields that are not in the data model).
  
  • The selection applies to a locked field.
  
  • A range selection is performed and the parameter OneAndOnlyOne is set to true in the definition of the object.
  
      @param qPath - Path to the definition of the object to be selected.
  For example, /qListObjectDef .
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false.
    */
    selectListObjectAll(qPath: string, qSoftLock?: boolean): Promise<boolean>;
    /**    The following is returned in the output:
  The operation is successful if qSuccess is set to true.
  
      @param qPath - Path to the definition of the object.
  For example, /qHyperCubeDef .
      @param qRanges - Selects ranges in a hypercube in (Ranges[N].Min,Ranges[N].Max) intervals.
  If either Ranges[N].MinInclEq or Ranges[N].MaxInclEq, or both flags are set to true then Min and Max values will be selected.
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false.
    */
    selectListObjectContinuousRange(qPath: string, qRanges: Array<Range>, qSoftLock?: boolean): Promise<boolean>;
    /**    Searches for a string in a list object.
  This method applies to list objects (objects with one dimension). The search results can be displayed using the GetLayout Method.
  
  The operation is successful if qSuccess is set to true.
  
      @param qPath - Path to the definition of the list object.
  For example, /qListObjectDef .
      @param qMatch - Search string.
  Wild card characters are allowed. The search is not case sensitive.
  Examples:
  
  • `P*U*`: retrieves only values that start with P and contain U
  
  • `P U S`: retrieves values that start with P, U or S
    */
    searchListObjectFor(qPath: string, qMatch: string): Promise<boolean>;
    /**    Aborts the results of a search in a list object.
  This method applies to list objects (objects with one dimension).  After an abort on a list object search, the GetLayout Method does not return any more search results but it does return the values in the field.
  
      @param qPath - Path to the definition of the list object.
  For example, /qListObjectDef .
    */
    abortListObjectSearch(qPath: string): Promise<object>;
    /**    Accept the results of a search in a list object. The search results become selected in the field.
  This method applies to list objects (objects with one dimension). The search results are displayed using the GetLayout Method.
  
      @param qPath - Path to the definition of the list object.
  For example, /qListObjectDef .
      @param qToggleMode - Set to true to keep any selections present in the list object.
  If this parameter is set to false, selections made before accepting the list object search become alternative.
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false.
    */
    acceptListObjectSearch(qPath: string, qToggleMode: boolean, qSoftLock?: boolean): Promise<object>;
    /**    Expands the left dimensions of a pivot table. This method applies only to pivot tables that are not always fully expanded.
  In the definition of the hypercube (in HyperCubeDef ), the parameter qAlwaysFullyExpanded must be set to false.
  
      @param qPath - Path to the definition of the object to be expanded.
  For example, /qHyperCubeDef .
      @param qRow - Row index in the data matrix to expand.
  Indexing starts from 0.
      @param qCol - Column index. The index is based on the left dimension indexes.
  Indexing starts from 0.
      @param qAll - If set to true, it expands all cells.
  Parameters qRow and qCol are not used if qAll is set to true, but they need to be set (for example to 0).
    */
    expandLeft(qPath: string, qRow: number, qCol: number, qAll: boolean): Promise<object>;
    /**    Expands the top dimensions of a pivot table. This method applies only to pivot tables that are not always fully expanded.
  In the definition of the hypercube (in HyperCubeDef ), the parameter qAlwaysFullyExpanded must be set to false.
  
      @param qPath - Path to the definition of the object to be expanded.
  For example, /qHyperCubeDef .
      @param qRow - Row index. The index is based on the top dimension indexes.
  Indexing starts from 0.
      @param qCol - Column index in the data matrix.
  Indexing starts from 0.
      @param qAll - If set to true, it expands all cells.
  Parameters qRow and qCol are not used if qAll is set to true, but they need to be set (for example to 0).
    */
    expandTop(qPath: string, qRow: number, qCol: number, qAll: boolean): Promise<object>;
    /**    Collapses the left dimensions of a pivot table. This method applies only to pivot tables that are not always fully expanded.
  In the definition of the hypercube (in HyperCubeDef ), the parameter qAlwaysFullyExpanded must be set to false.
  
      @param qPath - Path to the definition of the object to be collapsed.
  For example, /qHyperCubeDef .
      @param qRow - Row index in the data matrix.
  Indexing starts from 0.
      @param qCol - Column index. The index is based on the left dimension indexes.
  Indexing starts from 0.
      @param qAll - If set to true, it collapses all cells.
  Parameters qRow and qCol are not used if qAll is set to true, but they need to be set (for example to 0).
    */
    collapseLeft(qPath: string, qRow: number, qCol: number, qAll: boolean): Promise<object>;
    /**    Collapses the top dimensions of a pivot table. This method applies only to pivot tables that are not always fully expanded.
  In the definition of the hypercube (in HyperCubeDef ), the parameter qAlwaysFullyExpanded must be set to false.
  
      @param qPath - Path to the definition of the object to be collapsed
  For example, /qHyperCubeDef .
      @param qRow - Row index. The index is based on the top dimension indexes.
  Indexing starts from 0.
      @param qCol - Column index in the data matrix.
  Indexing starts from 0.
      @param qAll - If set to true, it collapses all cells.
  Parameters qRow and qCol are not used if qAll is set to true, but they need to be set (for example to 0).
    */
    collapseTop(qPath: string, qRow: number, qCol: number, qAll: boolean): Promise<object>;
    /**    You can use the drillUp method with any object that contains a drill-down group as a dimension.
  This method allows you to move between different levels of information (from a detailed level to a less detailed level of information). You can go back to previous visualizations up to the highest level of the hierarchy.
  If you try to drill up more steps than there are available levels, the first level of the hierarchy is displayed.
  
      @param qPath - Path to the definition of the object to be selected.
  For example, /qHyperCubeDef .
      @param qDimNo - Dimension number or index starting from 0.
  The default value is 0.
      @param qNbrSteps - Number of steps you want to drill up.
  The default value is 0.
    */
    drillUp(qPath: string, qDimNo: number, qNbrSteps: number): Promise<object>;
    /**    Locks the selected values of a generic object.
  
      @param qPath - Path to the definition of the object.
  For example, /qListObjectDef .
      @param qColIndices - Dimension numbers or dimension indexes where the lock should apply.
  Dimension numbers/indexes start from 0.
  If this parameter is not set, the selected values in all dimensions are locked.
    */
    lock(qPath: string, qColIndices?: Array<number>): Promise<object>;
    /**    Unlocks the selected values of a generic object if the target (or handle ) is a generic object
  
      @param qPath - Path to the definition of the object.
  For example, /qListObjectDef .
      @param qColIndices - Dimension numbers/indexes where the unlock should apply.
  Dimension numbers/indexes start from 0.
  If this parameter is not set, the locked values in all dimensions are unlocked.
    */
    unlock(qPath: string, qColIndices?: Array<number>): Promise<object>;
    /**    Selects some values in one dimension.
  The values are identified by their element numbers.
  This method applies to charts, tables and scatter plots.
  The member Change returns the handles of the objects that are updated following the selections.
  qSuccess is set to true if the selections are successful and is set to false in the following cases:
  
  • The object contains some invalid fields (fields that are not in the data model).
  
  • The selection applies to a locked field.
  
  • A range selection is performed and the parameter OneAndOnlyOne is set to true in the definition of the object.
  
      @param qPath - Path to the definition of the object to be selected.
  For example, /qHyperCubeDef .
      @param qDimNo - Dimension number or index to select.
  Dimension numbers/index start from 0.
      @param qValues - Element numbers of the field to select.
  You can select multiple elements; the separator is the comma.
      @param qToggleMode - Set to true to toggle.
    */
    selectHyperCubeValues(qPath: string, qDimNo: number, qValues: Array<number>, qToggleMode: boolean): Promise<boolean>;
    /**    Makes selections in multiple dimensions and measures.
   This method applies to hypercubes, such as bar charts, tables and scatter plots.
  The member Change returns the handles of the objects that are updated following the selections.
  qSuccess is set to true if the selections are successful and is set to false in the following cases:
  
  • The object contains some invalid fields (fields that are not in the data model).
  
  • The selection applies to a locked field.
  
  • A range selection is performed and the parameter OneAndOnlyOne is set to true in the definition of the object.
  
      @param qPath - Path to the definition of the object to be selected.
  For example, /qHyperCubeDef .
      @param qRowIndices - Array of row indexes to select, starting from 0.
  If the array is empty [ ] , all rows are selected.
      @param qColIndices - Indexes of the columns to select, starting from 0.
  A column corresponds to a dimension in the order they are added to the hypercube.
  If a column is hidden it is ignored, qColIndex n refers to the n:th visible column (starting from zero).
  Example:
  If the hypercube has two dimensions:
  
  • [0] selects the first column (i.e the first dimension).
  
  • [1] selects the second column (i.e the second dimension).
  
  If the array is empty [ ] , all columns are selected.
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
      @param qDeselectOnlyOneSelected - Set this parameter to true to unselect the last single selected value. There must be only one selected value in the field.
  The default value is false.
    */
    selectHyperCubeCells(qPath: string, qRowIndices: Array<number>, qColIndices: Array<number>, qSoftLock?: boolean, qDeselectOnlyOneSelected?: boolean): Promise<boolean>;
    /**    This method only applies to hypercubes that are not represented as straight tables. The parameter qMode in HyperCubeDef must be set either to P  or K .
  
   Pivot table:
  Makes selections in the top or left dimension cells of a pivot table or in the data matrix. Only expanded dimensions can be selected.
  
   Stacked table:
  Makes selections in the left dimension cells of a stacked table or in the data matrix.
  There is no top dimensions in a stacked table. A stacked table can only contain one measure.
  
   Example of a pivot table:
  
  In the representation above:
  |                                        |                                                                                     |
  |----------------------------------------|-------------------------------------------------------------------------------------|
  | Sum(OrderTotal)  Count(OrderTotal) | Are pseudo dimensions.                                                              |
  | CategoryName                           | Is a left dimension.  _Beverages_ , _Condiments_ ... are left dimension values. |
  | ProductName                            | Is a top dimension.  _Chef Anton's Cajun Seasoning_ is a top dimension value.   |
  | Numeric values                         | Are calculated values in the data matrix.  _626291,832_ is a calculated value.  |
  
  The member Change returns the handles of the objects that are updated following the selections.
  qSuccess is set to true if the selections are successful and is set to false in the following cases:
  
  • The object contains some invalid fields (fields that are not in the data model).
  
  • The selection applies to a locked field.
  
  • A range selection is performed and the parameter OneAndOnlyOne is set to true in the definition of the object.
  
      @param qPath - Path to the definition of the object.
  For example, /qHyperCubeDef .
      @param qSelections - Information about the selections to perform.
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
      @param qDeselectOnlyOneSelected - Set this parameter to true to unselect the last single selected value. There must be only one selected value in the field.
  The default value is false.
    */
    selectPivotCells(qPath: string, qSelections: Array<NxSelectionCell>, qSoftLock?: boolean, qDeselectOnlyOneSelected?: boolean): Promise<boolean>;
    /**    Makes range selections in measures.
   This method applies to hypercubes. For example, bar charts, tables and scatter plots.
  The member Change returns the handles of the objects that are updated following the selections.
  qSuccess is set to true if the selections are successful and is set to false in the following cases:
  
  • The object contains some invalid fields (fields that are not in the data model).
  
  • The selection applies to a locked field.
  
  • A range selection is performed and the parameter OneAndOnlyOne is set to true in the definition of the object.
  
      @param qPath - Path to the definition of the object to be selected.
  For example, /qHyperCubeDef .
      @param qRanges - Ranges of selections.
      @param qColumnsToSelect - Indicates which dimensions to select.
  The dimensions numbering starts at 0 (first dimension is 0).
  If the array is empty, all dimensions are selected.
      @param qOrMode - Applies to hypercubes with multiple measures.
  If set to true, it means that at least one of the measures must be in the range of selections for the group of measures to be selected.
  If set to false, it means that all measures must be in the range of selections for the group of measures to be selected.
  The default value is false.
      @param qDeselectOnlyOneSelected - Set this parameter to true to unselect the last single selected value. There must be only one selected value in the field.
  The default value is false.
    */
    rangeSelectHyperCubeValues(qPath: string, qRanges: Array<NxRangeSelectInfo>, qColumnsToSelect?: Array<number>, qOrMode?: boolean, qDeselectOnlyOneSelected?: boolean): Promise<boolean>;
    /**    Makes multiple range selections in measures.
   This method applies to hypercubes. For example, bar charts, tables and scatter plots.
  The member Change returns the handles of the objects that are updated following the selections.
  qSuccess is set to true if the selections are successful and is set to false in the following cases:
  
  • The object contains some invalid fields (fields that are not in the data model).
  
  • The selection applies to a locked field.
  
  • A range selection is performed and the parameter OneAndOnlyOne is set to true in the definition of the object.
  
      @param qPath - Path to the definition of the object to be selected.
  For example, /qHyperCubeDef .
      @param qRanges - Ranges of selections.
      @param qOrMode - Applies to hypercubes with multiple measures.
  If set to true, it means that at least one of the measures must be in the range of selections for the group of measures to be selected.
  If set to false, it means that all measures must be in the range of selections for the group of measures to be selected.
  The default value is false.
      @param qDeselectOnlyOneSelected - Set this parameter to true to unselect the last single selected value. There must be only one selected value in the field.
  The default value is false.
    */
    multiRangeSelectHyperCubeValues(qPath: string, qRanges: Array<NxMultiRangeSelectInfo>, qOrMode?: boolean, qDeselectOnlyOneSelected?: boolean): Promise<boolean>;
    /**
  
      @param qPath
      @param qRanges
      @param qOrMode
      @param qDeselectOnlyOneSelected
    */
    multiRangeSelectTreeDataValues(qPath: string, qRanges: Array<NxTreeMultiRangeSelectInfo>, qOrMode?: boolean, qDeselectOnlyOneSelected?: boolean): Promise<boolean>;
    /**    The following is returned in the output:
  The operation is successful if qSuccess is set to true.
  
      @param qPath - Path to the definition of the object.
  For example, /qHyperCubeDef .
      @param qRanges - Selects ranges in a hypercube in (Ranges[N].Min,Ranges[N].Max) intervals.
  If either Ranges[N].MinInclEq or Ranges[N].MaxInclEq, or both flags are set to true then Min and Max values will be selected.
      @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
  The default value is false.
    */
    selectHyperCubeContinuousRange(qPath: string, qRanges: Array<NxContinuousRangeSelectInfo>, qSoftLock?: boolean): Promise<boolean>;
    /**    Returns the type of the object and the corresponding handle.
  
      @param qId - Identifier of the object.
    */
    getChild(qId: string): Promise<GenericObject>;
    /**    Returns the type of the object and the corresponding handle to the parent object in the hiearchy.
  
    */
    getParent(): Promise<GenericObject>;
    /**    Returns the identifier and the type for each child in an app object. If the child contains extra properties in qInfos , these properties are returned.
  
  Full dynamic properties are optional and are returned if they exist in the definition of the object.
  
    */
    getChildInfos(): Promise<Array<NxInfo>>;
    /**    Creates a generic object that is a child of another generic object.
  It is possible to update the properties of the child's parent at the same time that the child is created. Both operations are performed by the same call. It is possible to create a child that is linked to another generic object. The two objects have the same properties.
  
      @param qProp - Information about the child.
  It is possible to create a child that is linked to another object.
      @param qPropForThis - Identifier of the parent's object.
  Should be set to update the properties of the parent's object at the same time the child is created.
    */
    createChild(qProp: GenericObjectProperties, qPropForThis?: GenericObjectProperties): Promise<GenericObject>;
    /**    Removes a child object.
  It is possible to update the properties of the child's parent at the same time that the child is removed. Both operations are performed by the same call. Removing a linked object, invalidate the linking object.
  
  The operation is successful if qSuccess is set to true.
  
      @param qId - Identifier of the child to remove.
      @param qPropForThis - Identifier of the parent's object and property to update.
  Should be set to update the properties of the parent's object at the same time the child is created.
    */
    destroyChild(qId: string, qPropForThis?: GenericObjectProperties): Promise<boolean>;
    /**    Removes all children and all children to the children on an object.
  
      @param qPropForThis - Identifier of the parent's object and property to update.
  Should be set to update the properties of the parent's object at the same time the child is created.
    */
    destroyAllChildren(qPropForThis?: GenericObjectProperties): Promise<object>;
    /**    Sets the order of the children in a generic object.
  To change the order of the children in a generic object, the identifiers of all the children must be included in the list of the identifiers (in qIds ).
  
      @param qIds - List of the children identifiers.
    */
    setChildArrayOrder(qIds: Array<string>): Promise<object>;
    /**    Lists the linked objects to a generic object, a dimension or a measure.
  
    */
    getLinkedObjects(): Promise<Array<NxLinkedObjectInfo>>;
    /**    Copies the properties of a generic object and its children.
  The source object is specified by the parameter qFromId and the destination object is referenced by its handle.
  The identifier of the destination object is the same as before the copy takes place.
  
      @param qFromId - Identifier of the object to copy.
    */
    copyFrom(qFromId: string): Promise<object>;
    /**    Begins the selection mode. The app enters the modal state. The specified object enters the selection mode and a modal window is opened. The selection mode can apply to only one object in an app at a time.
  When a visualization is in selection mode, selections can be made in this visualization. The visualization is not sorted until the selection mode is ended. Once the selection mode is ended and if the selections are accepted, the visualization is sorted according to the sort criteria. For more information about:
  
  • Ending the selection mode, see EndSelections Method.
  
  • The sort criteria, see ListObjectDef or HyperCubeDef.
  
   Example:
  A sheet contains a list object and a chart. If the list object is in selection mode then the chart cannot be in selection mode. No selection on the chart can be made until the list object exits the selection mode.
  
      @param qPaths - List of the paths to the definition of the objects to enter selection mode.
  For example, /qListObjectDef .
    */
    beginSelections(qPaths: Array<string>): Promise<object>;
    /**    Ends the selection mode on a visualization. The selections are accepted or aborted when exiting the selection mode, depending on the qAccept parameter value.
  
      @param qAccept - Set this parameter to true to accept the selections before exiting the selection mode.
    */
    endSelections(qAccept: boolean): Promise<object>;
    /**    Resets all selections made in selection mode.
  
    */
    resetMadeSelections(): Promise<object>;
    /**    Adds a snapshot to a generic object.
  Only one snapshot can be embedded in a generic object. If you embed a snapshot in an object that already contains a snapshot, the new snapshot overwrites the previous one.
  
      @param qId - Identifier of the bookmark.
    */
    embedSnapshotObject(qId: string): Promise<object>;
    /**    Returns the type of the object and the corresponding handle.
  
    */
    getSnapshotObject(): Promise<GenericObject>;
    /**    Publishes a generic object.
  This operation is not applicable for Qlik Sense Desktop.
  
    */
    publish(): Promise<object>;
    /**    Unpublishes a generic object.
  This operation is not applicable for Qlik Sense Desktop.
  
    */
    unPublish(): Promise<object>;
    /**    Adds the generic object to the list of approved objects
  This operation is possible only in Qlik Sense Enterprise.
  
    */
    approve(): Promise<object>;
    /**    Removes the generic object from the list of approved objects
  This operation is possible only in Qlik Sense Enterprise.
  
    */
    unApprove(): Promise<object>;
}
/**
  @param qChildren - Information about the children of the generic object.
  @param qEmbeddedSnapshotRef - Reference to a bookmark/snapshot that is embedded in the generic object.
  @param qProperty - Information about the generic object properties.
  @param auth - Auth object used to make requests
 */
export declare class GenericObjectEntry {
    auth?: Auth;
    qChildren?: Array<GenericObjectEntry>;
    qEmbeddedSnapshotRef?: GenericBookmarkEntry;
    qProperty?: GenericObjectProperties;
    [key: string]: any;
    constructor({ qChildren, qEmbeddedSnapshotRef, qProperty, ...rest }: {
        qChildren?: Array<GenericObjectEntry>;
        qEmbeddedSnapshotRef?: GenericBookmarkEntry;
        qProperty?: GenericObjectProperties;
    }, auth?: Auth);
}
/**
  Is the layout for GenericObjectProperties.
  @param qError - Gives information on the error.
This parameter is optional.
  @param qExtendsId - Should be set to create an object that is linked to another object. Enter the identifier of the object you want to link to.
If you do not want to link your object, set this parameter to an empty string.
  @param qHasSoftPatches - Is set to true if the generic object contains some properties that are not persistent (a soft patch was applied).
  @param qInfo - Identifier and type of the generic object.
  @param qMeta - Information about publishing and permissions.
This parameter is optional.
  @param qSelectionInfo - Information about the selections.
  @param qStateName - Name of the alternate state.
Default is current selections $ .
  @param qAppObjectList - Lists the app objects. Is the layout for AppObjectListDef.
An app object is a generic object created at app level.
  @param qBookmarkList - Lists the bookmarks. Is the layout for BookmarkListDef.
  @param qChildList - Lists the children of a generic object. Is the layout for ChildListDef.
ChildList is used by the GetLayout Method to list the children of a generic object.
  @param qDimensionList - Lists the dimensions. Is the layout for DimensionListDef.
  @param qEmbeddedSnapshot - Renders the embedded snapshot in an object.
The following is returned:

• Any dynamic properties defined in the bookmark

• Any properties defined in qEmbeddedSnapshot

 Properties:
"qEmbeddedSnapshot": {}
  @param qExtensionList - Obsolete, use qrs API's to fetch extensions.
  @param qFieldList - Lists the fields present in the data model viewer. Is the layout for FieldListDef.
  @param qHyperCube - Renders the properties of a hypercube. Is the layout for HyperCubeDef.
For more information about the definition of a hypercube, see Generic object.
What is returned in HyperCube depends on the type of the hypercube (straight, pivot or stacked table, or tree) and on the method called (GetLayout, GetHyperCubeData, GetHyperCubePivotData, GetHyperCubeStackData, GetHyperCubeTreeData).
  @param qListObject - Renders the properties of a list object. Is the layout for ListObjectDef.
For more information about the definition of a list object, see Generic object.
ListObject is used by the GetLayout Method to display the properties of a list object.
  @param qMeasureList - Lists the measures. Is the layout for MeasureListDef.
  @param qMediaList - Lists the media files. Is the layout for MediaListDef.
This struct is deprecated.
  @param qNxLibraryDimension
  @param qNxLibraryMeasure - Information about the library measure. Is the layout for NxLibraryMeasureDef.
  @param qSelectionObject - Indicates which selections are currently applied. It gives the current selections. Is the layout for SelectionObjectDef.
  @param qStaticContentUrl - In addition, this structure can return dynamic properties.
  @param qTreeData - Renders the properties of a TreeData object. Is the layout for TreeDataDef.
For more information about the definition of TreeData, see Generic object.
To retrieve data from the TreeData object, use the method called GetHyperCubeTreeData.
  @param qUndoInfo - Displays information about the number of possible undos and redos. Is the layout for UndoInfoDef.
  @param qVariableList - Lists the variables in an app. Is the layout for VariableListDef.
  @param auth - Auth object used to make requests
 */
export declare class GenericObjectLayout {
    auth?: Auth;
    qError?: NxLayoutErrors;
    qExtendsId?: string;
    qHasSoftPatches?: boolean;
    qInfo?: NxInfo;
    qMeta?: NxMeta;
    qSelectionInfo?: NxSelectionInfo;
    qStateName?: string;
    qAppObjectList?: AppObjectList;
    qBookmarkList?: BookmarkList;
    qChildList?: ChildList;
    qDimensionList?: DimensionList;
    qEmbeddedSnapshot?: EmbeddedSnapshot;
    qExtensionList?: ExtensionList;
    qFieldList?: FieldList;
    qHyperCube?: HyperCube;
    qListObject?: ListObject;
    qMeasureList?: MeasureList;
    qMediaList?: MediaList;
    qNxLibraryDimension?: NxLibraryDimension;
    qNxLibraryMeasure?: NxLibraryMeasure;
    qSelectionObject?: SelectionObject;
    qStaticContentUrl?: StaticContentUrl;
    qTreeData?: TreeData;
    qUndoInfo?: UndoInfo;
    qVariableList?: VariableList;
    [key: string]: any;
    constructor({ qError, qExtendsId, qHasSoftPatches, qInfo, qMeta, qSelectionInfo, qStateName, qAppObjectList, qBookmarkList, qChildList, qDimensionList, qEmbeddedSnapshot, qExtensionList, qFieldList, qHyperCube, qListObject, qMeasureList, qMediaList, qNxLibraryDimension, qNxLibraryMeasure, qSelectionObject, qStaticContentUrl, qTreeData, qUndoInfo, qVariableList, ...rest }: {
        qError?: NxLayoutErrors;
        qExtendsId?: string;
        qHasSoftPatches?: boolean;
        qInfo?: NxInfo;
        qMeta?: NxMeta;
        qSelectionInfo?: NxSelectionInfo;
        qStateName?: string;
        qAppObjectList?: AppObjectList;
        qBookmarkList?: BookmarkList;
        qChildList?: ChildList;
        qDimensionList?: DimensionList;
        qEmbeddedSnapshot?: EmbeddedSnapshot;
        qExtensionList?: ExtensionList;
        qFieldList?: FieldList;
        qHyperCube?: HyperCube;
        qListObject?: ListObject;
        qMeasureList?: MeasureList;
        qMediaList?: MediaList;
        qNxLibraryDimension?: NxLibraryDimension;
        qNxLibraryMeasure?: NxLibraryMeasure;
        qSelectionObject?: SelectionObject;
        qStaticContentUrl?: StaticContentUrl;
        qTreeData?: TreeData;
        qUndoInfo?: UndoInfo;
        qVariableList?: VariableList;
    }, auth?: Auth);
}
/**
  @param qExtendsId - Should be set to create an object that is linked to another object. Enter the identifier of the linking object (i.e the object you want to link to).
If you do not want to link your object, set this parameter to an empty string.
  @param qInfo - Identifier and type of the object.
This parameter is mandatory.
  @param qMetaDef - Definition of the dynamic properties.
  @param qStateName - Name of the alternate state.
Default is current selections $ .
  @param qAppObjectListDef - Defines the list of objects in an app.
An app object is a generic object created at app level.
  @param qBookmarkListDef - Defines the list of bookmarks.
  @param qChildListDef - Defines the list of children of a generic object.
What is defined in ChildListDef has an impact on what the GetLayout method returns. See Example for more information.
  @param qDimensionListDef - Defines the lists of dimensions.
  @param qEmbeddedSnapshotDef - Defines the embedded snapshot in a generic object.

 Properties:
"EmbeddedSnapshotDef": {}
  @param qExtensionListDef - Obsolete, use qrs API's to fetch extensions.
  @param qFieldListDef - Defines the fields to show.
  @param qHyperCubeDef - Defines the properties of a hypercube.
For more information about the definition of a hypercube, see Generic object.
  @param qLayoutExclude - Contains JSON to be excluded from validation.
  @param qListObjectDef - Defines the properties of a list object.
For more information about the definition of a list object, see Generic object.
  @param qMeasureListDef - Defines the list of measures.
  @param qMediaListDef - Defines the list of media files.
This struct is deprecated.

 Properties:
"qMediaListDef": {}
qMediaListDef has an empty structure. No properties need to be set.
  @param qNxLibraryDimensionDef
  @param qNxLibraryMeasureDef
  @param qSelectionObjectDef - To display the current selections.
Can be added to any generic object but is particularly meaningful when using session objects to monitor an app.

 Properties:
"qSelectionObjectDef": {}
  @param qStaticContentUrlDef - In addition, this structure can contain dynamic properties.
  @param qStringExpression -  Properties:
Abbreviated syntax:
"qStringExpression":"=<expression>"
Extended object syntax:
"qStringExpression":{"qExpr":"=<expression>"}
Where:

• < expression > is a string

The "=" sign in the string expression is not mandatory. Even if the "=" sign is not given, the expression is evaluated. A string expression is not evaluated, if the expression is surrounded by simple quotes.
The result of the evaluation of the expression can be of any type, as it is returned as a JSON (quoted) string.
  @param qTreeDataDef - Defines the properties of a TreeData object.
For more information about the definition of a TreeData object, see Generic object.
  @param qUndoInfoDef - Defines if an object should contain information on the number of possible undo and redo.

 Properties:
"qUndoInfoDef": {}
The numbers of undos and redos are empty when an object is created. The number of possible undos is increased every time an action (for example, create a child, set some properties) on the object is performed. The number of possible redos is increased every time an undo action is performed.
  @param qValueExpression -  Properties:
Abbreviated syntax:
"qValueExpression":"=<expression>"
Extended object syntax:
"qValueExpression":{"qExpr":"=<expression>"}
Where:

• < expression > is a string.

The "=" sign in the value expression is not mandatory. Even if the "=" sign is not given, the expression is evaluated.
The expression is evaluated as a numeric.
  @param qVariableListDef - Defines the list of variables in an app.
  @param auth - Auth object used to make requests
 */
export declare class GenericObjectProperties {
    auth?: Auth;
    qExtendsId?: string;
    qInfo?: NxInfo;
    qMetaDef?: NxMetaDef;
    qStateName?: string;
    qAppObjectListDef?: AppObjectListDef;
    qBookmarkListDef?: BookmarkListDef;
    qChildListDef?: ChildListDef;
    qDimensionListDef?: DimensionListDef;
    qEmbeddedSnapshotDef?: EmbeddedSnapshotDef;
    qExtensionListDef?: ExtensionListDef;
    qFieldListDef?: FieldListDef;
    qHyperCubeDef?: HyperCubeDef;
    qLayoutExclude?: LayoutExclude;
    qListObjectDef?: ListObjectDef;
    qMeasureListDef?: MeasureListDef;
    qMediaListDef?: MediaListDef;
    qNxLibraryDimensionDef?: NxLibraryDimensionDef;
    qNxLibraryMeasureDef?: NxLibraryMeasureDef;
    qSelectionObjectDef?: SelectionObjectDef;
    qStaticContentUrlDef?: StaticContentUrlDef;
    qStringExpression?: StringExpression;
    qTreeDataDef?: TreeDataDef;
    qUndoInfoDef?: UndoInfoDef;
    qValueExpression?: ValueExpression;
    qVariableListDef?: VariableListDef;
    [key: string]: any;
    constructor({ qExtendsId, qInfo, qMetaDef, qStateName, qAppObjectListDef, qBookmarkListDef, qChildListDef, qDimensionListDef, qEmbeddedSnapshotDef, qExtensionListDef, qFieldListDef, qHyperCubeDef, qLayoutExclude, qListObjectDef, qMeasureListDef, qMediaListDef, qNxLibraryDimensionDef, qNxLibraryMeasureDef, qSelectionObjectDef, qStaticContentUrlDef, qStringExpression, qTreeDataDef, qUndoInfoDef, qValueExpression, qVariableListDef, ...rest }: {
        qExtendsId?: string;
        qInfo?: NxInfo;
        qMetaDef?: NxMetaDef;
        qStateName?: string;
        qAppObjectListDef?: AppObjectListDef;
        qBookmarkListDef?: BookmarkListDef;
        qChildListDef?: ChildListDef;
        qDimensionListDef?: DimensionListDef;
        qEmbeddedSnapshotDef?: EmbeddedSnapshotDef;
        qExtensionListDef?: ExtensionListDef;
        qFieldListDef?: FieldListDef;
        qHyperCubeDef?: HyperCubeDef;
        qLayoutExclude?: LayoutExclude;
        qListObjectDef?: ListObjectDef;
        qMeasureListDef?: MeasureListDef;
        qMediaListDef?: MediaListDef;
        qNxLibraryDimensionDef?: NxLibraryDimensionDef;
        qNxLibraryMeasureDef?: NxLibraryMeasureDef;
        qSelectionObjectDef?: SelectionObjectDef;
        qStaticContentUrlDef?: StaticContentUrlDef;
        qStringExpression?: StringExpression;
        qTreeDataDef?: TreeDataDef;
        qUndoInfoDef?: UndoInfoDef;
        qValueExpression?: ValueExpression;
        qVariableListDef?: VariableListDef;
    }, auth?: Auth);
}
/**
  @param qGenericId - Object ID.
  @param qGenericType - The type of the object.
  @param qHandle - The handle used to connect to object.
  @param qType - The native type of the object.
  @param auth - Auth object used to make requests
 */
export declare class GenericVariable {
    session: RpcSession;
    auth: Auth;
    qGenericId?: string;
    qGenericType?: string;
    qHandle?: number;
    qType?: string;
    [key: string]: any;
    constructor({ qGenericId, qGenericType, qHandle, qType, ...rest }: {
        qGenericId?: string;
        qGenericType?: string;
        qHandle?: number;
        qType?: string;
    }, session: RpcSession, auth?: Auth);
    /**    Evaluates an object and displays its properties including the dynamic properties.
  If the member delta is set to true in the request object, only the delta is evaluated.
  
    */
    getLayout(): Promise<GenericVariableLayout>;
    /**    Applies a patch to the properties of a variable. Allows an update to some of the properties. It should not be possible to patch "/qInfo/qId",
  and it will be forbidden in the near future.
  Applying a patch takes less time than resetting all the properties.
  
      @param qPatches - Array of patches.
    */
    applyPatches(qPatches: Array<NxPatch>): Promise<object>;
    /**    Sets some properties for a variable.
  The identifier of a variable cannot be modified. You cannot update the properties of a script-defined variable using the SetProperties method.
  
      @param qProp - Information about the variable.
    */
    setProperties(qProp: GenericVariableProperties): Promise<object>;
    /**    Shows the properties of an object.
  If the member delta is set to true in the request, only the delta is retrieved.
  The following is always returned in the output:
  
    */
    getProperties(): Promise<GenericVariableProperties>;
    /**    Returns the type and identifier of the object.
  
    */
    getInfo(): Promise<NxInfo>;
    /**    Sets a string value to a variable.
  These changes are not persistent. They only last the duration of the engine session.
  
      @param qVal - Value of the variable. The string can contain an expression.
    */
    setStringValue(qVal: string): Promise<object>;
    /**    Sets a numerical value to a variable.
  These changes are not persistent. They only last the duration of the engine session.
  
      @param qVal - Value of the variable.
    */
    setNumValue(qVal: number): Promise<object>;
    /**    Sets the value of a dual variable.
  These changes are not persistent. They only last the duration of the engine session.
  
      @param qText - String representation of a dual value. Set this parameter to "", if the string representation is to be Null.
      @param qNum - Numeric representation of a dual value.
    */
    setDualValue(qText: string, qNum: number): Promise<object>;
    /**    Returns the raw value of a variable.
  
    */
    getRawContent(): Promise<string>;
}
/**
  Is the layout for GenericVariableProperties.
  @param qInfo - Identifier and type of the object.
This parameter is mandatory.
  @param qIsScriptCreated - If set to true, it means that the variable was defined via script.
  @param qMeta - Information about publishing and permissions.
This parameter is optional.
  @param qNum - A value.
  @param qText - Some text.
  @param auth - Auth object used to make requests
 */
export declare class GenericVariableLayout {
    auth?: Auth;
    qInfo?: NxInfo;
    qIsScriptCreated?: boolean;
    qMeta?: NxMeta;
    qNum?: number;
    qText?: string;
    [key: string]: any;
    constructor({ qInfo, qIsScriptCreated, qMeta, qNum, qText, ...rest }: {
        qInfo?: NxInfo;
        qIsScriptCreated?: boolean;
        qMeta?: NxMeta;
        qNum?: number;
        qText?: string;
    }, auth?: Auth);
}
/**
  @param qComment - Comment related to the variable.
This parameter is optional.
  @param qDefinition - Definition of the variable.
  @param qIncludeInBookmark - Set this property to true to update the variable when applying a bookmark. The variable value will be persisted in the bookmark.
The value of a variable can affect the state of the selections.
Script variables cannot be persisted in the bookmark.
The default value is false.
  @param qInfo - Identifier and type of the object.
This parameter is mandatory.
  @param qMetaDef - Meta data.
  @param qName - Name of the variable.
The name must be unique.
This parameter is mandatory.
  @param qNumberPresentation - Defines the format of the value.
This parameter is optional.
  @param auth - Auth object used to make requests
 */
export declare class GenericVariableProperties {
    auth?: Auth;
    qComment?: string;
    qDefinition?: string;
    qIncludeInBookmark?: boolean;
    qInfo?: NxInfo;
    qMetaDef?: NxMetaDef;
    qName?: string;
    qNumberPresentation?: FieldAttributes;
    [key: string]: any;
    constructor({ qComment, qDefinition, qIncludeInBookmark, qInfo, qMetaDef, qName, qNumberPresentation, ...rest }: {
        qComment?: string;
        qDefinition?: string;
        qIncludeInBookmark?: boolean;
        qInfo?: NxInfo;
        qMetaDef?: NxMetaDef;
        qName?: string;
        qNumberPresentation?: FieldAttributes;
    }, auth?: Auth);
}
/**
  @param qBnfDefs
  @param qBnfHash
  @param auth - Auth object used to make requests
 */
export declare class GetBaseBNFReturn {
    auth?: Auth;
    qBnfDefs?: Array<BNFDef>;
    qBnfHash?: string;
    [key: string]: any;
    constructor({ qBnfDefs, qBnfHash, ...rest }: {
        qBnfDefs?: Array<BNFDef>;
        qBnfHash?: string;
    }, auth?: Auth);
}
/**
  @param qBnfHash
  @param qBnfStr
  @param auth - Auth object used to make requests
 */
export declare class GetBaseBNFStringReturn {
    auth?: Auth;
    qBnfHash?: string;
    qBnfStr?: string;
    [key: string]: any;
    constructor({ qBnfHash, qBnfStr, ...rest }: {
        qBnfHash?: string;
        qBnfStr?: string;
    }, auth?: Auth);
}
/**
  @param qPreview
  @param qRowCount
  @param auth - Auth object used to make requests
 */
export declare class GetDatabaseTablePreviewReturn {
    auth?: Auth;
    qPreview?: Array<DataRecord>;
    qRowCount?: number;
    [key: string]: any;
    constructor({ qPreview, qRowCount, ...rest }: {
        qPreview?: Array<DataRecord>;
        qRowCount?: number;
    }, auth?: Auth);
}
/**
  @param qBnfDefs
  @param qBnfHash
  @param auth - Auth object used to make requests
 */
export declare class GetExpressionBNFReturn {
    auth?: Auth;
    qBnfDefs?: Array<BNFDef>;
    qBnfHash?: string;
    [key: string]: any;
    constructor({ qBnfDefs, qBnfHash, ...rest }: {
        qBnfDefs?: Array<BNFDef>;
        qBnfHash?: string;
    }, auth?: Auth);
}
/**
  @param qFields
  @param qFormatSpec
  @param auth - Auth object used to make requests
 */
export declare class GetFileTableFieldsReturn {
    auth?: Auth;
    qFields?: Array<DataField>;
    qFormatSpec?: string;
    [key: string]: any;
    constructor({ qFields, qFormatSpec, ...rest }: {
        qFields?: Array<DataField>;
        qFormatSpec?: string;
    }, auth?: Auth);
}
/**
  @param qFormatSpec
  @param qPreview
  @param auth - Auth object used to make requests
 */
export declare class GetFileTablePreviewReturn {
    auth?: Auth;
    qFormatSpec?: string;
    qPreview?: Array<DataRecord>;
    [key: string]: any;
    constructor({ qFormatSpec, qPreview, ...rest }: {
        qFormatSpec?: string;
        qPreview?: Array<DataRecord>;
    }, auth?: Auth);
}
/**
  @param qAxisData
  @param qDataPages
  @param auth - Auth object used to make requests
 */
export declare class GetHyperCubeContinuousDataReturn {
    auth?: Auth;
    qAxisData?: NxAxisData;
    qDataPages?: Array<NxDataPage>;
    [key: string]: any;
    constructor({ qAxisData, qDataPages, ...rest }: {
        qAxisData?: NxAxisData;
        qDataPages?: Array<NxDataPage>;
    }, auth?: Auth);
}
/**
  @param qDef
  @param qReturn
  @param auth - Auth object used to make requests
 */
export declare class GetInteractReturn {
    auth?: Auth;
    qDef?: InteractDef;
    qReturn?: boolean;
    [key: string]: any;
    constructor({ qDef, qReturn, ...rest }: {
        qDef?: InteractDef;
        qReturn?: boolean;
    }, auth?: Auth);
}
/**
  @param qList - Lists the media files. Is the layout for MediaListDef.
This struct is deprecated.
  @param qReturn
  @param auth - Auth object used to make requests
 */
export declare class GetMediaListReturn {
    auth?: Auth;
    qList?: MediaList;
    qReturn?: boolean;
    [key: string]: any;
    constructor({ qList, qReturn, ...rest }: {
        qList?: MediaList;
        qReturn?: boolean;
    }, auth?: Auth);
}
/**
  @param qk
  @param qtr
  @param auth - Auth object used to make requests
 */
export declare class GetTablesAndKeysReturn {
    auth?: Auth;
    qk?: Array<SourceKeyRecord>;
    qtr?: Array<TableRecord>;
    [key: string]: any;
    constructor({ qk, qtr, ...rest }: {
        qk?: Array<SourceKeyRecord>;
        qtr?: Array<TableRecord>;
    }, auth?: Auth);
}
/**
  @param qGenericId - Object ID.
  @param qGenericType - The type of the object.
  @param qHandle - The handle used to connect to object.
  @param qType - The native type of the object.
  @param auth - Auth object used to make requests
 */
export declare class Global {
    session: RpcSession;
    auth: Auth;
    qGenericId?: string;
    qGenericType?: string;
    qHandle?: number;
    qType?: string;
    [key: string]: any;
    constructor({ qGenericId, qGenericType, qHandle, qType, ...rest }: {
        qGenericId?: string;
        qGenericType?: string;
        qHandle?: number;
        qType?: string;
    }, session: RpcSession, auth?: Auth);
    /**    Sets an abort flag on a specific request in the current engine session.
  
  • If an abort flag is set on a pending request, the request is aborted.
  
  • If an abort flag is set on an ongoing request, the engine checks to see if it is possible to abort the request.
  
      @param qRequestId - Identifier of request to abort.
    */
    abortRequest(qRequestId: number): Promise<object>;
    /**    Sets an abort flag on all pending and ongoing requests in the current engine session.
  
  • If an abort flag is set on a pending request, the request is aborted.
  
  • If an abort flag is set on an ongoing request, the engine checks to see if it is possible to abort the request.
  
    */
    abortAll(): Promise<object>;
    /**    Gives information about the progress of the DoReload and DoSave calls.
  For more information on DoReload and DoSave, see the DoReload Method and DoSave Method.
  
      @param qRequestId - Identifier of the DoReload or DoSave request or 0.
  Complete information is returned if the identifier of the request is given.
  If the identifier is 0, less information is given. Progress messages and error messages are returned but information like when the request started and finished is not returned.
    */
    getProgress(qRequestId: number): Promise<ProgressData>;
    /**    Retrieves information on the user interaction that is requested by the engine.
  Engine can request user interactions only during script reload and when the reload is performed in debug mode ( qDebug is set to true when using the DoReload method ).
  When running reload in debug mode, the engine pauses the script execution to receive data about user interaction. The engine can pause:
  
  • Before executing a new script statement.
  
  • When an error occurs while executing the script.
  
  • When the script execution is finished.
  
  To know if the engine is paused and waits for a response to an interaction request, the GetProgress method should be used. The engine waits for a response if the property qUserInteractionWanted is set to true in the response of the GetProgress request.
  
      @param qRequestId - Identifier of the request.
  Corresponds to the identifier of the DoReload request.
    */
    getInteract(qRequestId: number): Promise<GetInteractReturn>;
    /**    Informs the engine that a user interaction (which was earlier requested by the engine) was performed and indicates to the engine what to do next.
  
      @param qRequestId - Identifier of the request.
  Corresponds to the identifier of the DoReload request.
      @param qDef - User response to the current interaction.
    */
    interactDone(qRequestId: number, qDef: InteractDef): Promise<object>;
    /**    Retrieves information about the authenticated user.
  
    */
    getAuthenticatedUser(): Promise<string>;
    /**    Returns the handle of the current app.
  
    */
    getActiveDoc(): Promise<Doc>;
    /**    Indicates whether or not a user is able to create an app.
  
    */
    allowCreateApp(): Promise<boolean>;
    /**    Indicates whether the user is working in Qlik Sense Desktop.
  
    */
    isDesktopMode(): Promise<boolean>;
    /**    Cancels an ongoing request. The request is stopped.
  
      @param qRequestId - Identifier of the request to stop.
    */
    cancelRequest(qRequestId: number): Promise<object>;
    /**    Shuts down the Qlik engine.
  This operation is possible only in Qlik Sense Desktop.
  
    */
    shutdownProcess(): Promise<object>;
    /**    Replaces objects of a target app with the objects from a source app.
  The list of objects in the app to be replaced must be defined in qIds.
  The data model of the app cannot be updated.  This operation is possible only in Qlik Sense Enterprise.
  
  The operation is successful if qSuccess is set to true.
  
      @param qTargetAppId - Identifier (GUID) of the target app.
  The target app is the app to be replaced.
      @param qSrcAppID - Identifier (GUID) of the source app.
  The objects in the source app will replace the objects in the target app.
      @param qIds - QRS identifiers (GUID) of the objects in the target app to be replaced. Only QRS-approved GUIDs are applicable.
  An object that is QRS-approved, is for example an object that has been published (for example, not private anymore).
  If an object is private, it should not be included in this list.
  If the array of identifiers contains objects that are not present in the source app, the objects related to these identifiers are removed from the target app.
  If qIds is empty, no objects are deleted in the target app.
    */
    replaceAppFromID(qTargetAppId: string, qSrcAppID: string, qIds: Array<string>): Promise<boolean>;
    /**    Publishes an app to the supplied stream.
  
      @param qAppId - The Id of the app to publish.
      @param qName - The name of the app to publish.
      @param qStreamId - The stream Id of the app to publish.
    */
    publishApp(qAppId: string, qName: string, qStreamId: string): Promise<object>;
    /**    Indicates whether or not the user is working in personal mode (Qlik Sense Desktop).
  
      @deprecated
  
    */
    isPersonalMode(): Promise<boolean>;
    /**    Returns the unique identifier of the endpoint for the current user in the current app.
  This unique identifier can be used for logging purposes.
  
    */
    getUniqueID(): Promise<string>;
    /**    Opens an app and checks if the app needs to be migrated (if the app is deprecated).
  The OpenDoc method compares the version of the app with the version of Qlik Sense and migrates the app to the current version of Qlik Sense if necessary. Once the migration is done, the app is opened.
  If no migration is needed, the app is opened immediately.
  The following applies:
  
  • The app version is lower than 0.95: no migration is done. Apps older than the version 0.95 are not supported.
  
  • The app version is at least 0.95 and less than the Qlik Sense version: the app is migrated and then opened.
  
  • Qlik Sense and the app have the same version: the app is opened, no migration is needed.
  
  If the app is read-only, the app migration cannot occur. An error message is sent.
  
   Backups:
  In Qlik Sense Desktop, apps are automatically backed up before a migration.
  The backup files are located in %userprofile%\Documents\Qlik\Sense\AppsBackup\<Qlik Sense Desktop version>.
  In Qlik Sense Enterprise, no automatic back up is run. The back up should be done manually.
  
      @param qDocName - The GUID (in Qlik Sense Enterprise) or Name (in Qlik Sense Desktop) of the app to retrieve.
      @param qUserName - Name of the user that opens the app.
      @param qPassword - Password of the user.
      @param qSerial - Current Qlik Sense serial number.
      @param qNoData - Set this parameter to true to be able to open an app without loading its data.
  When this parameter is set to true, the objects in the app are present but contain no data. The script can be edited and reloaded.
  The default value is false.
    */
    openDoc(qDocName: string, qUserName?: string, qPassword?: string, qSerial?: string, qNoData?: boolean): Promise<Doc>;
    /**    Returns the Qlik Sense version number.
  
      @deprecated
  
    */
    productVersion(): Promise<string>;
    /**    Retrieves the meta data of an app.
  
      @param qAppID - Identifier of the app, as returned by the CreateApp method.
  One of:
  
  • Path and name of the app (Qlik Sense Desktop)
  
  • GUID (Qlik Sense Enterprise)
    */
    getAppEntry(qAppID: string): Promise<AppEntry>;
    /**    Configures the engine's behavior during a reload.
  The ConfigureReload method should be run before the DoReload method.
  
      @param qCancelOnScriptError - If set to true, the script execution is halted on error.
  Otherwise, the engine continues the script execution.
  This parameter is relevant only if the variable ErrorMode is set to 1.
      @param qUseErrorData - If set to true, any script execution error is returned in qErrorData by the GetProgress method.
      @param qInteractOnError - If set to true, the script execution is halted on error and the engine is waiting for an interaction to be performed. If the result from the interaction is 1 (qDef.qResult is 1), the engine continues the script execution otherwise the execution is halted.
  This parameter is relevant only if the variable ErrorMode is set to 1 and the script is run in debug mode (qDebug is set to true when calling the DoReload method).
    */
    configureReload(qCancelOnScriptError: boolean, qUseErrorData: boolean, qInteractOnError: boolean): Promise<object>;
    /**    Cancels an ongoing reload. The reload of the app is stopped. The indexation can be canceled and true is still the return value of the reload task.
  
    */
    cancelReload(): Promise<object>;
    /**    Gets the current Backus-Naur Form (BNF) grammar of the Qlik engine scripting language. The BNF rules define the syntax for the script statements and the script or chart functions.
  In the Qlik engine BNF grammar, a token is a string of one or more characters that is significant as a group. For example, a token could be a function name, a number, a letter, a parenthesis, and so on.
  
      @deprecated
  
      @param qBnfType - Returns a set of rules defining the syntax for:
  
  • The script statements and the script functions if qBnfType is set to S.
  
  • The chart functions if qBnfType is set to E.
  
  One of:
  
  • S or SCRIPT_TEXT_SCRIPT
  
  • E or SCRIPT_TEXT_EXPRESSION
    */
    getBNF(qBnfType: string): Promise<Array<BNFDef>>;
    /**    Gets the list of all the script functions.
  
      @param qGroup - Name of the group.
  Default is all groups.
  
  One of:
  
  • ALL or FUNC_GROUP_ALL
  
  • U or FUNC_GROUP_UNKNOWN
  
  • NONE or FUNC_GROUP_NONE
  
  • AGGR or FUNC_GROUP_AGGR
  
  • NUM or FUNC_GROUP_NUMERIC
  
  • RNG or FUNC_GROUP_RANGE
  
  • EXP or FUNC_GROUP_EXPONENTIAL_AND_LOGARITHMIC
  
  • TRIG or FUNC_GROUP_TRIGONOMETRIC_AND_HYPERBOLIC
  
  • FIN or FUNC_GROUP_FINANCIAL
  
  • MATH or FUNC_GROUP_MATH_CONSTANT_AND_PARAM_FREE
  
  • COUNT or FUNC_GROUP_COUNTER
  
  • STR or FUNC_GROUP_STRING
  
  • MAPP or FUNC_GROUP_MAPPING
  
  • RCRD or FUNC_GROUP_INTER_RECORD
  
  • CND or FUNC_GROUP_CONDITIONAL
  
  • LOG or FUNC_GROUP_LOGICAL
  
  • NULL or FUNC_GROUP_NULL
  
  • SYS or FUNC_GROUP_SYSTEM
  
  • FILE or FUNC_GROUP_FILE
  
  • TBL or FUNC_GROUP_TABLE
  
  • DATE or FUNC_GROUP_DATE_AND_TIME
  
  • NUMI or FUNC_GROUP_NUMBER_INTERPRET
  
  • FRMT or FUNC_GROUP_FORMATTING
  
  • CLR or FUNC_GROUP_COLOR
  
  • RNK or FUNC_GROUP_RANKING
  
  • GEO or FUNC_GROUP_GEO
  
  • EXT or FUNC_GROUP_EXTERNAL
  
  • PROB or FUNC_GROUP_PROBABILITY
  
  • ARRAY or FUNC_GROUP_ARRAY
  
  • LEG or FUNC_GROUP_LEGACY
  
  • DB or FUNC_GROUP_DB_NATIVE
    */
    getFunctions(qGroup?: string): Promise<Array<Function>>;
    /**    Returns the list of the ODBC connectors that are installed in the system.
  
    */
    getOdbcDsns(): Promise<Array<OdbcDsn>>;
    /**    Returns the list of the OLEDB providers installed on the system.
  
    */
    getOleDbProviders(): Promise<Array<OleDbProvider>>;
    /**    Lists the databases in a ODBC, OLEDB or CUSTOM data source.
  
      @param qConnection - Information about the connection.
    */
    getDatabasesFromConnectionString(qConnection: Connection): Promise<Array<Database>>;
    /**    Checks if a connection string is valid.
  
      @param qConnection - Information about the connection.
    */
    isValidConnectionString(qConnection: Connection): Promise<boolean>;
    /**    Returns the folder where the apps are stored.
  This method applies only if running Qlik Sense Desktop.
  
    */
    getDefaultAppFolder(): Promise<string>;
    /**    Lists the logical drives in the system.
  This method applies only if running Qlik Sense Desktop.
  
    */
    getLogicalDriveStrings(): Promise<Array<DriveInfo>>;
    /**    Returns the files and folders located at a specified path.
  
      @param qPath - Absolute or relative path.
  Relative paths are relative to the default Apps folder.
  
  In Qlik Sense Enterprise:
  
  The list is generated by the QRS. The GetDocList method only returns documents the current user is allowed to access.
  
  In Qlik Sense Desktop:
  
  The apps are located in C:\\Users\<user name>\Documents\Qlik\Sense\Apps.
    */
    getFolderItemsForPath(qPath: string): Promise<Array<FolderItem>>;
    /**    Lists the supported code pages.
  
    */
    getSupportedCodePages(): Promise<Array<CodePage>>;
    /**    List the custom connectors available in the system.
  
      @param qReloadList - Sets if the list of custom connectors should be reloaded or not.
  If set to false, only the connectors that were returned the previous time are returned. If new connectors have been added since the last call to the GetCustomConnectors method was made, the new connectors are not returned.
  If set to true, the GetCustomConnectors method looks for new connectors in the file system.
  The default value is false.
    */
    getCustomConnectors(qReloadList?: boolean): Promise<Array<CustomConnector>>;
    /**    Lists the streams.
  
      @deprecated
  
    */
    getStreamList(): Promise<Array<NxStreamListEntry>>;
    /**    Returns the version number of the Qlik engine component.
  
    */
    engineVersion(): Promise<NxEngineVersion>;
    /**    Gets the current Backus-Naur Form (BNF) grammar of the Qlik engine scripting language, as well as a string hash calculated from that grammar. The BNF rules define the syntax for the script statements and the script or chart functions. If the hash changes between subsequent calls to this method, this indicates that the BNF has changed.
  In the Qlik engine grammars, a token is a string of one or more characters that is significant as a group. For example, a token could be a function name, a number, a letter, a parenthesis, and so on.
  
      @param qBnfType - The type of grammar to return:
  
  • The script statements and the script functions if qBnfType is set to S.
  
  • The chart functions if qBnfType is set to E.
  
  One of:
  
  • S or SCRIPT_TEXT_SCRIPT
  
  • E or SCRIPT_TEXT_EXPRESSION
    */
    getBaseBNF(qBnfType: string): Promise<GetBaseBNFReturn>;
    /**    Gets a string hash calculated from the current Backus-Naur Form (BNF) grammar of the Qlik engine scripting language. If the hash changes between subsequent calls to this method, this indicates that the BNF grammar has changed.
  
      @param qBnfType - The type of grammar to return:
  
  • The script statements and the script functions if qBnfType is set to S.
  
  • The chart functions if qBnfType is set to E.
  
  One of:
  
  • S or SCRIPT_TEXT_SCRIPT
  
  • E or SCRIPT_TEXT_EXPRESSION
    */
    getBaseBNFHash(qBnfType: string): Promise<string>;
    /**    Gets the current Backus-Naur Form (BNF) grammar of the Qlik engine scripting language, as well as a string hash calculated from that grammar. The BNF rules define the syntax for the script statements and the script or chart functions. If the hash changes between subsequent calls to this method, this indicates that the BNF has changed.
  In the Qlik engine grammars, a token is a string of one or more characters that is significant as a group. For example, a token could be a function name, a number, a letter, a parenthesis, and so on.
  
      @param qBnfType - The type of grammar to return:
  
  • S: returns the script statements and the script functions.
  
  • E: returns the chart functions.
  
  One of:
  
  • S or SCRIPT_TEXT_SCRIPT
  
  • E or SCRIPT_TEXT_EXPRESSION
    */
    getBaseBNFString(qBnfType: string): Promise<GetBaseBNFStringReturn>;
    /**    Save a copy of an app with a different name.
  Can be used to save a session app as an ordinary app.
  
      @deprecated
  
      @param qNewAppName - <Name of the saved app>
    */
    saveAs(qNewAppName: string): Promise<string>;
}
export declare class GraphMode {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qCyclePos
  @param qId
  @param auth - Auth object used to make requests
 */
export declare class GroupBookmarkData {
    auth?: Auth;
    qCyclePos?: number;
    qId?: string;
    [key: string]: any;
    constructor({ qCyclePos, qId, ...rest }: {
        qCyclePos?: number;
        qId?: string;
    }, auth?: Auth);
}
/**
  @param qCurrentItemName
  @param qGroupName
  @param auth - Auth object used to make requests
 */
export declare class GroupStateInfo {
    auth?: Auth;
    qCurrentItemName?: string;
    qGroupName?: string;
    [key: string]: any;
    constructor({ qCurrentItemName, qGroupName, ...rest }: {
        qCurrentItemName?: string;
        qGroupName?: string;
    }, auth?: Auth);
}
/**
  Renders the properties of a hypercube. Is the layout for HyperCubeDef.
For more information about the definition of a hypercube, see Generic object.
What is returned in HyperCube depends on the type of the hypercube (straight, pivot or stacked table, or tree) and on the method called (GetLayout, GetHyperCubeData, GetHyperCubePivotData, GetHyperCubeStackData, GetHyperCubeTreeData).
  @param qCalcCondMsg - The message displayed if calculation condition is not fulfilled.
  @param qColumnOrder - The order of the columns.
  @param qDataPages - Set of data.
Is empty if nothing has been defined in qInitialDataFetch in HyperCubeDef.
  @param qDimensionInfo - Information on the dimension.
  @param qEffectiveInterColumnSortOrder - Sort order of the columns in the hypercube.
Column numbers are separated by a comma.
Example: [1,0,2] means that the first column to be sorted was the column 1, followed by the column 0 and the column 2.
  @param qError - This parameter is optional and is displayed in case of error.
  @param qGrandTotalRow - Aggregate for measures of all values in the field.
The result value depends on the qAggrFunc defined in HyperCubeDef.
  @param qHasOtherValues - True if other row exists.
  @param qIndentMode - Is used for pivot tables only.
If set to true, the formatting of the results is slightly different.
This property is optional.
  @param qLastExpandedPos - Is used for pivot tables only.
Position of the last expended cell.
This property is optional.
  @param qMeasureInfo - Information on the measure.
  @param qMode - Information about the mode of the visualization.

One of:

• S or DATA_MODE_STRAIGHT

• P or DATA_MODE_PIVOT

• K or DATA_MODE_PIVOT_STACK

• T or DATA_MODE_TREE

• D or DATA_MODE_DYNAMIC
  @param qNoOfLeftDims - Number of left dimensions.
Default value is -1.
The index related to each left dimension depends on the position of the pseudo dimension (if any).
For example, a pivot table with:

• Four dimensions in the following order: Country, City, Product and Category

• One pseudo dimension in position 1

• Three left dimensions.

implies that:

• The index 0 corresponds to the left dimension Country.

• The index 1 corresponds to the pseudo dimension.

• The index 2 corresponds to the left dimension City.

• Product and Category are top dimensions.

Another example:

• Four dimensions in the following order: Country, City, Product and Category.

• One pseudo dimension in position -1.

• Three left dimensions.

implies that:

• The index -1 corresponds to the pseudo dimension; the pseudo dimension is the most to the right.

• The index 0 corresponds to the left dimension Country.

• The index 1 corresponds to the left dimension City.

• The index 2 corresponds to the left dimension Product.

• Category is a top dimension.
  @param qPivotDataPages - Set of data for pivot tables.
Is empty if nothing has been defined in qInitialDataFetch in HyperCubeDef.
  @param qSize - Defines the size of the hypercube.
  @param qStackedDataPages - Set of data for stacked tables.
Is empty if nothing has been defined in qInitialDataFetch in HyperCubeDef.
  @param qStateName - Name of the alternate state.
Default is current selections $ .
  @param qTitle - Title of the hypercube, for example the title of a chart.
  @param qTreeNodesOnDim - The total number of nodes on each dimension (only applicable when qMode = T ).
  @param auth - Auth object used to make requests
 */
export declare class HyperCube {
    auth?: Auth;
    qCalcCondMsg?: string;
    qColumnOrder?: Array<number>;
    qDataPages?: Array<NxDataPage>;
    qDimensionInfo?: Array<NxDimensionInfo>;
    qEffectiveInterColumnSortOrder?: Array<number>;
    qError?: NxValidationError;
    qGrandTotalRow?: Array<NxCell>;
    qHasOtherValues?: boolean;
    qIndentMode?: boolean;
    qLastExpandedPos?: NxCellPosition;
    qMeasureInfo?: Array<NxMeasureInfo>;
    qMode?: 'DATA_MODE_STRAIGHT' | 'DATA_MODE_PIVOT' | 'DATA_MODE_PIVOT_STACK' | 'DATA_MODE_TREE' | 'DATA_MODE_DYNAMIC' | string;
    qNoOfLeftDims?: number;
    qPivotDataPages?: Array<NxPivotPage>;
    qSize?: Size;
    qStackedDataPages?: Array<NxStackPage>;
    qStateName?: string;
    qTitle?: string;
    qTreeNodesOnDim?: Array<number>;
    [key: string]: any;
    constructor({ qCalcCondMsg, qColumnOrder, qDataPages, qDimensionInfo, qEffectiveInterColumnSortOrder, qError, qGrandTotalRow, qHasOtherValues, qIndentMode, qLastExpandedPos, qMeasureInfo, qMode, qNoOfLeftDims, qPivotDataPages, qSize, qStackedDataPages, qStateName, qTitle, qTreeNodesOnDim, ...rest }: {
        qCalcCondMsg?: string;
        qColumnOrder?: Array<number>;
        qDataPages?: Array<NxDataPage>;
        qDimensionInfo?: Array<NxDimensionInfo>;
        qEffectiveInterColumnSortOrder?: Array<number>;
        qError?: NxValidationError;
        qGrandTotalRow?: Array<NxCell>;
        qHasOtherValues?: boolean;
        qIndentMode?: boolean;
        qLastExpandedPos?: NxCellPosition;
        qMeasureInfo?: Array<NxMeasureInfo>;
        qMode?: 'DATA_MODE_STRAIGHT' | 'DATA_MODE_PIVOT' | 'DATA_MODE_PIVOT_STACK' | 'DATA_MODE_TREE' | 'DATA_MODE_DYNAMIC' | string;
        qNoOfLeftDims?: number;
        qPivotDataPages?: Array<NxPivotPage>;
        qSize?: Size;
        qStackedDataPages?: Array<NxStackPage>;
        qStateName?: string;
        qTitle?: string;
        qTreeNodesOnDim?: Array<number>;
    }, auth?: Auth);
}
/**
  Defines the properties of a hypercube.
For more information about the definition of a hypercube, see Generic object.
  @param qAlwaysFullyExpanded - If this property is set to true, the cells are always expanded. It implies that it is not possible to collapse any cells.
The default value is false.
  @param qCalcCond - Specifies a calculation condition, which must be fulfilled for the hypercube to be (re)calculated.
As long as the condition is not met, the engine does not perform a new calculation.
This property is optional. By default, there is no calculation condition.
  @param qCalcCondition - Specifies a calculation condition object.
If CalcCondition.Cond is not fulfilled, the hypercube is not calculated and CalcCondition.Msg is evaluated.
By default, there is no calculation condition.
This property is optional.
  @param qColumnOrder - The order of the columns.
  @param qContextSetExpression - Set Expression valid for the whole cube. Used to limit computations to the set specified.
  @param qDimensions - Array of dimensions.
  @param qDynamicScript - Hypercube Modifier Dynamic script string
  @param qExpansionState - Expansion state per dimension for pivot mode ( qMode is P).
  @param qIndentMode - This property applies for pivot tables and allows to change the layout of the table. An indentation is added to the beginning of each row.
The default value is false.
  @param qInitialDataFetch - Initial data set.
  @param qInterColumnSortOrder - Defines the sort order of the columns in the hypercube.
Column numbers are separated by a comma.
Example: [1,0,2] means that the first column to be sorted should be the column 1, followed by the column 0 and the column 2.
The default sort order is the order in which the dimensions and measures have been defined in the hypercube. By default, the pseudo-dimension (if any) is the most to the right in the array.
The index of the pseudo-dimension (if any) is -1.
Pseudo dimensions only apply for pivot tables with more than one measure.
A pseudo dimension groups together the measures defined in a pivot table. You can neither collapse/expand a pseudo dimension nor make any selections in it.
Stacked pivot tables can only contain one measure.
  @param qMaxStackedCells - Maximum number of cells for an initial data fetch (set in qInitialDataFetch ) when in stacked mode ( qMode is K).
The default value is 5000.
  @param qMeasures - Array of measures.
  @param qMode - Defines the way the data are handled internally by the engine.
Default value is DATA_MODE_STRAIGHT .
A pivot table can contain several dimensions and measures whereas a stacked pivot table can contain several dimensions but only one measure.

One of:

• S or DATA_MODE_STRAIGHT

• P or DATA_MODE_PIVOT

• K or DATA_MODE_PIVOT_STACK

• T or DATA_MODE_TREE

• D or DATA_MODE_DYNAMIC
  @param qNoOfLeftDims - Number of left dimensions.
Default value is -1. In that case, all dimensions are left dimensions.
Hidden dimensions (e.g. due to unfulfilled calc condition on dimension level) is still counted in this context.
The index related to each left dimension depends on the position of the pseudo dimension (if any).
For example, a pivot table with:

• Four dimensions in the following order: Country, City, Product and Category.

• One pseudo dimension in position 1 (the position is defined in qInterColumnSortOrder )
qInterColumnSortOrder is (0,-1,1,2,3).

• Three left dimensions ( qNoOfLeftDims is set to 3).

implies that:

• The index 0 corresponds to the left dimension Country.

• The index 1 corresponds to the pseudo dimension.

• The index 2 corresponds to the left dimension City.

• Product and Category are top dimensions.

Another example:

• Four dimensions in the following order: Country, City, Product and Category.

• Three left dimensions ( qNoOfLeftDims is set to 3).

• One pseudo dimension.

• The property qInterColumnSortOrder is left empty.

Implies that:

• The index 0 corresponds to the left dimension Country.

• The index 1 corresponds to the left dimension City.

• The index 2 corresponds to the left dimension Product.

• Category is a top dimension.

• The pseudo dimension is a top dimension.
  @param qPopulateMissing - If this property is set to true, the missing symbols (if any) are replaced by 0 if the value is a numeric and by an empty string if the value is a string.
The default value is false.
  @param qPseudoDimPos
  @param qReductionMode -
One of:

• N or DATA_REDUCTION_NONE

• D1 or DATA_REDUCTION_ONEDIM

• S or DATA_REDUCTION_SCATTERED

• C or DATA_REDUCTION_CLUSTERED

• ST or DATA_REDUCTION_STACKED
  @param qShowTotalsAbove - If set to true, the total (if any) is shown on the first row.
The default value is false.
  @param qSortbyYValue - To enable the sorting by ascending or descending order in the values of a measure.
This property applies to pivot tables and stacked pivot tables.
In the case of a pivot table, the measure or pseudo dimension should be defined as a top dimension. The sorting is restricted to the values of the first measure in a pivot table.
  @param qStateName - Name of the alternate state.
Default is current selections $ .
  @param qSuppressMissing - Removes missing values.
  @param qSuppressZero - Removes zero values.
  @param qTitle - Title of the hypercube, for example the title of a chart.
  @param auth - Auth object used to make requests
 */
export declare class HyperCubeDef {
    auth?: Auth;
    qAlwaysFullyExpanded?: boolean;
    qCalcCond?: ValueExpr;
    qCalcCondition?: NxCalcCond;
    qColumnOrder?: Array<number>;
    qContextSetExpression?: string;
    qDimensions?: Array<NxDimension>;
    qDynamicScript?: Array<string>;
    qExpansionState?: Array<ExpansionData>;
    qIndentMode?: boolean;
    qInitialDataFetch?: Array<NxPage>;
    qInterColumnSortOrder?: Array<number>;
    qMaxStackedCells?: number;
    qMeasures?: Array<NxMeasure>;
    qMode?: 'DATA_MODE_STRAIGHT' | 'DATA_MODE_PIVOT' | 'DATA_MODE_PIVOT_STACK' | 'DATA_MODE_TREE' | 'DATA_MODE_DYNAMIC' | string;
    qNoOfLeftDims?: number;
    qPopulateMissing?: boolean;
    qPseudoDimPos?: number;
    qReductionMode?: 'DATA_REDUCTION_NONE' | 'DATA_REDUCTION_ONEDIM' | 'DATA_REDUCTION_SCATTERED' | 'DATA_REDUCTION_CLUSTERED' | 'DATA_REDUCTION_STACKED' | string;
    qShowTotalsAbove?: boolean;
    qSortbyYValue?: number;
    qStateName?: string;
    qSuppressMissing?: boolean;
    qSuppressZero?: boolean;
    qTitle?: StringExpr;
    [key: string]: any;
    constructor({ qAlwaysFullyExpanded, qCalcCond, qCalcCondition, qColumnOrder, qContextSetExpression, qDimensions, qDynamicScript, qExpansionState, qIndentMode, qInitialDataFetch, qInterColumnSortOrder, qMaxStackedCells, qMeasures, qMode, qNoOfLeftDims, qPopulateMissing, qPseudoDimPos, qReductionMode, qShowTotalsAbove, qSortbyYValue, qStateName, qSuppressMissing, qSuppressZero, qTitle, ...rest }: {
        qAlwaysFullyExpanded?: boolean;
        qCalcCond?: ValueExpr;
        qCalcCondition?: NxCalcCond;
        qColumnOrder?: Array<number>;
        qContextSetExpression?: string;
        qDimensions?: Array<NxDimension>;
        qDynamicScript?: Array<string>;
        qExpansionState?: Array<ExpansionData>;
        qIndentMode?: boolean;
        qInitialDataFetch?: Array<NxPage>;
        qInterColumnSortOrder?: Array<number>;
        qMaxStackedCells?: number;
        qMeasures?: Array<NxMeasure>;
        qMode?: 'DATA_MODE_STRAIGHT' | 'DATA_MODE_PIVOT' | 'DATA_MODE_PIVOT_STACK' | 'DATA_MODE_TREE' | 'DATA_MODE_DYNAMIC' | string;
        qNoOfLeftDims?: number;
        qPopulateMissing?: boolean;
        qPseudoDimPos?: number;
        qReductionMode?: 'DATA_REDUCTION_NONE' | 'DATA_REDUCTION_ONEDIM' | 'DATA_REDUCTION_SCATTERED' | 'DATA_REDUCTION_CLUSTERED' | 'DATA_REDUCTION_STACKED' | string;
        qShowTotalsAbove?: boolean;
        qSortbyYValue?: number;
        qStateName?: string;
        qSuppressMissing?: boolean;
        qSuppressZero?: boolean;
        qTitle?: StringExpr;
    }, auth?: Auth);
}
/**
  @param qFieldName
  @param qPackedHashKeys
  @param qValues
  @param auth - Auth object used to make requests
 */
export declare class InputFieldItem {
    auth?: Auth;
    qFieldName?: string;
    qPackedHashKeys?: Array<number>;
    qValues?: Array<FieldValue>;
    [key: string]: any;
    constructor({ qFieldName, qPackedHashKeys, qValues, ...rest }: {
        qFieldName?: string;
        qPackedHashKeys?: Array<number>;
        qValues?: Array<FieldValue>;
    }, auth?: Auth);
}
/**
  @param qName
  @param qReversed
  @param auth - Auth object used to make requests
 */
export declare class InterFieldSortData {
    auth?: Auth;
    qName?: string;
    qReversed?: boolean;
    [key: string]: any;
    constructor({ qName, qReversed, ...rest }: {
        qName?: string;
        qReversed?: boolean;
    }, auth?: Auth);
}
/**
  @param qButtons - Buttons displayed in the message box dialog.
This property is relevant if qType is *IT_MSGBOX*.
One of:

• 0 means that the qButtons property is not relevant.

• 17 means that the message box contains the OK and Cancel buttons or the stop -sign icon.
  @param qHidden - This property is set to true if the returned statement is an hidden script statement.
  @param qInput - Is not used in Qlik Sense.
  @param qLine - Next script statement to be executed.
This property is used if the type of interaction is *IT_SCRIPTLINE*.
  @param qMsg - Message used in the message box dialog.
This property is relevant if qType is *IT_MSGBOX*.
  @param qNewLineNr - First line number of the next statement to be executed.
This property is used if the type of interaction is *IT_SCRIPTLINE*.
  @param qOldLineNr - First line number of the previously executed statement.
This property is used if the type of interaction is *IT_SCRIPTLINE*.
  @param qPath - Path specified by the Include script variable.
This property is used if the type of interaction is *IT_SCRIPTLINE*.
Example of an Include variable:
$(Include=lib:\\\MyDataFiles\abc.txt);
  @param qResult - Not relevant for describing the requested user interaction.
  @param qTitle - Title used in the message box dialog.
This property is relevant if qType is *IT_MSGBOX*.
  @param qType - Interaction type.

One of:

• IT_MSGBOX

• IT_SCRIPTLINE

• IT_BREAK

• IT_INPUT

• IT_END

• IT_PASSWD

• IT_USERNAME
  @param auth - Auth object used to make requests
 */
export declare class InteractDef {
    auth?: Auth;
    qButtons?: number;
    qHidden?: boolean;
    qInput?: string;
    qLine?: string;
    qMsg?: string;
    qNewLineNr?: number;
    qOldLineNr?: number;
    qPath?: string;
    qResult?: number;
    qTitle?: string;
    qType?: 'IT_MSGBOX' | 'IT_SCRIPTLINE' | 'IT_BREAK' | 'IT_INPUT' | 'IT_END' | 'IT_PASSWD' | 'IT_USERNAME' | string;
    [key: string]: any;
    constructor({ qButtons, qHidden, qInput, qLine, qMsg, qNewLineNr, qOldLineNr, qPath, qResult, qTitle, qType, ...rest }: {
        qButtons?: number;
        qHidden?: boolean;
        qInput?: string;
        qLine?: string;
        qMsg?: string;
        qNewLineNr?: number;
        qOldLineNr?: number;
        qPath?: string;
        qResult?: number;
        qTitle?: string;
        qType?: 'IT_MSGBOX' | 'IT_SCRIPTLINE' | 'IT_BREAK' | 'IT_INPUT' | 'IT_END' | 'IT_PASSWD' | 'IT_USERNAME' | string;
    }, auth?: Auth);
}
export declare class InteractType {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  Contains dynamic JSON data specified by the client.

  @param auth - Auth object used to make requests
 */
export declare class JsonObject {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
export declare class KeyType {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qActive
  @param qId
  @param qScrollPos
  @param qShowMode
  @param auth - Auth object used to make requests
 */
export declare class LayoutBookmarkData {
    auth?: Auth;
    qActive?: boolean;
    qId?: string;
    qScrollPos?: ScrollPosition;
    qShowMode?: number;
    [key: string]: any;
    constructor({ qActive, qId, qScrollPos, qShowMode, ...rest }: {
        qActive?: boolean;
        qId?: string;
        qScrollPos?: ScrollPosition;
        qShowMode?: number;
    }, auth?: Auth);
}
/**
  Contains JSON to be excluded from validation.

  @param auth - Auth object used to make requests
 */
export declare class LayoutExclude {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  Meta data about the selection in a field.
  @param qExcludedValuesCount - Number of excluded values in the field.
  @param qFieldName - The name of the field.
  @param qValuesCount - Number of selected values in the field.
  @param auth - Auth object used to make requests
 */
export declare class LayoutFieldInfo {
    auth?: Auth;
    qExcludedValuesCount?: number;
    qFieldName?: string;
    qValuesCount?: number;
    [key: string]: any;
    constructor({ qExcludedValuesCount, qFieldName, qValuesCount, ...rest }: {
        qExcludedValuesCount?: number;
        qFieldName?: string;
        qValuesCount?: number;
    }, auth?: Auth);
}
/**
  @param qDiscriminator - A string indicating the origin of the data:

• [filename]: the data comes from a local file.

• INLINE: the data is entered inline in the load script.

• RESIDENT: the data comes from a resident table. The table name is listed.

• AUTOGENERATE: the data is generated from the load script (no external table of data source).

• Provider: the data comes from a data connection. The connector source name is listed.

• [webfile]: the data comes from a web-based file.

• STORE: path to QVD or TXT file where data is stored.

• EXTENSION: the data comes from a Server Side Extension (SSE).
  @param qStatement - The LOAD and SELECT script statements from the data load script.
  @param auth - Auth object used to make requests
 */
export declare class LineageInfo {
    auth?: Auth;
    qDiscriminator?: string;
    qStatement?: string;
    [key: string]: any;
    constructor({ qDiscriminator, qStatement, ...rest }: {
        qDiscriminator?: string;
        qStatement?: string;
    }, auth?: Auth);
}
/**
  Renders the properties of a list object. Is the layout for ListObjectDef.
For more information about the definition of a list object, see Generic object.
ListObject is used by the GetLayout Method to display the properties of a list object.
  @param qDataPages - Set of data.
Is empty if nothing has been defined in qInitialDataFetch in ListObjectDef.
  @param qDimensionInfo - Information about the dimension.
  @param qError - This parameter is optional and is displayed in case of error.
  @param qExpressions - Lists the expressions in the list object.
  @param qSize - Defines the size of a list object.
  @param qStateName - Name of the alternate state.
Default is current selections $ .
  @param auth - Auth object used to make requests
 */
export declare class ListObject {
    auth?: Auth;
    qDataPages?: Array<NxDataPage>;
    qDimensionInfo?: NxDimensionInfo;
    qError?: NxValidationError;
    qExpressions?: Array<NxListObjectExpression>;
    qSize?: Size;
    qStateName?: string;
    [key: string]: any;
    constructor({ qDataPages, qDimensionInfo, qError, qExpressions, qSize, qStateName, ...rest }: {
        qDataPages?: Array<NxDataPage>;
        qDimensionInfo?: NxDimensionInfo;
        qError?: NxValidationError;
        qExpressions?: Array<NxListObjectExpression>;
        qSize?: Size;
        qStateName?: string;
    }, auth?: Auth);
}
/**
  Defines the properties of a list object.
For more information about the definition of a list object, see Generic object.
  @param qAutoSortByState - Defines the sorting by state.
  @param qDef - Refers to a dimension stored in the list object.
  @param qDirectQuerySimplifiedView - If set to true, reduces the set of states returned.
Supported for Direct Query mode only.
Default is false.
  @param qExpressions - Lists the expressions in the list object.
This parameter is optional.
  @param qFrequencyMode - Defines the frequency mode. The frequency mode is used to calculate the frequency of a value in a list object.
Default is NX_FREQUENCY_NONE .
This parameter is optional.

One of:

• N or NX_FREQUENCY_NONE

• V or NX_FREQUENCY_VALUE

• P or NX_FREQUENCY_PERCENT

• R or NX_FREQUENCY_RELATIVE
  @param qInitialDataFetch - Fetches an initial data set.
  @param qLibraryId - Refers to a dimension stored in the library.
  @param qShowAlternatives - If set to true, alternative values are allowed in qData .
If set to false, no alternative values are displayed in qData . Values are excluded instead.
The default value is false.
Note that on the contrary, the qStateCounts parameter counts the excluded values as alternative values.
This parameter is optional.
  @param qStateName - Name of the alternate state.
Default is current selections $ .
  @param auth - Auth object used to make requests
 */
export declare class ListObjectDef {
    auth?: Auth;
    qAutoSortByState?: NxAutoSortByStateDef;
    qDef?: NxInlineDimensionDef;
    qDirectQuerySimplifiedView?: boolean;
    qExpressions?: Array<NxListObjectExpressionDef>;
    qFrequencyMode?: 'NX_FREQUENCY_NONE' | 'NX_FREQUENCY_VALUE' | 'NX_FREQUENCY_PERCENT' | 'NX_FREQUENCY_RELATIVE' | string;
    qInitialDataFetch?: Array<NxPage>;
    qLibraryId?: string;
    qShowAlternatives?: boolean;
    qStateName?: string;
    [key: string]: any;
    constructor({ qAutoSortByState, qDef, qDirectQuerySimplifiedView, qExpressions, qFrequencyMode, qInitialDataFetch, qLibraryId, qShowAlternatives, qStateName, ...rest }: {
        qAutoSortByState?: NxAutoSortByStateDef;
        qDef?: NxInlineDimensionDef;
        qDirectQuerySimplifiedView?: boolean;
        qExpressions?: Array<NxListObjectExpressionDef>;
        qFrequencyMode?: 'NX_FREQUENCY_NONE' | 'NX_FREQUENCY_VALUE' | 'NX_FREQUENCY_PERCENT' | 'NX_FREQUENCY_RELATIVE' | string;
        qInitialDataFetch?: Array<NxPage>;
        qLibraryId?: string;
        qShowAlternatives?: boolean;
        qStateName?: string;
    }, auth?: Auth);
}
/**
  @param qBrokenWeeks - Is set to true if broken weeks are allowed in a year.
According to ISO 8601, no broken weeks should be allowed.
This property is not shown if set to false.
If qBrokenWeeks is set to true, qReferenceDay is irrelevant.
If this property has not been set in a script, the returned value comes from the Windows operating system.
  @param qCalendarStrings - Information about the calendar.
  @param qCollation - Locale name (following language tagging convention RFC 4646):
< language>-<REGION>
Where:

• language is a lowercase ISO  639 language code

• REGION specifies an uppercase ISO 3166 country code.

If this property has not been set in a script, the returned value comes from the Windows operating system.
  @param qCurrentYear - Current year.
  @param qDateFmt - Date format.
Example: YYYY-MM-DD
  @param qDecimalSep - Decimal separator.
  @param qFirstMonthOfYear - First month of the year, starting from 1.
According to ISO 8601, January is the first month of the year.

• 1 = January

• 2 = February

• 12 = January

If this property has not been set in a script, the returned value comes from the Windows operating system.
  @param qFirstWeekDay - First day of the week, starting from 0.
According to ISO 8601, Monday is the first day of the week.

• 0 = Monday

• 1 = Tuesday

• ...

• 6 = Sunday

If this property has not been set in a script, the returned value comes from the Windows operating system.
  @param qListSep - List separator.
  @param qMoneyDecimalSep - Money decimal separator.
  @param qMoneyFmt - Money format.
Example: .0,00 kr;-#.##0,00 kr::
  @param qMoneyThousandSep - Money thousand separator.
  @param qNumericalAbbreviation - Number format.
Example: 3:k;6:M;9:G;12:T;15:P;18:E;21:Z;24:Y;-3:m;-6:μ;-9:n;-12:p;-15:f;-18:a;-21:z;-24:y
  @param qReferenceDay - Day in the year that is always in week 1.
According to ISO 8601, January 4th should always be part of the first week of the year ( qReferenceDay =4).
Recommended values are in the range 1 and 7.
If this property has not been set in a script, the returned value comes from the Windows operating system.
This property is not relevant if there are broken weeks in the year.
  @param qThousandSep - Thousand separator.
  @param qTimeFmt - Time format.
Example: hh:mm:ss
  @param qTimestampFmt - Time stamp format.
Example: YYYY-MM-DD hh:mm:ss[.fff]
  @param auth - Auth object used to make requests
 */
export declare class LocaleInfo {
    auth?: Auth;
    qBrokenWeeks?: boolean;
    qCalendarStrings?: CalendarStrings;
    qCollation?: string;
    qCurrentYear?: number;
    qDateFmt?: string;
    qDecimalSep?: string;
    qFirstMonthOfYear?: number;
    qFirstWeekDay?: number;
    qListSep?: string;
    qMoneyDecimalSep?: string;
    qMoneyFmt?: string;
    qMoneyThousandSep?: string;
    qNumericalAbbreviation?: string;
    qReferenceDay?: number;
    qThousandSep?: string;
    qTimeFmt?: string;
    qTimestampFmt?: string;
    [key: string]: any;
    constructor({ qBrokenWeeks, qCalendarStrings, qCollation, qCurrentYear, qDateFmt, qDecimalSep, qFirstMonthOfYear, qFirstWeekDay, qListSep, qMoneyDecimalSep, qMoneyFmt, qMoneyThousandSep, qNumericalAbbreviation, qReferenceDay, qThousandSep, qTimeFmt, qTimestampFmt, ...rest }: {
        qBrokenWeeks?: boolean;
        qCalendarStrings?: CalendarStrings;
        qCollation?: string;
        qCurrentYear?: number;
        qDateFmt?: string;
        qDecimalSep?: string;
        qFirstMonthOfYear?: number;
        qFirstWeekDay?: number;
        qListSep?: string;
        qMoneyDecimalSep?: string;
        qMoneyFmt?: string;
        qMoneyThousandSep?: string;
        qNumericalAbbreviation?: string;
        qReferenceDay?: number;
        qThousandSep?: string;
        qTimeFmt?: string;
        qTimestampFmt?: string;
    }, auth?: Auth);
}
export declare class LogOnType {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  Lists the measures. Is the layout for MeasureListDef.
  @param qItems - Information about the list of measures.
  @param auth - Auth object used to make requests
 */
export declare class MeasureList {
    auth?: Auth;
    qItems?: Array<NxContainerEntry>;
    [key: string]: any;
    constructor({ qItems, ...rest }: {
        qItems?: Array<NxContainerEntry>;
    }, auth?: Auth);
}
/**
  Defines the list of measures.
  @param qData - Data
  @param qType - Type of the list.
  @param auth - Auth object used to make requests
 */
export declare class MeasureListDef {
    auth?: Auth;
    qData?: JsonObject;
    qType?: string;
    [key: string]: any;
    constructor({ qData, qType, ...rest }: {
        qData?: JsonObject;
        qType?: string;
    }, auth?: Auth);
}
/**
  Lists the media files. Is the layout for MediaListDef.
This struct is deprecated.
  @param qItems - Information about the list of media files.
In Qlik Sense Desktop, the media files are retrieved from:
%userprofile%\Documents\Qlik\Sense\Content\Default
In Qlik Sense Enterprise, the media files are retrieved from:
<installation_directory>\Qlik\Sense\Repository\Content\Default
The default installation directory is ProgramData .
  @param auth - Auth object used to make requests
 */
export declare class MediaList {
    auth?: Auth;
    qItems?: Array<MediaListItem>;
    [key: string]: any;
    constructor({ qItems, ...rest }: {
        qItems?: Array<MediaListItem>;
    }, auth?: Auth);
}
/**
  Defines the list of media files.
This struct is deprecated.

 Properties:
"qMediaListDef": {}
qMediaListDef has an empty structure. No properties need to be set.

  @param auth - Auth object used to make requests
 */
export declare class MediaListDef {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  In addition, this structure can return dynamic properties.
  @param qUrl - Relative path to the media file.
Media files located:

• in the /content/default/ folder are outside the qvf file.

• in the /media/ folder are embedded in the qvf file.
  @param qUrlDef - Relative path to the media file. The URL is static.
Media files located:

• in the /content/default/ folder are outside the qvf file.

• in the /media/ folder are embedded in the qvf file.
  @param auth - Auth object used to make requests
 */
export declare class MediaListItem {
    auth?: Auth;
    qUrl?: string;
    qUrlDef?: string;
    [key: string]: any;
    constructor({ qUrl, qUrlDef, ...rest }: {
        qUrl?: string;
        qUrlDef?: string;
    }, auth?: Auth);
}
/**
  @param qAccessList
  @param qHidden
  @param qLinkedTo
  @param qPersonalEditionHash_OBSOLETE
  @param qRestrictedAccess
  @param qShared
  @param qSheetId
  @param qTemporary
  @param qUtcModifyTime
  @param auth - Auth object used to make requests
 */
export declare class MetaData {
    auth?: Auth;
    qAccessList?: Array<string>;
    qHidden?: boolean;
    qLinkedTo?: Array<string>;
    qPersonalEditionHash_OBSOLETE?: string;
    qRestrictedAccess?: boolean;
    qShared?: boolean;
    qSheetId?: string;
    qTemporary?: boolean;
    qUtcModifyTime?: number;
    [key: string]: any;
    constructor({ qAccessList, qHidden, qLinkedTo, qPersonalEditionHash_OBSOLETE, qRestrictedAccess, qShared, qSheetId, qTemporary, qUtcModifyTime, ...rest }: {
        qAccessList?: Array<string>;
        qHidden?: boolean;
        qLinkedTo?: Array<string>;
        qPersonalEditionHash_OBSOLETE?: string;
        qRestrictedAccess?: boolean;
        qShared?: boolean;
        qSheetId?: string;
        qTemporary?: boolean;
        qUtcModifyTime?: number;
    }, auth?: Auth);
}
/**
   Qlik Sense Desktop:
In Qlik Sense Desktop, this structure can contain dynamic properties.

 Qlik Sense Enterprise:
In Qlik Sense Enterprise, only a few dynamic properties at the app level are persisted.
The persisted dynamic properties are the following:

• modifiedDate

• published

• publishTime

• privileges

• description

• dynamicColor
  @param qFileName - In Qlik Sense Enterprise, this property corresponds to the app identifier (GUID).
In Qlik Sense Desktop, this property corresponds to the full path of the app.
  @param qHasData - Is set to true if the app contains data following a script reload.
  @param qHasScript - Is set to true if a script is defined in the app.
  @param qIsBDILiveMode - If set to true, the app is in BDI Direct Query Mode.
  @param qIsDirectQueryMode - If set to true, the app is in Direct Query Mode.
  @param qIsOpenedWithoutData - If set to true, it means that the app was opened without loading its data.
  @param qIsSessionApp - If set to true, the app is a Session App, i.e. not persistent.
  @param qLastReloadTime - Date and time of the last reload of the app in ISO format.
  @param qLocaleInfo - Information about the locale.
  @param qMeta - Information on publishing and permissions.
  @param qModified - Is set to true if the app has been updated since the last save.
  @param qReadOnly - If set to true, it means that the app is read-only.
  @param qStateNames - Array of alternate states.
  @param qThumbnail - App thumbnail.
  @param qTitle - Title of the app.
  @param qUnsupportedFeatures - Array of features not supported by the app.
  @param auth - Auth object used to make requests
 */
export declare class NxAppLayout {
    auth?: Auth;
    qFileName?: string;
    qHasData?: boolean;
    qHasScript?: boolean;
    qIsBDILiveMode?: boolean;
    qIsDirectQueryMode?: boolean;
    qIsOpenedWithoutData?: boolean;
    qIsSessionApp?: boolean;
    qLastReloadTime?: string;
    qLocaleInfo?: LocaleInfo;
    qMeta?: NxMeta;
    qModified?: boolean;
    qReadOnly?: boolean;
    qStateNames?: Array<string>;
    qThumbnail?: StaticContentUrl;
    qTitle?: string;
    qUnsupportedFeatures?: Array<string>;
    [key: string]: any;
    constructor({ qFileName, qHasData, qHasScript, qIsBDILiveMode, qIsDirectQueryMode, qIsOpenedWithoutData, qIsSessionApp, qLastReloadTime, qLocaleInfo, qMeta, qModified, qReadOnly, qStateNames, qThumbnail, qTitle, qUnsupportedFeatures, ...rest }: {
        qFileName?: string;
        qHasData?: boolean;
        qHasScript?: boolean;
        qIsBDILiveMode?: boolean;
        qIsDirectQueryMode?: boolean;
        qIsOpenedWithoutData?: boolean;
        qIsSessionApp?: boolean;
        qLastReloadTime?: string;
        qLocaleInfo?: LocaleInfo;
        qMeta?: NxMeta;
        qModified?: boolean;
        qReadOnly?: boolean;
        qStateNames?: Array<string>;
        qThumbnail?: StaticContentUrl;
        qTitle?: string;
        qUnsupportedFeatures?: Array<string>;
    }, auth?: Auth);
}
/**
   Qlik Sense Desktop:
In Qlik Sense Desktop, this structure can contain dynamic properties.

 Qlik Sense Enterprise:
In Qlik Sense Enterprise, only a few dynamic properties at the app level are persisted.
The persisted dynamic properties are the following:

• modifiedDate

• published

• publishTime

• privileges

• description

• dynamicColor
  @param qHasSectionAccess - If true the app has section access configured.
  @param qLastReloadTime - Last reload time of the app.
  @param qMigrationHash - Internal property reserved for app migration.
Patch version of the app.
Do not update.
  @param qSavedInProductVersion - Internal property reserved for app migration.
The app is saved in this version of the product.
Do not update.
  @param qThumbnail - App thumbnail.
  @param qTitle - App title.
  @param auth - Auth object used to make requests
 */
export declare class NxAppProperties {
    auth?: Auth;
    qHasSectionAccess?: boolean;
    qLastReloadTime?: string;
    qMigrationHash?: string;
    qSavedInProductVersion?: string;
    qThumbnail?: StaticContentUrlDef;
    qTitle?: string;
    [key: string]: any;
    constructor({ qHasSectionAccess, qLastReloadTime, qMigrationHash, qSavedInProductVersion, qThumbnail, qTitle, ...rest }: {
        qHasSectionAccess?: boolean;
        qLastReloadTime?: string;
        qMigrationHash?: string;
        qSavedInProductVersion?: string;
        qThumbnail?: StaticContentUrlDef;
        qTitle?: string;
    }, auth?: Auth);
}
/**
  Layout for NxAttrDimDef.
  @param qAttribute - If set to true, this attribute will not affect the number of rows in the cube.
  @param qDef - Expression or field name.
  @param qLibraryId - LibraryId for dimension.
  @param qSortBy - Sorting.
  @param auth - Auth object used to make requests
 */
export declare class NxAttrDimDef {
    auth?: Auth;
    qAttribute?: boolean;
    qDef?: string;
    qLibraryId?: string;
    qSortBy?: SortCriteria;
    [key: string]: any;
    constructor({ qAttribute, qDef, qLibraryId, qSortBy, ...rest }: {
        qAttribute?: boolean;
        qDef?: string;
        qLibraryId?: string;
        qSortBy?: SortCriteria;
    }, auth?: Auth);
}
/**
  Layout for NxAttrDimDef.
  @param qCardinal - Cardinality of the attribute expression.
  @param qError - Validation error.
  @param qFallbackTitle - The title for the attribute dimension.
  @param qIsCalculated - True if this is a calculated dimension.
  @param qLocked - The Locked value of the dimension.
  @param qSize - Number of rows.
  @param auth - Auth object used to make requests
 */
export declare class NxAttrDimInfo {
    auth?: Auth;
    qCardinal?: number;
    qError?: NxValidationError;
    qFallbackTitle?: string;
    qIsCalculated?: boolean;
    qLocked?: boolean;
    qSize?: Size;
    [key: string]: any;
    constructor({ qCardinal, qError, qFallbackTitle, qIsCalculated, qLocked, qSize, ...rest }: {
        qCardinal?: number;
        qError?: NxValidationError;
        qFallbackTitle?: string;
        qIsCalculated?: boolean;
        qLocked?: boolean;
        qSize?: Size;
    }, auth?: Auth);
}
/**
  @param qAttribute - If set to true, this measure will not affect the number of rows in the cube.
  @param qExpression - Definition of the attribute expression.
Example: "Max(OrderID)"
  @param qLabel - Label of the attribute expression.
  @param qLabelExpression - Optional expression used for dynamic label.
  @param qLibraryId - Definition of the attribute expression stored in the library.
Example: "MyGenericMeasure"
  @param qNumFormat - Format of the field.
This parameter is optional.
  @param auth - Auth object used to make requests
 */
export declare class NxAttrExprDef {
    auth?: Auth;
    qAttribute?: boolean;
    qExpression?: string;
    qLabel?: string;
    qLabelExpression?: string;
    qLibraryId?: string;
    qNumFormat?: FieldAttributes;
    [key: string]: any;
    constructor({ qAttribute, qExpression, qLabel, qLabelExpression, qLibraryId, qNumFormat, ...rest }: {
        qAttribute?: boolean;
        qExpression?: string;
        qLabel?: string;
        qLabelExpression?: string;
        qLibraryId?: string;
        qNumFormat?: FieldAttributes;
    }, auth?: Auth);
}
/**
  Layout for NxAttrExprDef.
  @param qFallbackTitle
  @param qIsAutoFormat - This parameter is set to true if qNumFormat is set to U (unknown). The engine guesses the type of the field based on the field's expression.
  @param qMax - Maximum value.
  @param qMaxText - String version of the maximum Value.
  @param qMin - Minimum value.
  @param qMinText - String version of the minimum Value.
  @param qNumFormat - Format of the field.
This parameter is optional.
  @param auth - Auth object used to make requests
 */
export declare class NxAttrExprInfo {
    auth?: Auth;
    qFallbackTitle?: string;
    qIsAutoFormat?: boolean;
    qMax?: number;
    qMaxText?: string;
    qMin?: number;
    qMinText?: string;
    qNumFormat?: FieldAttributes;
    [key: string]: any;
    constructor({ qFallbackTitle, qIsAutoFormat, qMax, qMaxText, qMin, qMinText, qNumFormat, ...rest }: {
        qFallbackTitle?: string;
        qIsAutoFormat?: boolean;
        qMax?: number;
        qMaxText?: string;
        qMin?: number;
        qMinText?: string;
        qNumFormat?: FieldAttributes;
    }, auth?: Auth);
}
/**
  @param qValues - List of values.
  @param auth - Auth object used to make requests
 */
export declare class NxAttributeDimValues {
    auth?: Auth;
    qValues?: Array<NxSimpleDimValue>;
    [key: string]: any;
    constructor({ qValues, ...rest }: {
        qValues?: Array<NxSimpleDimValue>;
    }, auth?: Auth);
}
/**
  @param qValues - List of attribute expressions values.
  @param auth - Auth object used to make requests
 */
export declare class NxAttributeExpressionValues {
    auth?: Auth;
    qValues?: Array<NxSimpleValue>;
    [key: string]: any;
    constructor({ qValues, ...rest }: {
        qValues?: Array<NxSimpleValue>;
    }, auth?: Auth);
}
/**
  @param qDisplayNumberOfRows - This parameter applies to list objects.
If the number of selected values in the list object is greater than the value set in qDisplayNumberOfRows , the selected lines are promoted at the top of the list object.
If qDisplayNumberOfRows is set to a negative value or to 0, the sort by state is disabled.
  @param auth - Auth object used to make requests
 */
export declare class NxAutoSortByStateDef {
    auth?: Auth;
    qDisplayNumberOfRows?: number;
    [key: string]: any;
    constructor({ qDisplayNumberOfRows, ...rest }: {
        qDisplayNumberOfRows?: number;
    }, auth?: Auth);
}
/**
  @param qAxis - List of axis data.
  @param auth - Auth object used to make requests
 */
export declare class NxAxisData {
    auth?: Auth;
    qAxis?: Array<NxAxisTicks>;
    [key: string]: any;
    constructor({ qAxis, ...rest }: {
        qAxis?: Array<NxAxisTicks>;
    }, auth?: Auth);
}
/**
  @param qName - Name of the derived definition.
  @param qTags - List of tags.
  @param qTicks - List of ticks.
  @param auth - Auth object used to make requests
 */
export declare class NxAxisTicks {
    auth?: Auth;
    qName?: string;
    qTags?: Array<string>;
    qTicks?: Array<NxTickCell>;
    [key: string]: any;
    constructor({ qName, qTags, qTicks, ...rest }: {
        qName?: string;
        qTags?: Array<string>;
        qTicks?: Array<NxTickCell>;
    }, auth?: Auth);
}
/**
  @param qPatches - Softpatches to be applied with this bookmark.
  @param qStateData - List of selections for each state.
  @param qUtcModifyTime - Time when the bookmark was created.
  @param qVariableItems - List of the variables in the app at the time the bookmark was created.
  @param auth - Auth object used to make requests
 */
export declare class NxBookmark {
    auth?: Auth;
    qPatches?: Array<NxPatches>;
    qStateData?: Array<AlternateStateData>;
    qUtcModifyTime?: number;
    qVariableItems?: Array<BookmarkVariableItem>;
    [key: string]: any;
    constructor({ qPatches, qStateData, qUtcModifyTime, qVariableItems, ...rest }: {
        qPatches?: Array<NxPatches>;
        qStateData?: Array<AlternateStateData>;
        qUtcModifyTime?: number;
        qVariableItems?: Array<BookmarkVariableItem>;
    }, auth?: Auth);
}
/**
  @param qCond - Condition for calculating an hypercube, dimension or measure.
  @param qMsg - Evaluated if Cond is not fullfilled.
  @param auth - Auth object used to make requests
 */
export declare class NxCalcCond {
    auth?: Auth;
    qCond?: ValueExpr;
    qMsg?: StringExpr;
    [key: string]: any;
    constructor({ qCond, qMsg, ...rest }: {
        qCond?: ValueExpr;
        qMsg?: StringExpr;
    }, auth?: Auth);
}
/**
  @param qAllValuesCardinal - Number of distinct values when paging for AllValues in a Tree Structure.
Default is -1 if not part of a Tree structure.
  @param qCardinal - Number of distinct field values.
  @param qHypercubeCardinal - Number of distinct hypercube values.
  @param auth - Auth object used to make requests
 */
export declare class NxCardinalities {
    auth?: Auth;
    qAllValuesCardinal?: number;
    qCardinal?: number;
    qHypercubeCardinal?: number;
    [key: string]: any;
    constructor({ qAllValuesCardinal, qCardinal, qHypercubeCardinal, ...rest }: {
        qAllValuesCardinal?: number;
        qCardinal?: number;
        qHypercubeCardinal?: number;
    }, auth?: Auth);
}
/**
  @param qAttrDims - Attribute dimensions values.
  @param qAttrExps - Attribute expression values.
  @param qElemNumber - Rank number of the value, starting from 0.
If the element number is a negative number, it means that the returned value is not an element number.
You can get the following negative values:

• -1: the cell is a Total cell. It shows a total.

• -2: the cell is a Null cell.

• -3: the cell belongs to the group Others .

• -4: the cell is empty. Applies to pivot tables.
  @param qFrequency - Frequency of the value.
This parameter is optional.
  @param qHighlightRanges - Search hits.
The search hits are highlighted.
This parameter is optional.
  @param qInExtRow
  @param qIsEmpty - Is set to true , if qText and qNum are empty.
This parameter is optional. The default value is false .
  @param qIsNull - Is set to true if the value is Null.
  @param qIsOtherCell - Is set to true if the cell belongs to the group Others .
Dimension values can be set as Others depending on what has been defined in OtherTotalSpecProp .
This parameter is optional. The default value is false .
Not applicable to list objects.
  @param qIsTotalCell - Is set to true if a total is displayed in the cell.
This parameter is optional. The default value is false .
Not applicable to list objects.
  @param qMiniChart
  @param qNum - A value.
This parameter is optional.
  @param qState - State of the value.
The default state for a measure is L.

One of:

• L or LOCKED

• S or SELECTED

• O or OPTION

• D or DESELECTED

• A or ALTERNATIVE

• X or EXCLUDED

• XS or EXCL_SELECTED

• XL or EXCL_LOCKED

• NSTATES
  @param qText - Some text.
This parameter is optional.
  @param auth - Auth object used to make requests
 */
export declare class NxCell {
    auth?: Auth;
    qAttrDims?: NxAttributeDimValues;
    qAttrExps?: NxAttributeExpressionValues;
    qElemNumber?: number;
    qFrequency?: string;
    qHighlightRanges?: NxHighlightRanges;
    qInExtRow?: boolean;
    qIsEmpty?: boolean;
    qIsNull?: boolean;
    qIsOtherCell?: boolean;
    qIsTotalCell?: boolean;
    qMiniChart?: NxMiniChartData;
    qNum?: number;
    qState?: 'LOCKED' | 'SELECTED' | 'OPTION' | 'DESELECTED' | 'ALTERNATIVE' | 'EXCLUDED' | 'EXCL_SELECTED' | 'EXCL_LOCKED' | 'NSTATES' | string;
    qText?: string;
    [key: string]: any;
    constructor({ qAttrDims, qAttrExps, qElemNumber, qFrequency, qHighlightRanges, qInExtRow, qIsEmpty, qIsNull, qIsOtherCell, qIsTotalCell, qMiniChart, qNum, qState, qText, ...rest }: {
        qAttrDims?: NxAttributeDimValues;
        qAttrExps?: NxAttributeExpressionValues;
        qElemNumber?: number;
        qFrequency?: string;
        qHighlightRanges?: NxHighlightRanges;
        qInExtRow?: boolean;
        qIsEmpty?: boolean;
        qIsNull?: boolean;
        qIsOtherCell?: boolean;
        qIsTotalCell?: boolean;
        qMiniChart?: NxMiniChartData;
        qNum?: number;
        qState?: 'LOCKED' | 'SELECTED' | 'OPTION' | 'DESELECTED' | 'ALTERNATIVE' | 'EXCLUDED' | 'EXCL_SELECTED' | 'EXCL_LOCKED' | 'NSTATES' | string;
        qText?: string;
    }, auth?: Auth);
}
/**
  @param qx - Position of the cell on the x-axis.
  @param qy - Position of the cell on the y-axis.
  @param auth - Auth object used to make requests
 */
export declare class NxCellPosition {
    auth?: Auth;
    qx?: number;
    qy?: number;
    [key: string]: any;
    constructor({ qx, qy, ...rest }: {
        qx?: number;
        qy?: number;
    }, auth?: Auth);
}
export declare class NxCellRows extends Array<NxCell> {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor(arr: Array<NxCell>, auth?: Auth);
}
/**
  @param qData - Set of data.
  @param qInfo - Information about the object.
  @param qMeta - Information on publishing and permissions.
  @param auth - Auth object used to make requests
 */
export declare class NxContainerEntry {
    auth?: Auth;
    qData?: JsonObject;
    qInfo?: NxInfo;
    qMeta?: NxMeta;
    [key: string]: any;
    constructor({ qData, qInfo, qMeta, ...rest }: {
        qData?: JsonObject;
        qInfo?: NxInfo;
        qMeta?: NxMeta;
    }, auth?: Auth);
}
/**
  @param qEnd - End value.
  @param qMaxNbrTicks - Maximum number of ticks.
  @param qMaxNumberLines - Maximum number of lines.
  @param qNbrPoints - Number of bins for binning.
  @param qStart - Start value.
  @param auth - Auth object used to make requests
 */
export declare class NxContinuousDataOptions {
    auth?: Auth;
    qEnd?: number;
    qMaxNbrTicks?: number;
    qMaxNumberLines?: number;
    qNbrPoints?: number;
    qStart?: number;
    [key: string]: any;
    constructor({ qEnd, qMaxNbrTicks, qMaxNumberLines, qNbrPoints, qStart, ...rest }: {
        qEnd?: number;
        qMaxNbrTicks?: number;
        qMaxNumberLines?: number;
        qNbrPoints?: number;
        qStart?: number;
    }, auth?: Auth);
}
export declare class NxContinuousMode {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qDimIx - Dimension index.
  @param qRange - Range information.
  @param auth - Auth object used to make requests
 */
export declare class NxContinuousRangeSelectInfo {
    auth?: Auth;
    qDimIx?: number;
    qRange?: Range;
    [key: string]: any;
    constructor({ qDimIx, qRange, ...rest }: {
        qDimIx?: number;
        qRange?: Range;
    }, auth?: Auth);
}
/**
  @param qField - Name of the field that is selected.
  @param qIsHidden - Optional parameter. Indicates if the selection is to be hidden in the Selections bar.
Is set to true if the current selection is hidden.
  @param qIsNum - This parameter is displayed if its value is true.
Is set to true if the field is a numeric.
This parameter is optional.
  @param qLocked - This parameter is displayed if its value is true.
Is set to true if the field is locked.
This parameter is optional.
  @param qNotSelectedFieldSelectionInfo - Information about the fields that are not selected.
  @param qOneAndOnlyOne - This parameter is displayed if its value is true.
Property that is set to a field. Is set to true if the field cannot be unselected.
This parameter is optional.
  @param qRangeInfo - Information about the range of selected values.
Is empty if there is no range of selected values.
  @param qReadableName - Label that, if defined, is displayed in current selections instead of the actual expression.
  @param qSelected - Values that are selected.
  @param qSelectedCount - Number of values that are selected.
  @param qSelectedFieldSelectionInfo - Information about the fields that are selected.
  @param qSelectionThreshold - Maximum values to show in the current selections.
The default value is 6.
  @param qSortIndex - Sort index of the field. Indexing starts from 0.
  @param qStateCounts - Number of values in a particular state.
  @param qTextSearch - Text that was used for the search. This parameter is filled when searching for a value and selecting it.
This parameter is optional.
  @param qTotal - Number of values in the field.
  @param auth - Auth object used to make requests
 */
export declare class NxCurrentSelectionItem {
    auth?: Auth;
    qField?: string;
    qIsHidden?: boolean;
    qIsNum?: boolean;
    qLocked?: boolean;
    qNotSelectedFieldSelectionInfo?: Array<NxFieldSelectionInfo>;
    qOneAndOnlyOne?: boolean;
    qRangeInfo?: Array<RangeSelectInfo>;
    qReadableName?: string;
    qSelected?: string;
    qSelectedCount?: number;
    qSelectedFieldSelectionInfo?: Array<NxFieldSelectionInfo>;
    qSelectionThreshold?: number;
    qSortIndex?: number;
    qStateCounts?: NxStateCounts;
    qTextSearch?: string;
    qTotal?: number;
    [key: string]: any;
    constructor({ qField, qIsHidden, qIsNum, qLocked, qNotSelectedFieldSelectionInfo, qOneAndOnlyOne, qRangeInfo, qReadableName, qSelected, qSelectedCount, qSelectedFieldSelectionInfo, qSelectionThreshold, qSortIndex, qStateCounts, qTextSearch, qTotal, ...rest }: {
        qField?: string;
        qIsHidden?: boolean;
        qIsNum?: boolean;
        qLocked?: boolean;
        qNotSelectedFieldSelectionInfo?: Array<NxFieldSelectionInfo>;
        qOneAndOnlyOne?: boolean;
        qRangeInfo?: Array<RangeSelectInfo>;
        qReadableName?: string;
        qSelected?: string;
        qSelectedCount?: number;
        qSelectedFieldSelectionInfo?: Array<NxFieldSelectionInfo>;
        qSelectionThreshold?: number;
        qSortIndex?: number;
        qStateCounts?: NxStateCounts;
        qTextSearch?: string;
        qTotal?: number;
    }, auth?: Auth);
}
/**
  @param qHeight - Height of the page.
The difference between qTop and qHeight gives the lowest possible value of the second measure (the measure on the y-axis).
  @param qLeft - Position from the left.
Corresponds to the lowest possible value of the first measure (the measure on the x-axis).
  @param qTop - Position from the top.
Corresponds to the highest possible value of the second measure (the measure on the y-axis).
  @param qWidth - Width of the page.
Corresponds to the highest possible value of the first measure (the measure on the x-axis).
  @param auth - Auth object used to make requests
 */
export declare class NxDataAreaPage {
    auth?: Auth;
    qHeight?: number;
    qLeft?: number;
    qTop?: number;
    qWidth?: number;
    [key: string]: any;
    constructor({ qHeight, qLeft, qTop, qWidth, ...rest }: {
        qHeight?: number;
        qLeft?: number;
        qTop?: number;
        qWidth?: number;
    }, auth?: Auth);
}
/**
  @param qArea - Size and offset of the data in the matrix.
  @param qIsReduced - Is set to true, if the data have been reduced.
The default value is false.
  @param qMatrix - Array of data.
  @param qTails - Array of tails.
Is used for hypercube objects with multiple dimensions. It might happen that due to the window size some elements in a group cannot be displayed in the same page as the other elements of the group. Elements of a group of dimensions can be part of the previous or the next tail.
If there is no tail, the array is empty [ ] .
  @param auth - Auth object used to make requests
 */
export declare class NxDataPage {
    auth?: Auth;
    qArea?: Rect;
    qIsReduced?: boolean;
    qMatrix?: Array<NxCellRows>;
    qTails?: Array<NxGroupTail>;
    [key: string]: any;
    constructor({ qArea, qIsReduced, qMatrix, qTails, ...rest }: {
        qArea?: Rect;
        qIsReduced?: boolean;
        qMatrix?: Array<NxCellRows>;
        qTails?: Array<NxGroupTail>;
    }, auth?: Auth);
}
export declare class NxDataReductionMode {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qExpr - Expression of the derived field.
Example:
If qName is OrderDate.MyDefinition.Year , the expression is as follows:
=${Mydefinition(OrderDate).Year}
  @param qId - Identifier of the derived field.
The identifier is unique.
  @param qMethod - Method name associated to the derived field.
  @param qName - Combination of field name, definition and method.
Example:
OrderDate.MyDefinition.Year
  @param qTags - List of tags.
  @param auth - Auth object used to make requests
 */
export declare class NxDerivedField {
    auth?: Auth;
    qExpr?: string;
    qId?: string;
    qMethod?: string;
    qName?: string;
    qTags?: Array<string>;
    [key: string]: any;
    constructor({ qExpr, qId, qMethod, qName, qTags, ...rest }: {
        qExpr?: string;
        qId?: string;
        qMethod?: string;
        qName?: string;
        qTags?: Array<string>;
    }, auth?: Auth);
}
/**
  @param qDerivedFieldLists - Information about the derived fields.
  @param auth - Auth object used to make requests
 */
export declare class NxDerivedFieldDescriptionList {
    auth?: Auth;
    qDerivedFieldLists?: Array<NxDerivedFieldsData>;
    [key: string]: any;
    constructor({ qDerivedFieldLists, ...rest }: {
        qDerivedFieldLists?: Array<NxDerivedFieldsData>;
    }, auth?: Auth);
}
/**
  @param qDerivedDefinitionName - Name of the derived definition.
  @param qFieldDefs - List of the derived fields.
  @param qGroupDefs - List of the derived groups.
  @param qTags - List of tags on the derived fields.
  @param auth - Auth object used to make requests
 */
export declare class NxDerivedFieldsData {
    auth?: Auth;
    qDerivedDefinitionName?: string;
    qFieldDefs?: Array<NxDerivedField>;
    qGroupDefs?: Array<NxDerivedGroup>;
    qTags?: Array<string>;
    [key: string]: any;
    constructor({ qDerivedDefinitionName, qFieldDefs, qGroupDefs, qTags, ...rest }: {
        qDerivedDefinitionName?: string;
        qFieldDefs?: Array<NxDerivedField>;
        qGroupDefs?: Array<NxDerivedGroup>;
        qTags?: Array<string>;
    }, auth?: Auth);
}
/**
  @param qFieldDefs - List of the derived fields in the group.
  @param qGrouping - Grouping type.
The grouping should be either H or C (Grouping is mandatory for derived definitions).
The parameter is mandatory.

One of:

• N or GRP_NX_NONE

• H or GRP_NX_HIEARCHY

• C or GRP_NX_COLLECTION
  @param qId - Identifier of the group.
  @param qName - Name of the derived group.
  @param auth - Auth object used to make requests
 */
export declare class NxDerivedGroup {
    auth?: Auth;
    qFieldDefs?: Array<string>;
    qGrouping?: 'GRP_NX_NONE' | 'GRP_NX_HIEARCHY' | 'GRP_NX_COLLECTION' | string;
    qId?: string;
    qName?: string;
    [key: string]: any;
    constructor({ qFieldDefs, qGrouping, qId, qName, ...rest }: {
        qFieldDefs?: Array<string>;
        qGrouping?: 'GRP_NX_NONE' | 'GRP_NX_HIEARCHY' | 'GRP_NX_COLLECTION' | string;
        qId?: string;
        qName?: string;
    }, auth?: Auth);
}
export declare class NxDimCellType {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  Either qDef or qLibraryId must be set, but not both.  If the dimension is set in the hypercube and not in the library, this dimension cannot be shared with other objects. A dimension that is set in the library can be used by many objects.
  @param qAttributeDimensions - List of attribute dimensions.
  @param qAttributeExpressions - List of attribute expressions.
  @param qCalcCond - Specifies a calculation condition, which must be fulfilled for the dimension to be calculated.
If the calculation condition is not met, the dimension is excluded from the calculation.
By default, there is no calculation condition.
This property is optional.
  @param qCalcCondition - Specifies a calculation condition object.
If CalcCondition.Cond is not fulfilled, the dimension is excluded from the calculation and CalcCondition.Msg is evaluated.
By default, there is no calculation condition.
This property is optional.
  @param qDef - Refers to a dimension stored in the hypercube.
  @param qIncludeElemValue
  @param qLibraryId - Refers to a dimension stored in the library.
  @param qNullSuppression - If set to true, no null values are returned.
  @param qOtherLabel - This property is used when some dimension limits are set.
Label of the Others group. The default label is Others .
Example:
"qOtherLabel":"= <label>"
or
"qOtherLabel":{"qExpr":"= <label>"}
Where:

• < label > is the label of the Others group.
  @param qOtherTotalSpec - Sets the dimension limits. Each dimension of a hypercube is configured separately.
Defines if some values (grouped as Others ) should be grouped together in the visualization.
For example in a pie chart all values lower than 200 could be grouped together.
  @param qShowAll - If set to true, all dimension values are shown.
  @param qShowTotal
  @param qTotalLabel - If this property is set, the total of the calculated values is returned.
The default label is Total .
Example:
"qTotalLabel":"= <label>"
or
"qTotalLabel":{"qExpr":"= <label>"}
Where:

• < label > is the label of the Total group.
  @param auth - Auth object used to make requests
 */
export declare class NxDimension {
    auth?: Auth;
    qAttributeDimensions?: Array<NxAttrDimDef>;
    qAttributeExpressions?: Array<NxAttrExprDef>;
    qCalcCond?: ValueExpr;
    qCalcCondition?: NxCalcCond;
    qDef?: NxInlineDimensionDef;
    qIncludeElemValue?: boolean;
    qLibraryId?: string;
    qNullSuppression?: boolean;
    qOtherLabel?: StringExpr;
    qOtherTotalSpec?: OtherTotalSpecProp;
    qShowAll?: boolean;
    qShowTotal?: boolean;
    qTotalLabel?: StringExpr;
    [key: string]: any;
    constructor({ qAttributeDimensions, qAttributeExpressions, qCalcCond, qCalcCondition, qDef, qIncludeElemValue, qLibraryId, qNullSuppression, qOtherLabel, qOtherTotalSpec, qShowAll, qShowTotal, qTotalLabel, ...rest }: {
        qAttributeDimensions?: Array<NxAttrDimDef>;
        qAttributeExpressions?: Array<NxAttrExprDef>;
        qCalcCond?: ValueExpr;
        qCalcCondition?: NxCalcCond;
        qDef?: NxInlineDimensionDef;
        qIncludeElemValue?: boolean;
        qLibraryId?: string;
        qNullSuppression?: boolean;
        qOtherLabel?: StringExpr;
        qOtherTotalSpec?: OtherTotalSpecProp;
        qShowAll?: boolean;
        qShowTotal?: boolean;
        qTotalLabel?: StringExpr;
    }, auth?: Auth);
}
/**
  @param qApprMaxGlyphCount - Length of the longest value in the field.
  @param qAttrDimInfo - Array of attribute dimensions.
  @param qAttrExprInfo - Array of attribute expressions.
  @param qCalcCondMsg - The message displayed if calculation condition is not fulfilled.
  @param qCardinal - Number of distinct field values.
  @param qCardinalities - Dimension Cardinalities
  @param qContinuousAxes - Is continuous axis used.
  @param qDerivedField - Is derived field is used as a dimension.
  @param qDimensionType - Binary format of the field.

One of:

• D or NX_DIMENSION_TYPE_DISCRETE

• N or NX_DIMENSION_TYPE_NUMERIC

• T or NX_DIMENSION_TYPE_TIME
  @param qError - This parameter is optional.
Gives information on the error.
  @param qFallbackTitle - Corresponds to the label of the dimension that is selected.
If the label is not defined then the field name is used.
  @param qGroupFallbackTitles - Array of dimension labels.
Contains the labels of all dimensions in a hierarchy group (for example the labels of all dimensions in a drill down group).
  @param qGroupFieldDefs - Array of field names.
  @param qGroupPos - Index of the dimension that is currently in use.
qGroupPos is set to 0 if there are no hierarchical groups (drill-down groups) or cycle groups.
  @param qGrouping - Defines the grouping.

One of:

• N or GRP_NX_NONE

• H or GRP_NX_HIEARCHY

• C or GRP_NX_COLLECTION
  @param qIsAutoFormat - This parameter is set to true if qNumFormat is set to U (unknown). The engine guesses the type of the field based on the field's definition.
  @param qIsCalculated - True if this is a calculated dimension.
  @param qIsCyclic - Is a cyclic dimension used.
  @param qIsOneAndOnlyOne - If set to true, it means that the field always has one and only one selected value.
  @param qIsSemantic - If set to true, it means that the field is a semantic.
  @param qLibraryId - Refers to a dimension stored in the library.
  @param qLocked - Is set to true if the field is locked.
  @param qMax - Maximum value.
  @param qMin - Minimum value.
  @param qNumFormat - Format of the field.
This parameter is optional.
  @param qReverseSort - If set to true, it inverts the sort criteria in the field.
  @param qSortIndicator - Sort indicator.
The default value is no sorting.
This parameter is optional.

One of:

• N or NX_SORT_INDICATE_NONE

• A or NX_SORT_INDICATE_ASC

• D or NX_SORT_INDICATE_DESC
  @param qStateCounts - Number of values in a particular state.
  @param qTags - Gives information on a field. For example, it can return the type of the field.
Examples: key, text, ASCII
  @param auth - Auth object used to make requests
 */
export declare class NxDimensionInfo {
    auth?: Auth;
    qApprMaxGlyphCount?: number;
    qAttrDimInfo?: Array<NxAttrDimInfo>;
    qAttrExprInfo?: Array<NxAttrExprInfo>;
    qCalcCondMsg?: string;
    qCardinal?: number;
    qCardinalities?: NxCardinalities;
    qContinuousAxes?: boolean;
    qDerivedField?: boolean;
    qDimensionType?: 'NX_DIMENSION_TYPE_DISCRETE' | 'NX_DIMENSION_TYPE_NUMERIC' | 'NX_DIMENSION_TYPE_TIME' | string;
    qError?: NxValidationError;
    qFallbackTitle?: string;
    qGroupFallbackTitles?: Array<string>;
    qGroupFieldDefs?: Array<string>;
    qGroupPos?: number;
    qGrouping?: 'GRP_NX_NONE' | 'GRP_NX_HIEARCHY' | 'GRP_NX_COLLECTION' | string;
    qIsAutoFormat?: boolean;
    qIsCalculated?: boolean;
    qIsCyclic?: boolean;
    qIsOneAndOnlyOne?: boolean;
    qIsSemantic?: boolean;
    qLibraryId?: string;
    qLocked?: boolean;
    qMax?: number;
    qMin?: number;
    qNumFormat?: FieldAttributes;
    qReverseSort?: boolean;
    qSortIndicator?: 'NX_SORT_INDICATE_NONE' | 'NX_SORT_INDICATE_ASC' | 'NX_SORT_INDICATE_DESC' | string;
    qStateCounts?: NxStateCounts;
    qTags?: Array<string>;
    [key: string]: any;
    constructor({ qApprMaxGlyphCount, qAttrDimInfo, qAttrExprInfo, qCalcCondMsg, qCardinal, qCardinalities, qContinuousAxes, qDerivedField, qDimensionType, qError, qFallbackTitle, qGroupFallbackTitles, qGroupFieldDefs, qGroupPos, qGrouping, qIsAutoFormat, qIsCalculated, qIsCyclic, qIsOneAndOnlyOne, qIsSemantic, qLibraryId, qLocked, qMax, qMin, qNumFormat, qReverseSort, qSortIndicator, qStateCounts, qTags, ...rest }: {
        qApprMaxGlyphCount?: number;
        qAttrDimInfo?: Array<NxAttrDimInfo>;
        qAttrExprInfo?: Array<NxAttrExprInfo>;
        qCalcCondMsg?: string;
        qCardinal?: number;
        qCardinalities?: NxCardinalities;
        qContinuousAxes?: boolean;
        qDerivedField?: boolean;
        qDimensionType?: 'NX_DIMENSION_TYPE_DISCRETE' | 'NX_DIMENSION_TYPE_NUMERIC' | 'NX_DIMENSION_TYPE_TIME' | string;
        qError?: NxValidationError;
        qFallbackTitle?: string;
        qGroupFallbackTitles?: Array<string>;
        qGroupFieldDefs?: Array<string>;
        qGroupPos?: number;
        qGrouping?: 'GRP_NX_NONE' | 'GRP_NX_HIEARCHY' | 'GRP_NX_COLLECTION' | string;
        qIsAutoFormat?: boolean;
        qIsCalculated?: boolean;
        qIsCyclic?: boolean;
        qIsOneAndOnlyOne?: boolean;
        qIsSemantic?: boolean;
        qLibraryId?: string;
        qLocked?: boolean;
        qMax?: number;
        qMin?: number;
        qNumFormat?: FieldAttributes;
        qReverseSort?: boolean;
        qSortIndicator?: 'NX_SORT_INDICATE_NONE' | 'NX_SORT_INDICATE_ASC' | 'NX_SORT_INDICATE_DESC' | string;
        qStateCounts?: NxStateCounts;
        qTags?: Array<string>;
    }, auth?: Auth);
}
export declare class NxDimensionType {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qFileSize - The filesize of the reduced app.
  @param qUrl - URL to download the reduced app on.
  @param auth - Auth object used to make requests
 */
export declare class NxDownloadInfo {
    auth?: Auth;
    qFileSize?: number;
    qUrl?: string;
    [key: string]: any;
    constructor({ qFileSize, qUrl, ...rest }: {
        qFileSize?: number;
        qUrl?: string;
    }, auth?: Auth);
}
/**
  @param qBookmarkId - Bookmark Id to apply before reducing the application.
  @param qExpires - Time in seconds for how long the download link is valid.
  @param qServeOnce
  @param auth - Auth object used to make requests
 */
export declare class NxDownloadOptions {
    auth?: Auth;
    qBookmarkId?: string;
    qExpires?: number;
    qServeOnce?: boolean;
    [key: string]: any;
    constructor({ qBookmarkId, qExpires, qServeOnce, ...rest }: {
        qBookmarkId?: string;
        qExpires?: number;
        qServeOnce?: boolean;
    }, auth?: Auth);
}
/**
  @param qComponentVersion - Version number of the Qlik engine component.
  @param auth - Auth object used to make requests
 */
export declare class NxEngineVersion {
    auth?: Auth;
    qComponentVersion?: string;
    [key: string]: any;
    constructor({ qComponentVersion, ...rest }: {
        qComponentVersion?: string;
    }, auth?: Auth);
}
export declare class NxExportFileType {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
export declare class NxExportState {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
export declare class NxFeature {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
   NxDerivedFieldsdata:
| Name                   | Description                         | Type                      |
|------------------------|-------------------------------------|---------------------------|
| qDerivedDefinitionName | Name of the derived definition.     | String                    |
| qFieldDefs             | List of the derived fields.         | Array of _NxDerivedField_ |
| qGroupDefs             | List of the derived groups.         | Array of _NxDerivedGroup_ |
| qTags                  | List of tags on the derived fields. | Array of _String_         |
  @param qAndMode - If set to true a logical AND (instead of a logical OR) is used when making selections in a field.
The default value is false.
  @param qCardinal - Number of distinct field values
  @param qDerivedFieldData - Lists the derived fields if any.
  @param qIsDefinitionOnly - If set to true, it means that the field is a field on the fly.
  @param qIsDetail - Is used for Direct Discovery.
If set to true, it means that the type of the field is detail.
  @param qIsHidden - If set to true, it means that the field is hidden.
  @param qIsImplicit - Is used for Direct Discovery.
If set to true, it means that the type of the field is measure.
  @param qIsSemantic - If set to true, it means that the field is a semantic.
  @param qIsSystem - If set to true, it means that the field is a system field.
  @param qName - Name of the field
  @param qReadableName
  @param qTags - Gives information on a field. For example, it can return the type of the field.
Examples: key, text, ASCII
  @param auth - Auth object used to make requests
 */
export declare class NxFieldDescription {
    auth?: Auth;
    qAndMode?: boolean;
    qCardinal?: number;
    qDerivedFieldData?: NxDerivedFieldDescriptionList;
    qIsDefinitionOnly?: boolean;
    qIsDetail?: boolean;
    qIsHidden?: boolean;
    qIsImplicit?: boolean;
    qIsSemantic?: boolean;
    qIsSystem?: boolean;
    qName?: string;
    qReadableName?: string;
    qTags?: Array<string>;
    [key: string]: any;
    constructor({ qAndMode, qCardinal, qDerivedFieldData, qIsDefinitionOnly, qIsDetail, qIsHidden, qIsImplicit, qIsSemantic, qIsSystem, qName, qReadableName, qTags, ...rest }: {
        qAndMode?: boolean;
        qCardinal?: number;
        qDerivedFieldData?: NxDerivedFieldDescriptionList;
        qIsDefinitionOnly?: boolean;
        qIsDetail?: boolean;
        qIsHidden?: boolean;
        qIsImplicit?: boolean;
        qIsSemantic?: boolean;
        qIsSystem?: boolean;
        qName?: string;
        qReadableName?: string;
        qTags?: Array<string>;
    }, auth?: Auth);
}
/**
  @param qOneAndOnlyOne - This parameter is set to true, if the field has one and only one selection (not 0 and not more than 1).
If this property is set to true, the field cannot be cleared anymore and no more selections can be performed in that field.
The property OneAndOnlyOne can be set to true if one and only value has been selected in the field prior to setting the property.
  @param auth - Auth object used to make requests
 */
export declare class NxFieldProperties {
    auth?: Auth;
    qOneAndOnlyOne?: boolean;
    [key: string]: any;
    constructor({ qOneAndOnlyOne, ...rest }: {
        qOneAndOnlyOne?: boolean;
    }, auth?: Auth);
}
/**
  @param qName - Name of the field to get the resource id for.
  @param qResourceIds - Field level resource Id per table that the field is part of
  @param auth - Auth object used to make requests
 */
export declare class NxFieldResourceId {
    auth?: Auth;
    qName?: string;
    qResourceIds?: Array<NxFieldTableResourceId>;
    [key: string]: any;
    constructor({ qName, qResourceIds, ...rest }: {
        qName?: string;
        qResourceIds?: Array<NxFieldTableResourceId>;
    }, auth?: Auth);
}
/**
  @param qFieldSelectionMode - Selection mode.
 Properties:
One of:

• NORMAL for a selection in normal mode.

• AND for a selection in AND mode.

• NOT for a selection NOT in AND mode.
One of:

• NORMAL or SELECTION_MODE_NORMAL

• AND or SELECTION_MODE_AND

• NOT or SELECTION_MODE_NOT
  @param qName - Name of the field.
  @param auth - Auth object used to make requests
 */
export declare class NxFieldSelectionInfo {
    auth?: Auth;
    qFieldSelectionMode?: 'SELECTION_MODE_NORMAL' | 'SELECTION_MODE_AND' | 'SELECTION_MODE_NOT' | string;
    qName?: string;
    [key: string]: any;
    constructor({ qFieldSelectionMode, qName, ...rest }: {
        qFieldSelectionMode?: 'SELECTION_MODE_NORMAL' | 'SELECTION_MODE_AND' | 'SELECTION_MODE_NOT' | string;
        qName?: string;
    }, auth?: Auth);
}
export declare class NxFieldSelectionMode {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qResourceId - Resource identifier for the field
  @param qTable - Name of the table that the field belongs to get the resource id for
  @param auth - Auth object used to make requests
 */
export declare class NxFieldTableResourceId {
    auth?: Auth;
    qResourceId?: string;
    qTable?: string;
    [key: string]: any;
    constructor({ qResourceId, qTable, ...rest }: {
        qResourceId?: string;
        qTable?: string;
    }, auth?: Auth);
}
export declare class NxFrequencyMode {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qData - Set of data.
  @param qIncludePatches - Include the bookmark patches. Patches can be very large and may make the list result unmanageable.
  @param qTypes - List of object types.
  @param auth - Auth object used to make requests
 */
export declare class NxGetBookmarkOptions {
    auth?: Auth;
    qData?: JsonObject;
    qIncludePatches?: boolean;
    qTypes?: Array<string>;
    [key: string]: any;
    constructor({ qData, qIncludePatches, qTypes, ...rest }: {
        qData?: JsonObject;
        qIncludePatches?: boolean;
        qTypes?: Array<string>;
    }, auth?: Auth);
}
/**
  @param qData - Set of data.
  @param qIncludeSessionObjects - Set to true to include session objects.
The default value is false.
  @param qTypes - List of object types.
  @param auth - Auth object used to make requests
 */
export declare class NxGetObjectOptions {
    auth?: Auth;
    qData?: JsonObject;
    qIncludeSessionObjects?: boolean;
    qTypes?: Array<string>;
    [key: string]: any;
    constructor({ qData, qIncludeSessionObjects, qTypes, ...rest }: {
        qData?: JsonObject;
        qIncludeSessionObjects?: boolean;
        qTypes?: Array<string>;
    }, auth?: Auth);
}
/**
  @param qDown - Number of elements that are part of the next tail.
This number depends on the paging, more particularly it depends on the values defined in qTop and qHeight
Is not shown if the value is 0.
This parameter is optional.
  @param qUp - Number of elements that are part of the previous tail.
This number depends on the paging, more particularly it depends on the values defined in qTop and qHeight .
Is not shown if the value is 0.
This parameter is optional.
  @param auth - Auth object used to make requests
 */
export declare class NxGroupTail {
    auth?: Auth;
    qDown?: number;
    qUp?: number;
    [key: string]: any;
    constructor({ qDown, qUp, ...rest }: {
        qDown?: number;
        qUp?: number;
    }, auth?: Auth);
}
export declare class NxGrpType {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qRanges - Ranges of highlighted values.
  @param auth - Auth object used to make requests
 */
export declare class NxHighlightRanges {
    auth?: Auth;
    qRanges?: Array<CharRange>;
    [key: string]: any;
    constructor({ qRanges, ...rest }: {
        qRanges?: Array<CharRange>;
    }, auth?: Auth);
}
export declare class NxHypercubeMode {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qId - Identifier of the object.
If the chosen identifier is already in use, the engine automatically sets another one.
If an identifier is not set, the engine automatically sets one.
This parameter is optional.
  @param qType - Type of the object.
This parameter is mandatory.
  @param auth - Auth object used to make requests
 */
export declare class NxInfo {
    auth?: Auth;
    qId?: string;
    qType?: string;
    [key: string]: any;
    constructor({ qId, qType, ...rest }: {
        qId?: string;
        qType?: string;
    }, auth?: Auth);
}
/**
  @param qActiveField - Index of the active field in a cyclic dimension.
This parameter is optional. The default value is 0.
This parameter is used in case of cyclic dimensions ( qGrouping is C).
  @param qFieldDefs - Array of field names.
When creating a grouped dimension, more than one field name is defined.
This parameter is optional.
  @param qFieldLabels - Array of field labels.
This parameter is optional.
  @param qGrouping - Used to define a cyclic group or drill-down group.
Default value is no grouping.
This parameter is optional.

One of:

• N or GRP_NX_NONE

• H or GRP_NX_HIEARCHY

• C or GRP_NX_COLLECTION
  @param qLabelExpression - Label expression.
This parameter is optional.
  @param qNumberPresentations - Defines the format of the value.
This parameter is optional.
  @param qReverseSort - If set to true, it inverts the sort criteria in the field.
  @param qSortCriterias - Defines the sorting criteria in the field.
Default is to sort by alphabetical order, ascending.
This parameter is optional.
  @param auth - Auth object used to make requests
 */
export declare class NxInlineDimensionDef {
    auth?: Auth;
    qActiveField?: number;
    qFieldDefs?: Array<string>;
    qFieldLabels?: Array<string>;
    qGrouping?: 'GRP_NX_NONE' | 'GRP_NX_HIEARCHY' | 'GRP_NX_COLLECTION' | string;
    qLabelExpression?: string;
    qNumberPresentations?: Array<FieldAttributes>;
    qReverseSort?: boolean;
    qSortCriterias?: Array<SortCriteria>;
    [key: string]: any;
    constructor({ qActiveField, qFieldDefs, qFieldLabels, qGrouping, qLabelExpression, qNumberPresentations, qReverseSort, qSortCriterias, ...rest }: {
        qActiveField?: number;
        qFieldDefs?: Array<string>;
        qFieldLabels?: Array<string>;
        qGrouping?: 'GRP_NX_NONE' | 'GRP_NX_HIEARCHY' | 'GRP_NX_COLLECTION' | string;
        qLabelExpression?: string;
        qNumberPresentations?: Array<FieldAttributes>;
        qReverseSort?: boolean;
        qSortCriterias?: Array<SortCriteria>;
    }, auth?: Auth);
}
/**
  @param qAccumulate - * 0 means no accumulation
                            * 1 means full accumulation (each y-value accumulates all previous y-values of the expression)
                            * ≥ 2 means accumulate as many steps as the qAccumulate value
Default value is 0.
This parameter is optional.
  @param qActiveExpression - Index of the active expression in a cyclic measure. The indexing starts from 0.
The default value is 0.
This parameter is optional.
  @param qAggrFunc - Aggregate function.
For more information on the aggregate function syntax, see the section Working with Qlik Sense on the online help portal.
The default value is 0 (Sum of rows)
This parameter is optional.
  @param qBrutalSum - If set to true, the sum of rows total should be used rather than real expression total.
This parameter is optional and applies to straight tables.
Default value is false.
If using the Qlik Sense interface, it means that the total mode is set to Expression Total .
  @param qDef - Definition of the expression in the measure.
Example: Sum (OrderTotal)
This parameter is mandatory.
  @param qDescription - Description of the measure.
An empty string is returned as a default value.
This parameter is optional.
  @param qExpressions - Array of expressions. This parameter is used in case of cyclic measures ( qGrouping is C). List of the expressions in the cyclic group.
  @param qGrouping - Default value is no grouping.
This parameter is optional.

One of:

• N or GRP_NX_NONE

• H or GRP_NX_HIEARCHY

• C or GRP_NX_COLLECTION
  @param qLabel - Name of the measure.
An empty string is returned as a default value.
This parameter is optional.
  @param qLabelExpression - Label expression.
This parameter is optional.
  @param qNumFormat - Format of the field.
This parameter is optional.
  @param qRelative - If set to true, percentage values are returned instead of absolute numbers.
Default value is false.
This parameter is optional.
  @param qReverseSort - If set to true, it inverts the sort criteria in the field.
  @param qTags - Name connected to the measure that is used for search purposes.
A measure can have several tags.
This parameter is optional.
  @param auth - Auth object used to make requests
 */
export declare class NxInlineMeasureDef {
    auth?: Auth;
    qAccumulate?: number;
    qActiveExpression?: number;
    qAggrFunc?: string;
    qBrutalSum?: boolean;
    qDef?: string;
    qDescription?: string;
    qExpressions?: Array<string>;
    qGrouping?: 'GRP_NX_NONE' | 'GRP_NX_HIEARCHY' | 'GRP_NX_COLLECTION' | string;
    qLabel?: string;
    qLabelExpression?: string;
    qNumFormat?: FieldAttributes;
    qRelative?: boolean;
    qReverseSort?: boolean;
    qTags?: Array<string>;
    [key: string]: any;
    constructor({ qAccumulate, qActiveExpression, qAggrFunc, qBrutalSum, qDef, qDescription, qExpressions, qGrouping, qLabel, qLabelExpression, qNumFormat, qRelative, qReverseSort, qTags, ...rest }: {
        qAccumulate?: number;
        qActiveExpression?: number;
        qAggrFunc?: string;
        qBrutalSum?: boolean;
        qDef?: string;
        qDescription?: string;
        qExpressions?: Array<string>;
        qGrouping?: 'GRP_NX_NONE' | 'GRP_NX_HIEARCHY' | 'GRP_NX_COLLECTION' | string;
        qLabel?: string;
        qLabelExpression?: string;
        qNumFormat?: FieldAttributes;
        qRelative?: boolean;
        qReverseSort?: boolean;
        qTags?: Array<string>;
    }, auth?: Auth);
}
export declare class NxLTrendlineType {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qErrorCode - Error code.
  @param auth - Auth object used to make requests
 */
export declare class NxLayoutErrors {
    auth?: Auth;
    qErrorCode?: number;
    [key: string]: any;
    constructor({ qErrorCode, ...rest }: {
        qErrorCode?: number;
    }, auth?: Auth);
}
/**
  @param qFieldDefs - Array of dimension names.
  @param qFieldLabels - Array of dimension labels.
  @param qGrouping - Information about the grouping.

One of:

• N or GRP_NX_NONE

• H or GRP_NX_HIEARCHY

• C or GRP_NX_COLLECTION
  @param qLabelExpression
  @param auth - Auth object used to make requests
 */
export declare class NxLibraryDimension {
    auth?: Auth;
    qFieldDefs?: Array<string>;
    qFieldLabels?: Array<string>;
    qGrouping?: 'GRP_NX_NONE' | 'GRP_NX_HIEARCHY' | 'GRP_NX_COLLECTION' | string;
    qLabelExpression?: string;
    [key: string]: any;
    constructor({ qFieldDefs, qFieldLabels, qGrouping, qLabelExpression, ...rest }: {
        qFieldDefs?: Array<string>;
        qFieldLabels?: Array<string>;
        qGrouping?: 'GRP_NX_NONE' | 'GRP_NX_HIEARCHY' | 'GRP_NX_COLLECTION' | string;
        qLabelExpression?: string;
    }, auth?: Auth);
}
/**
  @param qFieldDefs - Array of dimension names.
  @param qFieldLabels - Array of dimension labels.
  @param qGrouping - Information about the grouping.

One of:

• N or GRP_NX_NONE

• H or GRP_NX_HIEARCHY

• C or GRP_NX_COLLECTION
  @param qLabelExpression
  @param auth - Auth object used to make requests
 */
export declare class NxLibraryDimensionDef {
    auth?: Auth;
    qFieldDefs?: Array<string>;
    qFieldLabels?: Array<string>;
    qGrouping?: 'GRP_NX_NONE' | 'GRP_NX_HIEARCHY' | 'GRP_NX_COLLECTION' | string;
    qLabelExpression?: string;
    [key: string]: any;
    constructor({ qFieldDefs, qFieldLabels, qGrouping, qLabelExpression, ...rest }: {
        qFieldDefs?: Array<string>;
        qFieldLabels?: Array<string>;
        qGrouping?: 'GRP_NX_NONE' | 'GRP_NX_HIEARCHY' | 'GRP_NX_COLLECTION' | string;
        qLabelExpression?: string;
    }, auth?: Auth);
}
/**
  Information about the library measure. Is the layout for NxLibraryMeasureDef.
  @param qActiveExpression
  @param qDef
  @param qExpressions
  @param qGrouping -
One of:

• N or GRP_NX_NONE

• H or GRP_NX_HIEARCHY

• C or GRP_NX_COLLECTION
  @param qLabel
  @param qLabelExpression
  @param qNumFormat - Format of the field.
This parameter is optional.
  @param auth - Auth object used to make requests
 */
export declare class NxLibraryMeasure {
    auth?: Auth;
    qActiveExpression?: number;
    qDef?: string;
    qExpressions?: Array<string>;
    qGrouping?: 'GRP_NX_NONE' | 'GRP_NX_HIEARCHY' | 'GRP_NX_COLLECTION' | string;
    qLabel?: string;
    qLabelExpression?: string;
    qNumFormat?: FieldAttributes;
    [key: string]: any;
    constructor({ qActiveExpression, qDef, qExpressions, qGrouping, qLabel, qLabelExpression, qNumFormat, ...rest }: {
        qActiveExpression?: number;
        qDef?: string;
        qExpressions?: Array<string>;
        qGrouping?: 'GRP_NX_NONE' | 'GRP_NX_HIEARCHY' | 'GRP_NX_COLLECTION' | string;
        qLabel?: string;
        qLabelExpression?: string;
        qNumFormat?: FieldAttributes;
    }, auth?: Auth);
}
/**
  @param qActiveExpression - Index to the active expression in a measure.
  @param qDef - Definition of the measure.
  @param qExpressions - Array of expressions.
  @param qGrouping - Used to define a cyclic group or drill-down group.
Default value is no grouping.
This parameter is optional.

One of:

• N or GRP_NX_NONE

• H or GRP_NX_HIEARCHY

• C or GRP_NX_COLLECTION
  @param qLabel - Label of the measure.
  @param qLabelExpression - Optional expression used for dynamic label.
  @param qNumFormat - Format of the field.
This parameter is optional.
  @param auth - Auth object used to make requests
 */
export declare class NxLibraryMeasureDef {
    auth?: Auth;
    qActiveExpression?: number;
    qDef?: string;
    qExpressions?: Array<string>;
    qGrouping?: 'GRP_NX_NONE' | 'GRP_NX_HIEARCHY' | 'GRP_NX_COLLECTION' | string;
    qLabel?: string;
    qLabelExpression?: string;
    qNumFormat?: FieldAttributes;
    [key: string]: any;
    constructor({ qActiveExpression, qDef, qExpressions, qGrouping, qLabel, qLabelExpression, qNumFormat, ...rest }: {
        qActiveExpression?: number;
        qDef?: string;
        qExpressions?: Array<string>;
        qGrouping?: 'GRP_NX_NONE' | 'GRP_NX_HIEARCHY' | 'GRP_NX_COLLECTION' | string;
        qLabel?: string;
        qLabelExpression?: string;
        qNumFormat?: FieldAttributes;
    }, auth?: Auth);
}
/**
  @param qInfo - Information about the linked object.
  @param qRootId - Identifier of the root object.
If the linked object is a child, the root identifier is the identifier of the parent.
If the linked object is an app object, the root identifier is the same than the identifier of the linked object since the linked object is a root object.
  @param auth - Auth object used to make requests
 */
export declare class NxLinkedObjectInfo {
    auth?: Auth;
    qInfo?: NxInfo;
    qRootId?: string;
    [key: string]: any;
    constructor({ qInfo, qRootId, ...rest }: {
        qInfo?: NxInfo;
        qRootId?: string;
    }, auth?: Auth);
}
/**
  @param qError - Gives information on the error.
This parameter is optional.
  @param qExpr - Value of the expression.
  @param auth - Auth object used to make requests
 */
export declare class NxListObjectExpression {
    auth?: Auth;
    qError?: NxLayoutErrors;
    qExpr?: string;
    [key: string]: any;
    constructor({ qError, qExpr, ...rest }: {
        qError?: NxLayoutErrors;
        qExpr?: string;
    }, auth?: Auth);
}
/**
  @param qExpr - Value of the expression.
  @param qLibraryId - Refers to an expression stored in the library.
  @param auth - Auth object used to make requests
 */
export declare class NxListObjectExpressionDef {
    auth?: Auth;
    qExpr?: string;
    qLibraryId?: string;
    [key: string]: any;
    constructor({ qExpr, qLibraryId, ...rest }: {
        qExpr?: string;
        qLibraryId?: string;
    }, auth?: Auth);
}
export declare class NxLocalizedErrorCode {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
export declare class NxLocalizedWarningCode {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qName - Name of the field.
  @param qTags - List of tags.
  @param auth - Auth object used to make requests
 */
export declare class NxMatchingFieldInfo {
    auth?: Auth;
    qName?: string;
    qTags?: Array<string>;
    [key: string]: any;
    constructor({ qName, qTags, ...rest }: {
        qName?: string;
        qTags?: Array<string>;
    }, auth?: Auth);
}
export declare class NxMatchingFieldMode {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  Either qDef or qLibraryId must be set, but not both.  If the measure is set in the hypercube and not in the library, this measure cannot be shared with other objects. A measure that is set in the library can be used by many objects.
expressions are complementary expressions associated to a measure. For example, you can decide to change the background color of a visualization depending on the values of the measure.
Attribute expressions do not affect the layout of an object. The sorting order is unchanged.

  @param qAttributeDimensions - List of attribute dimensions.
  @param qAttributeExpressions - List of attribute expressions.
  @param qCalcCond - Specifies a calculation condition, which must be fulfilled for the measure to be calculated.
If the calculation condition is not met, the measure is excluded from the calculation.
By default, there is no calculation condition.
This property is optional.
  @param qCalcCondition - Specifies a calculation condition object.
If CalcCondition.Cond is not fulfilled, the measure is excluded from the calculation and CalcCondition.Msg is evaluated.
By default, there is no calculation condition.
This property is optional.
  @param qDef - Refers to a measure stored in the hypercube.
  @param qLibraryId - Refers to a measure stored in the library.
  @param qMiniChartDef
  @param qSortBy - Defines the sort criteria.
The default value is sort by ascending alphabetic order.
This property is optional.
  @param qTrendLines - Specifies trendlines for this measure.
  @param auth - Auth object used to make requests
 */
export declare class NxMeasure {
    auth?: Auth;
    qAttributeDimensions?: Array<NxAttrDimDef>;
    qAttributeExpressions?: Array<NxAttrExprDef>;
    qCalcCond?: ValueExpr;
    qCalcCondition?: NxCalcCond;
    qDef?: NxInlineMeasureDef;
    qLibraryId?: string;
    qMiniChartDef?: NxMiniChartDef;
    qSortBy?: SortCriteria;
    qTrendLines?: Array<NxTrendlineDef>;
    [key: string]: any;
    constructor({ qAttributeDimensions, qAttributeExpressions, qCalcCond, qCalcCondition, qDef, qLibraryId, qMiniChartDef, qSortBy, qTrendLines, ...rest }: {
        qAttributeDimensions?: Array<NxAttrDimDef>;
        qAttributeExpressions?: Array<NxAttrExprDef>;
        qCalcCond?: ValueExpr;
        qCalcCondition?: NxCalcCond;
        qDef?: NxInlineMeasureDef;
        qLibraryId?: string;
        qMiniChartDef?: NxMiniChartDef;
        qSortBy?: SortCriteria;
        qTrendLines?: Array<NxTrendlineDef>;
    }, auth?: Auth);
}
/**
  Layout for NxInlineMeasureDef.
  @param qApprMaxGlyphCount - Length of the longest value in the field.
  @param qAttrDimInfo - List of attribute dimensions.
  @param qAttrExprInfo - List of attribute expressions.
  @param qCalcCondMsg - The message displayed if calculation condition is not fulfilled.
  @param qCardinal - Number of distinct field values.
  @param qError - This parameter is optional.
Gives information on the error.
  @param qFallbackTitle - Corresponds to the label of the measure.
If the label is not defined then the measure name is used.
  @param qIsAutoFormat - This parameter is set to true if qNumFormat is set to U (unknown). The engine guesses the type of the field based on the field's expression.
  @param qLibraryId - Refers to a dimension stored in the library.
  @param qMax - Highest value in the range.
  @param qMin - Lowest value in the range.
  @param qMiniChart
  @param qNumFormat - Format of the field.
This parameter is optional.
  @param qReverseSort - If set to true, it inverts the sort criteria in the field.
  @param qSortIndicator - Sort indicator.
The default value is no sorting.
This parameter is optional.

One of:

• N or NX_SORT_INDICATE_NONE

• A or NX_SORT_INDICATE_ASC

• D or NX_SORT_INDICATE_DESC
  @param qTrendLines - Calculated trendlines
  @param auth - Auth object used to make requests
 */
export declare class NxMeasureInfo {
    auth?: Auth;
    qApprMaxGlyphCount?: number;
    qAttrDimInfo?: Array<NxAttrDimInfo>;
    qAttrExprInfo?: Array<NxAttrExprInfo>;
    qCalcCondMsg?: string;
    qCardinal?: number;
    qError?: NxValidationError;
    qFallbackTitle?: string;
    qIsAutoFormat?: boolean;
    qLibraryId?: string;
    qMax?: number;
    qMin?: number;
    qMiniChart?: NxMiniChart;
    qNumFormat?: FieldAttributes;
    qReverseSort?: boolean;
    qSortIndicator?: 'NX_SORT_INDICATE_NONE' | 'NX_SORT_INDICATE_ASC' | 'NX_SORT_INDICATE_DESC' | string;
    qTrendLines?: Array<NxTrendline>;
    [key: string]: any;
    constructor({ qApprMaxGlyphCount, qAttrDimInfo, qAttrExprInfo, qCalcCondMsg, qCardinal, qError, qFallbackTitle, qIsAutoFormat, qLibraryId, qMax, qMin, qMiniChart, qNumFormat, qReverseSort, qSortIndicator, qTrendLines, ...rest }: {
        qApprMaxGlyphCount?: number;
        qAttrDimInfo?: Array<NxAttrDimInfo>;
        qAttrExprInfo?: Array<NxAttrExprInfo>;
        qCalcCondMsg?: string;
        qCardinal?: number;
        qError?: NxValidationError;
        qFallbackTitle?: string;
        qIsAutoFormat?: boolean;
        qLibraryId?: string;
        qMax?: number;
        qMin?: number;
        qMiniChart?: NxMiniChart;
        qNumFormat?: FieldAttributes;
        qReverseSort?: boolean;
        qSortIndicator?: 'NX_SORT_INDICATE_NONE' | 'NX_SORT_INDICATE_ASC' | 'NX_SORT_INDICATE_DESC' | string;
        qTrendLines?: Array<NxTrendline>;
    }, auth?: Auth);
}
/**
  Layout for NxMetaDef.
  @param qName - Name.
This property is optional.
  @param auth - Auth object used to make requests
 */
export declare class NxMeta {
    auth?: Auth;
    qName?: string;
    [key: string]: any;
    constructor({ qName, ...rest }: {
        qName?: string;
    }, auth?: Auth);
}
/**
  Used to collect meta data.

 Properties:
Semantic type with an empty structure.

  @param auth - Auth object used to make requests
 */
export declare class NxMetaDef {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qAttrExprInfo - List of attribute expressions.
  @param qError - This parameter is optional and is displayed in case of error.
  @param qXMax
  @param qXMin
  @param qYMax
  @param qYMin
  @param auth - Auth object used to make requests
 */
export declare class NxMiniChart {
    auth?: Auth;
    qAttrExprInfo?: Array<NxAttrExprInfo>;
    qError?: NxValidationError;
    qXMax?: number;
    qXMin?: number;
    qYMax?: number;
    qYMin?: number;
    [key: string]: any;
    constructor({ qAttrExprInfo, qError, qXMax, qXMin, qYMax, qYMin, ...rest }: {
        qAttrExprInfo?: Array<NxAttrExprInfo>;
        qError?: NxValidationError;
        qXMax?: number;
        qXMin?: number;
        qYMax?: number;
        qYMin?: number;
    }, auth?: Auth);
}
/**
  @param qAttrExps - Attribute expressions values.
  @param qElemNumber - Rank number of the value, starting from 0.
If the element number is a negative number, it means that the returned value is not an element number.
You can get the following negative values:

• -1: the cell is a Total cell. It shows a total.

• -2: the cell is a Null cell.

• -3: the cell belongs to the group Others .

• -4: the cell is empty. Applies to pivot tables.
  @param qNum - A value.
This parameter is optional.
  @param qText - Some text.
  @param auth - Auth object used to make requests
 */
export declare class NxMiniChartCell {
    auth?: Auth;
    qAttrExps?: NxAttributeExpressionValues;
    qElemNumber?: number;
    qNum?: number;
    qText?: string;
    [key: string]: any;
    constructor({ qAttrExps, qElemNumber, qNum, qText, ...rest }: {
        qAttrExps?: NxAttributeExpressionValues;
        qElemNumber?: number;
        qNum?: number;
        qText?: string;
    }, auth?: Auth);
}
/**
  @param qError - This parameter is optional and is displayed in case of error.
  @param qMatrix - Array of data.
  @param qMax
  @param qMin
  @param auth - Auth object used to make requests
 */
export declare class NxMiniChartData {
    auth?: Auth;
    qError?: NxValidationError;
    qMatrix?: Array<NxMiniChartRows>;
    qMax?: number;
    qMin?: number;
    [key: string]: any;
    constructor({ qError, qMatrix, qMax, qMin, ...rest }: {
        qError?: NxValidationError;
        qMatrix?: Array<NxMiniChartRows>;
        qMax?: number;
        qMin?: number;
    }, auth?: Auth);
}
/**
  @param qAttributeExpressions - List of attribute expressions.
  @param qDef - Expression or field name.
  @param qLibraryId - LibraryId for dimension.
  @param qMaxNumberPoints
  @param qNullSuppression - If set to true, no null values are returned.
  @param qOtherTotalSpec
  @param qSortBy - Sorting.
  @param auth - Auth object used to make requests
 */
export declare class NxMiniChartDef {
    auth?: Auth;
    qAttributeExpressions?: Array<NxAttrExprDef>;
    qDef?: string;
    qLibraryId?: string;
    qMaxNumberPoints?: number;
    qNullSuppression?: boolean;
    qOtherTotalSpec?: OtherTotalSpecProp;
    qSortBy?: SortCriteria;
    [key: string]: any;
    constructor({ qAttributeExpressions, qDef, qLibraryId, qMaxNumberPoints, qNullSuppression, qOtherTotalSpec, qSortBy, ...rest }: {
        qAttributeExpressions?: Array<NxAttrExprDef>;
        qDef?: string;
        qLibraryId?: string;
        qMaxNumberPoints?: number;
        qNullSuppression?: boolean;
        qOtherTotalSpec?: OtherTotalSpecProp;
        qSortBy?: SortCriteria;
    }, auth?: Auth);
}
export declare class NxMiniChartRows extends Array<NxMiniChartCell> {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor(arr: Array<NxMiniChartCell>, auth?: Auth);
}
/**
  @param qColumnsToSelect
  @param qRanges
  @param auth - Auth object used to make requests
 */
export declare class NxMultiRangeSelectInfo {
    auth?: Auth;
    qColumnsToSelect?: Array<number>;
    qRanges?: Array<NxRangeSelectInfo>;
    [key: string]: any;
    constructor({ qColumnsToSelect, qRanges, ...rest }: {
        qColumnsToSelect?: Array<number>;
        qRanges?: Array<NxRangeSelectInfo>;
    }, auth?: Auth);
}
/**
  @param qHeight - Number of rows or elements in the page. The indexing of the rows may vary depending on whether the cells are expanded or not (parameter qAlwaysFullyExpanded in HyperCubeDef ).
  @param qLeft - Position from the left.
Corresponds to the first column.
  @param qTop - Position from the top.
Corresponds to the first row.
  @param qWidth - Number of columns in the page. The indexing of the columns may vary depending on whether the cells are expanded or not (parameter qAlwaysFullyExpanded in HyperCubeDef ).
  @param auth - Auth object used to make requests
 */
export declare class NxPage {
    auth?: Auth;
    qHeight?: number;
    qLeft?: number;
    qTop?: number;
    qWidth?: number;
    [key: string]: any;
    constructor({ qHeight, qLeft, qTop, qWidth, ...rest }: {
        qHeight?: number;
        qLeft?: number;
        qTop?: number;
        qWidth?: number;
    }, auth?: Auth);
}
/**
  @param qDepth - Number of dimensions to include in the tree.
  @param qLeft - The first dimension that is to be part of the tree, counted from the left. For example, if qLeft is equal to 1, omit nodes from the first dimension in the current sort order.
  @param auth - Auth object used to make requests
 */
export declare class NxPageTreeLevel {
    auth?: Auth;
    qDepth?: number;
    qLeft?: number;
    [key: string]: any;
    constructor({ qDepth, qLeft, ...rest }: {
        qDepth?: number;
        qLeft?: number;
    }, auth?: Auth);
}
/**
  Defines an area of the tree to be fetched.
  @param qAllValues - When set to true, generated nodes (based on current selection) will be inserted into the returned tree even when there is no actual value. For example, suppose you are looking for hybrid car sales at all car dealerships. Normally, only dealerships where hybrid cars are sold would be part of the returned tree but with qAllValues set to true, all available dealerships will be included regardless if they sold any hybrid cars or not.
  @param qArea - The area of the tree to be fetched. If no area is defined on a dimension, all existing nodes are included.
  @param auth - Auth object used to make requests
 */
export declare class NxPageTreeNode {
    auth?: Auth;
    qAllValues?: boolean;
    qArea?: Rect;
    [key: string]: any;
    constructor({ qAllValues, qArea, ...rest }: {
        qAllValues?: boolean;
        qArea?: Rect;
    }, auth?: Auth);
}
/**
  @param qOp - Operation to perform.

One of:

• add or Add

• remove or Remove

• replace or Replace
  @param qPath - Path to the property to add, remove or replace.
  @param qValue - This parameter is not used in a remove operation.
Corresponds to the value of the property to add or to the new value of the property to update.
Examples:
"false", "2", "\"New title\""
  @param auth - Auth object used to make requests
 */
export declare class NxPatch {
    auth?: Auth;
    qOp?: 'Add' | 'Remove' | 'Replace' | string;
    qPath?: string;
    qValue?: string;
    [key: string]: any;
    constructor({ qOp, qPath, qValue, ...rest }: {
        qOp?: 'Add' | 'Remove' | 'Replace' | string;
        qPath?: string;
        qValue?: string;
    }, auth?: Auth);
}
export declare class NxPatchOperationType {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qChildren - Array with child objects and their patches.
  @param qInfo - Identifier and type of the object.
  @param qPatches - Array with patches.
  @param auth - Auth object used to make requests
 */
export declare class NxPatches {
    auth?: Auth;
    qChildren?: Array<NxPatches>;
    qInfo?: NxInfo;
    qPatches?: Array<NxPatch>;
    [key: string]: any;
    constructor({ qChildren, qInfo, qPatches, ...rest }: {
        qChildren?: Array<NxPatches>;
        qInfo?: NxInfo;
        qPatches?: Array<NxPatch>;
    }, auth?: Auth);
}
/**
  @param qAttrDims - Information about attribute dimensions.
  @param qAttrExps - Information about attribute expressions.
The array is empty [ ] when there is no attribute expressions.
  @param qCanCollapse - If set to true, it means that the cell can be collapsed.
This parameter is not returned if it is set to false.
  @param qCanExpand - If set to true, it means that the cell can be expanded.
This parameter is not returned if it is set to false.
  @param qDown - Number of elements that are part of the next tail.
This number depends on the paging, more particularly it depends on the values defined in qTop and qHeight .
  @param qElemNo - Rank number of the value.
If set to -1, it means that the value is not an element number.
  @param qSubNodes - Information about sub nodes (or sub cells).
The array is empty [ ] when there is no sub nodes.
  @param qText - Some text.
  @param qType - Type of the cell.

One of:

• V or NX_DIM_CELL_VALUE

• E or NX_DIM_CELL_EMPTY

• N or NX_DIM_CELL_NORMAL

• T or NX_DIM_CELL_TOTAL

• O or NX_DIM_CELL_OTHER

• A or NX_DIM_CELL_AGGR

• P or NX_DIM_CELL_PSEUDO

• R or NX_DIM_CELL_ROOT

• U or NX_DIM_CELL_NULL

• G or NX_DIM_CELL_GENERATED
  @param qUp - Number of elements that are part of the previous tail.
This number depends on the paging, more particularly it depends on the values defined in qTop and qHeight .
  @param qValue - Value of the cell.
Is set to NaN , if the value is not a number.
  @param auth - Auth object used to make requests
 */
export declare class NxPivotDimensionCell {
    auth?: Auth;
    qAttrDims?: NxAttributeDimValues;
    qAttrExps?: NxAttributeExpressionValues;
    qCanCollapse?: boolean;
    qCanExpand?: boolean;
    qDown?: number;
    qElemNo?: number;
    qSubNodes?: Array<NxPivotDimensionCell>;
    qText?: string;
    qType?: 'NX_DIM_CELL_VALUE' | 'NX_DIM_CELL_EMPTY' | 'NX_DIM_CELL_NORMAL' | 'NX_DIM_CELL_TOTAL' | 'NX_DIM_CELL_OTHER' | 'NX_DIM_CELL_AGGR' | 'NX_DIM_CELL_PSEUDO' | 'NX_DIM_CELL_ROOT' | 'NX_DIM_CELL_NULL' | 'NX_DIM_CELL_GENERATED' | string;
    qUp?: number;
    qValue?: number;
    [key: string]: any;
    constructor({ qAttrDims, qAttrExps, qCanCollapse, qCanExpand, qDown, qElemNo, qSubNodes, qText, qType, qUp, qValue, ...rest }: {
        qAttrDims?: NxAttributeDimValues;
        qAttrExps?: NxAttributeExpressionValues;
        qCanCollapse?: boolean;
        qCanExpand?: boolean;
        qDown?: number;
        qElemNo?: number;
        qSubNodes?: Array<NxPivotDimensionCell>;
        qText?: string;
        qType?: 'NX_DIM_CELL_VALUE' | 'NX_DIM_CELL_EMPTY' | 'NX_DIM_CELL_NORMAL' | 'NX_DIM_CELL_TOTAL' | 'NX_DIM_CELL_OTHER' | 'NX_DIM_CELL_AGGR' | 'NX_DIM_CELL_PSEUDO' | 'NX_DIM_CELL_ROOT' | 'NX_DIM_CELL_NULL' | 'NX_DIM_CELL_GENERATED' | string;
        qUp?: number;
        qValue?: number;
    }, auth?: Auth);
}
/**
  @param qArea - Size and offset of the data in the matrix.
  @param qData - Array of data.
  @param qLeft - Information about the left dimension values of a pivot table.
  @param qTop - Information about the top dimension values of a pivot table. If there is no top dimension in the pivot table, information about the measures are given.
  @param auth - Auth object used to make requests
 */
export declare class NxPivotPage {
    auth?: Auth;
    qArea?: Rect;
    qData?: Array<ArrayOfNxValuePoint>;
    qLeft?: Array<NxPivotDimensionCell>;
    qTop?: Array<NxPivotDimensionCell>;
    [key: string]: any;
    constructor({ qArea, qData, qLeft, qTop, ...rest }: {
        qArea?: Rect;
        qData?: Array<ArrayOfNxValuePoint>;
        qLeft?: Array<NxPivotDimensionCell>;
        qTop?: Array<NxPivotDimensionCell>;
    }, auth?: Auth);
}
/**
  @param qAttrDims
  @param qAttrExps - Attribute expressions values.
  @param qLabel - Label of the cell.
This parameter is optional.
  @param qNum - Value of the cell.
  @param qText - Some text related to the cell.
  @param qType - Type of the cell.

One of:

• V or NX_DIM_CELL_VALUE

• E or NX_DIM_CELL_EMPTY

• N or NX_DIM_CELL_NORMAL

• T or NX_DIM_CELL_TOTAL

• O or NX_DIM_CELL_OTHER

• A or NX_DIM_CELL_AGGR

• P or NX_DIM_CELL_PSEUDO

• R or NX_DIM_CELL_ROOT

• U or NX_DIM_CELL_NULL

• G or NX_DIM_CELL_GENERATED
  @param auth - Auth object used to make requests
 */
export declare class NxPivotValuePoint {
    auth?: Auth;
    qAttrDims?: NxAttributeDimValues;
    qAttrExps?: NxAttributeExpressionValues;
    qLabel?: string;
    qNum?: number;
    qText?: string;
    qType?: 'NX_DIM_CELL_VALUE' | 'NX_DIM_CELL_EMPTY' | 'NX_DIM_CELL_NORMAL' | 'NX_DIM_CELL_TOTAL' | 'NX_DIM_CELL_OTHER' | 'NX_DIM_CELL_AGGR' | 'NX_DIM_CELL_PSEUDO' | 'NX_DIM_CELL_ROOT' | 'NX_DIM_CELL_NULL' | 'NX_DIM_CELL_GENERATED' | string;
    [key: string]: any;
    constructor({ qAttrDims, qAttrExps, qLabel, qNum, qText, qType, ...rest }: {
        qAttrDims?: NxAttributeDimValues;
        qAttrExps?: NxAttributeExpressionValues;
        qLabel?: string;
        qNum?: number;
        qText?: string;
        qType?: 'NX_DIM_CELL_VALUE' | 'NX_DIM_CELL_EMPTY' | 'NX_DIM_CELL_NORMAL' | 'NX_DIM_CELL_TOTAL' | 'NX_DIM_CELL_OTHER' | 'NX_DIM_CELL_AGGR' | 'NX_DIM_CELL_PSEUDO' | 'NX_DIM_CELL_ROOT' | 'NX_DIM_CELL_NULL' | 'NX_DIM_CELL_GENERATED' | string;
    }, auth?: Auth);
}
/**
  @param qCount - Number of characters in the field name.
  @param qFrom - Position in the expression of the first character of the field name.
  @param auth - Auth object used to make requests
 */
export declare class NxRange {
    auth?: Auth;
    qCount?: number;
    qFrom?: number;
    [key: string]: any;
    constructor({ qCount, qFrom, ...rest }: {
        qCount?: number;
        qFrom?: number;
    }, auth?: Auth);
}
/**
  @param qMeasureIx - Number of the measure to select.
Numbering starts from 0.
  @param qRange - Range of values.
  @param auth - Auth object used to make requests
 */
export declare class NxRangeSelectInfo {
    auth?: Auth;
    qMeasureIx?: number;
    qRange?: Range;
    [key: string]: any;
    constructor({ qMeasureIx, qRange, ...rest }: {
        qMeasureIx?: number;
        qRange?: Range;
    }, auth?: Auth);
}
/**
  @param qCol - Column index to select.
Indexing starts from 0.
If the cell's type is:

• D, the index is based on the data matrix.

• T, the index is based on the data matrix.

• L, the index is based on the left dimensions indexes.
  @param qRow - Row index to select.
Indexing starts from 0.
If the cell's type is:

• D, the index is based on the data matrix.

• T, the index is based on the top dimensions indexes.

• L, the index is based on the data matrix.
  @param qType - Type of cells to select.

One of:

• D or NX_CELL_DATA

• T or NX_CELL_TOP

• L or NX_CELL_LEFT
  @param auth - Auth object used to make requests
 */
export declare class NxSelectionCell {
    auth?: Auth;
    qCol?: number;
    qRow?: number;
    qType?: 'NX_CELL_DATA' | 'NX_CELL_TOP' | 'NX_CELL_LEFT' | string;
    [key: string]: any;
    constructor({ qCol, qRow, qType, ...rest }: {
        qCol?: number;
        qRow?: number;
        qType?: 'NX_CELL_DATA' | 'NX_CELL_TOP' | 'NX_CELL_LEFT' | string;
    }, auth?: Auth);
}
export declare class NxSelectionCellType {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qInSelections - Is set to true if the visualization is in selection mode.
For more information about the selection mode, see BeginSelections Method.
  @param qMadeSelections - Is set to true if the visualization is in selection mode and if some selections have been made while in selection mode.
For more information about the selection mode, see BeginSelections Method.
  @param auth - Auth object used to make requests
 */
export declare class NxSelectionInfo {
    auth?: Auth;
    qInSelections?: boolean;
    qMadeSelections?: boolean;
    [key: string]: any;
    constructor({ qInSelections, qMadeSelections, ...rest }: {
        qInSelections?: boolean;
        qMadeSelections?: boolean;
    }, auth?: Auth);
}
/**
  @param qElemNo - Element number.
  @param qText - Text related to the attribute expression value.
This property is optional. No text is returned if the attribute expression value is a numeric.
  @param auth - Auth object used to make requests
 */
export declare class NxSimpleDimValue {
    auth?: Auth;
    qElemNo?: number;
    qText?: string;
    [key: string]: any;
    constructor({ qElemNo, qText, ...rest }: {
        qElemNo?: number;
        qText?: string;
    }, auth?: Auth);
}
/**
  @param qNum - Numeric value of the attribute expression.
Set to NaN (Not a Number) if the attribute expression value is not numeric.
  @param qText - Text related to the attribute expression value.
  @param auth - Auth object used to make requests
 */
export declare class NxSimpleValue {
    auth?: Auth;
    qNum?: number;
    qText?: string;
    [key: string]: any;
    constructor({ qNum, qText, ...rest }: {
        qNum?: number;
        qText?: string;
    }, auth?: Auth);
}
export declare class NxSortIndicatorType {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qArea - Size and offset of the data in the matrix.
  @param qData - Array of data.
  @param auth - Auth object used to make requests
 */
export declare class NxStackPage {
    auth?: Auth;
    qArea?: Rect;
    qData?: Array<NxStackedPivotCell>;
    [key: string]: any;
    constructor({ qArea, qData, ...rest }: {
        qArea?: Rect;
        qData?: Array<NxStackedPivotCell>;
    }, auth?: Auth);
}
/**
  @param qAttrDims - Attribute dimensions values.
  @param qAttrExps - Attribute expressions values.
  @param qCanCollapse - If set to true, it means that the cell can be collapsed.
This parameter is not returned if it is set to false.
  @param qCanExpand - If set to true, it means that the cell can be expanded.
This parameter is not returned if it is set to false.
  @param qDown - Number of elements that are part of the next tail.
  @param qElemNo - Rank number of the value.
If set to -1, it means that the value is not an element number.
  @param qMaxPos - Total of the positive values in the current group of cells.
  @param qMinNeg - Total of the negative values in the current group of cells.
  @param qRow - Row index in the data matrix.
The indexing starts from 0.
  @param qSubNodes - Information about sub nodes (or sub cells).
The array is empty [ ] when there are no sub nodes.
  @param qText - Some text.
  @param qType - Type of the cell.

One of:

• V or NX_DIM_CELL_VALUE

• E or NX_DIM_CELL_EMPTY

• N or NX_DIM_CELL_NORMAL

• T or NX_DIM_CELL_TOTAL

• O or NX_DIM_CELL_OTHER

• A or NX_DIM_CELL_AGGR

• P or NX_DIM_CELL_PSEUDO

• R or NX_DIM_CELL_ROOT

• U or NX_DIM_CELL_NULL

• G or NX_DIM_CELL_GENERATED
  @param qUp - Number of elements that are part of the previous tail.
  @param qValue - Value of the cell.
Is set to NaN , if the value is not a number.
  @param auth - Auth object used to make requests
 */
export declare class NxStackedPivotCell {
    auth?: Auth;
    qAttrDims?: NxAttributeDimValues;
    qAttrExps?: NxAttributeExpressionValues;
    qCanCollapse?: boolean;
    qCanExpand?: boolean;
    qDown?: number;
    qElemNo?: number;
    qMaxPos?: number;
    qMinNeg?: number;
    qRow?: number;
    qSubNodes?: Array<NxStackedPivotCell>;
    qText?: string;
    qType?: 'NX_DIM_CELL_VALUE' | 'NX_DIM_CELL_EMPTY' | 'NX_DIM_CELL_NORMAL' | 'NX_DIM_CELL_TOTAL' | 'NX_DIM_CELL_OTHER' | 'NX_DIM_CELL_AGGR' | 'NX_DIM_CELL_PSEUDO' | 'NX_DIM_CELL_ROOT' | 'NX_DIM_CELL_NULL' | 'NX_DIM_CELL_GENERATED' | string;
    qUp?: number;
    qValue?: number;
    [key: string]: any;
    constructor({ qAttrDims, qAttrExps, qCanCollapse, qCanExpand, qDown, qElemNo, qMaxPos, qMinNeg, qRow, qSubNodes, qText, qType, qUp, qValue, ...rest }: {
        qAttrDims?: NxAttributeDimValues;
        qAttrExps?: NxAttributeExpressionValues;
        qCanCollapse?: boolean;
        qCanExpand?: boolean;
        qDown?: number;
        qElemNo?: number;
        qMaxPos?: number;
        qMinNeg?: number;
        qRow?: number;
        qSubNodes?: Array<NxStackedPivotCell>;
        qText?: string;
        qType?: 'NX_DIM_CELL_VALUE' | 'NX_DIM_CELL_EMPTY' | 'NX_DIM_CELL_NORMAL' | 'NX_DIM_CELL_TOTAL' | 'NX_DIM_CELL_OTHER' | 'NX_DIM_CELL_AGGR' | 'NX_DIM_CELL_PSEUDO' | 'NX_DIM_CELL_ROOT' | 'NX_DIM_CELL_NULL' | 'NX_DIM_CELL_GENERATED' | string;
        qUp?: number;
        qValue?: number;
    }, auth?: Auth);
}
/**
  @param qAlternative - Number of values in alternative state.
  @param qDeselected - Number of values in deselected state.
  @param qExcluded - Number of values in excluded state.
  @param qLocked - Number of values in locked state.
  @param qLockedExcluded - Number of values in locked excluded state.
  @param qOption - Number of values in optional state.
  @param qSelected - Number of values in selected state.
  @param qSelectedExcluded - Number of values in selected excluded state.
  @param auth - Auth object used to make requests
 */
export declare class NxStateCounts {
    auth?: Auth;
    qAlternative?: number;
    qDeselected?: number;
    qExcluded?: number;
    qLocked?: number;
    qLockedExcluded?: number;
    qOption?: number;
    qSelected?: number;
    qSelectedExcluded?: number;
    [key: string]: any;
    constructor({ qAlternative, qDeselected, qExcluded, qLocked, qLockedExcluded, qOption, qSelected, qSelectedExcluded, ...rest }: {
        qAlternative?: number;
        qDeselected?: number;
        qExcluded?: number;
        qLocked?: number;
        qLockedExcluded?: number;
        qOption?: number;
        qSelected?: number;
        qSelectedExcluded?: number;
    }, auth?: Auth);
}
/**
  This struct is deprecated (not recommended to use).
  @param qId - Identifier of the stream.
  @param qName - Name of the stream.
  @param auth - Auth object used to make requests
 */
export declare class NxStreamListEntry {
    auth?: Auth;
    qId?: string;
    qName?: string;
    [key: string]: any;
    constructor({ qId, qName, ...rest }: {
        qId?: string;
        qName?: string;
    }, auth?: Auth);
}
/**
  @param qIncludeAllPatches - IncludeAllPatches If true all patches will be stored in the temporary bookmark, if false ObjectIdsToPatch will determine what patches to include
  @param qIncludeVariables - IncludeVariables If true all variables will be stored in the temporary bookmark
  @param auth - Auth object used to make requests
 */
export declare class NxTempBookmarkOptions {
    auth?: Auth;
    qIncludeAllPatches?: boolean;
    qIncludeVariables?: boolean;
    [key: string]: any;
    constructor({ qIncludeAllPatches, qIncludeVariables, ...rest }: {
        qIncludeAllPatches?: boolean;
        qIncludeVariables?: boolean;
    }, auth?: Auth);
}
/**
  @param qEnd - End value.
  @param qStart - Start value.
  @param qText - Tick's label.
  @param auth - Auth object used to make requests
 */
export declare class NxTickCell {
    auth?: Auth;
    qEnd?: number;
    qStart?: number;
    qText?: string;
    [key: string]: any;
    constructor({ qEnd, qStart, qText, ...rest }: {
        qEnd?: number;
        qStart?: number;
        qText?: string;
    }, auth?: Auth);
}
/**
  Specifies all the paging filters needed to define the tree to be fetched.
  @param qMaxNbrOfNodes - Maximum number of nodes in the tree. If this limit is exceeded, no nodes are returned. All nodes are counted.
  @param qTreeLevels - Filters out complete dimensions from the fetched tree.
  @param qTreeNodes - Defines areas of the tree to be fetched. Areas must be defined left to right.
  @param auth - Auth object used to make requests
 */
export declare class NxTreeDataOption {
    auth?: Auth;
    qMaxNbrOfNodes?: number;
    qTreeLevels?: NxPageTreeLevel;
    qTreeNodes?: Array<NxPageTreeNode>;
    [key: string]: any;
    constructor({ qMaxNbrOfNodes, qTreeLevels, qTreeNodes, ...rest }: {
        qMaxNbrOfNodes?: number;
        qTreeLevels?: NxPageTreeLevel;
        qTreeNodes?: Array<NxPageTreeNode>;
    }, auth?: Auth);
}
/**
  @param qAttributeDimensions - List of attribute dimensions.
  @param qAttributeExpressions - List of attribute expressions.
  @param qCalcCondition - Specifies a calculation condition object.
If CalcCondition.Cond is not fulfilled, the dimension is excluded from the calculation and CalcCondition.Msg is evaluated.
By default, there is no calculation condition.
This property is optional.
  @param qDef - Refers to a dimension.
  @param qLibraryId - Refers to a dimension stored in the library.
  @param qNullSuppression - If set to true, no null values are returned.
  @param qOtherLabel - This property is used when some dimension limits are set.
Label of the Others group. The default label is Others .
Example:
"qOtherLabel":"= <label>"
or
"qOtherLabel":{"qExpr":"= <label>"}
Where:

• < label > is the label of the Others group.
  @param qOtherTotalSpec - Sets the dimension limits. Each dimension of a hypercube is configured separately.
Defines if some values (grouped as Others ) should be grouped together in the visualization.
For example in a pie chart all values lower than 200 could be grouped together.
  @param qShowAll - If set to true, all dimension values are shown.
  @param qTotalLabel - If this property is set, the total of the calculated values is returned.
The default label is Total .
Example:
"qTotalLabel":"= <label>"
or
"qTotalLabel":{"qExpr":"= <label>"}
Where:

• < label > is the label of the Total group.
  @param qValueExprs - List of measures.
  @param auth - Auth object used to make requests
 */
export declare class NxTreeDimensionDef {
    auth?: Auth;
    qAttributeDimensions?: Array<NxAttrDimDef>;
    qAttributeExpressions?: Array<NxAttrExprDef>;
    qCalcCondition?: NxCalcCond;
    qDef?: NxInlineDimensionDef;
    qLibraryId?: string;
    qNullSuppression?: boolean;
    qOtherLabel?: StringExpr;
    qOtherTotalSpec?: OtherTotalSpecProp;
    qShowAll?: boolean;
    qTotalLabel?: StringExpr;
    qValueExprs?: Array<NxMeasure>;
    [key: string]: any;
    constructor({ qAttributeDimensions, qAttributeExpressions, qCalcCondition, qDef, qLibraryId, qNullSuppression, qOtherLabel, qOtherTotalSpec, qShowAll, qTotalLabel, qValueExprs, ...rest }: {
        qAttributeDimensions?: Array<NxAttrDimDef>;
        qAttributeExpressions?: Array<NxAttrExprDef>;
        qCalcCondition?: NxCalcCond;
        qDef?: NxInlineDimensionDef;
        qLibraryId?: string;
        qNullSuppression?: boolean;
        qOtherLabel?: StringExpr;
        qOtherTotalSpec?: OtherTotalSpecProp;
        qShowAll?: boolean;
        qTotalLabel?: StringExpr;
        qValueExprs?: Array<NxMeasure>;
    }, auth?: Auth);
}
/**
  @param qApprMaxGlyphCount - Length of the longest value in the field.
  @param qAttrDimInfo - List of attribute dimensions.
  @param qAttrExprInfo - List of attribute expressions.
  @param qCalcCondMsg - The message displayed if calculation condition is not fulfilled.
  @param qCardinal - Number of distinct field values.
  @param qCardinalities - Dimension Cardinalities
  @param qContinuousAxes - Is continuous axis used.
  @param qDerivedField - Is derived field is used as a dimension.
  @param qDimensionType - Binary format of the field.

One of:

• D or NX_DIMENSION_TYPE_DISCRETE

• N or NX_DIMENSION_TYPE_NUMERIC

• T or NX_DIMENSION_TYPE_TIME
  @param qError - This parameter is optional.
Gives information on the error.
  @param qFallbackTitle - Corresponds to the label of the dimension that is selected.
If the label is not defined then the field name is used.
  @param qGroupFallbackTitles - Array of dimension labels.
Contains the labels of all dimensions in a hierarchy group (for example the labels of all dimensions in a drill down group).
  @param qGroupFieldDefs - Array of field names.
  @param qGroupPos - Index of the dimension that is currently in use.
qGroupPos is set to 0 if there are no hierarchical groups (drill-down groups) or cycle groups.
  @param qGrouping - Defines the grouping.

One of:

• N or GRP_NX_NONE

• H or GRP_NX_HIEARCHY

• C or GRP_NX_COLLECTION
  @param qIsAutoFormat - This parameter is set to true if qNumFormat is set to U (unknown). The engine guesses the type of the field based on the field's definition.
  @param qIsCalculated - True if this is a calculated dimension.
  @param qIsCyclic - Is a cyclic dimension used.
  @param qIsOneAndOnlyOne - If set to true, it means that the field always has one and only one selected value.
  @param qIsSemantic - If set to true, it means that the field is a semantic.
  @param qLibraryId - Refers to a dimension stored in the library.
  @param qLocked - Is set to true if the field is locked.
  @param qMax - Maximum value.
  @param qMeasureInfo - A List of measures to be calculated on this TreeDimension.
  @param qMin - Minimum value.
  @param qNumFormat - Format of the field.
This parameter is optional.
  @param qReverseSort - If set to true, it inverts the sort criteria in the field.
  @param qSortIndicator - Sort indicator.
The default value is no sorting.
This parameter is optional.

One of:

• N or NX_SORT_INDICATE_NONE

• A or NX_SORT_INDICATE_ASC

• D or NX_SORT_INDICATE_DESC
  @param qStateCounts - Number of values in a particular state.
  @param qTags - Gives information on a field. For example, it can return the type of the field.
Examples: key, text, ASCII
  @param auth - Auth object used to make requests
 */
export declare class NxTreeDimensionInfo {
    auth?: Auth;
    qApprMaxGlyphCount?: number;
    qAttrDimInfo?: Array<NxAttrDimInfo>;
    qAttrExprInfo?: Array<NxAttrExprInfo>;
    qCalcCondMsg?: string;
    qCardinal?: number;
    qCardinalities?: NxCardinalities;
    qContinuousAxes?: boolean;
    qDerivedField?: boolean;
    qDimensionType?: 'NX_DIMENSION_TYPE_DISCRETE' | 'NX_DIMENSION_TYPE_NUMERIC' | 'NX_DIMENSION_TYPE_TIME' | string;
    qError?: NxValidationError;
    qFallbackTitle?: string;
    qGroupFallbackTitles?: Array<string>;
    qGroupFieldDefs?: Array<string>;
    qGroupPos?: number;
    qGrouping?: 'GRP_NX_NONE' | 'GRP_NX_HIEARCHY' | 'GRP_NX_COLLECTION' | string;
    qIsAutoFormat?: boolean;
    qIsCalculated?: boolean;
    qIsCyclic?: boolean;
    qIsOneAndOnlyOne?: boolean;
    qIsSemantic?: boolean;
    qLibraryId?: string;
    qLocked?: boolean;
    qMax?: number;
    qMeasureInfo?: Array<NxMeasureInfo>;
    qMin?: number;
    qNumFormat?: FieldAttributes;
    qReverseSort?: boolean;
    qSortIndicator?: 'NX_SORT_INDICATE_NONE' | 'NX_SORT_INDICATE_ASC' | 'NX_SORT_INDICATE_DESC' | string;
    qStateCounts?: NxStateCounts;
    qTags?: Array<string>;
    [key: string]: any;
    constructor({ qApprMaxGlyphCount, qAttrDimInfo, qAttrExprInfo, qCalcCondMsg, qCardinal, qCardinalities, qContinuousAxes, qDerivedField, qDimensionType, qError, qFallbackTitle, qGroupFallbackTitles, qGroupFieldDefs, qGroupPos, qGrouping, qIsAutoFormat, qIsCalculated, qIsCyclic, qIsOneAndOnlyOne, qIsSemantic, qLibraryId, qLocked, qMax, qMeasureInfo, qMin, qNumFormat, qReverseSort, qSortIndicator, qStateCounts, qTags, ...rest }: {
        qApprMaxGlyphCount?: number;
        qAttrDimInfo?: Array<NxAttrDimInfo>;
        qAttrExprInfo?: Array<NxAttrExprInfo>;
        qCalcCondMsg?: string;
        qCardinal?: number;
        qCardinalities?: NxCardinalities;
        qContinuousAxes?: boolean;
        qDerivedField?: boolean;
        qDimensionType?: 'NX_DIMENSION_TYPE_DISCRETE' | 'NX_DIMENSION_TYPE_NUMERIC' | 'NX_DIMENSION_TYPE_TIME' | string;
        qError?: NxValidationError;
        qFallbackTitle?: string;
        qGroupFallbackTitles?: Array<string>;
        qGroupFieldDefs?: Array<string>;
        qGroupPos?: number;
        qGrouping?: 'GRP_NX_NONE' | 'GRP_NX_HIEARCHY' | 'GRP_NX_COLLECTION' | string;
        qIsAutoFormat?: boolean;
        qIsCalculated?: boolean;
        qIsCyclic?: boolean;
        qIsOneAndOnlyOne?: boolean;
        qIsSemantic?: boolean;
        qLibraryId?: string;
        qLocked?: boolean;
        qMax?: number;
        qMeasureInfo?: Array<NxMeasureInfo>;
        qMin?: number;
        qNumFormat?: FieldAttributes;
        qReverseSort?: boolean;
        qSortIndicator?: 'NX_SORT_INDICATE_NONE' | 'NX_SORT_INDICATE_ASC' | 'NX_SORT_INDICATE_DESC' | string;
        qStateCounts?: NxStateCounts;
        qTags?: Array<string>;
    }, auth?: Auth);
}
/**
  @param qRanges - An array of Ranges.
  @param auth - Auth object used to make requests
 */
export declare class NxTreeMultiRangeSelectInfo {
    auth?: Auth;
    qRanges?: Array<NxTreeRangeSelectInfo>;
    [key: string]: any;
    constructor({ qRanges, ...rest }: {
        qRanges?: Array<NxTreeRangeSelectInfo>;
    }, auth?: Auth);
}
/**
  Represents a dimension in the tree.
  @param qAttrDims - Attribute dimension values.
  @param qAttrExps - Attribute expression values.
  @param qCanCollapse - If set to true, it means that the cell can be collapsed.
This parameter is not returned if it is set to false.
  @param qCanExpand - If set to true, it means that the cell can be expanded.
This parameter is not returned if it is set to false.
  @param qElemNo - Element number.
  @param qGroupPos - The position of this node inside it's group in the complete tree, i.e. Not dependant om what part is fetched.
  @param qGroupSize - Nbr of nodes connected to this node on the next level of the tree. Not dependant on what part is fetched.
  @param qMaxPos - Total of the positive values in the current group of cells.
  @param qMinNeg - Total of the negative values in the current group of cells.
  @param qNodes - The children of this node in the fetched tree structure.
  @param qRow - Row index in the data matrix.
The indexing starts from 0.
  @param qState - Selection State of the value.
The default state for a measure is L(Locked).

One of:

• L or LOCKED

• S or SELECTED

• O or OPTION

• D or DESELECTED

• A or ALTERNATIVE

• X or EXCLUDED

• XS or EXCL_SELECTED

• XL or EXCL_LOCKED

• NSTATES
  @param qText - The text version of the value, if available.
  @param qTreePath - The GroupPos of all prior nodes connected to this one, one position for each level of the tree.
If this node is attached directly to the root, this array is empty.
  @param qType - Type of the cell.

One of:

• V or NX_DIM_CELL_VALUE

• E or NX_DIM_CELL_EMPTY

• N or NX_DIM_CELL_NORMAL

• T or NX_DIM_CELL_TOTAL

• O or NX_DIM_CELL_OTHER

• A or NX_DIM_CELL_AGGR

• P or NX_DIM_CELL_PSEUDO

• R or NX_DIM_CELL_ROOT

• U or NX_DIM_CELL_NULL

• G or NX_DIM_CELL_GENERATED
  @param qValue - Value of the cell.
Is set to NaN , if the value is not a number.
  @param qValues - The measures for this node.
  @param auth - Auth object used to make requests
 */
export declare class NxTreeNode {
    auth?: Auth;
    qAttrDims?: NxAttributeDimValues;
    qAttrExps?: NxAttributeExpressionValues;
    qCanCollapse?: boolean;
    qCanExpand?: boolean;
    qElemNo?: number;
    qGroupPos?: number;
    qGroupSize?: number;
    qMaxPos?: Array<number>;
    qMinNeg?: Array<number>;
    qNodes?: Array<NxTreeNode>;
    qRow?: number;
    qState?: 'LOCKED' | 'SELECTED' | 'OPTION' | 'DESELECTED' | 'ALTERNATIVE' | 'EXCLUDED' | 'EXCL_SELECTED' | 'EXCL_LOCKED' | 'NSTATES' | string;
    qText?: string;
    qTreePath?: Array<number>;
    qType?: 'NX_DIM_CELL_VALUE' | 'NX_DIM_CELL_EMPTY' | 'NX_DIM_CELL_NORMAL' | 'NX_DIM_CELL_TOTAL' | 'NX_DIM_CELL_OTHER' | 'NX_DIM_CELL_AGGR' | 'NX_DIM_CELL_PSEUDO' | 'NX_DIM_CELL_ROOT' | 'NX_DIM_CELL_NULL' | 'NX_DIM_CELL_GENERATED' | string;
    qValue?: number;
    qValues?: Array<NxTreeValue>;
    [key: string]: any;
    constructor({ qAttrDims, qAttrExps, qCanCollapse, qCanExpand, qElemNo, qGroupPos, qGroupSize, qMaxPos, qMinNeg, qNodes, qRow, qState, qText, qTreePath, qType, qValue, qValues, ...rest }: {
        qAttrDims?: NxAttributeDimValues;
        qAttrExps?: NxAttributeExpressionValues;
        qCanCollapse?: boolean;
        qCanExpand?: boolean;
        qElemNo?: number;
        qGroupPos?: number;
        qGroupSize?: number;
        qMaxPos?: Array<number>;
        qMinNeg?: Array<number>;
        qNodes?: Array<NxTreeNode>;
        qRow?: number;
        qState?: 'LOCKED' | 'SELECTED' | 'OPTION' | 'DESELECTED' | 'ALTERNATIVE' | 'EXCLUDED' | 'EXCL_SELECTED' | 'EXCL_LOCKED' | 'NSTATES' | string;
        qText?: string;
        qTreePath?: Array<number>;
        qType?: 'NX_DIM_CELL_VALUE' | 'NX_DIM_CELL_EMPTY' | 'NX_DIM_CELL_NORMAL' | 'NX_DIM_CELL_TOTAL' | 'NX_DIM_CELL_OTHER' | 'NX_DIM_CELL_AGGR' | 'NX_DIM_CELL_PSEUDO' | 'NX_DIM_CELL_ROOT' | 'NX_DIM_CELL_NULL' | 'NX_DIM_CELL_GENERATED' | string;
        qValue?: number;
        qValues?: Array<NxTreeValue>;
    }, auth?: Auth);
}
/**
  @param qDimensionIx - Number of the dimension to select
measure from.  Numbering starts from 0.
  @param qMeasureIx - Number of the measure to select.
Numbering starts from 0.
  @param qRange - Range of values.
  @param auth - Auth object used to make requests
 */
export declare class NxTreeRangeSelectInfo {
    auth?: Auth;
    qDimensionIx?: number;
    qMeasureIx?: number;
    qRange?: Range;
    [key: string]: any;
    constructor({ qDimensionIx, qMeasureIx, qRange, ...rest }: {
        qDimensionIx?: number;
        qMeasureIx?: number;
        qRange?: Range;
    }, auth?: Auth);
}
/**
  Represents a measure.
  @param qAttrDims - Attribute dimension values.
  @param qAttrExps - Attribute expression values.
  @param qText - The text version of the value, if available.
  @param qValue - Value of the cell.
Is set to NaN , if the value is not a number.
  @param auth - Auth object used to make requests
 */
export declare class NxTreeValue {
    auth?: Auth;
    qAttrDims?: NxAttributeDimValues;
    qAttrExps?: NxAttributeExpressionValues;
    qText?: string;
    qValue?: number;
    [key: string]: any;
    constructor({ qAttrDims, qAttrExps, qText, qValue, ...rest }: {
        qAttrDims?: NxAttributeDimValues;
        qAttrExps?: NxAttributeExpressionValues;
        qText?: string;
        qValue?: number;
    }, auth?: Auth);
}
/**
  Information about the calculated trendline.
  @param qCoeff - Coefficent c0..cN depending on the trendline type.
  @param qElemNo - Inner Dim elem no
  @param qError - This parameter is optional and is displayed in case of error.
  @param qExpression - Trendline expression
  @param qR2 - R2 score. Value between 0..1 that shows the correlation between the trendline and the data. Higher value means higher correlation.
  @param qType - Type of trendline

One of:

• AVERAGE or Average

• LINEAR or Linear

• POLYNOMIAL2 or Polynomial2

• POLYNOMIAL3 or Polynomial3

• POLYNOMIAL4 or Polynomial4

• EXPONENTIAL or Exponential

• POWER or Power

• LOG or Logarithmic
  @param auth - Auth object used to make requests
 */
export declare class NxTrendline {
    auth?: Auth;
    qCoeff?: Array<number>;
    qElemNo?: number;
    qError?: NxValidationError;
    qExpression?: string;
    qR2?: number;
    qType?: 'Average' | 'Linear' | 'Polynomial2' | 'Polynomial3' | 'Polynomial4' | 'Exponential' | 'Power' | 'Logarithmic' | string;
    [key: string]: any;
    constructor({ qCoeff, qElemNo, qError, qExpression, qR2, qType, ...rest }: {
        qCoeff?: Array<number>;
        qElemNo?: number;
        qError?: NxValidationError;
        qExpression?: string;
        qR2?: number;
        qType?: 'Average' | 'Linear' | 'Polynomial2' | 'Polynomial3' | 'Polynomial4' | 'Exponential' | 'Power' | 'Logarithmic' | string;
    }, auth?: Auth);
}
/**
  Trendline input definition
  @param qCalcR2 - Set to true to calulatate the R2 score
  @param qContinuousXAxis - Set if the numerical value of x axis dimension should be used

One of:

• Never or CONTINUOUS_NEVER

• Possible or CONTINUOUS_IF_POSSIBLE

• Time or CONTINUOUS_IF_TIME
  @param qMultiDimMode - If you have a hypercube with two dimensions and qXColIx refers to a dimension
This determines if you get one trendline of each value in the other dimension or
Or trendline based on the sum of the value in the other dimension
The sum variant is only supported when qXColIx is 0 and qMode (on the hypercube) is K or T

One of:

• Multi or TRENDLINE_MULTILINE

• Sum or TRENDLINE_SUM
  @param qType - The type of trendline to calculate

One of:

• AVERAGE or Average

• LINEAR or Linear

• POLYNOMIAL2 or Polynomial2

• POLYNOMIAL3 or Polynomial3

• POLYNOMIAL4 or Polynomial4

• EXPONENTIAL or Exponential

• POWER or Power

• LOG or Logarithmic
  @param qXColIx - The column in the hypercube to be used as x axis. Can point to either a dimension (numeric or text) or a measure
  @param auth - Auth object used to make requests
 */
export declare class NxTrendlineDef {
    auth?: Auth;
    qCalcR2?: boolean;
    qContinuousXAxis?: 'CONTINUOUS_NEVER' | 'CONTINUOUS_IF_POSSIBLE' | 'CONTINUOUS_IF_TIME' | string;
    qMultiDimMode?: 'TRENDLINE_MULTILINE' | 'TRENDLINE_SUM' | string;
    qType?: 'Average' | 'Linear' | 'Polynomial2' | 'Polynomial3' | 'Polynomial4' | 'Exponential' | 'Power' | 'Logarithmic' | string;
    qXColIx?: number;
    [key: string]: any;
    constructor({ qCalcR2, qContinuousXAxis, qMultiDimMode, qType, qXColIx, ...rest }: {
        qCalcR2?: boolean;
        qContinuousXAxis?: 'CONTINUOUS_NEVER' | 'CONTINUOUS_IF_POSSIBLE' | 'CONTINUOUS_IF_TIME' | string;
        qMultiDimMode?: 'TRENDLINE_MULTILINE' | 'TRENDLINE_SUM' | string;
        qType?: 'Average' | 'Linear' | 'Polynomial2' | 'Polynomial3' | 'Polynomial4' | 'Exponential' | 'Power' | 'Logarithmic' | string;
        qXColIx?: number;
    }, auth?: Auth);
}
export declare class NxTrendlineMode {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qContext - Context related to the error, from the user app domain.
It can be the identifier of an object, a field name, a table name.
This parameter is optional.
  @param qErrorCode - Error code.
This parameter is always displayed in case of error.
  @param qExtendedMessage - Internal information from the server.
This parameter is optional.
  @param auth - Auth object used to make requests
 */
export declare class NxValidationError {
    auth?: Auth;
    qContext?: string;
    qErrorCode?: number;
    qExtendedMessage?: string;
    [key: string]: any;
    constructor({ qContext, qErrorCode, qExtendedMessage, ...rest }: {
        qContext?: string;
        qErrorCode?: number;
        qExtendedMessage?: string;
    }, auth?: Auth);
}
/**
  @param qData - Data.
  @param qDefinition - Definition of the variable. It can be a value or an expression.
  @param qDescription - Description of the variable.
  @param qInfo - Identifier and type of the object.
This parameter is mandatory.
  @param qIsConfig - If set to true, it means that the variable is a system variable.
A system variable provides information about the system and is set by the engine. The content cannot be changed by the user.
This parameter is optional.
The default value is false.
  @param qIsReserved - If set to true, it means that the variable is reserved.
The default value is false.
This parameter is optional.
Examples:

• ScriptError is a reserved variable, set by the engine.

• DayNames is a reserved variable, set by the user.
  @param qIsScriptCreated - If set to true, it means that the variable was defined via script.
  @param qMeta - Information about publishing and permissions.
This parameter is optional.
  @param qName - Name of the variable.
  @param auth - Auth object used to make requests
 */
export declare class NxVariableListItem {
    auth?: Auth;
    qData?: JsonObject;
    qDefinition?: string;
    qDescription?: string;
    qInfo?: NxInfo;
    qIsConfig?: boolean;
    qIsReserved?: boolean;
    qIsScriptCreated?: boolean;
    qMeta?: NxMeta;
    qName?: string;
    [key: string]: any;
    constructor({ qData, qDefinition, qDescription, qInfo, qIsConfig, qIsReserved, qIsScriptCreated, qMeta, qName, ...rest }: {
        qData?: JsonObject;
        qDefinition?: string;
        qDescription?: string;
        qInfo?: NxInfo;
        qIsConfig?: boolean;
        qIsReserved?: boolean;
        qIsScriptCreated?: boolean;
        qMeta?: NxMeta;
        qName?: string;
    }, auth?: Auth);
}
/**
  @param qIncludeInBookmark - Set this property to true to update the variable when applying a bookmark.
The value of a variable can affect the state of the selections.
The default value is false.
  @param qName - Name of the variable.
  @param qNumberPresentation - Defines the format of the value of a variable.
  @param qPreDefinedList - List of enumerations.
This property is used if qUsePredefListedValues is set to true.
  @param qUsePredefListedValues - The value of a variable can be an enumeration.
Set this property to true to reflect the predefined values in an enumeration.
  @param auth - Auth object used to make requests
 */
export declare class NxVariableProperties {
    auth?: Auth;
    qIncludeInBookmark?: boolean;
    qName?: string;
    qNumberPresentation?: FieldAttributes;
    qPreDefinedList?: Array<string>;
    qUsePredefListedValues?: boolean;
    [key: string]: any;
    constructor({ qIncludeInBookmark, qName, qNumberPresentation, qPreDefinedList, qUsePredefListedValues, ...rest }: {
        qIncludeInBookmark?: boolean;
        qName?: string;
        qNumberPresentation?: FieldAttributes;
        qPreDefinedList?: Array<string>;
        qUsePredefListedValues?: boolean;
    }, auth?: Auth);
}
/**
  @param qHeight - Height of the canvas in pixels.
  @param qWidth - Width of the canvas in pixels.
  @param qZoomLevel - Zoom level.
  @param auth - Auth object used to make requests
 */
export declare class NxViewPort {
    auth?: Auth;
    qHeight?: number;
    qWidth?: number;
    qZoomLevel?: number;
    [key: string]: any;
    constructor({ qHeight, qWidth, qZoomLevel, ...rest }: {
        qHeight?: number;
        qWidth?: number;
        qZoomLevel?: number;
    }, auth?: Auth);
}
/**
  @param qGenericId - Object ID.
  @param qGenericType - The type of the object.
  @param qHandle - The handle used to connect to object.
  @param qType - The native type of the object.
  @param auth - Auth object used to make requests
 */
export declare class ObjectInterface {
    auth?: Auth;
    qGenericId?: string;
    qGenericType?: string;
    qHandle?: number;
    qType?: string;
    [key: string]: any;
    constructor({ qGenericId, qGenericType, qHandle, qType, ...rest }: {
        qGenericId?: string;
        qGenericType?: string;
        qHandle?: number;
        qType?: string;
    }, auth?: Auth);
}
/**
  @param qBit32 - Is set to true if the version of ODBC is 32-bit.
This parameter is optional. Default is false.
  @param qDescription - Description of the ODBC connection.
  @param qName - Name of the ODBC connection.
  @param qUserOnly - Is set to true if the connection is User DSN. The connection works only for a specific user.
Default is false.
This parameter is optional.
  @param auth - Auth object used to make requests
 */
export declare class OdbcDsn {
    auth?: Auth;
    qBit32?: boolean;
    qDescription?: string;
    qName?: string;
    qUserOnly?: boolean;
    [key: string]: any;
    constructor({ qBit32, qDescription, qName, qUserOnly, ...rest }: {
        qBit32?: boolean;
        qDescription?: string;
        qName?: string;
        qUserOnly?: boolean;
    }, auth?: Auth);
}
/**
  @param qBit32 - Is set to true if the version of the OLEDB provider is 32-bit.
Default is false.
This parameter is optional.
  @param qDescription - Description of the OLEDB provider.
  @param qName - Name of the OLEDB provider.
  @param auth - Auth object used to make requests
 */
export declare class OleDbProvider {
    auth?: Auth;
    qBit32?: boolean;
    qDescription?: string;
    qName?: string;
    [key: string]: any;
    constructor({ qBit32, qDescription, qName, ...rest }: {
        qBit32?: boolean;
        qDescription?: string;
        qName?: string;
    }, auth?: Auth);
}
export declare class OtherLimitMode {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
export declare class OtherMode {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
export declare class OtherSortMode {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qApplyEvenWhenPossiblyWrongResult - Set this parameter to true to allow the calculation of Others even if the engine detects some potential mistakes.
For example the country Russia is part of the continent Europe and Asia. If you have an hypercube with two dimensions Country and Continent and one measure Population, the engine can detect that the population of Russia is included in both the continent Asia and Europe.
The default value is true.
  @param qForceBadValueKeeping - This parameter is used when qOtherMode is set to:

• OTHER_ABS_LIMITED

• OTHER_REL_LIMITED

• OTHER_ABS_ACC_TARGET
OTHER_REL_ACC_TARGET

and when the dimension values include not numeric values.
Set this parameter to true to include text values in the returned values.
The default value is true.
  @param qGlobalOtherGrouping - This parameter applies to inner dimensions.
If this parameter is set to true, the restrictions are calculated on the selected dimension only. All previous dimensions are ignored.
The default value is false.
  @param qOtherCollapseInnerDimensions - If set to true, it collapses the inner dimensions (if any) in the group Others .
The default value is false.
  @param qOtherCounted - Number of values to display. The number of values can be entered as a calculated formula.
This parameter is used when qOtherMode is set to OTHER_COUNTED .
  @param qOtherLimit - Value used to limit the dimension values. The limit can be entered as a calculated formula.
This parameter is used when qOtherMode is set to:

• OTHER_ABS_LIMITED

• OTHER_REL_LIMITED

• OTHER_ABS_ACC_TARGET
OTHER_REL_ACC_TARGET
  @param qOtherLimitMode - Sets the limit for the Others mode.
This parameter is used when qOtherMode is set to:

• OTHER_ABS_LIMITED

• OTHER_REL_LIMITED

• OTHER_ABS_ACC_TARGET
OTHER_REL_ACC_TARGET

One of:

• OTHER_GE_LIMIT

• OTHER_LE_LIMIT

• OTHER_GT_LIMIT

• OTHER_LT_LIMIT
  @param qOtherMode - Determines how many dimension values are displayed.
The default value is OTHER_OFF .

One of:

• OTHER_OFF

• OTHER_COUNTED

• OTHER_ABS_LIMITED

• OTHER_ABS_ACC_TARGET

• OTHER_REL_LIMITED

• OTHER_REL_ACC_TARGET
  @param qOtherSortMode - Defines the sort order of the dimension values.
The default value is OTHER_SORT_DESCENDING .

One of:

• OTHER_SORT_DEFAULT

• OTHER_SORT_DESCENDING

• OTHER_SORT_ASCENDING
  @param qReferencedExpression - This parameter applies when there are several measures.
Name of the measure to use for the calculation of Others for a specific dimension.
  @param qSuppressOther - If set to true, the group Others is not displayed as a dimension value.
The default value is false.
  @param qTotalMode - If set to TOTAL_EXPR , the total of the dimension values is returned.
The default value is TOTAL_OFF .

One of:

• TOTAL_OFF

• TOTAL_EXPR
  @param auth - Auth object used to make requests
 */
export declare class OtherTotalSpecProp {
    auth?: Auth;
    qApplyEvenWhenPossiblyWrongResult?: boolean;
    qForceBadValueKeeping?: boolean;
    qGlobalOtherGrouping?: boolean;
    qOtherCollapseInnerDimensions?: boolean;
    qOtherCounted?: ValueExpr;
    qOtherLimit?: ValueExpr;
    qOtherLimitMode?: 'OTHER_GE_LIMIT' | 'OTHER_LE_LIMIT' | 'OTHER_GT_LIMIT' | 'OTHER_LT_LIMIT' | string;
    qOtherMode?: 'OTHER_OFF' | 'OTHER_COUNTED' | 'OTHER_ABS_LIMITED' | 'OTHER_ABS_ACC_TARGET' | 'OTHER_REL_LIMITED' | 'OTHER_REL_ACC_TARGET' | string;
    qOtherSortMode?: 'OTHER_SORT_DEFAULT' | 'OTHER_SORT_DESCENDING' | 'OTHER_SORT_ASCENDING' | string;
    qReferencedExpression?: StringExpr;
    qSuppressOther?: boolean;
    qTotalMode?: 'TOTAL_OFF' | 'TOTAL_EXPR' | string;
    [key: string]: any;
    constructor({ qApplyEvenWhenPossiblyWrongResult, qForceBadValueKeeping, qGlobalOtherGrouping, qOtherCollapseInnerDimensions, qOtherCounted, qOtherLimit, qOtherLimitMode, qOtherMode, qOtherSortMode, qReferencedExpression, qSuppressOther, qTotalMode, ...rest }: {
        qApplyEvenWhenPossiblyWrongResult?: boolean;
        qForceBadValueKeeping?: boolean;
        qGlobalOtherGrouping?: boolean;
        qOtherCollapseInnerDimensions?: boolean;
        qOtherCounted?: ValueExpr;
        qOtherLimit?: ValueExpr;
        qOtherLimitMode?: 'OTHER_GE_LIMIT' | 'OTHER_LE_LIMIT' | 'OTHER_GT_LIMIT' | 'OTHER_LT_LIMIT' | string;
        qOtherMode?: 'OTHER_OFF' | 'OTHER_COUNTED' | 'OTHER_ABS_LIMITED' | 'OTHER_ABS_ACC_TARGET' | 'OTHER_REL_LIMITED' | 'OTHER_REL_ACC_TARGET' | string;
        qOtherSortMode?: 'OTHER_SORT_DEFAULT' | 'OTHER_SORT_DESCENDING' | 'OTHER_SORT_ASCENDING' | string;
        qReferencedExpression?: StringExpr;
        qSuppressOther?: boolean;
        qTotalMode?: 'TOTAL_OFF' | 'TOTAL_EXPR' | string;
    }, auth?: Auth);
}
/**
  @param qx - x-coordinate in pixels.
The origin is the top left of the screen.
  @param qy - y-coordinate in pixels.
The origin is the top left of the screen.
  @param auth - Auth object used to make requests
 */
export declare class Point {
    auth?: Auth;
    qx?: number;
    qy?: number;
    [key: string]: any;
    constructor({ qx, qy, ...rest }: {
        qx?: number;
        qy?: number;
    }, auth?: Auth);
}
/**
  @param qDimName
  @param qElemNo
  @param qElemValues
  @param auth - Auth object used to make requests
 */
export declare class PositionMark {
    auth?: Auth;
    qDimName?: string;
    qElemNo?: Array<number>;
    qElemValues?: Array<Blob>;
    [key: string]: any;
    constructor({ qDimName, qElemNo, qElemValues, ...rest }: {
        qDimName?: string;
        qElemNo?: Array<number>;
        qElemValues?: Array<Blob>;
    }, auth?: Auth);
}
/**
  @param qCompleted - This property is not used.
  @param qErrorData - Information about the error messages that occur during the script execution.
  @param qFinished - True if the request is finished.
  @param qKB - This property is not used.
  @param qMillisecs - Request duration in milliseconds.
  @param qPersistentProgress - A progress message is persistent when it informs about the start or end of a statement. For example, it can inform about the total number of lines fetched from a data source or tell that the app was saved. All persistent progress messages between two *GetProgress* calls are summarized in this string. Contrarily to *qPersistentProgressMessages*, the content of the localized message string is displayed (not its message code).
  @param qPersistentProgressMessages - List of persistent progress messages.
  @param qStarted - True if the request is started.
  @param qTotal - This property is not used.
  @param qTransientProgress - A progress message is transient when it informs about the progress of an ongoing statement. For example, it can tell how many lines are currently fetched from a data source. All transient progress messages between two *GetProgress* calls are summarized in this string. Contrarily to *qTransientProgressMessage*, the content of the localized message string is displayed (not its message code).
  @param qTransientProgressMessage - Transient progress message.
  @param qUserInteractionWanted - True when the engine pauses the script execution and waits for a user interaction.
  @param auth - Auth object used to make requests
 */
export declare class ProgressData {
    auth?: Auth;
    qCompleted?: number;
    qErrorData?: Array<ErrorData>;
    qFinished?: boolean;
    qKB?: number;
    qMillisecs?: number;
    qPersistentProgress?: string;
    qPersistentProgressMessages?: Array<ProgressMessage>;
    qStarted?: boolean;
    qTotal?: number;
    qTransientProgress?: string;
    qTransientProgressMessage?: ProgressMessage;
    qUserInteractionWanted?: boolean;
    [key: string]: any;
    constructor({ qCompleted, qErrorData, qFinished, qKB, qMillisecs, qPersistentProgress, qPersistentProgressMessages, qStarted, qTotal, qTransientProgress, qTransientProgressMessage, qUserInteractionWanted, ...rest }: {
        qCompleted?: number;
        qErrorData?: Array<ErrorData>;
        qFinished?: boolean;
        qKB?: number;
        qMillisecs?: number;
        qPersistentProgress?: string;
        qPersistentProgressMessages?: Array<ProgressMessage>;
        qStarted?: boolean;
        qTotal?: number;
        qTransientProgress?: string;
        qTransientProgressMessage?: ProgressMessage;
        qUserInteractionWanted?: boolean;
    }, auth?: Auth);
}
/**
  @param qMessageCode - Code number to the corresponding localized message string.
  @param qMessageParameters - Parameters to be inserted in the localized message string.
  @param auth - Auth object used to make requests
 */
export declare class ProgressMessage {
    auth?: Auth;
    qMessageCode?: number;
    qMessageParameters?: Array<string>;
    [key: string]: any;
    constructor({ qMessageCode, qMessageParameters, ...rest }: {
        qMessageCode?: number;
        qMessageParameters?: Array<string>;
    }, auth?: Auth);
}
/**
  @param qMax - Highest value in the range
  @param qMaxInclEq - If set to true, the range includes the highest value in the range of selections (Equals to ). [bn(50500)]
Example:
The range is [1,10]. If qMinInclEq is set to true it means that 10 is included in the range of selections.
  @param qMin - Lowest value in the range
  @param qMinInclEq - If set to true, the range includes the lowest value in the range of selections (Equals to ). [bn(50500)]
Example:
The range is [1,10]. If qMinInclEq is set to true it means that 1 is included in the range of selections.
  @param auth - Auth object used to make requests
 */
export declare class Range {
    auth?: Auth;
    qMax?: number;
    qMaxInclEq?: boolean;
    qMin?: number;
    qMinInclEq?: boolean;
    [key: string]: any;
    constructor({ qMax, qMaxInclEq, qMin, qMinInclEq, ...rest }: {
        qMax?: number;
        qMaxInclEq?: boolean;
        qMin?: number;
        qMinInclEq?: boolean;
    }, auth?: Auth);
}
/**
  @param qMeasure - Label of the measure.
  @param qRangeHi - Highest value in the range.
  @param qRangeLo - Lowest value in the range.
  @param auth - Auth object used to make requests
 */
export declare class RangeSelectInfo {
    auth?: Auth;
    qMeasure?: string;
    qRangeHi?: number;
    qRangeLo?: number;
    [key: string]: any;
    constructor({ qMeasure, qRangeHi, qRangeLo, ...rest }: {
        qMeasure?: string;
        qRangeHi?: number;
        qRangeLo?: number;
    }, auth?: Auth);
}
/**
  @param qHeight - Number of rows or elements in the page. The indexing of the rows may vary depending on whether the cells are expanded or not (parameter qAlwaysFullyExpanded in HyperCubeDef ).
  @param qLeft - Position from the left.
Corresponds to the first column.
  @param qTop - Position from the top.
Corresponds to the first row.
  @param qWidth - Number of columns in the page. The indexing of the columns may vary depending on whether the cells are expanded or not (parameter qAlwaysFullyExpanded in HyperCubeDef ).
  @param auth - Auth object used to make requests
 */
export declare class Rect {
    auth?: Auth;
    qHeight?: number;
    qLeft?: number;
    qTop?: number;
    qWidth?: number;
    [key: string]: any;
    constructor({ qHeight, qLeft, qTop, qWidth, ...rest }: {
        qHeight?: number;
        qLeft?: number;
        qTop?: number;
        qWidth?: number;
    }, auth?: Auth);
}
/**
  @param qFieldOrColumn - Name of field or column.
  @param qValues - Matched values part of the sample.
  @param auth - Auth object used to make requests
 */
export declare class SampleResult {
    auth?: Auth;
    qFieldOrColumn?: FieldOrColumn;
    qValues?: Array<FieldValue>;
    [key: string]: any;
    constructor({ qFieldOrColumn, qValues, ...rest }: {
        qFieldOrColumn?: FieldOrColumn;
        qValues?: Array<FieldValue>;
    }, auth?: Auth);
}
/**
  @param qColInLine - Position of the erroneous text from the beginning of the line.
  @param qErrLen - Length of the word where the error is located.
  @param qLineInTab - Line number in the section where the error is located.
  @param qSecondaryFailure - The default value is false.
  @param qTabIx - Number of the faulty section.
  @param qTextPos - Position of the erroneous text from the beginning of the script.
  @param auth - Auth object used to make requests
 */
export declare class ScriptSyntaxError {
    auth?: Auth;
    qColInLine?: number;
    qErrLen?: number;
    qLineInTab?: number;
    qSecondaryFailure?: boolean;
    qTabIx?: number;
    qTextPos?: number;
    [key: string]: any;
    constructor({ qColInLine, qErrLen, qLineInTab, qSecondaryFailure, qTabIx, qTextPos, ...rest }: {
        qColInLine?: number;
        qErrLen?: number;
        qLineInTab?: number;
        qSecondaryFailure?: boolean;
        qTabIx?: number;
        qTextPos?: number;
    }, auth?: Auth);
}
/**
  @param qPos
  @param qUsePosition
  @param auth - Auth object used to make requests
 */
export declare class ScrollPosition {
    auth?: Auth;
    qPos?: Point;
    qUsePosition?: boolean;
    [key: string]: any;
    constructor({ qPos, qUsePosition, ...rest }: {
        qPos?: Point;
        qUsePosition?: boolean;
    }, auth?: Auth);
}
/**
  @param qFieldDictionaries - Information about the fields containing search hits.
  @param qFieldNames - List of the fields that contains search associations.
  @param qSearchTerms - List of the search terms.
  @param qSearchTermsMatched - List of search results.
The maximum number of search results in this list is set by qPage/qCount .
  @param qTotalSearchResults - Total number of search results.
This number is not limited by qPage/qCount .
  @param auth - Auth object used to make requests
 */
export declare class SearchAssociationResult {
    auth?: Auth;
    qFieldDictionaries?: Array<SearchFieldDictionary>;
    qFieldNames?: Array<string>;
    qSearchTerms?: Array<string>;
    qSearchTermsMatched?: Array<SearchMatchCombinations>;
    qTotalSearchResults?: number;
    [key: string]: any;
    constructor({ qFieldDictionaries, qFieldNames, qSearchTerms, qSearchTermsMatched, qTotalSearchResults, ...rest }: {
        qFieldDictionaries?: Array<SearchFieldDictionary>;
        qFieldNames?: Array<string>;
        qSearchTerms?: Array<string>;
        qSearchTermsMatched?: Array<SearchMatchCombinations>;
        qTotalSearchResults?: number;
    }, auth?: Auth);
}
/**
  @param qKey - String corresponding to SearchObjectOptions.qAttributes. It will be qProperty for SearchObjectOptions.
  @param qValue - String corresponding to qKey for the current SearchGroupItemMatch. For example, if the match is Make by Price found in the title of a generic object, qValue will be qMetaDef/title.
  @param auth - Auth object used to make requests
 */
export declare class SearchAttribute {
    auth?: Auth;
    qKey?: string;
    qValue?: string;
    [key: string]: any;
    constructor({ qKey, qValue, ...rest }: {
        qKey?: string;
        qValue?: string;
    }, auth?: Auth);
}
/**
  @param qCharCount - Length of the match in the search result.
  @param qCharPos - Starting position of the match in the search result, starting from 0.
  @param qTerm - Position of the term in the list of search terms, starting from 0.
  @param auth - Auth object used to make requests
 */
export declare class SearchCharRange {
    auth?: Auth;
    qCharCount?: number;
    qCharPos?: number;
    qTerm?: number;
    [key: string]: any;
    constructor({ qCharCount, qCharPos, qTerm, ...rest }: {
        qCharCount?: number;
        qCharPos?: number;
        qTerm?: number;
    }, auth?: Auth);
}
/**
  @param qAttributes - Optional.

• For SearchSuggest method, this array is empty.

• For SearchObjects method, this array is empty or contain qProperty .

• For SearchResults method, this array is empty, or contains qNum and/or qElemNum . It allows the user to request details in the outputted SearchGroupItemMatch . For more information, see SearchGroupItemMatch.
  @param qCharEncoding - Encoding used to compute qRanges of type SearchCharRange.
Only affects the computation of the ranges. It does not impact the encoding of the text.

One of:

• Utf8 or CHAR_ENCODING_UTF8

• Utf16 or CHAR_ENCODING_UTF16
  @param qContext - Search context.
The default value is LockedFieldsOnly .

One of:

• Cleared or CONTEXT_CLEARED

• LockedFieldsOnly or CONTEXT_LOCKED_FIELDS_ONLY

• CurrentSelections or CONTEXT_CURRENT_SELECTIONS
  @param qSearchFields - List of the search fields.
If empty, the search is performed in all fields of the app.
  @param auth - Auth object used to make requests
 */
export declare class SearchCombinationOptions {
    auth?: Auth;
    qAttributes?: Array<string>;
    qCharEncoding?: 'CHAR_ENCODING_UTF8' | 'CHAR_ENCODING_UTF16' | string;
    qContext?: 'CONTEXT_CLEARED' | 'CONTEXT_LOCKED_FIELDS_ONLY' | 'CONTEXT_CURRENT_SELECTIONS' | string;
    qSearchFields?: Array<string>;
    [key: string]: any;
    constructor({ qAttributes, qCharEncoding, qContext, qSearchFields, ...rest }: {
        qAttributes?: Array<string>;
        qCharEncoding?: 'CHAR_ENCODING_UTF8' | 'CHAR_ENCODING_UTF16' | string;
        qContext?: 'CONTEXT_CLEARED' | 'CONTEXT_LOCKED_FIELDS_ONLY' | 'CONTEXT_CURRENT_SELECTIONS' | string;
        qSearchFields?: Array<string>;
    }, auth?: Auth);
}
export declare class SearchContextType {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qField - Position of the field in the list of fields, starting from 0.
The list of fields is defined in qResults/qFieldNames and contains the search associations.
  @param qResult - List of the matching values.
The maximum number of values in this list is set by qMaxNbrFieldMatches .
  @param auth - Auth object used to make requests
 */
export declare class SearchFieldDictionary {
    auth?: Auth;
    qField?: number;
    qResult?: Array<SearchTermResult>;
    [key: string]: any;
    constructor({ qField, qResult, ...rest }: {
        qField?: number;
        qResult?: Array<SearchTermResult>;
    }, auth?: Auth);
}
/**
  @param qField - Position of the field in the list of fields, starting from 0.
The list of fields is defined in qResults/qFieldNames and contains the search associations.
  @param qNoOfMatches - Number of search hits in the field.
The number of values in qValues and the value of qNoOfMatches are equal if qMaxNbrFieldMatches is -1.
  @param qTerms - Positions of the search terms, starting from 0.
  @param qValues - Positions of the matching values in the search results.
The maximum number of values in this list is defined by qMaxNbrFieldMatches .
  @param auth - Auth object used to make requests
 */
export declare class SearchFieldMatch {
    auth?: Auth;
    qField?: number;
    qNoOfMatches?: number;
    qTerms?: Array<number>;
    qValues?: Array<number>;
    [key: string]: any;
    constructor({ qField, qNoOfMatches, qTerms, qValues, ...rest }: {
        qField?: number;
        qNoOfMatches?: number;
        qTerms?: Array<number>;
        qValues?: Array<number>;
    }, auth?: Auth);
}
export declare class SearchFieldMatchType {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qElemNo
  @param qSearchTermsMatched
  @param qText
  @param auth - Auth object used to make requests
 */
export declare class SearchFieldMatchesItem {
    auth?: Auth;
    qElemNo?: number;
    qSearchTermsMatched?: Array<number>;
    qText?: string;
    [key: string]: any;
    constructor({ qElemNo, qSearchTermsMatched, qText, ...rest }: {
        qElemNo?: number;
        qSearchTermsMatched?: Array<number>;
        qText?: string;
    }, auth?: Auth);
}
export declare class SearchFieldSelectionMode {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qFieldName - Field name of matches.
  @param qValues - List of search matches.
  @param auth - Auth object used to make requests
 */
export declare class SearchFieldValueItem {
    auth?: Auth;
    qFieldName?: string;
    qValues?: Array<SearchFieldMatchesItem>;
    [key: string]: any;
    constructor({ qFieldName, qValues, ...rest }: {
        qFieldName?: string;
        qValues?: Array<SearchFieldMatchesItem>;
    }, auth?: Auth);
}
/**
  @param qGroupType - Type of the search group.

One of:

• DatasetType or DATASET_GROUP

• GenericObjectsType or GENERIC_OBJECTS_GROUP
  @param qId - Identifier of the search group.
  @param qItems - List of items in the search group.
The group items are numbered from the value of SearchGroupOptions.qOffset to the value of SearchGroupOptions.qOffset \+ SearchGroupOptions.qCount
  @param qSearchTermsMatched - Indexes of the search terms that are included in the group. These search terms are related to the list of terms defined in SearchResult.qSearchTerms .
  @param qTotalNumberOfItems - Total number of distinct items in the search group.
  @param auth - Auth object used to make requests
 */
export declare class SearchGroup {
    auth?: Auth;
    qGroupType?: 'DATASET_GROUP' | 'GENERIC_OBJECTS_GROUP' | string;
    qId?: number;
    qItems?: Array<SearchGroupItem>;
    qSearchTermsMatched?: Array<number>;
    qTotalNumberOfItems?: number;
    [key: string]: any;
    constructor({ qGroupType, qId, qItems, qSearchTermsMatched, qTotalNumberOfItems, ...rest }: {
        qGroupType?: 'DATASET_GROUP' | 'GENERIC_OBJECTS_GROUP' | string;
        qId?: number;
        qItems?: Array<SearchGroupItem>;
        qSearchTermsMatched?: Array<number>;
        qTotalNumberOfItems?: number;
    }, auth?: Auth);
}
/**
  @param qIdentifier - Identifier of the item.
It corresponds to:

• The name of the field, if the type of the search group is data set.

• The id of the generic object if the type of the search group is generic object.
  @param qItemMatches - List of matches in the search group item.
The group item matches are numbered from the value of SearchGroupItemOptions.qOffset to the value of SearchGroupItemOptions.qOffset \+ SearchGroupItemOptions.qCount .
  @param qItemType - Type of the group item.

One of:

• Field or FIELD

• GenericObject or GENERIC_OBJECT
  @param qMatchType - Match type applied in this result group.

One of:

• FieldMatchNone or FM_NONE

• FieldMatchSubString or FM_SUBSTRING

• FieldMatchWord or FM_WORD

• FieldMatchExact or FM_EXACT

• FieldMatchLast or FM_LAST
  @param qSearchTermsMatched - Indexes of the search terms that are included in the group item. These search terms are related to the list of terms defined in SearchResult.qSearchTerms .
  @param qTotalNumberOfMatches - Total number of distinct matches in the search group item.
  @param auth - Auth object used to make requests
 */
export declare class SearchGroupItem {
    auth?: Auth;
    qIdentifier?: string;
    qItemMatches?: Array<SearchGroupItemMatch>;
    qItemType?: 'FIELD' | 'GENERIC_OBJECT' | string;
    qMatchType?: 'FM_NONE' | 'FM_SUBSTRING' | 'FM_WORD' | 'FM_EXACT' | 'FM_LAST' | string;
    qSearchTermsMatched?: Array<number>;
    qTotalNumberOfMatches?: number;
    [key: string]: any;
    constructor({ qIdentifier, qItemMatches, qItemType, qMatchType, qSearchTermsMatched, qTotalNumberOfMatches, ...rest }: {
        qIdentifier?: string;
        qItemMatches?: Array<SearchGroupItemMatch>;
        qItemType?: 'FIELD' | 'GENERIC_OBJECT' | string;
        qMatchType?: 'FM_NONE' | 'FM_SUBSTRING' | 'FM_WORD' | 'FM_EXACT' | 'FM_LAST' | string;
        qSearchTermsMatched?: Array<number>;
        qTotalNumberOfMatches?: number;
    }, auth?: Auth);
}
/**
  @param qAttributes - Provides detail of the match as requested by the user in SearchObjectsOptions.qAttributes or SearchCombinationOptions.qAttributes
If the user requests SearchObjects or SearchResults with an empty qAttributes option, the outputted qAttributes is returned empty.
For SearchObjects requested with qProperty , the SearchGroupItemMatch.qAttributes return value contains [“qProperty”, "qMetaDef/title”] if the match has been found in the title of the item. For dimension values, the returned qProperty will be “*” .
For SearchResults requested with qNum , the SearchGroupItemMatch.qAttributes return value contains ["qNum", N] where N is the numeric value of the element or NaN if the value is not numeric.
For SearchResults requested with qElemNum , the SearchGroupItemMatch.qAttributes return value contains ["qElemNum", N] where N is the value index of the element.
  @param qFieldSelectionMode - Selection mode of a field.
Suppressed by default. One and always one field value is selected when set to OneAndOnlyOne.
  @param qRanges - List of ranges.
For example, if the search terms are Price and Make, and the search group item value is Make by Price vs Mileage, then there are two ranges: one for Price and one for Make.
  @param qText - Search match value.
Value of the search group item.
If the match is found in a field, it corresponds to the value of the field.
If the match is found in a generic object property, it corresponds to the property value.
  @param auth - Auth object used to make requests
 */
export declare class SearchGroupItemMatch {
    auth?: Auth;
    qAttributes?: Array<SearchAttribute>;
    qFieldSelectionMode?: 'ONE_AND_ONLY_ONE' | string;
    qRanges?: Array<SearchCharRange>;
    qText?: string;
    [key: string]: any;
    constructor({ qAttributes, qFieldSelectionMode, qRanges, qText, ...rest }: {
        qAttributes?: Array<SearchAttribute>;
        qFieldSelectionMode?: 'ONE_AND_ONLY_ONE' | string;
        qRanges?: Array<SearchCharRange>;
        qText?: string;
    }, auth?: Auth);
}
/**
  @param qCount - Maximum number of matches per item (in qItemMatches[ ] ).
The default value is -1: all values are returned.
  @param qGroupItemType - Type of the group item. Can be:

• GenericObject: the type of the search group item is a generic object. Group items have this type when you are calling SearchObjects .

• Field: the type of the search group item is a field. Group items have this type when you are calling SearchResults .

One of:

• Field or FIELD

• GenericObject or GENERIC_OBJECT
  @param qOffset - Position starting from 0.
The default value is 0.
  @param auth - Auth object used to make requests
 */
export declare class SearchGroupItemOptions {
    auth?: Auth;
    qCount?: number;
    qGroupItemType?: 'FIELD' | 'GENERIC_OBJECT' | string;
    qOffset?: number;
    [key: string]: any;
    constructor({ qCount, qGroupItemType, qOffset, ...rest }: {
        qCount?: number;
        qGroupItemType?: 'FIELD' | 'GENERIC_OBJECT' | string;
        qOffset?: number;
    }, auth?: Auth);
}
export declare class SearchGroupItemType {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qCount - Maximum number of items per group (in qItems[ ] ).
The default value is -1; all values are returned.
  @param qGroupType - Type of the group. Can be:

• GenericObjectType: the type of the search group item is a generic object. Groups have this type when you are calling SearchObjects .

• DatasetType: type of the search group item is a dataset association. Groups have this type when you are calling SearchResults .

One of:

• DatasetType or DATASET_GROUP

• GenericObjectsType or GENERIC_OBJECTS_GROUP
  @param qOffset - Position starting from 0.
The default value is 0.
  @param auth - Auth object used to make requests
 */
export declare class SearchGroupOptions {
    auth?: Auth;
    qCount?: number;
    qGroupType?: 'DATASET_GROUP' | 'GENERIC_OBJECTS_GROUP' | string;
    qOffset?: number;
    [key: string]: any;
    constructor({ qCount, qGroupType, qOffset, ...rest }: {
        qCount?: number;
        qGroupType?: 'DATASET_GROUP' | 'GENERIC_OBJECTS_GROUP' | string;
        qOffset?: number;
    }, auth?: Auth);
}
export declare class SearchGroupType {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qFieldMatches - Information about the search matches.
  @param qId - Index of the search result, starting from 0.
  @param auth - Auth object used to make requests
 */
export declare class SearchMatchCombination {
    auth?: Auth;
    qFieldMatches?: Array<SearchFieldMatch>;
    qId?: number;
    [key: string]: any;
    constructor({ qFieldMatches, qId, ...rest }: {
        qFieldMatches?: Array<SearchFieldMatch>;
        qId?: number;
    }, auth?: Auth);
}
export declare class SearchMatchCombinations extends Array<SearchMatchCombination> {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor(arr: Array<SearchMatchCombination>, auth?: Auth);
}
/**
  @param qAttributes - This array is either empty or contains qProperty .
  @param qCharEncoding - Encoding used to compute qRanges of type SearchCharRange.
Only affects the computation of the ranges. It does not impact the encoding of the text.

One of:

• Utf8 or CHAR_ENCODING_UTF8

• Utf16 or CHAR_ENCODING_UTF16
  @param auth - Auth object used to make requests
 */
export declare class SearchObjectOptions {
    auth?: Auth;
    qAttributes?: Array<string>;
    qCharEncoding?: 'CHAR_ENCODING_UTF8' | 'CHAR_ENCODING_UTF16' | string;
    [key: string]: any;
    constructor({ qAttributes, qCharEncoding, ...rest }: {
        qAttributes?: Array<string>;
        qCharEncoding?: 'CHAR_ENCODING_UTF8' | 'CHAR_ENCODING_UTF16' | string;
    }, auth?: Auth);
}
/**
  @param qCount - Number of search groups to return (in qSearchGroupArray ).
  @param qGroupItemOptions - Options of the search group items.
If this property is not set, all values are returned.
This property is to be used with the SearchResults method or the SearchObjects method.
  @param qGroupOptions - Options of the search groups.
If this property is not set, all values are returned.
This property is to be used with the SearchResults method or the SearchObjects method.
  @param qMaxNbrFieldMatches - Maximum number of matching values to return per search result.
The default value is -1; all values are returned.
This property is to be used with the SearchAssociations method.
  @param qOffset - Position from the top, starting from 0.
If the offset is set to 0, the first search result to be returned is at position 0.
  @param auth - Auth object used to make requests
 */
export declare class SearchPage {
    auth?: Auth;
    qCount?: number;
    qGroupItemOptions?: Array<SearchGroupItemOptions>;
    qGroupOptions?: Array<SearchGroupOptions>;
    qMaxNbrFieldMatches?: number;
    qOffset?: number;
    [key: string]: any;
    constructor({ qCount, qGroupItemOptions, qGroupOptions, qMaxNbrFieldMatches, qOffset, ...rest }: {
        qCount?: number;
        qGroupItemOptions?: Array<SearchGroupItemOptions>;
        qGroupOptions?: Array<SearchGroupOptions>;
        qMaxNbrFieldMatches?: number;
        qOffset?: number;
    }, auth?: Auth);
}
/**
  @param qSearchGroupArray - List of search groups.
The groups are numbered from the value of SearchPage.qOffset to the value of SearchPage.qOffset + SearchPage.qCount .
  @param qSearchTerms - List of the search terms.
  @param qTotalNumberOfGroups - Total number of groups.
  @param auth - Auth object used to make requests
 */
export declare class SearchResult {
    auth?: Auth;
    qSearchGroupArray?: Array<SearchGroup>;
    qSearchTerms?: Array<string>;
    qTotalNumberOfGroups?: number;
    [key: string]: any;
    constructor({ qSearchGroupArray, qSearchTerms, qTotalNumberOfGroups, ...rest }: {
        qSearchGroupArray?: Array<SearchGroup>;
        qSearchTerms?: Array<string>;
        qTotalNumberOfGroups?: number;
    }, auth?: Auth);
}
/**
  @param qTerm - Index of the suggestion value.
The indexing starts from 0 and from the left.
  @param qValue - Value of the suggestion.
  @param auth - Auth object used to make requests
 */
export declare class SearchSuggestItem {
    auth?: Auth;
    qTerm?: number;
    qValue?: string;
    [key: string]: any;
    constructor({ qTerm, qValue, ...rest }: {
        qTerm?: number;
        qValue?: string;
    }, auth?: Auth);
}
/**
  @param qFieldNames - List of field names that contain search hits.
  @param qSuggestions - List of suggestions.
  @param auth - Auth object used to make requests
 */
export declare class SearchSuggestionResult {
    auth?: Auth;
    qFieldNames?: Array<string>;
    qSuggestions?: Array<SearchSuggestItem>;
    [key: string]: any;
    constructor({ qFieldNames, qSuggestions, ...rest }: {
        qFieldNames?: Array<string>;
        qSuggestions?: Array<SearchSuggestItem>;
    }, auth?: Auth);
}
/**
  @param qElemNumber - Element number of the associated value.
  @param qRanges - List of ranges.
For example, if the user searches the term read and the associative value is Reading , then the corresponding range would be Read in Reading .
  @param qText - Text of the associated value.
  @param auth - Auth object used to make requests
 */
export declare class SearchTermResult {
    auth?: Auth;
    qElemNumber?: number;
    qRanges?: Array<SearchCharRange>;
    qText?: string;
    [key: string]: any;
    constructor({ qElemNumber, qRanges, qText, ...rest }: {
        qElemNumber?: number;
        qRanges?: Array<SearchCharRange>;
        qText?: string;
    }, auth?: Auth);
}
/**
  @param qSearchFields - List of the search fields.
If empty, the search is performed in all fields of the app.
  @param auth - Auth object used to make requests
 */
export declare class SearchValueOptions {
    auth?: Auth;
    qSearchFields?: Array<string>;
    [key: string]: any;
    constructor({ qSearchFields, ...rest }: {
        qSearchFields?: Array<string>;
    }, auth?: Auth);
}
/**
  @param qCount - Number of search fields to return
  @param qMaxNbrFieldMatches - Maximum number of matching values to return per search result.
  @param qOffset - Position from the top, starting from 0.
If the offset is set to 0, the first search result to be returned is at position 0.
  @param auth - Auth object used to make requests
 */
export declare class SearchValuePage {
    auth?: Auth;
    qCount?: number;
    qMaxNbrFieldMatches?: number;
    qOffset?: number;
    [key: string]: any;
    constructor({ qCount, qMaxNbrFieldMatches, qOffset, ...rest }: {
        qCount?: number;
        qMaxNbrFieldMatches?: number;
        qOffset?: number;
    }, auth?: Auth);
}
/**
  @param qFieldMatches - List of search groups.
The groups are numbered from the value of SearchPage.qOffset to the value of SearchPage.qOffset + SearchPage.qCount .
  @param qSearchTerms - List of the search terms.
  @param auth - Auth object used to make requests
 */
export declare class SearchValueResult {
    auth?: Auth;
    qFieldMatches?: Array<SearchFieldValueItem>;
    qSearchTerms?: Array<string>;
    [key: string]: any;
    constructor({ qFieldMatches, qSearchTerms, ...rest }: {
        qFieldMatches?: Array<SearchFieldValueItem>;
        qSearchTerms?: Array<string>;
    }, auth?: Auth);
}
/**
  @param qContinuousRangeInfo - List of information about ranges for selections.
  @param qNumberFormat - Gives information about the formatting of the range.
This parameter is used when performing range selections or text searches in dimensions.
  @param qRangeHi - Highest value of the search range.
This parameter is used when performing range selections or text searches in dimensions.
Default is Null.
  @param qRangeInfo - This parameter is used when performing range selections or text searches in measures.
Gives information about the range of selections.
  @param qRangeLo - Lower value of the search range.
This parameter is used when performing range selections or text searches in dimensions.
Default is Null.
  @param qSelectFieldSearch - This parameter is true if the TextSearch is a result of a Select Field operation.
  @param qSoftLock - Set to true to ignore locks; in that case, locked fields can be selected.
The default value is false.
  @param qTextSearch - Text search string.
Everything that matches the text is selected.
This parameter is optional.
  @param auth - Auth object used to make requests
 */
export declare class SelectInfo {
    auth?: Auth;
    qContinuousRangeInfo?: Array<Range>;
    qNumberFormat?: FieldAttributes;
    qRangeHi?: number;
    qRangeInfo?: Array<RangeSelectInfo>;
    qRangeLo?: number;
    qSelectFieldSearch?: boolean;
    qSoftLock?: boolean;
    qTextSearch?: string;
    [key: string]: any;
    constructor({ qContinuousRangeInfo, qNumberFormat, qRangeHi, qRangeInfo, qRangeLo, qSelectFieldSearch, qSoftLock, qTextSearch, ...rest }: {
        qContinuousRangeInfo?: Array<Range>;
        qNumberFormat?: FieldAttributes;
        qRangeHi?: number;
        qRangeInfo?: Array<RangeSelectInfo>;
        qRangeLo?: number;
        qSelectFieldSearch?: boolean;
        qSoftLock?: boolean;
        qTextSearch?: string;
    }, auth?: Auth);
}
/**
  Indicates which selections are currently applied. It gives the current selections. Is the layout for SelectionObjectDef.
  @param qBackCount - Number of steps back.
  @param qForwardCount - Number of steps forward.
  @param qSelections - Lists the fields that are selected.
  @param qStateName - Name of the alternate state.
Default is current selections $ .
  @param auth - Auth object used to make requests
 */
export declare class SelectionObject {
    auth?: Auth;
    qBackCount?: number;
    qForwardCount?: number;
    qSelections?: Array<NxCurrentSelectionItem>;
    qStateName?: string;
    [key: string]: any;
    constructor({ qBackCount, qForwardCount, qSelections, qStateName, ...rest }: {
        qBackCount?: number;
        qForwardCount?: number;
        qSelections?: Array<NxCurrentSelectionItem>;
        qStateName?: string;
    }, auth?: Auth);
}
/**
  To display the current selections.
Can be added to any generic object but is particularly meaningful when using session objects to monitor an app.

 Properties:
"qSelectionObjectDef": {}
  @param qStateName - Name of the alternate state.
Default is current selections $ .
  @param auth - Auth object used to make requests
 */
export declare class SelectionObjectDef {
    auth?: Auth;
    qStateName?: string;
    [key: string]: any;
    constructor({ qStateName, ...rest }: {
        qStateName?: string;
    }, auth?: Auth);
}
/**
  @param qcx - Number of pixels on the x axis.
  @param qcy - Number of pixels on the y axis.
  @param auth - Auth object used to make requests
 */
export declare class Size {
    auth?: Auth;
    qcx?: number;
    qcy?: number;
    [key: string]: any;
    constructor({ qcx, qcy, ...rest }: {
        qcx?: number;
        qcy?: number;
    }, auth?: Auth);
}
/**
  @param qExpression - Sort by expression.
  @param qSortByAscii - Sorts the field by alphabetical order.
  @param qSortByExpression - Sorts the field by expression.
  @param qSortByFrequency - Sorts the field values by frequency (number of occurrences in the field).
  @param qSortByGreyness
  @param qSortByLoadOrder - Sorts the field values by the initial load order.
  @param qSortByNumeric - Sorts the field values by numeric value.
  @param qSortByState - Sorts the field values according to their logical state (selected, optional, alternative or excluded).
  @param auth - Auth object used to make requests
 */
export declare class SortCriteria {
    auth?: Auth;
    qExpression?: ValueExpr;
    qSortByAscii?: number;
    qSortByExpression?: number;
    qSortByFrequency?: number;
    qSortByGreyness?: number;
    qSortByLoadOrder?: number;
    qSortByNumeric?: number;
    qSortByState?: number;
    [key: string]: any;
    constructor({ qExpression, qSortByAscii, qSortByExpression, qSortByFrequency, qSortByGreyness, qSortByLoadOrder, qSortByNumeric, qSortByState, ...rest }: {
        qExpression?: ValueExpr;
        qSortByAscii?: number;
        qSortByExpression?: number;
        qSortByFrequency?: number;
        qSortByGreyness?: number;
        qSortByLoadOrder?: number;
        qSortByNumeric?: number;
        qSortByState?: number;
    }, auth?: Auth);
}
/**
  @param qKeyFields - Name of the key field.
  @param qTables - Table the key belongs to.
  @param auth - Auth object used to make requests
 */
export declare class SourceKeyRecord {
    auth?: Auth;
    qKeyFields?: Array<string>;
    qTables?: Array<string>;
    [key: string]: any;
    constructor({ qKeyFields, qTables, ...rest }: {
        qKeyFields?: Array<string>;
        qTables?: Array<string>;
    }, auth?: Auth);
}
export declare class StateEnumType {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qItems - Information about the list of content files.
  @param auth - Auth object used to make requests
 */
export declare class StaticContentList {
    auth?: Auth;
    qItems?: Array<StaticContentListItem>;
    [key: string]: any;
    constructor({ qItems, ...rest }: {
        qItems?: Array<StaticContentListItem>;
    }, auth?: Auth);
}
/**
  In addition, this structure can return dynamic properties.
  @param qUrl - Relative path to the content file. The URL is static.
In Qlik Sense Enterprise, content files located:

• In the /content/ <content library name>/ folder are part of a global content library.

• In the /appcontent/ folder are part of the app specific library.
The content files are never embedded in the qvf file.
In Qlik Sense Desktop, content files located:

• In the /content/default/ folder are outside the qvf file.

• In the /media/ folder are embedded in the qvf file.
  @param qUrlDef - Relative path to the content file. The URL is static.
In Qlik Sense Enterprise, content files located:

• In the /content/ <content library name>/ folder are part of a global content library.

• In the /appcontent/ folder are part of the app specific library.
The content files are never embedded in the qvf file.
In Qlik Sense Desktop, content files located:

• In the /content/default/ folder are outside the qvf file.

• In the /media/ folder are embedded in the qvf file.
  @param auth - Auth object used to make requests
 */
export declare class StaticContentListItem {
    auth?: Auth;
    qUrl?: string;
    qUrlDef?: string;
    [key: string]: any;
    constructor({ qUrl, qUrlDef, ...rest }: {
        qUrl?: string;
        qUrlDef?: string;
    }, auth?: Auth);
}
/**
  In addition, this structure can return dynamic properties.
  @param qUrl - Relative path of the thumbnail.
  @param auth - Auth object used to make requests
 */
export declare class StaticContentUrl {
    auth?: Auth;
    qUrl?: string;
    [key: string]: any;
    constructor({ qUrl, ...rest }: {
        qUrl?: string;
    }, auth?: Auth);
}
/**
  In addition, this structure can contain dynamic properties.
  @param qUrl - Relative path of the thumbnail.
  @param auth - Auth object used to make requests
 */
export declare class StaticContentUrlDef {
    auth?: Auth;
    qUrl?: string;
    [key: string]: any;
    constructor({ qUrl, ...rest }: {
        qUrl?: string;
    }, auth?: Auth);
}
/**
  @param qId
  @param qReturn
  @param auth - Auth object used to make requests
 */
export declare class StoreTempSelectionStateReturn {
    auth?: Auth;
    qId?: string;
    qReturn?: boolean;
    [key: string]: any;
    constructor({ qId, qReturn, ...rest }: {
        qId?: string;
        qReturn?: boolean;
    }, auth?: Auth);
}
/**
  @param qv - Expression evaluated to string.
  @param auth - Auth object used to make requests
 */
export declare class StringExpr {
    auth?: Auth;
    qv?: string;
    [key: string]: any;
    constructor({ qv, ...rest }: {
        qv?: string;
    }, auth?: Auth);
}
/**
   Properties:
Abbreviated syntax:
"qStringExpression":"=<expression>"
Extended object syntax:
"qStringExpression":{"qExpr":"=<expression>"}
Where:

• < expression > is a string

The "=" sign in the string expression is not mandatory. Even if the "=" sign is not given, the expression is evaluated. A string expression is not evaluated, if the expression is surrounded by simple quotes.
The result of the evaluation of the expression can be of any type, as it is returned as a JSON (quoted) string.
  @param qExpr
  @param auth - Auth object used to make requests
 */
export declare class StringExpression {
    auth?: Auth;
    qExpr?: string;
    [key: string]: any;
    constructor({ qExpr, ...rest }: {
        qExpr?: string;
    }, auth?: Auth);
}
/**
  @param qFrequency - Frequency of the above symbol in the field
  @param qSymbol - Symbol. Either string and NaN or number alone
  @param auth - Auth object used to make requests
 */
export declare class SymbolFrequency {
    auth?: Auth;
    qFrequency?: number;
    qSymbol?: SymbolValue;
    [key: string]: any;
    constructor({ qFrequency, qSymbol, ...rest }: {
        qFrequency?: number;
        qSymbol?: SymbolValue;
    }, auth?: Auth);
}
/**
  @param qNumber - Numeric value of the symbol. NaN otherwise.
  @param qText - String value of the symbol. This parameter is optional and present only if Symbol is a string.
  @param auth - Auth object used to make requests
 */
export declare class SymbolValue {
    auth?: Auth;
    qNumber?: number;
    qText?: string;
    [key: string]: any;
    constructor({ qNumber, qText, ...rest }: {
        qNumber?: number;
        qText?: string;
    }, auth?: Auth);
}
/**
  @param qFieldProfiling - Field values profiling info
  @param qNoOfRows - Number of rows in the table.
  @param auth - Auth object used to make requests
 */
export declare class TableProfilingData {
    auth?: Auth;
    qFieldProfiling?: Array<FieldInTableProfilingData>;
    qNoOfRows?: number;
    [key: string]: any;
    constructor({ qFieldProfiling, qNoOfRows, ...rest }: {
        qFieldProfiling?: Array<FieldInTableProfilingData>;
        qNoOfRows?: number;
    }, auth?: Auth);
}
/**
  @param qComment - Comment related to the table.
  @param qFields - Information about the fields in the table.
  @param qIsDirectDiscovery - If set to true, Direct Discovery is used.
Direct Discovery fields are not loaded into memory and remain in the external database.
  @param qIsSynthetic - This property is set to true if the table contains a synthetic key.
  @param qLoose - This property is set to true if the table is loose.
  @param qName - Name of the table.
  @param qNoOfRows - Number of rows in the table.
  @param qPos - Information about the position of the table.
  @param qProfilingData - Profiling information of the table.
  @param qTableTags - List of tags related to the table.
  @param auth - Auth object used to make requests
 */
export declare class TableRecord {
    auth?: Auth;
    qComment?: string;
    qFields?: Array<FieldInTableData>;
    qIsDirectDiscovery?: boolean;
    qIsSynthetic?: boolean;
    qLoose?: boolean;
    qName?: string;
    qNoOfRows?: number;
    qPos?: Point;
    qProfilingData?: TableProfilingData;
    qTableTags?: Array<string>;
    [key: string]: any;
    constructor({ qComment, qFields, qIsDirectDiscovery, qIsSynthetic, qLoose, qName, qNoOfRows, qPos, qProfilingData, qTableTags, ...rest }: {
        qComment?: string;
        qFields?: Array<FieldInTableData>;
        qIsDirectDiscovery?: boolean;
        qIsSynthetic?: boolean;
        qLoose?: boolean;
        qName?: string;
        qNoOfRows?: number;
        qPos?: Point;
        qProfilingData?: TableProfilingData;
        qTableTags?: Array<string>;
    }, auth?: Auth);
}
/**
  @param qValue - Array of field values.
  @param auth - Auth object used to make requests
 */
export declare class TableRow {
    auth?: Auth;
    qValue?: Array<FieldValue>;
    [key: string]: any;
    constructor({ qValue, ...rest }: {
        qValue?: Array<FieldValue>;
    }, auth?: Auth);
}
/**
  @param qFields - List of fields in the table.
  @param qPos - Information about the position of the broom point.
  @param qTable - Name of the table.
  @param auth - Auth object used to make requests
 */
export declare class TableViewBroomPointSaveInfo {
    auth?: Auth;
    qFields?: Array<string>;
    qPos?: Point;
    qTable?: string;
    [key: string]: any;
    constructor({ qFields, qPos, qTable, ...rest }: {
        qFields?: Array<string>;
        qPos?: Point;
        qTable?: string;
    }, auth?: Auth);
}
/**
  @param qFields - List of the fields in the table.
  @param qPos - Information about the position of the connection point.
  @param auth - Auth object used to make requests
 */
export declare class TableViewConnectionPointSaveInfo {
    auth?: Auth;
    qFields?: Array<string>;
    qPos?: Point;
    [key: string]: any;
    constructor({ qFields, qPos, ...rest }: {
        qFields?: Array<string>;
        qPos?: Point;
    }, auth?: Auth);
}
/**
  @param qInternalView - Internal view mode.
  @param qSourceView - Source view mode.
  @param auth - Auth object used to make requests
 */
export declare class TableViewCtlSaveInfo {
    auth?: Auth;
    qInternalView?: TableViewSaveInfo;
    qSourceView?: TableViewSaveInfo;
    [key: string]: any;
    constructor({ qInternalView, qSourceView, ...rest }: {
        qInternalView?: TableViewSaveInfo;
        qSourceView?: TableViewSaveInfo;
    }, auth?: Auth);
}
/**
  @param qCtlInfo - Set of data for internal and source view modes.
  @param qMode - View mode to display when opening Qlik Sense data model viewer.
One of:

• 0 for internal view mode.

• 1 for source view mode.
  @param qPos - Information about the position of the dialog window.
Not used in Qlik Sense.
  @param auth - Auth object used to make requests
 */
export declare class TableViewDlgSaveInfo {
    auth?: Auth;
    qCtlInfo?: TableViewCtlSaveInfo;
    qMode?: number;
    qPos?: Rect;
    [key: string]: any;
    constructor({ qCtlInfo, qMode, qPos, ...rest }: {
        qCtlInfo?: TableViewCtlSaveInfo;
        qMode?: number;
        qPos?: Rect;
    }, auth?: Auth);
}
/**
  @param qBroomPoints - List of the broom points in the database model viewer.
Not used in Qlik Sense.
  @param qConnectionPoints - List of connection points in the database model viewer.
Not used in Qlik Sense.
  @param qTables - List of the tables in the database model viewer.
  @param qZoomFactor - Zoom factor in the database model viewer.
The default value is 1.0.
  @param auth - Auth object used to make requests
 */
export declare class TableViewSaveInfo {
    auth?: Auth;
    qBroomPoints?: Array<TableViewBroomPointSaveInfo>;
    qConnectionPoints?: Array<TableViewConnectionPointSaveInfo>;
    qTables?: Array<TableViewTableWinSaveInfo>;
    qZoomFactor?: number;
    [key: string]: any;
    constructor({ qBroomPoints, qConnectionPoints, qTables, qZoomFactor, ...rest }: {
        qBroomPoints?: Array<TableViewBroomPointSaveInfo>;
        qConnectionPoints?: Array<TableViewConnectionPointSaveInfo>;
        qTables?: Array<TableViewTableWinSaveInfo>;
        qZoomFactor?: number;
    }, auth?: Auth);
}
/**
  @param qCaption - Table name.
  @param qPos - Information about the position of the table.
  @param auth - Auth object used to make requests
 */
export declare class TableViewTableWinSaveInfo {
    auth?: Auth;
    qCaption?: string;
    qPos?: Rect;
    [key: string]: any;
    constructor({ qCaption, qPos, ...rest }: {
        qCaption?: string;
        qPos?: Rect;
    }, auth?: Auth);
}
/**
  @param qDisplayString - Variable value.
  @param qIsReserved - Is set to true if the variable is a reserved variable.
  @param qIsSystem - Is set to true if the variable is a system variable.
  @param qRefSeqNo - Order in which the variable was referenced during the script execution.
The same number sequence is used for both qRefSeqNo and qSetSeqNo .
  @param qSetSeqNo - Order in which the variable was updated during the script execution.
The same number sequence is used for both qRefSeqNo and qSetSeqNo .
  @param qTag - Name of the variable.
  @param auth - Auth object used to make requests
 */
export declare class TextMacro {
    auth?: Auth;
    qDisplayString?: string;
    qIsReserved?: boolean;
    qIsSystem?: boolean;
    qRefSeqNo?: number;
    qSetSeqNo?: number;
    qTag?: string;
    [key: string]: any;
    constructor({ qDisplayString, qIsReserved, qIsSystem, qRefSeqNo, qSetSeqNo, qTag, ...rest }: {
        qDisplayString?: string;
        qIsReserved?: boolean;
        qIsSystem?: boolean;
        qRefSeqNo?: number;
        qSetSeqNo?: number;
        qTag?: string;
    }, auth?: Auth);
}
export declare class TotalMode {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qName - The name (title) of the application
  @param qScriptParameterPrefix - Prefix to be used on inserted ScriptParameters, only applicable for template apps
  @param qSpaceId - ID of the space where the app is to be created. Empty value implies Personal space
  @param auth - Auth object used to make requests
 */
export declare class TransformAppParameters {
    auth?: Auth;
    qName?: string;
    qScriptParameterPrefix?: string;
    qSpaceId?: string;
    [key: string]: any;
    constructor({ qName, qScriptParameterPrefix, qSpaceId, ...rest }: {
        qName?: string;
        qScriptParameterPrefix?: string;
        qSpaceId?: string;
    }, auth?: Auth);
}
/**
  @param qAppId - ID of created App
  @param auth - Auth object used to make requests
 */
export declare class TransformAppResult {
    auth?: Auth;
    qAppId?: string;
    [key: string]: any;
    constructor({ qAppId, ...rest }: {
        qAppId?: string;
    }, auth?: Auth);
}
/**
  Renders the properties of a TreeData object. Is the layout for TreeDataDef.
For more information about the definition of TreeData, see Generic object.
To retrieve data from the TreeData object, use the method called GetHyperCubeTreeData.
  @param qCalcCondMsg - The message displayed if calculation condition is not fulfilled.
  @param qDimensionInfo - Information on the dimension.
  @param qEffectiveInterColumnSortOrder - Defines the order of the dimenion levels/columns in the TreeData object.
Column numbers are separated by a comma.
Example: [1,0,2] means that the first level in the tree structure is dimension 1, followed by dimension 0 and dimension 2.
  @param qError - This parameter is optional and is displayed in case of error.
  @param qHasOtherValues - True if other row exists.
  @param qLastExpandedPos - Position of the last expended cell.
This property is optional.
  @param qMeasureInfo - Information on the measures calculated on the whole tree.
  @param qNodesOnDim - The total number of nodes on each dimension.
  @param qStateName - Name of the alternate state.
Default is current selections $ .
  @param qTitle - Title of the TreeData object, for example the title of a chart.
  @param qTreeDataPages - Set of data.
Is empty if nothing has been defined in qInitialDataFetch in TreeDataDef.
  @param auth - Auth object used to make requests
 */
export declare class TreeData {
    auth?: Auth;
    qCalcCondMsg?: string;
    qDimensionInfo?: Array<NxTreeDimensionInfo>;
    qEffectiveInterColumnSortOrder?: Array<number>;
    qError?: NxValidationError;
    qHasOtherValues?: boolean;
    qLastExpandedPos?: NxCellPosition;
    qMeasureInfo?: Array<NxMeasureInfo>;
    qNodesOnDim?: Array<number>;
    qStateName?: string;
    qTitle?: string;
    qTreeDataPages?: Array<NxTreeNode>;
    [key: string]: any;
    constructor({ qCalcCondMsg, qDimensionInfo, qEffectiveInterColumnSortOrder, qError, qHasOtherValues, qLastExpandedPos, qMeasureInfo, qNodesOnDim, qStateName, qTitle, qTreeDataPages, ...rest }: {
        qCalcCondMsg?: string;
        qDimensionInfo?: Array<NxTreeDimensionInfo>;
        qEffectiveInterColumnSortOrder?: Array<number>;
        qError?: NxValidationError;
        qHasOtherValues?: boolean;
        qLastExpandedPos?: NxCellPosition;
        qMeasureInfo?: Array<NxMeasureInfo>;
        qNodesOnDim?: Array<number>;
        qStateName?: string;
        qTitle?: string;
        qTreeDataPages?: Array<NxTreeNode>;
    }, auth?: Auth);
}
/**
  Defines the properties of a TreeData object.
For more information about the definition of a TreeData object, see Generic object.
  @param qCalcCondition - Specifies a calculation condition object.
If CalcCondition.Cond is not fulfilled, the TreeData is excluded from the calculation and CalcCondition.Msg is evaluated.
By default, there is no calculation condition.
This property is optional.
  @param qContextSetExpression - Set Expression valid for the whole cube. Used to limit computations to the set specified.
  @param qDimensions - Array of dimensions.
  @param qExpansionState - Expansion state per dimension.
  @param qInitialDataFetch - Initial data set.
This property is optional.
  @param qInterColumnSortOrder - Defines the order of the dimension levels/columns in the TreeData object.
Column numbers are separated by a comma.
Example: [1,0,2] means that the first level in the tree structure is dimension 1, followed by dimension 0 and dimension 2.
The default sort order is the order in which the dimensions and measures have been defined in the TreeDataDef.
  @param qOpenFullyExpanded - If this property is set to true, the cells are opened expanded. The default value is false.
  @param qPopulateMissing - If this property is set to true, the missing symbols (if any) are replaced by 0 if the value is a numeric and by an empty string if the value is a string.
The default value is false.
  @param qStateName - Name of the alternate state.
Default is current selections $ .
  @param qSuppressMissing - Removes missing values.
  @param qSuppressZero - Removes zero values.
  @param qTitle - Title of the TreeData object, for example the title of a chart.
  @param qValueExprs - List of measures to calculate on the whole tree.
  @param auth - Auth object used to make requests
 */
export declare class TreeDataDef {
    auth?: Auth;
    qCalcCondition?: NxCalcCond;
    qContextSetExpression?: string;
    qDimensions?: Array<NxTreeDimensionDef>;
    qExpansionState?: Array<ExpansionData>;
    qInitialDataFetch?: Array<NxTreeDataOption>;
    qInterColumnSortOrder?: Array<number>;
    qOpenFullyExpanded?: boolean;
    qPopulateMissing?: boolean;
    qStateName?: string;
    qSuppressMissing?: boolean;
    qSuppressZero?: boolean;
    qTitle?: StringExpr;
    qValueExprs?: Array<NxMeasure>;
    [key: string]: any;
    constructor({ qCalcCondition, qContextSetExpression, qDimensions, qExpansionState, qInitialDataFetch, qInterColumnSortOrder, qOpenFullyExpanded, qPopulateMissing, qStateName, qSuppressMissing, qSuppressZero, qTitle, qValueExprs, ...rest }: {
        qCalcCondition?: NxCalcCond;
        qContextSetExpression?: string;
        qDimensions?: Array<NxTreeDimensionDef>;
        qExpansionState?: Array<ExpansionData>;
        qInitialDataFetch?: Array<NxTreeDataOption>;
        qInterColumnSortOrder?: Array<number>;
        qOpenFullyExpanded?: boolean;
        qPopulateMissing?: boolean;
        qStateName?: string;
        qSuppressMissing?: boolean;
        qSuppressZero?: boolean;
        qTitle?: StringExpr;
        qValueExprs?: Array<NxMeasure>;
    }, auth?: Auth);
}
/**
  Displays information about the number of possible undos and redos. Is the layout for UndoInfoDef.
  @param qRedoCount - Number of possible redos.
  @param qUndoCount - Number of possible undos.
  @param auth - Auth object used to make requests
 */
export declare class UndoInfo {
    auth?: Auth;
    qRedoCount?: number;
    qUndoCount?: number;
    [key: string]: any;
    constructor({ qRedoCount, qUndoCount, ...rest }: {
        qRedoCount?: number;
        qUndoCount?: number;
    }, auth?: Auth);
}
/**
  Defines if an object should contain information on the number of possible undo and redo.

 Properties:
"qUndoInfoDef": {}
The numbers of undos and redos are empty when an object is created. The number of possible undos is increased every time an action (for example, create a child, set some properties) on the object is performed. The number of possible redos is increased every time an undo action is performed.

  @param auth - Auth object used to make requests
 */
export declare class UndoInfoDef {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param qv - Expression evaluated to dual.
  @param auth - Auth object used to make requests
 */
export declare class ValueExpr {
    auth?: Auth;
    qv?: string;
    [key: string]: any;
    constructor({ qv, ...rest }: {
        qv?: string;
    }, auth?: Auth);
}
/**
   Properties:
Abbreviated syntax:
"qValueExpression":"=<expression>"
Extended object syntax:
"qValueExpression":{"qExpr":"=<expression>"}
Where:

• < expression > is a string.

The "=" sign in the value expression is not mandatory. Even if the "=" sign is not given, the expression is evaluated.
The expression is evaluated as a numeric.
  @param qExpr
  @param auth - Auth object used to make requests
 */
export declare class ValueExpression {
    auth?: Auth;
    qExpr?: string;
    [key: string]: any;
    constructor({ qExpr, ...rest }: {
        qExpr?: string;
    }, auth?: Auth);
}
/**
  @param qGenericId - Object ID.
  @param qGenericType - The type of the object.
  @param qHandle - The handle used to connect to object.
  @param qType - The native type of the object.
  @param auth - Auth object used to make requests
 */
export declare class Variable {
    session: RpcSession;
    auth: Auth;
    qGenericId?: string;
    qGenericType?: string;
    qHandle?: number;
    qType?: string;
    [key: string]: any;
    constructor({ qGenericId, qGenericType, qHandle, qType, ...rest }: {
        qGenericId?: string;
        qGenericType?: string;
        qHandle?: number;
        qType?: string;
    }, session: RpcSession, auth?: Auth);
    /**    Returns the calculated value of a variable.
  
      @deprecated
  
    */
    getContent(): Promise<AlfaNumString>;
    /**    Returns the raw value of a variable.
  
      @deprecated
  
    */
    getRawContent(): Promise<string>;
    /**    Sets a value to a variable.
  
      @deprecated
  
      @param qContent - Value of the variable.
      @param qUpdateMRU - If set to true, the value is added to the Most Recently Used (MRU) list.
    */
    setContent(qContent: string, qUpdateMRU: boolean): Promise<boolean>;
    /**    Sets the value of a dual variable overriding any input constraints.
  
      @deprecated
  
      @param qs - String representation of a dual value.
  Set this parameter to "", if the string representation is to be Null.
      @param qd - Numeric representation of a dual value.
    */
    forceContent(qs: string, qd: number): Promise<object>;
    /**    Gets the properties of a variable.
  
      @deprecated
  
    */
    getNxProperties(): Promise<NxVariableProperties>;
    /**    Sets some properties to a variable.
  
      @deprecated
  
      @param qProperties - Information about the properties of the variable
    */
    setNxProperties(qProperties: NxVariableProperties): Promise<object>;
}
/**
  Lists the variables in an app. Is the layout for VariableListDef.
  @param qItems - List of the variables.
  @param auth - Auth object used to make requests
 */
export declare class VariableList {
    auth?: Auth;
    qItems?: Array<NxVariableListItem>;
    [key: string]: any;
    constructor({ qItems, ...rest }: {
        qItems?: Array<NxVariableListItem>;
    }, auth?: Auth);
}
/**
  Defines the list of variables in an app.
  @param qData - Data
  @param qShowConfig - Shows the system variables if set to true.
  @param qShowReserved - Shows the reserved variables if set to true.
  @param qShowSession - Shows the session variables if set to true.
  @param qType - Type of variables to include in the list.
  @param auth - Auth object used to make requests
 */
export declare class VariableListDef {
    auth?: Auth;
    qData?: JsonObject;
    qShowConfig?: boolean;
    qShowReserved?: boolean;
    qShowSession?: boolean;
    qType?: string;
    [key: string]: any;
    constructor({ qData, qShowConfig, qShowReserved, qShowSession, qType, ...rest }: {
        qData?: JsonObject;
        qShowConfig?: boolean;
        qShowReserved?: boolean;
        qShowSession?: boolean;
        qType?: string;
    }, auth?: Auth);
}
export declare class Qix extends Global {
    session: RpcSession;
}
