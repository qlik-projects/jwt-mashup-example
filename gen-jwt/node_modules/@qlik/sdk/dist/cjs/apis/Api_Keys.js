var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Api_Keys_exports = {};
__export(Api_Keys_exports, {
  ApiKey: () => ApiKey,
  ApiKeyBody: () => ApiKeyBody,
  ApiKeyConfigPatch: () => ApiKeyConfigPatch,
  ApiKeyPage: () => ApiKeyPage,
  ApiKeyPageLinks: () => ApiKeyPageLinks,
  ApiKeyPatch: () => ApiKeyPatch,
  ApiKeyWithToken: () => ApiKeyWithToken,
  ApiKeys: () => ApiKeys,
  ApiKeysConfig: () => ApiKeysConfig,
  ApiKeysConfigPatchSchema: () => ApiKeysConfigPatchSchema,
  ApiKeysPatchSchema: () => ApiKeysPatchSchema,
  Link: () => Link
});
module.exports = __toCommonJS(Api_Keys_exports);
var import_auth = __toESM(require("../auth/auth.js"));
class ApiKey {
  constructor({
    created,
    createdByUser,
    description,
    expiry,
    id,
    lastUpdated,
    status,
    sub,
    subType,
    tenantId,
    ...rest
  }, auth) {
    this.auth = auth;
    this.created = created;
    this.createdByUser = createdByUser;
    this.description = description;
    this.expiry = expiry;
    this.id = id;
    this.lastUpdated = lastUpdated;
    this.status = status;
    this.sub = sub;
    this.subType = subType;
    this.tenantId = tenantId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  async delete() {
    await this.auth.rest(
      "/api-keys/{id}".replace("{id}", this.id ?? ""),
      {
        method: "DELETE"
      }
    );
  }
  async patch(data) {
    await this.auth.rest(
      "/api-keys/{id}".replace("{id}", this.id ?? ""),
      {
        method: "PATCH",
        body: JSON.stringify(data)
      }
    );
  }
}
class ApiKeyBody {
  constructor({
    description,
    expiry,
    sub,
    subType,
    ...rest
  }, auth) {
    this.auth = auth;
    this.description = description;
    this.expiry = expiry;
    this.sub = sub;
    this.subType = subType;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ApiKeyConfigPatch {
  constructor({
    op,
    path,
    value,
    ...rest
  }, auth) {
    this.auth = auth;
    this.op = op;
    this.path = path;
    this.value = value;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ApiKeyPatch {
  constructor({
    op,
    path,
    value,
    ...rest
  }, auth) {
    this.auth = auth;
    this.op = op;
    this.path = path;
    this.value = value;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ApiKeyWithToken {
  constructor({
    created,
    createdByUser,
    description,
    expiry,
    id,
    lastUpdated,
    status,
    sub,
    subType,
    tenantId,
    token,
    ...rest
  }, auth) {
    this.auth = auth;
    this.created = created;
    this.createdByUser = createdByUser;
    this.description = description;
    this.expiry = expiry;
    this.id = id;
    this.lastUpdated = lastUpdated;
    this.status = status;
    this.sub = sub;
    this.subType = subType;
    this.tenantId = tenantId;
    this.token = token;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ApiKeysConfig {
  constructor({
    api_keys_enabled,
    max_api_key_expiry,
    max_keys_per_user,
    scim_externalClient_expiry,
    ...rest
  }, auth) {
    this.max_api_key_expiry = "PT24H";
    this.max_keys_per_user = 5;
    this.scim_externalClient_expiry = "P365D";
    this.auth = auth;
    this.api_keys_enabled = api_keys_enabled;
    this.max_api_key_expiry = max_api_key_expiry;
    this.max_keys_per_user = max_keys_per_user;
    this.scim_externalClient_expiry = scim_externalClient_expiry;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ApiKeysConfigPatchSchema extends Array {
  constructor(arr, auth) {
    super();
    this.auth = auth;
    for (const e of arr) {
      this.push(new ApiKeyConfigPatch(e, this.auth));
    }
  }
}
class ApiKeysPatchSchema extends Array {
  constructor(arr, auth) {
    super();
    this.auth = auth;
    for (const e of arr) {
      this.push(new ApiKeyPatch(e, this.auth));
    }
  }
}
class Link {
  constructor({
    href,
    ...rest
  }, auth) {
    this.auth = auth;
    this.href = href;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ApiKeyPage {
  constructor({
    data,
    links,
    ...rest
  }, auth) {
    this.auth = auth;
    if (data.length > 0 && data[0] instanceof ApiKey) {
      this.data = data;
    } else {
      this.data = data.map((element) => new ApiKey(element, this.auth));
    }
    if (links instanceof ApiKeyPageLinks) {
      this.links = links;
    } else {
      this.links = new ApiKeyPageLinks(links, this.auth);
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ApiKeyPageLinks {
  constructor({
    next,
    prev,
    self,
    ...rest
  }, auth) {
    this.auth = auth;
    if (next !== void 0 && next !== null) {
      if (next instanceof Link) {
        this.next = next;
      } else {
        this.next = new Link(next, this.auth);
      }
    }
    if (prev !== void 0 && prev !== null) {
      if (prev instanceof Link) {
        this.prev = prev;
      } else {
        this.prev = new Link(prev, this.auth);
      }
    }
    if (self instanceof Link) {
      this.self = self;
    } else {
      this.self = new Link(self, this.auth);
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ApiKeys {
  constructor(config) {
    this.config = config instanceof import_auth.default ? config.config : config;
    this.auth = config instanceof import_auth.default ? config : new import_auth.default(config);
  }
  async getConfig(tenantId) {
    const response = await this.auth.rest(
      "/api-keys/configs/{tenantId}".replace("{tenantId}", tenantId),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new ApiKeysConfig(responseJson, this.auth);
  }
  async patchConfig(tenantId, data) {
    await this.auth.rest(
      "/api-keys/configs/{tenantId}".replace("{tenantId}", tenantId),
      {
        method: "PATCH",
        body: JSON.stringify(data)
      }
    );
  }
  async get(id) {
    const response = await this.auth.rest(
      "/api-keys/{id}".replace("{id}", id),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new ApiKey(responseJson, this.auth);
  }
  async getApiKeys(queryParams = { limit: 20, sort: "-created" }) {
    const response = await this.auth.rest(
      `/api-keys?${Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => `${k}=${v}`).join("&")}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new ApiKeyPage(responseJson, this.auth);
  }
  async create(data) {
    const response = await this.auth.rest(
      "/api-keys",
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    return new ApiKeyWithToken(responseJson, this.auth);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ApiKey,
  ApiKeyBody,
  ApiKeyConfigPatch,
  ApiKeyPage,
  ApiKeyPageLinks,
  ApiKeyPatch,
  ApiKeyWithToken,
  ApiKeys,
  ApiKeysConfig,
  ApiKeysConfigPatchSchema,
  ApiKeysPatchSchema,
  Link
});
