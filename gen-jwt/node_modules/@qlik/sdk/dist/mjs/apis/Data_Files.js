import Auth from "../auth/auth.js";
class DataFileUploadResponse {
  constructor({
    appId,
    createdDate,
    id,
    modifiedDate,
    name,
    ownerId,
    size,
    spaceId,
    ...rest
  }, auth) {
    this.auth = auth;
    this.appId = appId;
    this.createdDate = createdDate;
    this.id = id;
    this.modifiedDate = modifiedDate;
    this.name = name;
    this.ownerId = ownerId;
    this.size = size;
    this.spaceId = spaceId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  async changeOwner(data) {
    await this.auth.rest(
      "/data-files/{id}/actions/change-owner".replace("{id}", this.id ?? ""),
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
  }
  async changeSpace(data) {
    await this.auth.rest(
      "/data-files/{id}/actions/change-space".replace("{id}", this.id ?? ""),
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
  }
  async delete() {
    await this.auth.rest(
      "/data-files/{id}".replace("{id}", this.id ?? ""),
      {
        method: "DELETE"
      }
    );
  }
  async set(File, name, appId, sourceId, connectionId, tempContentFileId) {
    const formData = new FormData();
    if (File !== void 0) {
      formData.append("File", new Blob([File], { type: "application/octet-stream" }));
    }
    const Json = {};
    if (name !== void 0) {
      Json["name"] = name;
    }
    if (appId !== void 0) {
      Json["appId"] = appId;
    }
    if (sourceId !== void 0) {
      Json["sourceId"] = sourceId;
    }
    if (connectionId !== void 0) {
      Json["connectionId"] = connectionId;
    }
    if (tempContentFileId !== void 0) {
      Json["tempContentFileId"] = tempContentFileId;
    }
    formData.append("Json", JSON.stringify(Json));
    const response = await this.auth.rest(
      "/data-files/{id}".replace("{id}", this.id ?? ""),
      {
        method: "PUT",
        body: formData
      }
    );
    const responseJson = await response.json();
    Object.keys(responseJson).forEach((key) => {
      if (this[key]) {
        this[key] = responseJson[key];
      }
    });
    return this;
  }
}
class BatchChangeSpaceItem {
  constructor({
    id,
    spaceId,
    ...rest
  }, auth) {
    this.auth = auth;
    this.id = id;
    this.spaceId = spaceId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class BatchDeleteItem {
  constructor({
    id,
    ...rest
  }, auth) {
    this.auth = auth;
    this.id = id;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ChangeDataFileOwnerRequest {
  constructor({
    ownerId,
    ...rest
  }, auth) {
    this.auth = auth;
    this.ownerId = ownerId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ChangeDataFileSpaceRequest {
  constructor({
    spaceId,
    ...rest
  }, auth) {
    this.auth = auth;
    this.spaceId = spaceId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ConnectionsResponse {
  constructor({
    connectStatement,
    id,
    name,
    spaceId,
    type,
    ...rest
  }, auth) {
    this.auth = auth;
    this.connectStatement = connectStatement;
    this.id = id;
    this.name = name;
    this.spaceId = spaceId;
    this.type = type;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class DataFileBatchChangeSpaceRequest {
  constructor({
    changespace,
    ...rest
  }, auth) {
    this.auth = auth;
    if (changespace) {
      this.changespace = changespace;
    } else if (rest["change-space"]) {
      this.changespace = rest["change-space"];
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class DataFileBatchDeleteRequest {
  constructor({
    delete_,
    ...rest
  }, auth) {
    this.auth = auth;
    if (delete_) {
      this.delete_ = delete_;
    } else if (rest["delete"]) {
      this.delete_ = rest["delete"];
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GetConnectionsResponse {
  constructor({
    data,
    links,
    ...rest
  }, auth) {
    this.auth = auth;
    if (data.length > 0 && data[0] instanceof ConnectionsResponse) {
      this.data = data;
    } else {
      this.data = data.map((element) => new ConnectionsResponse(element, this.auth));
    }
    if (links instanceof LinksResponse) {
      this.links = links;
    } else {
      this.links = new LinksResponse(links, this.auth);
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GetDataFileInfosResponse {
  constructor({
    data,
    links,
    ...rest
  }, auth) {
    this.auth = auth;
    if (data.length > 0 && data[0] instanceof DataFileUploadResponse) {
      this.data = data;
    } else {
      this.data = data.map((element) => new DataFileUploadResponse(element, this.auth));
    }
    if (links instanceof LinksResponse) {
      this.links = links;
    } else {
      this.links = new LinksResponse(links, this.auth);
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class LinkResponse {
  constructor({
    href,
    ...rest
  }, auth) {
    this.auth = auth;
    this.href = href;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class LinksResponse {
  constructor({
    next,
    prev,
    self,
    ...rest
  }, auth) {
    this.auth = auth;
    if (next instanceof LinkResponse) {
      this.next = next;
    } else {
      this.next = new LinkResponse(next, this.auth);
    }
    if (prev instanceof LinkResponse) {
      this.prev = prev;
    } else {
      this.prev = new LinkResponse(prev, this.auth);
    }
    if (self instanceof LinkResponse) {
      this.self = self;
    } else {
      this.self = new LinkResponse(self, this.auth);
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class MultiStatusResponse {
  constructor({
    data,
    ...rest
  }, auth) {
    this.auth = auth;
    if (data.length > 0 && data[0] instanceof MultiStatusResponseItem) {
      this.data = data;
    } else {
      this.data = data.map((element) => new MultiStatusResponseItem(element, this.auth));
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class MultiStatusResponseItem {
  constructor({
    code,
    detail,
    id,
    status,
    title,
    ...rest
  }, auth) {
    this.auth = auth;
    this.code = code;
    this.detail = detail;
    this.id = id;
    this.status = status;
    this.title = title;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class QuotaResponse {
  constructor({
    allowedExtensions,
    allowedInternalExtensions,
    maxFileSize,
    maxLargeFileSize,
    maxSize,
    size,
    ...rest
  }, auth) {
    this.auth = auth;
    this.allowedExtensions = allowedExtensions;
    this.allowedInternalExtensions = allowedInternalExtensions;
    this.maxFileSize = maxFileSize;
    this.maxLargeFileSize = maxLargeFileSize;
    this.maxSize = maxSize;
    this.size = size;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class DataFiles {
  constructor(config) {
    this.config = config instanceof Auth ? config.config : config;
    this.auth = config instanceof Auth ? config : new Auth(config);
  }
  async changeSpace(data) {
    const response = await this.auth.rest(
      "/data-files/actions/change-space",
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    return new MultiStatusResponse(responseJson, this.auth);
  }
  async delete(data) {
    const response = await this.auth.rest(
      "/data-files/actions/delete",
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    return new MultiStatusResponse(responseJson, this.auth);
  }
  async getConnection(id) {
    const response = await this.auth.rest(
      "/data-files/connections/{id}".replace("{id}", id),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new ConnectionsResponse(responseJson, this.auth);
  }
  async getConnections(queryParams = { limit: 20 }) {
    const response = await this.auth.rest(
      `/data-files/connections?${Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => `${k}=${v}`).join("&")}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new GetConnectionsResponse(responseJson, this.auth);
  }
  async getQuota() {
    const response = await this.auth.rest(
      "/data-files/quotas",
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new QuotaResponse(responseJson, this.auth);
  }
  async get(id) {
    const response = await this.auth.rest(
      "/data-files/{id}".replace("{id}", id),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new DataFileUploadResponse(responseJson, this.auth);
  }
  async getDataFiles(queryParams = { limit: 20 }) {
    const response = await this.auth.rest(
      `/data-files?${Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => `${k}=${v}`).join("&")}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new GetDataFileInfosResponse(responseJson, this.auth);
  }
  async create(File, name, appId, sourceId, connectionId, tempContentFileId) {
    const formData = new FormData();
    if (File !== void 0) {
      formData.append("File", new Blob([File], { type: "application/octet-stream" }));
    }
    const Json = {};
    if (name !== void 0) {
      Json["name"] = name;
    }
    if (appId !== void 0) {
      Json["appId"] = appId;
    }
    if (sourceId !== void 0) {
      Json["sourceId"] = sourceId;
    }
    if (connectionId !== void 0) {
      Json["connectionId"] = connectionId;
    }
    if (tempContentFileId !== void 0) {
      Json["tempContentFileId"] = tempContentFileId;
    }
    formData.append("Json", JSON.stringify(Json));
    const response = await this.auth.rest(
      "/data-files",
      {
        method: "POST",
        body: formData
      }
    );
    const responseJson = await response.json();
    return new DataFileUploadResponse(responseJson, this.auth);
  }
}
export {
  BatchChangeSpaceItem,
  BatchDeleteItem,
  ChangeDataFileOwnerRequest,
  ChangeDataFileSpaceRequest,
  ConnectionsResponse,
  DataFileBatchChangeSpaceRequest,
  DataFileBatchDeleteRequest,
  DataFileUploadResponse,
  DataFiles,
  GetConnectionsResponse,
  GetDataFileInfosResponse,
  LinkResponse,
  LinksResponse,
  MultiStatusResponse,
  MultiStatusResponseItem,
  QuotaResponse
};
