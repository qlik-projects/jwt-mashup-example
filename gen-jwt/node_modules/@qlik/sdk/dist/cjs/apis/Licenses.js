var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Licenses_exports = {};
__export(Licenses_exports, {
  AssignmentsActionsAddRequest: () => AssignmentsActionsAddRequest,
  AssignmentsActionsAddRequestAdd: () => AssignmentsActionsAddRequestAdd,
  AssignmentsActionsAddResponse: () => AssignmentsActionsAddResponse,
  AssignmentsActionsAddResponseData: () => AssignmentsActionsAddResponseData,
  AssignmentsActionsDeleteRequest: () => AssignmentsActionsDeleteRequest,
  AssignmentsActionsDeleteRequestDelete: () => AssignmentsActionsDeleteRequestDelete,
  AssignmentsActionsDeleteResponse: () => AssignmentsActionsDeleteResponse,
  AssignmentsActionsDeleteResponseData: () => AssignmentsActionsDeleteResponseData,
  AssignmentsActionsUpdateRequest: () => AssignmentsActionsUpdateRequest,
  AssignmentsActionsUpdateRequestUpdate: () => AssignmentsActionsUpdateRequestUpdate,
  AssignmentsActionsUpdateResponse: () => AssignmentsActionsUpdateResponse,
  AssignmentsActionsUpdateResponseData: () => AssignmentsActionsUpdateResponseData,
  AssignmentsResponse: () => AssignmentsResponse,
  AssignmentsResponseData: () => AssignmentsResponseData,
  AssignmentsResponseLinks: () => AssignmentsResponseLinks,
  ConsumptionEventsResponse: () => ConsumptionEventsResponse,
  ConsumptionEventsResponseData: () => ConsumptionEventsResponseData,
  ConsumptionEventsResponseLinks: () => ConsumptionEventsResponseLinks,
  Href: () => Href,
  LicenseOverview: () => LicenseOverview,
  LicenseOverviewAllotments: () => LicenseOverviewAllotments,
  LicenseOverviewParameters: () => LicenseOverviewParameters,
  LicenseOverviewParametersAccess: () => LicenseOverviewParametersAccess,
  LicenseOverviewParametersValues: () => LicenseOverviewParametersValues,
  LicenseStatus: () => LicenseStatus,
  Licenses: () => Licenses,
  SettingsBody: () => SettingsBody
});
module.exports = __toCommonJS(Licenses_exports);
var import_auth = __toESM(require("../auth/auth.js"));
class AssignmentsActionsAddRequest {
  constructor({
    add,
    ...rest
  }, auth) {
    this.auth = auth;
    if (add.length > 0 && add[0] instanceof AssignmentsActionsAddRequestAdd) {
      this.add = add;
    } else {
      this.add = add.map((element) => new AssignmentsActionsAddRequestAdd(element, this.auth));
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class AssignmentsActionsAddRequestAdd {
  constructor({
    name,
    subject,
    type,
    userId,
    ...rest
  }, auth) {
    this.auth = auth;
    this.name = name;
    this.subject = subject;
    this.type = type;
    this.userId = userId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class AssignmentsActionsAddResponse {
  constructor({
    data,
    ...rest
  }, auth) {
    this.auth = auth;
    if (data.length > 0 && data[0] instanceof AssignmentsActionsAddResponseData) {
      this.data = data;
    } else {
      this.data = data.map((element) => new AssignmentsActionsAddResponseData(element, this.auth));
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class AssignmentsActionsAddResponseData {
  constructor({
    code,
    status,
    subject,
    title,
    type,
    ...rest
  }, auth) {
    this.auth = auth;
    this.code = code;
    this.status = status;
    this.subject = subject;
    this.title = title;
    this.type = type;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class AssignmentsActionsDeleteRequest {
  constructor({
    delete_,
    ...rest
  }, auth) {
    this.auth = auth;
    if (delete_) {
      this.delete_ = delete_;
    } else if (rest["delete"]) {
      this.delete_ = rest["delete"];
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class AssignmentsActionsDeleteRequestDelete {
  constructor({
    subject,
    type,
    ...rest
  }, auth) {
    this.auth = auth;
    this.subject = subject;
    this.type = type;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class AssignmentsActionsDeleteResponse {
  constructor({
    data,
    ...rest
  }, auth) {
    this.auth = auth;
    if (data.length > 0 && data[0] instanceof AssignmentsActionsDeleteResponseData) {
      this.data = data;
    } else {
      this.data = data.map((element) => new AssignmentsActionsDeleteResponseData(element, this.auth));
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class AssignmentsActionsDeleteResponseData {
  constructor({
    code,
    status,
    subject,
    title,
    type,
    ...rest
  }, auth) {
    this.auth = auth;
    this.code = code;
    this.status = status;
    this.subject = subject;
    this.title = title;
    this.type = type;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class AssignmentsActionsUpdateRequest {
  constructor({
    update,
    ...rest
  }, auth) {
    this.auth = auth;
    if (update.length > 0 && update[0] instanceof AssignmentsActionsUpdateRequestUpdate) {
      this.update = update;
    } else {
      this.update = update.map((element) => new AssignmentsActionsUpdateRequestUpdate(element, this.auth));
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class AssignmentsActionsUpdateRequestUpdate {
  constructor({
    sourceType,
    subject,
    type,
    ...rest
  }, auth) {
    this.auth = auth;
    this.sourceType = sourceType;
    this.subject = subject;
    this.type = type;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class AssignmentsActionsUpdateResponse {
  constructor({
    data,
    ...rest
  }, auth) {
    this.auth = auth;
    if (data.length > 0 && data[0] instanceof AssignmentsActionsUpdateResponseData) {
      this.data = data;
    } else {
      this.data = data.map((element) => new AssignmentsActionsUpdateResponseData(element, this.auth));
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class AssignmentsActionsUpdateResponseData {
  constructor({
    code,
    sourceType,
    status,
    subject,
    title,
    type,
    ...rest
  }, auth) {
    this.auth = auth;
    this.code = code;
    this.sourceType = sourceType;
    this.status = status;
    this.subject = subject;
    this.title = title;
    this.type = type;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class AssignmentsResponse {
  constructor({
    data,
    links,
    ...rest
  }, auth) {
    this.auth = auth;
    if (data.length > 0 && data[0] instanceof AssignmentsResponseData) {
      this.data = data;
    } else {
      this.data = data.map((element) => new AssignmentsResponseData(element, this.auth));
    }
    if (links instanceof AssignmentsResponseLinks) {
      this.links = links;
    } else {
      this.links = new AssignmentsResponseLinks(links, this.auth);
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class AssignmentsResponseData {
  constructor({
    created,
    excess,
    name,
    subject,
    type,
    userId,
    ...rest
  }, auth) {
    this.auth = auth;
    this.created = created;
    this.excess = excess;
    this.name = name;
    this.subject = subject;
    this.type = type;
    this.userId = userId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class AssignmentsResponseLinks {
  constructor({
    next,
    prev,
    ...rest
  }, auth) {
    this.auth = auth;
    if (next !== void 0 && next !== null) {
      if (next instanceof Href) {
        this.next = next;
      } else {
        this.next = new Href(next, this.auth);
      }
    }
    if (prev !== void 0 && prev !== null) {
      if (prev instanceof Href) {
        this.prev = prev;
      } else {
        this.prev = new Href(prev, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ConsumptionEventsResponse {
  constructor({
    data,
    links,
    ...rest
  }, auth) {
    this.auth = auth;
    if (data.length > 0 && data[0] instanceof ConsumptionEventsResponseData) {
      this.data = data;
    } else {
      this.data = data.map((element) => new ConsumptionEventsResponseData(element, this.auth));
    }
    if (links instanceof ConsumptionEventsResponseLinks) {
      this.links = links;
    } else {
      this.links = new ConsumptionEventsResponseLinks(links, this.auth);
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ConsumptionEventsResponseData {
  constructor({
    allotmentId,
    appId,
    capacityUsed,
    duration,
    endTime,
    id,
    licenseUsage,
    minutesUsed,
    sessionId,
    userId,
    ...rest
  }, auth) {
    this.auth = auth;
    this.allotmentId = allotmentId;
    this.appId = appId;
    this.capacityUsed = capacityUsed;
    this.duration = duration;
    this.endTime = endTime;
    this.id = id;
    this.licenseUsage = licenseUsage;
    this.minutesUsed = minutesUsed;
    this.sessionId = sessionId;
    this.userId = userId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ConsumptionEventsResponseLinks {
  constructor({
    next,
    prev,
    ...rest
  }, auth) {
    this.auth = auth;
    if (next !== void 0 && next !== null) {
      if (next instanceof Href) {
        this.next = next;
      } else {
        this.next = new Href(next, this.auth);
      }
    }
    if (prev !== void 0 && prev !== null) {
      if (prev instanceof Href) {
        this.prev = prev;
      } else {
        this.prev = new Href(prev, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Href {
  constructor({
    href,
    ...rest
  }, auth) {
    this.auth = auth;
    this.href = href;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class LicenseOverview {
  constructor({
    allotments,
    changeTime,
    licenseKey,
    licenseNumber,
    licenseType,
    origin,
    parameters,
    product,
    secondaryNumber,
    status,
    trial,
    updated,
    valid,
    ...rest
  }, auth) {
    this.auth = auth;
    if (allotments.length > 0 && allotments[0] instanceof LicenseOverviewAllotments) {
      this.allotments = allotments;
    } else {
      this.allotments = allotments.map((element) => new LicenseOverviewAllotments(element, this.auth));
    }
    this.changeTime = changeTime;
    this.licenseKey = licenseKey;
    this.licenseNumber = licenseNumber;
    this.licenseType = licenseType;
    this.origin = origin;
    if (parameters.length > 0 && parameters[0] instanceof LicenseOverviewParameters) {
      this.parameters = parameters;
    } else {
      this.parameters = parameters.map((element) => new LicenseOverviewParameters(element, this.auth));
    }
    this.product = product;
    this.secondaryNumber = secondaryNumber;
    this.status = status;
    this.trial = trial;
    this.updated = updated;
    this.valid = valid;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class LicenseOverviewAllotments {
  constructor({
    name,
    overage,
    units,
    unitsUsed,
    usageClass,
    ...rest
  }, auth) {
    this.auth = auth;
    this.name = name;
    this.overage = overage;
    this.units = units;
    this.unitsUsed = unitsUsed;
    this.usageClass = usageClass;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class LicenseOverviewParameters {
  constructor({
    access,
    name,
    valid,
    values,
    ...rest
  }, auth) {
    this.auth = auth;
    if (access !== void 0 && access !== null) {
      if (access instanceof LicenseOverviewParametersAccess) {
        this.access = access;
      } else {
        this.access = new LicenseOverviewParametersAccess(access, this.auth);
      }
    }
    this.name = name;
    this.valid = valid;
    if (values !== void 0 && values !== null) {
      if (values instanceof LicenseOverviewParametersValues) {
        this.values = values;
      } else {
        this.values = new LicenseOverviewParametersValues(values, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class LicenseOverviewParametersAccess {
  constructor({
    allotment,
    ...rest
  }, auth) {
    this.auth = auth;
    this.allotment = allotment;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class LicenseOverviewParametersValues {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class LicenseStatus {
  constructor({
    origin,
    product,
    status,
    trial,
    type,
    valid,
    ...rest
  }, auth) {
    this.auth = auth;
    this.origin = origin;
    this.product = product;
    this.status = status;
    this.trial = trial;
    this.type = type;
    this.valid = valid;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SettingsBody {
  constructor({
    autoAssignAnalyzer,
    autoAssignProfessional,
    ...rest
  }, auth) {
    this.auth = auth;
    this.autoAssignAnalyzer = autoAssignAnalyzer;
    this.autoAssignProfessional = autoAssignProfessional;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Licenses {
  constructor(config) {
    this.config = config instanceof import_auth.default ? config.config : config;
    this.auth = config instanceof import_auth.default ? config : new import_auth.default(config);
  }
  async add(data) {
    const response = await this.auth.rest(
      "/licenses/assignments/actions/add",
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    return new AssignmentsActionsAddResponse(responseJson, this.auth);
  }
  async delete(data) {
    const response = await this.auth.rest(
      "/licenses/assignments/actions/delete",
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    return new AssignmentsActionsDeleteResponse(responseJson, this.auth);
  }
  async update(data) {
    const response = await this.auth.rest(
      "/licenses/assignments/actions/update",
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    return new AssignmentsActionsUpdateResponse(responseJson, this.auth);
  }
  async getAssignments(queryParams = { limit: 20 }) {
    const response = await this.auth.rest(
      `/licenses/assignments?${Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => `${k}=${v}`).join("&")}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new AssignmentsResponse(responseJson, this.auth);
  }
  async getConsumptions(queryParams = { limit: 200 }) {
    const response = await this.auth.rest(
      `/licenses/consumption?${Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => `${k}=${v}`).join("&")}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new ConsumptionEventsResponse(responseJson, this.auth);
  }
  async getOverview() {
    const response = await this.auth.rest(
      "/licenses/overview",
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new LicenseOverview(responseJson, this.auth);
  }
  async getSettings() {
    const response = await this.auth.rest(
      "/licenses/settings",
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new SettingsBody(responseJson, this.auth);
  }
  async setSettings(data) {
    const response = await this.auth.rest(
      "/licenses/settings",
      {
        method: "PUT",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    return new SettingsBody(responseJson, this.auth);
  }
  async getStatus() {
    const response = await this.auth.rest(
      "/licenses/status",
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new LicenseStatus(responseJson, this.auth);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AssignmentsActionsAddRequest,
  AssignmentsActionsAddRequestAdd,
  AssignmentsActionsAddResponse,
  AssignmentsActionsAddResponseData,
  AssignmentsActionsDeleteRequest,
  AssignmentsActionsDeleteRequestDelete,
  AssignmentsActionsDeleteResponse,
  AssignmentsActionsDeleteResponseData,
  AssignmentsActionsUpdateRequest,
  AssignmentsActionsUpdateRequestUpdate,
  AssignmentsActionsUpdateResponse,
  AssignmentsActionsUpdateResponseData,
  AssignmentsResponse,
  AssignmentsResponseData,
  AssignmentsResponseLinks,
  ConsumptionEventsResponse,
  ConsumptionEventsResponseData,
  ConsumptionEventsResponseLinks,
  Href,
  LicenseOverview,
  LicenseOverviewAllotments,
  LicenseOverviewParameters,
  LicenseOverviewParametersAccess,
  LicenseOverviewParametersValues,
  LicenseStatus,
  Licenses,
  SettingsBody
});
