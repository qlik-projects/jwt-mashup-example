/**
This is spectacularly generated code by spectacular v0.13.0 based on
Qlik Cloud Services 0.554.4
*/
import Auth from '../auth/auth.js';
import type { Config } from '../types/types.js';
/**
  @param add
  @param auth - Auth object used to make requests
 */
export declare class AssignmentsActionsAddRequest {
    auth?: Auth;
    add: Array<AssignmentsActionsAddRequestAdd>;
    [key: string]: any;
    constructor({ add, ...rest }: {
        add: Array<AssignmentsActionsAddRequestAdd>;
    }, auth?: Auth);
}
/**
  @param name - User name
  @param subject - User subject
  @param type - Allotment type
  @param userId - User ID
  @param auth - Auth object used to make requests
 */
export declare class AssignmentsActionsAddRequestAdd {
    auth?: Auth;
    name?: string;
    subject: string;
    type: string;
    userId?: string;
    [key: string]: any;
    constructor({ name, subject, type, userId, ...rest }: {
        name?: string;
        subject: string;
        type: string;
        userId?: string;
    }, auth?: Auth);
}
/**
  @param data
  @param auth - Auth object used to make requests
 */
export declare class AssignmentsActionsAddResponse {
    auth?: Auth;
    data: Array<AssignmentsActionsAddResponseData>;
    [key: string]: any;
    constructor({ data, ...rest }: {
        data: Array<AssignmentsActionsAddResponseData>;
    }, auth?: Auth);
}
/**
  @param code - Error code
  @param status - Response status
  @param subject - Subject
  @param title - Error title
  @param type - Allotment type
  @param auth - Auth object used to make requests
 */
export declare class AssignmentsActionsAddResponseData {
    auth?: Auth;
    code?: string;
    status: number;
    subject: string;
    title?: string;
    type?: string;
    [key: string]: any;
    constructor({ code, status, subject, title, type, ...rest }: {
        code?: string;
        status: number;
        subject: string;
        title?: string;
        type?: string;
    }, auth?: Auth);
}
/**
  @param delete_
  @param auth - Auth object used to make requests
 */
export declare class AssignmentsActionsDeleteRequest {
    auth?: Auth;
    delete_: Array<AssignmentsActionsDeleteRequestDelete>;
    [key: string]: any;
    constructor({ delete_, ...rest }: {
        delete_: Array<AssignmentsActionsDeleteRequestDelete>;
    }, auth?: Auth);
}
/**
  @param subject - User subject
  @param type - Allotment type
  @param auth - Auth object used to make requests
 */
export declare class AssignmentsActionsDeleteRequestDelete {
    auth?: Auth;
    subject: string;
    type: string;
    [key: string]: any;
    constructor({ subject, type, ...rest }: {
        subject: string;
        type: string;
    }, auth?: Auth);
}
/**
  @param data
  @param auth - Auth object used to make requests
 */
export declare class AssignmentsActionsDeleteResponse {
    auth?: Auth;
    data: Array<AssignmentsActionsDeleteResponseData>;
    [key: string]: any;
    constructor({ data, ...rest }: {
        data: Array<AssignmentsActionsDeleteResponseData>;
    }, auth?: Auth);
}
/**
  @param code - Error code
  @param status - Response status
  @param subject - Subject
  @param title - Error title
  @param type - Allotment type
  @param auth - Auth object used to make requests
 */
export declare class AssignmentsActionsDeleteResponseData {
    auth?: Auth;
    code?: string;
    status: number;
    subject?: string;
    title?: string;
    type?: string;
    [key: string]: any;
    constructor({ code, status, subject, title, type, ...rest }: {
        code?: string;
        status: number;
        subject?: string;
        title?: string;
        type?: string;
    }, auth?: Auth);
}
/**
  @param update
  @param auth - Auth object used to make requests
 */
export declare class AssignmentsActionsUpdateRequest {
    auth?: Auth;
    update: Array<AssignmentsActionsUpdateRequestUpdate>;
    [key: string]: any;
    constructor({ update, ...rest }: {
        update: Array<AssignmentsActionsUpdateRequestUpdate>;
    }, auth?: Auth);
}
/**
  @param sourceType - Current assignment type.
  @param subject - User subject
  @param type - Target assignment type.
  @param auth - Auth object used to make requests
 */
export declare class AssignmentsActionsUpdateRequestUpdate {
    auth?: Auth;
    sourceType: string;
    subject: string;
    type: string;
    [key: string]: any;
    constructor({ sourceType, subject, type, ...rest }: {
        sourceType: string;
        subject: string;
        type: string;
    }, auth?: Auth);
}
/**
  @param data
  @param auth - Auth object used to make requests
 */
export declare class AssignmentsActionsUpdateResponse {
    auth?: Auth;
    data: Array<AssignmentsActionsUpdateResponseData>;
    [key: string]: any;
    constructor({ data, ...rest }: {
        data: Array<AssignmentsActionsUpdateResponseData>;
    }, auth?: Auth);
}
/**
  @param code - Error code
  @param sourceType - Current allotment type.
  @param status - Response status
  @param subject - Subject
  @param title - Error title
  @param type - Target allotment type.
  @param auth - Auth object used to make requests
 */
export declare class AssignmentsActionsUpdateResponseData {
    auth?: Auth;
    code?: string;
    sourceType?: string;
    status: number;
    subject?: string;
    title?: string;
    type?: string;
    [key: string]: any;
    constructor({ code, sourceType, status, subject, title, type, ...rest }: {
        code?: string;
        sourceType?: string;
        status: number;
        subject?: string;
        title?: string;
        type?: string;
    }, auth?: Auth);
}
/**
  @param data
  @param links
  @param auth - Auth object used to make requests
 */
export declare class AssignmentsResponse {
    auth?: Auth;
    data: Array<AssignmentsResponseData>;
    links: AssignmentsResponseLinks;
    [key: string]: any;
    constructor({ data, links, ...rest }: {
        data: Array<AssignmentsResponseData>;
        links: AssignmentsResponseLinks;
    }, auth?: Auth);
}
/**
  @param created - Assignment created date.
  @param excess - Assignment excess status.
  @param name - User name
  @param subject - Subject
  @param type - Allotment type
  @param userId - User ID
  @param auth - Auth object used to make requests
 */
export declare class AssignmentsResponseData {
    auth?: Auth;
    created: string;
    excess: boolean;
    name?: string;
    subject: string;
    type: string;
    userId?: string;
    [key: string]: any;
    constructor({ created, excess, name, subject, type, userId, ...rest }: {
        created: string;
        excess: boolean;
        name?: string;
        subject: string;
        type: string;
        userId?: string;
    }, auth?: Auth);
}
/**
  @param next
  @param prev
  @param auth - Auth object used to make requests
 */
export declare class AssignmentsResponseLinks {
    auth?: Auth;
    next?: Href;
    prev?: Href;
    [key: string]: any;
    constructor({ next, prev, ...rest }: {
        next?: Href;
        prev?: Href;
    }, auth?: Auth);
}
/**
  @param data
  @param links
  @param auth - Auth object used to make requests
 */
export declare class ConsumptionEventsResponse {
    auth?: Auth;
    data: Array<ConsumptionEventsResponseData>;
    links: ConsumptionEventsResponseLinks;
    [key: string]: any;
    constructor({ data, links, ...rest }: {
        data: Array<ConsumptionEventsResponseData>;
        links: ConsumptionEventsResponseLinks;
    }, auth?: Auth);
}
/**
  @param allotmentId - Allotment ID
  @param appId - App ID
  @param capacityUsed - Analyzer capacity chunks consumed.
  @param duration - Engine session duration.
  @param endTime - Engine session end time.
  @param id - ID
  @param licenseUsage - License usage
  @param minutesUsed - Analyzer capacity minutes consumed.
  @param sessionId - Engine session ID.
  @param userId - User ID
  @param auth - Auth object used to make requests
 */
export declare class ConsumptionEventsResponseData {
    auth?: Auth;
    allotmentId?: string;
    appId?: string;
    capacityUsed?: number;
    duration?: string;
    endTime?: string;
    id?: string;
    licenseUsage?: string;
    minutesUsed?: number;
    sessionId?: string;
    userId?: string;
    [key: string]: any;
    constructor({ allotmentId, appId, capacityUsed, duration, endTime, id, licenseUsage, minutesUsed, sessionId, userId, ...rest }: {
        allotmentId?: string;
        appId?: string;
        capacityUsed?: number;
        duration?: string;
        endTime?: string;
        id?: string;
        licenseUsage?: string;
        minutesUsed?: number;
        sessionId?: string;
        userId?: string;
    }, auth?: Auth);
}
/**
  @param next
  @param prev
  @param auth - Auth object used to make requests
 */
export declare class ConsumptionEventsResponseLinks {
    auth?: Auth;
    next?: Href;
    prev?: Href;
    [key: string]: any;
    constructor({ next, prev, ...rest }: {
        next?: Href;
        prev?: Href;
    }, auth?: Auth);
}
/**
  @param href - link
  @param auth - Auth object used to make requests
 */
export declare class Href {
    auth?: Auth;
    href?: string;
    [key: string]: any;
    constructor({ href, ...rest }: {
        href?: string;
    }, auth?: Auth);
}
/**
  @param allotments
  @param changeTime - An ISO 8601 timestamp for when the license was last changed.
  @param licenseKey
  @param licenseNumber
  @param licenseType
  @param origin - Origin of license key.
  @param parameters - The license parameters.
  @param product - The product the license is valid for.
  @param secondaryNumber - The secondary number of a definition.
  @param status - Enum with status of license. Only status Ok grants license. access.
  @param trial - Boolean indicating if it is a trial license.
  @param updated - An ISO 8601 timestamp for when the license was last updated.
  @param valid - Period that the license is currently set to be active. Represented as an ISO 8601 time interval with start and end.
  @param auth - Auth object used to make requests
 */
export declare class LicenseOverview {
    auth?: Auth;
    allotments: Array<LicenseOverviewAllotments>;
    changeTime?: string;
    licenseKey: string;
    licenseNumber: string;
    licenseType?: string;
    origin: 'Internal' | 'External' | string;
    parameters: Array<LicenseOverviewParameters>;
    product: string;
    secondaryNumber: string;
    status: 'Ok' | 'Blacklisted' | 'Expired' | string;
    trial: boolean;
    updated: string;
    valid: string;
    [key: string]: any;
    constructor({ allotments, changeTime, licenseKey, licenseNumber, licenseType, origin, parameters, product, secondaryNumber, status, trial, updated, valid, ...rest }: {
        allotments: Array<LicenseOverviewAllotments>;
        changeTime?: string;
        licenseKey: string;
        licenseNumber: string;
        licenseType?: string;
        origin: 'Internal' | 'External' | string;
        parameters: Array<LicenseOverviewParameters>;
        product: string;
        secondaryNumber: string;
        status: 'Ok' | 'Blacklisted' | 'Expired' | string;
        trial: boolean;
        updated: string;
        valid: string;
    }, auth?: Auth);
}
/**
  @param name
  @param overage - Overage value; -1 means unbounded overage.
  @param units
  @param unitsUsed
  @param usageClass
  @param auth - Auth object used to make requests
 */
export declare class LicenseOverviewAllotments {
    auth?: Auth;
    name: 'professional' | 'analyzer' | 'analyzer_time' | string;
    overage?: number;
    units: number;
    unitsUsed: number;
    usageClass: string;
    [key: string]: any;
    constructor({ name, overage, units, unitsUsed, usageClass, ...rest }: {
        name: 'professional' | 'analyzer' | 'analyzer_time' | string;
        overage?: number;
        units: number;
        unitsUsed: number;
        usageClass: string;
    }, auth?: Auth);
}
/**
  @param access - Parameters for licenses to control access to the parameters.
  @param name - Parameter set (provision) name.
  @param valid - Time interval for parameter validity.
  @param values - Parameter values
  @param auth - Auth object used to make requests
 */
export declare class LicenseOverviewParameters {
    auth?: Auth;
    access?: LicenseOverviewParametersAccess;
    name: string;
    valid: string;
    values?: LicenseOverviewParametersValues;
    [key: string]: any;
    constructor({ access, name, valid, values, ...rest }: {
        access?: LicenseOverviewParametersAccess;
        name: string;
        valid: string;
        values?: LicenseOverviewParametersValues;
    }, auth?: Auth);
}
/**
  Parameters for licenses to control access to the parameters.
  @param allotment - Name of an allotment that the user must have access to. to
  @param auth - Auth object used to make requests
 */
export declare class LicenseOverviewParametersAccess {
    auth?: Auth;
    allotment?: string;
    [key: string]: any;
    constructor({ allotment, ...rest }: {
        allotment?: string;
    }, auth?: Auth);
}
/**
  Parameter values

  @param auth - Auth object used to make requests
 */
export declare class LicenseOverviewParametersValues {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param origin - Origin of license key.
  @param product - The product the license is valid for.
  @param status - Enum with status of license. Only status Ok grants license. access.
  @param trial - Boolean indicating if it is a trial license.
  @param type - Type of license key.
  @param valid - Period that the license is currently set to be active. Represented as an ISO 8601 time interval with start and end.
  @param auth - Auth object used to make requests
 */
export declare class LicenseStatus {
    auth?: Auth;
    origin: 'Internal' | 'External' | string;
    product: string;
    status: 'Ok' | 'Blacklisted' | 'Expired' | 'Missing' | string;
    trial: boolean;
    type: 'Signed' | 'Plain' | string;
    valid: string;
    [key: string]: any;
    constructor({ origin, product, status, trial, type, valid, ...rest }: {
        origin: 'Internal' | 'External' | string;
        product: string;
        status: 'Ok' | 'Blacklisted' | 'Expired' | 'Missing' | string;
        trial: boolean;
        type: 'Signed' | 'Plain' | string;
        valid: string;
    }, auth?: Auth);
}
/**
  @param autoAssignAnalyzer - If analyzer users are available, they will be automatically assigned. Otherwise, analyzer capacity will be assigned, if available.
  @param autoAssignProfessional - If professional users are available, they will be automatically assigned. Otherwise, analyzer capacity will be assigned, if available.
  @param auth - Auth object used to make requests
 */
export declare class SettingsBody {
    auth?: Auth;
    autoAssignAnalyzer?: boolean;
    autoAssignProfessional?: boolean;
    [key: string]: any;
    constructor({ autoAssignAnalyzer, autoAssignProfessional, ...rest }: {
        autoAssignAnalyzer?: boolean;
        autoAssignProfessional?: boolean;
    }, auth?: Auth);
}
export declare class Licenses {
    auth: Auth;
    config: Config;
    constructor(config: Config | Auth);
    /**
    Assigns license access to the given users
  
      @param data - List of subjects to allocate assignments for.
    */
    add(data: AssignmentsActionsAddRequest): Promise<AssignmentsActionsAddResponse>;
    /**
    Removes license access for the given users
  
      @param data - List of assignments to delete.
    */
    delete(data: AssignmentsActionsDeleteRequest): Promise<AssignmentsActionsDeleteResponse>;
    /**
    Updates license access for the given users
  
      @param data - List of assignments to update.
    */
    update(data: AssignmentsActionsUpdateRequest): Promise<AssignmentsActionsUpdateResponse>;
    /**
    Retrieves assignments for the current tenant
  
      @param filter - The filter for finding entries.
      @param limit - The preferred number of entries to return.
      @param page - The requested page.
      @param sort - The field to sort on; can be prefixed with +/- for ascending/descending sort order.
    */
    getAssignments(queryParams?: {
        filter?: string;
        limit?: number;
        page?: string;
        sort?: string;
    }): Promise<AssignmentsResponse>;
    /**
    Retrieves license consumption for the current tenant
  
      @param filter - The filter for finding entries.
      @param limit - The preferred number of entries to return.
      @param page - The requested page.
      @param sort - The field to sort on; can be prefixed with +/- for ascending/descending sort order.
    */
    getConsumptions(queryParams?: {
        filter?: string;
        limit?: number;
        page?: string;
        sort?: string;
    }): Promise<ConsumptionEventsResponse>;
    /**
    Gets the general information of the license applied to the current tenant
  
    */
    getOverview(): Promise<LicenseOverview>;
    /**
    Get auto assign settings for tenant.
  
    */
    getSettings(): Promise<SettingsBody>;
    /**
    Set auto assign settings for tenant
  
      @param data - Dynamic assignment settings for professional and analyzer users. If professional users and analyzer users are both set, professional users will be automatically assigned, if available. Otherwise, analyzer users will be assigned. If neither of those users are available, analyzer capacity will be assigned, if available.
    */
    setSettings(data: SettingsBody): Promise<SettingsBody>;
    /**
    Gets the license status information of the current tenant
  
    */
    getStatus(): Promise<LicenseStatus>;
}
