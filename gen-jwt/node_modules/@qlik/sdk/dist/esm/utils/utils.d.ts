import { RestClientInstance } from '../auth/restClient.js';
import { Config } from '../types/types.js';
/**
 * Get an URL from host and isSecure option
 * @remarks
 * Ensures single slash dividing url path entries and fallback to secure URL
 * @param host - the url to sanitize
 * @param isSecure - if the url should use https, defaults to https if this param is omitted
 */
export declare const getUrl: (host: string, isSecure?: boolean) => URL;
/**
 * Validates the configuration object
 * @remarks

 * @param config - the config to validate
 */
export declare const validateConfig: (config: Config) => void;
/**
 * Validates the claims object
 * @param claims - the claims to validate
 */
export declare const validateClaims: (claims: any) => void;
/**
 * validates and checks defaults to the signingOptions object
 * @param options - the options to validate
 */
export declare const validateSigningOptions: (options: any) => void;
/**
 * Method helper for generating a random string [a-zA-Z0-9]{length}
 * @param length - the length of the string
 */
export declare const generateRandomString: (length: number) => string;
export declare const isBrowser: boolean;
/**
 * generateWebsocketUrl - For WebIntegration:
 * Assumes authenticated state in order to fetch the csrf-token.
 * @param appId - The appId to generate a websocket url for
 * @param rest - The rest client used for rest calls
 * @param config - The auth configuration that should be used
 * @param appendAccessToken - force appending accessToken for the wssURL default's to env isBrowser
 */
export declare const generateWebsocketUrl: (appId: string, rest: RestClientInstance, config: Config, appendAccessToken?: any) => Promise<string>;
