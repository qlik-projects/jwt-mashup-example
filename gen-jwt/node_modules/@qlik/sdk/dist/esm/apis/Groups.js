import Auth from "../auth/auth.js";
class Group {
  constructor({
    assignedRoles,
    createdAt,
    id,
    idpId,
    lastUpdatedAt,
    links,
    name,
    status,
    tenantId,
    ...rest
  }, auth) {
    this.auth = auth;
    if (assignedRoles !== void 0 && assignedRoles !== null) {
      if (assignedRoles.length > 0 && assignedRoles[0] instanceof GroupAssignedRoles) {
        this.assignedRoles = assignedRoles;
      } else {
        this.assignedRoles = assignedRoles.map((element) => new GroupAssignedRoles(element, this.auth));
      }
    }
    this.createdAt = createdAt;
    this.id = id;
    this.idpId = idpId;
    this.lastUpdatedAt = lastUpdatedAt;
    if (links instanceof GroupLinks) {
      this.links = links;
    } else {
      this.links = new GroupLinks(links, this.auth);
    }
    this.name = name;
    this.status = status;
    this.tenantId = tenantId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  async delete() {
    await this.auth.rest(
      "/groups/{groupId}".replace("{groupId}", this.id ?? ""),
      {
        method: "DELETE"
      }
    );
  }
}
class Filter {
  constructor({
    filter,
    ...rest
  }, auth) {
    this.auth = auth;
    this.filter = filter;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GroupAssignedRoles {
  constructor({
    id,
    level,
    name,
    permissions,
    type,
    ...rest
  }, auth) {
    this.auth = auth;
    this.id = id;
    this.level = level;
    this.name = name;
    this.permissions = permissions;
    this.type = type;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GroupLinks {
  constructor({
    self,
    ...rest
  }, auth) {
    this.auth = auth;
    if (self instanceof GroupLinksSelf) {
      this.self = self;
    } else {
      this.self = new GroupLinksSelf(self, this.auth);
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GroupLinksSelf {
  constructor({
    href,
    ...rest
  }, auth) {
    this.auth = auth;
    this.href = href;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GroupSettings {
  constructor({
    autoCreateGroups,
    links,
    syncIdpGroups,
    tenantId,
    ...rest
  }, auth) {
    this.auth = auth;
    this.autoCreateGroups = autoCreateGroups;
    if (links instanceof GroupSettingsLinks) {
      this.links = links;
    } else {
      this.links = new GroupSettingsLinks(links, this.auth);
    }
    this.syncIdpGroups = syncIdpGroups;
    this.tenantId = tenantId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GroupSettingsLinks {
  constructor({
    self,
    ...rest
  }, auth) {
    this.auth = auth;
    if (self instanceof GroupSettingsLinksSelf) {
      this.self = self;
    } else {
      this.self = new GroupSettingsLinksSelf(self, this.auth);
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GroupSettingsLinksSelf {
  constructor({
    href,
    ...rest
  }, auth) {
    this.auth = auth;
    this.href = href;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GroupsClass {
  constructor({
    data,
    links,
    totalResults,
    ...rest
  }, auth) {
    this.auth = auth;
    if (data !== void 0 && data !== null) {
      if (data.length > 0 && data[0] instanceof Group) {
        this.data = data;
      } else {
        this.data = data.map((element) => new Group(element, this.auth));
      }
    }
    if (links !== void 0 && links !== null) {
      if (links instanceof GroupsLinks) {
        this.links = links;
      } else {
        this.links = new GroupsLinks(links, this.auth);
      }
    }
    this.totalResults = totalResults;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GroupsLinks {
  constructor({
    next,
    prev,
    self,
    ...rest
  }, auth) {
    this.auth = auth;
    if (next !== void 0 && next !== null) {
      if (next instanceof GroupsLinksNext) {
        this.next = next;
      } else {
        this.next = new GroupsLinksNext(next, this.auth);
      }
    }
    if (prev !== void 0 && prev !== null) {
      if (prev instanceof GroupsLinksPrev) {
        this.prev = prev;
      } else {
        this.prev = new GroupsLinksPrev(prev, this.auth);
      }
    }
    if (self instanceof GroupsLinksSelf) {
      this.self = self;
    } else {
      this.self = new GroupsLinksSelf(self, this.auth);
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GroupsLinksNext {
  constructor({
    href,
    ...rest
  }, auth) {
    this.auth = auth;
    this.href = href;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GroupsLinksPrev {
  constructor({
    href,
    ...rest
  }, auth) {
    this.auth = auth;
    this.href = href;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GroupsLinksSelf {
  constructor({
    href,
    ...rest
  }, auth) {
    this.auth = auth;
    this.href = href;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SettingsPatch {
  constructor({
    op,
    path,
    value,
    ...rest
  }, auth) {
    this.auth = auth;
    this.op = op;
    this.path = path;
    this.value = value;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SettingsPatchSchema extends Array {
  constructor(arr, auth) {
    super();
    this.auth = auth;
    for (const e of arr) {
      this.push(new SettingsPatch(e, this.auth));
    }
  }
}
class Groups {
  constructor(config) {
    this.config = config instanceof Auth ? config.config : config;
    this.auth = config instanceof Auth ? config : new Auth(config);
  }
  async filter(data, queryParams = { limit: 20, sort: "+name" }) {
    const response = await this.auth.rest(
      `/groups/actions/filter?${Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => `${k}=${v}`).join("&")}`,
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    return new GroupsClass(responseJson, this.auth);
  }
  async getSettings() {
    const response = await this.auth.rest(
      "/groups/settings",
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new GroupSettings(responseJson, this.auth);
  }
  async patchSettings(data) {
    await this.auth.rest(
      "/groups/settings",
      {
        method: "PATCH",
        body: JSON.stringify(data)
      }
    );
  }
  async get(groupId) {
    const response = await this.auth.rest(
      "/groups/{groupId}".replace("{groupId}", groupId),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new Group(responseJson, this.auth);
  }
  async getGroups(queryParams = { limit: 20 }) {
    const response = await this.auth.rest(
      `/groups?${Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => `${k}=${v}`).join("&")}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new GroupsClass(responseJson, this.auth);
  }
}
export {
  Filter,
  Group,
  GroupAssignedRoles,
  GroupLinks,
  GroupLinksSelf,
  GroupSettings,
  GroupSettingsLinks,
  GroupSettingsLinksSelf,
  Groups,
  GroupsClass,
  GroupsLinks,
  GroupsLinksNext,
  GroupsLinksPrev,
  GroupsLinksSelf,
  SettingsPatch,
  SettingsPatchSchema
};
