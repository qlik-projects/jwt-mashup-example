/**
This is spectacularly generated code by spectacular v0.13.0 based on
Qlik Cloud Services 0.554.4
*/
import Auth from '../auth/auth.js';
import type { Config } from '../types/types.js';
/**
  @param connectorIds - A list of connectors used inside the workspace.
  @param createdAt
  @param description
  @param endpointIds - A list of endpoints used inside the workspace.
  @param executionToken
  @param id
  @param lastRun
  @param lastRunAt
  @param lastRunStatus
  @param name
  @param ownerId
  @param runMode
  @param schedules
  @param snippetIds - A list of snippets used inside the workspace.
  @param state
  @param updatedAt
  @param workspace - The workspace generated by the Qlik Application Automations editor.
  @param auth - Auth object used to make requests
 */
export declare class AutomationDetailResponseObject {
    auth: Auth;
    connectorIds?: Array<string>;
    createdAt?: string;
    description?: string;
    endpointIds?: Array<string>;
    executionToken?: string;
    id?: string;
    lastRun?: RunDetailResponseObject;
    lastRunAt?: string;
    lastRunStatus?: 'failed' | 'finished' | 'finished with warnings' | 'must stop' | 'not started' | 'paused' | 'running' | 'starting' | 'stopped' | string;
    name?: string;
    ownerId?: string;
    runMode?: 'manual' | 'scheduled' | 'triggered' | 'webhook' | string;
    schedules?: Array<ScheduleResponseObject>;
    snippetIds?: Array<string>;
    state?: 'available' | 'unavailable' | 'disabled' | string;
    updatedAt?: string;
    workspace?: object;
    [key: string]: any;
    constructor({ connectorIds, createdAt, description, endpointIds, executionToken, id, lastRun, lastRunAt, lastRunStatus, name, ownerId, runMode, schedules, snippetIds, state, updatedAt, workspace, ...rest }: {
        connectorIds?: Array<string>;
        createdAt?: string;
        description?: string;
        endpointIds?: Array<string>;
        executionToken?: string;
        id?: string;
        lastRun?: RunDetailResponseObject;
        lastRunAt?: string;
        lastRunStatus?: 'failed' | 'finished' | 'finished with warnings' | 'must stop' | 'not started' | 'paused' | 'running' | 'starting' | 'stopped' | string;
        name?: string;
        ownerId?: string;
        runMode?: 'manual' | 'scheduled' | 'triggered' | 'webhook' | string;
        schedules?: Array<ScheduleResponseObject>;
        snippetIds?: Array<string>;
        state?: 'available' | 'unavailable' | 'disabled' | string;
        updatedAt?: string;
        workspace?: object;
    }, auth?: Auth);
    /**
    Copy an automation.
  
      @param name - Name of the new automation.
    */
    copy(name: string): Promise<object>;
    /**
    Disables an automation.
  
    */
    disable(): Promise<void>;
    /**
    Enable an automation.
  
    */
    enable(): Promise<void>;
    /**    This step will remove the history and change logs of this automation. All linked connections used inside an automation will be detached.
    Move an automation to a different user.
  
      @param ownerId
    */
    move(ownerId: string): Promise<void>;
    /**
    Retrieves a list of runs for a specific automation.
  
      @param filter - Allowed filters: status, context, startTime and title
      @param limit - The number of runs to retrieve.
      @param sort - The field to sort by, with +- prefix indicating sort order. (?query=-startTime => sort on the startTime field using descending order)
    */
    getRuns(queryParams?: {
        filter?: string;
        limit?: number;
        sort?: 'id' | 'status' | 'startTime' | '-id' | '-status' | '-startTime' | '+id' | '+status' | '+startTime';
    }): Promise<RunList>;
    /**
    Create a run
  
      @param data - Run object to create
    */
    createRun(data: RunDetailRequestObject): Promise<RunDetailResponseObject>;
    /**
    Delete an automation
  
    */
    delete(): Promise<void>;
    /**
    Update an automation
  
      @param data - Automation object to update
    */
    set(data: AutomationDetailRequestObject): Promise<AutomationDetailResponseObject>;
}
/**
  @param description
  @param name
  @param schedules
  @param state
  @param workspace - The workspace generated by the Qlik Application Automations editor.
  @param auth - Auth object used to make requests
 */
export declare class AutomationDetailRequestObject {
    auth?: Auth;
    description?: string;
    name?: string;
    schedules?: Array<ScheduleRequestObject>;
    state?: 'available' | 'unavailable' | 'disabled' | string;
    workspace?: object;
    [key: string]: any;
    constructor({ description, name, schedules, state, workspace, ...rest }: {
        description?: string;
        name?: string;
        schedules?: Array<ScheduleRequestObject>;
        state?: 'available' | 'unavailable' | 'disabled' | string;
        workspace?: object;
    }, auth?: Auth);
}
/**
  @param data
  @param links
  @param auth - Auth object used to make requests
 */
export declare class AutomationList {
    auth?: Auth;
    data?: Array<AutomationListObject>;
    links?: Links;
    [key: string]: any;
    constructor({ data, links, ...rest }: {
        data?: Array<AutomationListObject>;
        links?: Links;
    }, auth?: Auth);
}
/**
  @param createdAt
  @param description
  @param id
  @param lastRunAt
  @param lastRunStatus
  @param name
  @param ownerId
  @param runMode
  @param state
  @param updatedAt
  @param auth - Auth object used to make requests
 */
export declare class AutomationListObject {
    auth?: Auth;
    createdAt?: string;
    description?: string;
    id?: string;
    lastRunAt?: string;
    lastRunStatus?: 'failed' | 'finished' | 'finished with warnings' | 'must stop' | 'not started' | 'paused' | 'running' | 'starting' | 'stopped' | string;
    name?: string;
    ownerId?: string;
    runMode?: 'manual' | 'scheduled' | 'triggered' | 'webhook' | string;
    state?: 'available' | 'unavailable' | 'disabled' | string;
    updatedAt?: string;
    [key: string]: any;
    constructor({ createdAt, description, id, lastRunAt, lastRunStatus, name, ownerId, runMode, state, updatedAt, ...rest }: {
        createdAt?: string;
        description?: string;
        id?: string;
        lastRunAt?: string;
        lastRunStatus?: 'failed' | 'finished' | 'finished with warnings' | 'must stop' | 'not started' | 'paused' | 'running' | 'starting' | 'stopped' | string;
        name?: string;
        ownerId?: string;
        runMode?: 'manual' | 'scheduled' | 'triggered' | 'webhook' | string;
        state?: 'available' | 'unavailable' | 'disabled' | string;
        updatedAt?: string;
    }, auth?: Auth);
}
/**
  @param guid - The unique identifier for the automation.
  @param name - The name for the automation.
  @param ownerId - The unique identifier for the user who owns the automation
  @param auth - Auth object used to make requests
 */
export declare class AutomationUsageObject {
    auth?: Auth;
    guid?: string;
    name?: string;
    ownerId?: string;
    [key: string]: any;
    constructor({ guid, name, ownerId, ...rest }: {
        guid?: string;
        name?: string;
        ownerId?: string;
    }, auth?: Auth);
}
/**
  @param next
  @param prev
  @param auth - Auth object used to make requests
 */
export declare class Links {
    auth?: Auth;
    next?: PaginationLink;
    prev?: PaginationLink;
    [key: string]: any;
    constructor({ next, prev, ...rest }: {
        next?: PaginationLink;
        prev?: PaginationLink;
    }, auth?: Auth);
}
/**
  @param href - The URL to a resource request
  @param auth - Auth object used to make requests
 */
export declare class PaginationLink {
    auth?: Auth;
    href?: string;
    [key: string]: any;
    constructor({ href, ...rest }: {
        href?: string;
    }, auth?: Auth);
}
/**
  @param context - The source that triggers the automation will set the context.
  @param id
  @param inputs
  @param auth - Auth object used to make requests
 */
export declare class RunDetailRequestObject {
    auth?: Auth;
    context: 'api' | string;
    id?: string;
    inputs?: object;
    [key: string]: any;
    constructor({ context, id, inputs, ...rest }: {
        context: 'api' | string;
        id?: string;
        inputs?: object;
    }, auth?: Auth);
}
/**
  @param context - The source that triggers the automation will set the context. Certain contexts impact the execution of an automation (for example, The "test_run" context will not process all results when listing items).
  @param createdAt
  @param error
  @param expectedInputs
  @param id
  @param inputs
  @param isArchived
  @param isTestRun
  @param metrics
  @param scheduledStartTime
  @param startTime
  @param status
  @param stopTime
  @param title
  @param updatedAt
  @param auth - Auth object used to make requests
 */
export declare class RunDetailResponseObject {
    auth?: Auth;
    context?: 'test_run' | 'editor' | 'detail' | 'api_sync' | 'api_async' | 'webhook' | 'lookup' | string;
    createdAt?: string;
    error?: object;
    expectedInputs?: object;
    id?: string;
    inputs?: object;
    isArchived?: boolean;
    isTestRun?: boolean;
    metrics?: RunDetailResponseObjectMetrics;
    scheduledStartTime?: string;
    startTime?: string;
    status?: 'failed' | 'finished' | 'finished with warnings' | 'must stop' | 'not started' | 'running' | 'starting' | 'stopped' | string;
    stopTime?: string;
    title?: string;
    updatedAt?: string;
    [key: string]: any;
    constructor({ context, createdAt, error, expectedInputs, id, inputs, isArchived, isTestRun, metrics, scheduledStartTime, startTime, status, stopTime, title, updatedAt, ...rest }: {
        context?: 'test_run' | 'editor' | 'detail' | 'api_sync' | 'api_async' | 'webhook' | 'lookup' | string;
        createdAt?: string;
        error?: object;
        expectedInputs?: object;
        id?: string;
        inputs?: object;
        isArchived?: boolean;
        isTestRun?: boolean;
        metrics?: RunDetailResponseObjectMetrics;
        scheduledStartTime?: string;
        startTime?: string;
        status?: 'failed' | 'finished' | 'finished with warnings' | 'must stop' | 'not started' | 'running' | 'starting' | 'stopped' | string;
        stopTime?: string;
        title?: string;
        updatedAt?: string;
    }, auth?: Auth);
}
/**
  @param blocks - List of blocks used during execution. Note: this list currently only contains endpointBlocks and snippetBlocks
  @param network
  @param totalApiCalls - The number of API calls made.
  @param auth - Auth object used to make requests
 */
export declare class RunDetailResponseObjectMetrics {
    auth?: Auth;
    blocks?: Array<RunDetailResponseObjectMetricsBlocks>;
    network?: RunDetailResponseObjectMetricsNetwork;
    totalApiCalls?: number;
    [key: string]: any;
    constructor({ blocks, network, totalApiCalls, ...rest }: {
        blocks?: Array<RunDetailResponseObjectMetricsBlocks>;
        network?: RunDetailResponseObjectMetricsNetwork;
        totalApiCalls?: number;
    }, auth?: Auth);
}
/**
  Information of the ended execution per block.
  @param apiCalls - API calls to external resources made by the current block.
  @param connectorId - Unique identifier for the connector used within the block of the execution.
  @param endpointId - Unique identifier for the snippet block used within the execution.
  @param rxBytes - Total amount of received bytes sent by the current block.
  @param snippetId - Unique identifier for the snippet block used within the execution.
  @param txBytes - Total amount of sent bytes sent by the current block.
  @param type - Type of the block.
  @param auth - Auth object used to make requests
 */
export declare class RunDetailResponseObjectMetricsBlocks {
    auth?: Auth;
    apiCalls?: number;
    connectorId?: string;
    endpointId?: string;
    rxBytes: number;
    snippetId?: string;
    txBytes: number;
    type: 'snippetBlock' | 'endpointBlock' | string;
    [key: string]: any;
    constructor({ apiCalls, connectorId, endpointId, rxBytes, snippetId, txBytes, type, ...rest }: {
        apiCalls?: number;
        connectorId?: string;
        endpointId?: string;
        rxBytes: number;
        snippetId?: string;
        txBytes: number;
        type: 'snippetBlock' | 'endpointBlock' | string;
    }, auth?: Auth);
}
/**
  @param rxBytes - The number of received bytes.
  @param txBytes - The number of received bytes.
  @param auth - Auth object used to make requests
 */
export declare class RunDetailResponseObjectMetricsNetwork {
    auth?: Auth;
    rxBytes?: number;
    txBytes?: number;
    [key: string]: any;
    constructor({ rxBytes, txBytes, ...rest }: {
        rxBytes?: number;
        txBytes?: number;
    }, auth?: Auth);
}
/**
  @param data
  @param links
  @param auth - Auth object used to make requests
 */
export declare class RunList {
    auth?: Auth;
    data?: Array<RunListObject>;
    links?: Links;
    [key: string]: any;
    constructor({ data, links, ...rest }: {
        data?: Array<RunListObject>;
        links?: Links;
    }, auth?: Auth);
}
/**
  @param context
  @param createdAt
  @param error
  @param id
  @param isArchived
  @param isTestRun
  @param scheduledStartTime
  @param startTime
  @param status
  @param stopTime
  @param title
  @param updatedAt
  @param auth - Auth object used to make requests
 */
export declare class RunListObject {
    auth?: Auth;
    context?: 'test_run' | 'editor' | 'detail' | 'api_sync' | 'api_async' | 'webhook' | 'lookup' | string;
    createdAt?: string;
    error?: object;
    id?: string;
    isArchived?: boolean;
    isTestRun?: boolean;
    scheduledStartTime?: string;
    startTime?: string;
    status?: 'failed' | 'finished' | 'finished with warnings' | 'must stop' | 'not started' | 'running' | 'starting' | 'stopped' | string;
    stopTime?: string;
    title?: string;
    updatedAt?: string;
    [key: string]: any;
    constructor({ context, createdAt, error, id, isArchived, isTestRun, scheduledStartTime, startTime, status, stopTime, title, updatedAt, ...rest }: {
        context?: 'test_run' | 'editor' | 'detail' | 'api_sync' | 'api_async' | 'webhook' | 'lookup' | string;
        createdAt?: string;
        error?: object;
        id?: string;
        isArchived?: boolean;
        isTestRun?: boolean;
        scheduledStartTime?: string;
        startTime?: string;
        status?: 'failed' | 'finished' | 'finished with warnings' | 'must stop' | 'not started' | 'running' | 'starting' | 'stopped' | string;
        stopTime?: string;
        title?: string;
        updatedAt?: string;
    }, auth?: Auth);
}
/**
  @param interval - time in seconds.
  @param startAt
  @param stopAt
  @param timezone
  @param auth - Auth object used to make requests
 */
export declare class ScheduleRequestObject {
    auth?: Auth;
    interval?: number;
    startAt?: string;
    stopAt?: string;
    timezone?: string;
    [key: string]: any;
    constructor({ interval, startAt, stopAt, timezone, ...rest }: {
        interval?: number;
        startAt?: string;
        stopAt?: string;
        timezone?: string;
    }, auth?: Auth);
}
/**
  @param id
  @param interval - time in seconds.
  @param lastStartedAt
  @param startAt
  @param stopAt
  @param timezone
  @param auth - Auth object used to make requests
 */
export declare class ScheduleResponseObject {
    auth?: Auth;
    id?: string;
    interval?: number;
    lastStartedAt?: string;
    startAt?: string;
    stopAt?: string;
    timezone?: string;
    [key: string]: any;
    constructor({ id, interval, lastStartedAt, startAt, stopAt, timezone, ...rest }: {
        id?: string;
        interval?: number;
        lastStartedAt?: string;
        startAt?: string;
        stopAt?: string;
        timezone?: string;
    }, auth?: Auth);
}
/**
  @param automationsEnabled
  @param auth - Auth object used to make requests
 */
export declare class SettingsObject {
    auth?: Auth;
    automationsEnabled?: boolean;
    [key: string]: any;
    constructor({ automationsEnabled, ...rest }: {
        automationsEnabled?: boolean;
    }, auth?: Auth);
}
/**
  @param data
  @param auth - Auth object used to make requests
 */
export declare class UsageList {
    auth?: Auth;
    data?: Array<UsageObject>;
    [key: string]: any;
    constructor({ data, ...rest }: {
        data?: Array<UsageObject>;
    }, auth?: Auth);
}
/**
  @param automation
  @param date - The date for the metric
  @param name - The name for the metric
  @param value - The value count of the metric
  @param auth - Auth object used to make requests
 */
export declare class UsageObject {
    auth?: Auth;
    automation?: AutomationUsageObject;
    date: string;
    name: 'runs' | 'scheduledRun' | 'triggeredRun' | 'webhookRuns' | 'duration' | 'bandwidthIn' | 'bandwidthOut' | string;
    value: number;
    [key: string]: any;
    constructor({ automation, date, name, value, ...rest }: {
        automation?: AutomationUsageObject;
        date: string;
        name: 'runs' | 'scheduledRun' | 'triggeredRun' | 'webhookRuns' | 'duration' | 'bandwidthIn' | 'bandwidthOut' | string;
        value: number;
    }, auth?: Auth);
}
export declare class Automations {
    auth: Auth;
    config: Config;
    constructor(config: Config | Auth);
    /**
    Retrieves the automation settings.
  
    */
    getSettings(): Promise<SettingsObject>;
    /**
    Update the automation settings.
  
      @param data
    */
    setSettings(data: SettingsObject): Promise<SettingsObject>;
    /**    Limitations:
   * Maximum 1000 metrics per API call
    Retrieves all automation usage for a tenant
  
      @param filter - Indicates how the metrics should be filtered
      @param breakdown - If specified, result will be broken apart for each automation
    */
    getUsages(queryParams: {
        filter: string;
        breakdown?: string;
    }): Promise<UsageList>;
    /**    Creates a temporary pre-signed AWS S3 URL to download the raw logs of a completed run. This URL is valid for 5 minutes.
    Export a run.
  
      @param automationId - The unique identifier for the automation.
      @param runId - The unique identifier for the run.
    */
    export(automationId: string, runId: string): Promise<object>;
    /**    This action allows you to retry a specific run by creating a new run using the same inputs.
    Retry a run.
  
      @param automationId - The unique identifier for the automation.
      @param runId - The unique identifier for the run.
    */
    retry(automationId: string, runId: string): Promise<void>;
    /**    Force a run to be stopped immediately.
    Stop a running automation.
  
      @param automationId - The unique identifier for the automation.
      @param runId - The unique identifier for the run.
    */
    stop(automationId: string, runId: string): Promise<void>;
    /**
    Retrieves a run
  
      @param automationId - The unique identifier for the automation.
      @param runId - The unique identifier for the run.
    */
    getRun(automationId: string, runId: string): Promise<RunDetailResponseObject>;
    /**
    Retrieves an automation
  
      @param id - The unique identifier for the automation.
    */
    get(id: string): Promise<AutomationDetailResponseObject>;
    /**
    Retrieves a list of automations
  
      @param filter - Allowed filters: name, runMode, lastRunStatus, ownerId
      @param limit - The number of automations to retrieve.
      @param sort - The field to sort by, with +- prefix indicating sort order. (?query=-name => sort on the name field using descending order)
    */
    getAutomations(queryParams?: {
        filter?: string;
        limit?: number;
        sort?: 'id' | 'name' | 'runMode' | 'state' | 'createdAt' | 'updatedAt' | 'lastRunAt' | 'lastRunStatus' | '+id' | '+name' | '+runMode' | '+state' | '+createdAt' | '+updatedAt' | '+lastRunAt' | '+lastRunStatus' | '-id' | '-name' | '-runMode' | '-state' | '-createdAt' | '-updatedAt' | '-lastRunAt' | '-lastRunStatus';
    }): Promise<AutomationList>;
    /**
    Create an automation
  
      @param data - Automation object to create
    */
    create(data: AutomationDetailRequestObject): Promise<AutomationDetailResponseObject>;
}
