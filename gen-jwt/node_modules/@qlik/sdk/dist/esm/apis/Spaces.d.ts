/**
This is spectacularly generated code by spectacular v0.13.0 based on
Qlik Cloud Services 0.554.4
*/
import Auth from '../auth/auth.js';
import type { Config } from '../types/types.js';
/**
  A space is a security context simplifying the management of access control by allowing users to control it on the containers instead of on the resources themselves.
  @param createdAt - The date and time when the space was created.
  @param createdBy - The ID of the user who created the space.
  @param description - The description of the space. Personal spaces do not have a description.
  @param id - A unique identifier for the space, for example, 62716f4b39b865ece543cd45.
  @param links
  @param meta - Information about the space settings.
  @param name - The name of the space. Personal spaces do not have a name.
  @param ownerId - The ID for the space owner.
  @param tenantId - The ID for the tenant, for example, xqGQ0k66vSR8f9G7J-vYtHZQkiYrCpct.
  @param type - The type of space such as shared, managed, and so on.
  @param updatedAt - The date and time when the space was updated.
  @param auth - Auth object used to make requests
 */
export declare class Space {
    auth: Auth;
    createdAt?: string;
    createdBy?: string;
    description?: string;
    id: string;
    links: SpaceLinks;
    meta?: SpaceMeta;
    name: string;
    ownerId?: string;
    tenantId: string;
    type?: 'shared' | 'managed' | 'data' | string;
    updatedAt?: string;
    [key: string]: any;
    constructor({ createdAt, createdBy, description, id, links, meta, name, ownerId, tenantId, type, updatedAt, ...rest }: {
        createdAt?: string;
        createdBy?: string;
        description?: string;
        id: string;
        links: SpaceLinks;
        meta?: SpaceMeta;
        name: string;
        ownerId?: string;
        tenantId: string;
        type?: 'shared' | 'managed' | 'data' | string;
        updatedAt?: string;
    }, auth?: Auth);
    /**
    Retrieves the assignments of the space matching the query.
  
      @param limit - Maximum number of assignments to return.
      @param next - The next page cursor. Next links make use of this.
      @param prev - The previous page cursor. Previous links make use of this.
    */
    getAssignments(queryParams?: {
        limit?: number;
        next?: string;
        prev?: string;
    }): Promise<Assignments>;
    /**
    Creates an assignment.
  
      @param data - Attributes that the user wants to set for the assignment for the space.
    */
    createAssignment(data: AssignmentCreate): Promise<Assignment>;
    /**
    Deletes a space.
  
    */
    delete(): Promise<void>;
    /**
    Patches (updates) a space (partially).
  
      @param data - Attribute that the user wants to patch (update) for the specified space.
    */
    patch(data: SpacePatch): Promise<Space>;
    /**
    Updates a space.
  
      @param data - Attributes that the user wants to update for the specified space.
    */
    set(data: SpaceUpdate): Promise<Space>;
}
/**
  @param assigneeId - The userId or groupId based on the type.
  @param createdAt - The date and time when the space was created.
  @param createdBy - The ID of the user who created the assignment.
  @param id
  @param links
  @param roles - The roles assigned to a user or group. Must not be empty.
  @param spaceId - The unique identifier for the space.
  @param tenantId - The unique identifier for the tenant.
  @param type
  @param updatedAt - The date and time when the space was updated.
  @param updatedBy - The ID of the user who updated the assignment.
  @param auth - Auth object used to make requests
 */
export declare class Assignment {
    auth?: Auth;
    assigneeId: string;
    createdAt?: string;
    createdBy?: string;
    id: string;
    links: AssignmentLinks;
    roles: Array<string>;
    spaceId: string;
    tenantId: string;
    type: 'user' | 'group' | string;
    updatedAt?: string;
    updatedBy?: string;
    [key: string]: any;
    constructor({ assigneeId, createdAt, createdBy, id, links, roles, spaceId, tenantId, type, updatedAt, updatedBy, ...rest }: {
        assigneeId: string;
        createdAt?: string;
        createdBy?: string;
        id: string;
        links: AssignmentLinks;
        roles: Array<string>;
        spaceId: string;
        tenantId: string;
        type: 'user' | 'group' | string;
        updatedAt?: string;
        updatedBy?: string;
    }, auth?: Auth);
}
/**
  @param assigneeId - The userId or groupId based on the type.
  @param roles - The roles assigned to the assigneeId.
  @param type - The type of space such as shared, managed, and so on.
  @param auth - Auth object used to make requests
 */
export declare class AssignmentCreate {
    auth?: Auth;
    assigneeId: string;
    roles: Array<string>;
    type: 'user' | 'group' | string;
    [key: string]: any;
    constructor({ assigneeId, roles, type, ...rest }: {
        assigneeId: string;
        roles: Array<string>;
        type: 'user' | 'group' | string;
    }, auth?: Auth);
}
/**
  @param self
  @param space
  @param auth - Auth object used to make requests
 */
export declare class AssignmentLinks {
    auth?: Auth;
    self: Link;
    space?: Link;
    [key: string]: any;
    constructor({ self, space, ...rest }: {
        self: Link;
        space?: Link;
    }, auth?: Auth);
}
/**
  @param roles - The roles assigned to the assigneeId.
  @param auth - Auth object used to make requests
 */
export declare class AssignmentUpdate {
    auth?: Auth;
    roles?: Array<string>;
    [key: string]: any;
    constructor({ roles, ...rest }: {
        roles?: Array<string>;
    }, auth?: Auth);
}
/**
  @param data
  @param links
  @param meta
  @param auth - Auth object used to make requests
 */
export declare class Assignments {
    auth?: Auth;
    data?: Array<Assignment>;
    links?: AssignmentsLinks;
    meta?: AssignmentsMeta;
    [key: string]: any;
    constructor({ data, links, meta, ...rest }: {
        data?: Array<Assignment>;
        links?: AssignmentsLinks;
        meta?: AssignmentsMeta;
    }, auth?: Auth);
}
/**
  @param next
  @param prev
  @param self
  @param auth - Auth object used to make requests
 */
export declare class AssignmentsLinks {
    auth?: Auth;
    next?: Link;
    prev?: Link;
    self: Link;
    [key: string]: any;
    constructor({ next, prev, self, ...rest }: {
        next?: Link;
        prev?: Link;
        self: Link;
    }, auth?: Auth);
}
/**
  @param count - The total number of assignments matching the current filter.
  @param auth - Auth object used to make requests
 */
export declare class AssignmentsMeta {
    auth?: Auth;
    count: number;
    [key: string]: any;
    constructor({ count, ...rest }: {
        count: number;
    }, auth?: Auth);
}
/**
  @param href - URL that defines the resource.
  @param auth - Auth object used to make requests
 */
export declare class Link {
    auth?: Auth;
    href: string;
    [key: string]: any;
    constructor({ href, ...rest }: {
        href: string;
    }, auth?: Auth);
}
/**
  @param description - The description of the space. Personal spaces do not have a description.
  @param name - The name of the space. Personal spaces do not have a name.
  @param type - The type of space such as shared, managed, and so on.
  @param auth - Auth object used to make requests
 */
export declare class SpaceCreate {
    auth?: Auth;
    description?: string;
    name: string;
    type: 'shared' | 'managed' | 'data' | string;
    [key: string]: any;
    constructor({ description, name, type, ...rest }: {
        description?: string;
        name: string;
        type: 'shared' | 'managed' | 'data' | string;
    }, auth?: Auth);
}
/**
  @param assignments
  @param self
  @param auth - Auth object used to make requests
 */
export declare class SpaceLinks {
    auth?: Auth;
    assignments: Link;
    self: Link;
    [key: string]: any;
    constructor({ assignments, self, ...rest }: {
        assignments: Link;
        self: Link;
    }, auth?: Auth);
}
/**
  Information about the space settings.
  @param actions - The list of actions allowed by the current user in this space.
  @param assignableRoles - The list of roles that could be assigned in this space.
  @param roles - The list of roles assigned to the current user in this space.
  @param auth - Auth object used to make requests
 */
export declare class SpaceMeta {
    auth?: Auth;
    actions: Array<string>;
    assignableRoles: Array<string>;
    roles: Array<string>;
    [key: string]: any;
    constructor({ actions, assignableRoles, roles, ...rest }: {
        actions: Array<string>;
        assignableRoles: Array<string>;
        roles: Array<string>;
    }, auth?: Auth);
}
export declare class SpacePatch {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  The distinct types of spaces (shared, managed, and so on).
  @param data
  @param auth - Auth object used to make requests
 */
export declare class SpaceTypes {
    auth?: Auth;
    data?: Array<string>;
    [key: string]: any;
    constructor({ data, ...rest }: {
        data?: Array<string>;
    }, auth?: Auth);
}
/**
  @param description - The description of the space. Personal spaces do not have a description.
  @param name - The name of the space.
  @param ownerId - The user ID of the space owner.
  @param auth - Auth object used to make requests
 */
export declare class SpaceUpdate {
    auth?: Auth;
    description?: string;
    name?: string;
    ownerId?: string;
    [key: string]: any;
    constructor({ description, name, ownerId, ...rest }: {
        description?: string;
        name?: string;
        ownerId?: string;
    }, auth?: Auth);
}
/**
  @param data
  @param links
  @param meta
  @param auth - Auth object used to make requests
 */
export declare class SpacesClass {
    auth?: Auth;
    data?: Array<Space>;
    links?: SpacesLinks;
    meta?: SpacesMeta;
    [key: string]: any;
    constructor({ data, links, meta, ...rest }: {
        data?: Array<Space>;
        links?: SpacesLinks;
        meta?: SpacesMeta;
    }, auth?: Auth);
}
/**
  @param next
  @param prev
  @param self
  @param auth - Auth object used to make requests
 */
export declare class SpacesLinks {
    auth?: Auth;
    next?: Link;
    prev?: Link;
    self: Link;
    [key: string]: any;
    constructor({ next, prev, self, ...rest }: {
        next?: Link;
        prev?: Link;
        self: Link;
    }, auth?: Auth);
}
/**
  @param count - The total number of spaces matching the current filter.
  @param personalSpace - The meta related to personal space when applicable.
  @param auth - Auth object used to make requests
 */
export declare class SpacesMeta {
    auth?: Auth;
    count: number;
    personalSpace?: SpacesMetaPersonalSpace;
    [key: string]: any;
    constructor({ count, personalSpace, ...rest }: {
        count: number;
        personalSpace?: SpacesMetaPersonalSpace;
    }, auth?: Auth);
}
/**
  The meta related to personal space when applicable.
  @param actions - The list of actions allowed by the current user in this space.
  @param resourceType - resource type
  @param auth - Auth object used to make requests
 */
export declare class SpacesMetaPersonalSpace {
    auth?: Auth;
    actions: Array<string>;
    resourceType: string;
    [key: string]: any;
    constructor({ actions, resourceType, ...rest }: {
        actions: Array<string>;
        resourceType: string;
    }, auth?: Auth);
}
export declare class Spaces {
    auth: Auth;
    config: Config;
    constructor(config: Config | Auth);
    /**
    Gets a list of distinct space types.
  
    */
    getTypes(): Promise<SpaceTypes>;
    /**
    Deletes an assignment.
  
      @param assignmentId - The ID of the assignment to delete.
      @param spaceId - The ID of the space of the assignment.
    */
    deleteAssignment(assignmentId: string, spaceId: string): Promise<void>;
    /**
    Retrieves a single assignment by ID.
  
      @param assignmentId - The ID of the assignment to retrieve.
      @param spaceId - The ID of the space of the assignment.
    */
    getAssignment(assignmentId: string, spaceId: string): Promise<Assignment>;
    /**
    Updates a single assignment by ID. The complete list of roles must be provided.
  
      @param assignmentId - The ID of the assignment to update.
      @param spaceId - The ID of the space of the assignment.
      @param data - Attributes that the user wants to update for the specified assignment.
    */
    setAssignment(assignmentId: string, spaceId: string, data: AssignmentUpdate): Promise<Assignment>;
    /**
    Retrieves a single space by ID.
  
      @param spaceId - The ID of the space to retrieve.
    */
    get(spaceId: string): Promise<Space>;
    /**
    Retrieves spaces that the current user has access to and match the query.
  
      @param action - Action on space. For example, "?action=publish".
      @param filter - Exact match filtering on space name using SCIM. Case insensitive on attribute name. For example ?filter=name eq "MySpace" and ?filter=NAME eq "MySpace" is both valid.
      @param limit - Maximum number of spaces to return.
      @param name - Space name to search and filter for. Case-insensitive open search with wildcards both as prefix and suffix. For example, "?name=fin" will get "finance", "Final" and "Griffin".
      @param next - The next page cursor. Next links make use of this.
      @param ownerId - Space ownerId to filter by. For example, "?ownerId=123".
      @param prev - The previous page cursor. Previous links make use of this.
      @param sort - Field to sort by. Prefix with +/- to indicate asc/desc. For example, "?sort=+name" to sort ascending on Name. Supported fields are "type", "name" and "createdAt".
      @param type - Type(s) of space to filter. For example, "?type=managed,shared".
    */
    getSpaces(queryParams?: {
        action?: string;
        filter?: string;
        limit?: number;
        name?: string;
        next?: string;
        ownerId?: string;
        prev?: string;
        sort?: string;
        type?: string;
    }): Promise<SpacesClass>;
    /**
    Creates a space.
  
      @param data - Attributes that the user wants to set for a new space.
    */
    create(data: SpaceCreate): Promise<Space>;
}
