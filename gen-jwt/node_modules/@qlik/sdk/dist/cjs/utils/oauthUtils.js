var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var oauthUtils_exports = {};
__export(oauthUtils_exports, {
  generateAuthorizationUrl: () => generateAuthorizationUrl
});
module.exports = __toCommonJS(oauthUtils_exports);
var import_utils = require("./utils.js");
const sha256 = async (message) => {
  const crypTo = true ? (await import("crypto")).webcrypto : window.crypto;
  const msgBuffer = true ? new (await import("util")).TextEncoder().encode(message) : new TextEncoder().encode(message);
  const hashBuffer = await crypTo.subtle.digest("SHA-256", msgBuffer);
  const hashArray = Array.from(new Uint8Array(hashBuffer));
  const hashBase64 = btoa(hashArray.map((byte) => String.fromCharCode(byte)).join(""));
  return hashBase64.replaceAll(/\+/g, "-").replaceAll(/\//g, "_").replace(/=+$/, "");
};
const generateCodeChallenge = async () => {
  const verifier = (0, import_utils.generateRandomString)(43);
  const challenge = await sha256(verifier);
  return { verifier, challenge };
};
const generateAuthorizationUrl = async (config, state) => {
  const { verifier, challenge: codeChallenge } = await generateCodeChallenge();
  const queryParams = {
    response_type: "code",
    client_id: config.clientId,
    redirect_uri: config.redirectUri,
    scope: config.scopes.join(" "),
    state: state || (0, import_utils.generateRandomString)(7),
    code_challenge: codeChallenge,
    code_challenge_method: "S256"
  };
  const queryParamsKeys = Object.keys(queryParams);
  queryParamsKeys.sort();
  const query = queryParamsKeys.map((k) => `${k}=${queryParams[k]}`).join("&");
  return { url: (0, import_utils.getUrl)(`${config.host.replace(/^https?:/, "")}/oauth/authorize?${query}`, config?.isSecure).href, verifier, state: queryParams.state };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  generateAuthorizationUrl
});
