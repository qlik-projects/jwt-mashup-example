var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Identity_Providers_exports = {};
__export(Identity_Providers_exports, {
  IDP: () => IDP,
  IDPArray: () => IDPArray,
  IDPMeta: () => IDPMeta,
  IDPPatchSchema: () => IDPPatchSchema,
  IDPPostSchema: () => IDPPostSchema,
  IDPsStatus: () => IDPsStatus,
  IDPsStatusIdpsMetadata: () => IDPsStatusIdpsMetadata,
  IdentityProviders: () => IdentityProviders,
  Links: () => Links,
  LinksNext: () => LinksNext,
  LinksPrev: () => LinksPrev,
  LinksSelf: () => LinksSelf
});
module.exports = __toCommonJS(Identity_Providers_exports);
var import_auth = __toESM(require("../auth/auth.js"));
class IDP {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class IDPArray {
  constructor({
    data,
    links,
    ...rest
  }, auth) {
    this.auth = auth;
    if (data !== void 0 && data !== null) {
      if (data.length > 0 && data[0] instanceof IDP) {
        this.data = data;
      } else {
        this.data = data.map((element) => new IDP(element, this.auth));
      }
    }
    if (links !== void 0 && links !== null) {
      if (links instanceof Links) {
        this.links = links;
      } else {
        this.links = new Links(links, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class IDPMeta {
  constructor({
    upgradeSubscriptionLink,
    userPortalLink,
    ...rest
  }, auth) {
    this.auth = auth;
    this.upgradeSubscriptionLink = upgradeSubscriptionLink;
    this.userPortalLink = userPortalLink;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class IDPPatchSchema {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class IDPPostSchema {
  constructor({
    ...rest
  }, auth) {
    this.auth = auth;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class IDPsStatus {
  constructor({
    active_interactive_idps_count,
    idps_metadata,
    ...rest
  }, auth) {
    this.auth = auth;
    this.active_interactive_idps_count = active_interactive_idps_count;
    if (idps_metadata !== void 0 && idps_metadata !== null) {
      if (idps_metadata.length > 0 && idps_metadata[0] instanceof IDPsStatusIdpsMetadata) {
        this.idps_metadata = idps_metadata;
      } else {
        this.idps_metadata = idps_metadata.map((element) => new IDPsStatusIdpsMetadata(element, this.auth));
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class IDPsStatusIdpsMetadata {
  constructor({
    active,
    interactive,
    provider,
    ...rest
  }, auth) {
    this.auth = auth;
    this.active = active;
    this.interactive = interactive;
    this.provider = provider;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Links {
  constructor({
    next,
    prev,
    self,
    ...rest
  }, auth) {
    this.auth = auth;
    if (next !== void 0 && next !== null) {
      if (next instanceof LinksNext) {
        this.next = next;
      } else {
        this.next = new LinksNext(next, this.auth);
      }
    }
    if (prev !== void 0 && prev !== null) {
      if (prev instanceof LinksPrev) {
        this.prev = prev;
      } else {
        this.prev = new LinksPrev(prev, this.auth);
      }
    }
    if (self !== void 0 && self !== null) {
      if (self instanceof LinksSelf) {
        this.self = self;
      } else {
        this.self = new LinksSelf(self, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class LinksNext {
  constructor({
    href,
    ...rest
  }, auth) {
    this.auth = auth;
    this.href = href;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class LinksPrev {
  constructor({
    href,
    ...rest
  }, auth) {
    this.auth = auth;
    this.href = href;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class LinksSelf {
  constructor({
    href,
    ...rest
  }, auth) {
    this.auth = auth;
    this.href = href;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class IdentityProviders {
  constructor(config) {
    this.config = config instanceof import_auth.default ? config.config : config;
    this.auth = config instanceof import_auth.default ? config : new import_auth.default(config);
  }
  async getWellKnownMetadataJson() {
    const response = await this.auth.rest(
      "/identity-providers/.well-known/metadata.json",
      {
        method: "GET"
      }
    );
    return response;
  }
  async getMeMeta() {
    const response = await this.auth.rest(
      "/identity-providers/me/meta",
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new IDPMeta(responseJson, this.auth);
  }
  async getStatus() {
    const response = await this.auth.rest(
      "/identity-providers/status",
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new IDPsStatus(responseJson, this.auth);
  }
  async delete(id) {
    await this.auth.rest(
      "/identity-providers/{id}".replace("{id}", id),
      {
        method: "DELETE"
      }
    );
  }
  async get(id) {
    const response = await this.auth.rest(
      "/identity-providers/{id}".replace("{id}", id),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new IDP(responseJson, this.auth);
  }
  async patch(id, data) {
    await this.auth.rest(
      "/identity-providers/{id}".replace("{id}", id),
      {
        method: "PATCH",
        body: JSON.stringify(data)
      }
    );
  }
  async getIdentityProviders(queryParams = { limit: 20 }) {
    const response = await this.auth.rest(
      `/identity-providers?${Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => `${k}=${v}`).join("&")}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new IDPArray(responseJson, this.auth);
  }
  async create(data) {
    const response = await this.auth.rest(
      "/identity-providers",
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    return new IDP(responseJson, this.auth);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  IDP,
  IDPArray,
  IDPMeta,
  IDPPatchSchema,
  IDPPostSchema,
  IDPsStatus,
  IDPsStatusIdpsMetadata,
  IdentityProviders,
  Links,
  LinksNext,
  LinksPrev,
  LinksSelf
});
