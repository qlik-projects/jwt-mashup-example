/**
This is spectacularly generated code by spectacular v0.13.0 based on
Qlik Cloud Services 0.554.4
*/
import Auth from '../auth/auth.js';
import type { Config } from '../types/types.js';
export declare class IDP {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param data - An array of IdPs.
  @param links - Contains pagination links.
  @param auth - Auth object used to make requests
 */
export declare class IDPArray {
    auth?: Auth;
    data?: Array<IDP>;
    links?: Links;
    [key: string]: any;
    constructor({ data, links, ...rest }: {
        data?: Array<IDP>;
        links?: Links;
    }, auth?: Auth);
}
/**
  @param upgradeSubscriptionLink - A link to direct you to where you can upgrade your trial or manage your subscriptions. Only available if the default identity provider is used (no custom interactive identity providers are active).
  @param userPortalLink - A link to direct you to where you can manage your Qlik account. Only available if the default identity provider is used (no custom interactive identity providers are active).
  @param auth - Auth object used to make requests
 */
export declare class IDPMeta {
    auth?: Auth;
    upgradeSubscriptionLink?: string;
    userPortalLink?: string;
    [key: string]: any;
    constructor({ upgradeSubscriptionLink, userPortalLink, ...rest }: {
        upgradeSubscriptionLink?: string;
        userPortalLink?: string;
    }, auth?: Auth);
}
export declare class IDPPatchSchema {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
export declare class IDPPostSchema {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor({ ...rest }: {}, auth?: Auth);
}
/**
  @param active_interactive_idps_count - The number of active interactive IdPs.
  @param idps_metadata - A list of IdP metadata.
  @param auth - Auth object used to make requests
 */
export declare class IDPsStatus {
    auth?: Auth;
    active_interactive_idps_count?: number;
    idps_metadata?: Array<IDPsStatusIdpsMetadata>;
    [key: string]: any;
    constructor({ active_interactive_idps_count, idps_metadata, ...rest }: {
        active_interactive_idps_count?: number;
        idps_metadata?: Array<IDPsStatusIdpsMetadata>;
    }, auth?: Auth);
}
/**
  @param active - Indicates whether the IdP is available for use.
  @param interactive - Indicates whether the IdP is meant for interactive login.
  @param provider - The identity provider to be used. If protocol is `OIDC`, the valid values are `auth0`, `okta`, `generic`, `salesforce`, `keycloak`, `adfs`, and `azureAD`. If protocol is `jwtAuth`, the valid value is `external`.
  @param auth - Auth object used to make requests
 */
export declare class IDPsStatusIdpsMetadata {
    auth?: Auth;
    active?: boolean;
    interactive?: boolean;
    provider?: 'auth0' | 'okta' | 'qlik' | 'generic' | 'salesforce' | 'keycloak' | 'adfs' | 'external' | 'azureAD' | string;
    [key: string]: any;
    constructor({ active, interactive, provider, ...rest }: {
        active?: boolean;
        interactive?: boolean;
        provider?: 'auth0' | 'okta' | 'qlik' | 'generic' | 'salesforce' | 'keycloak' | 'adfs' | 'external' | 'azureAD' | string;
    }, auth?: Auth);
}
/**
  Contains pagination links.
  @param next
  @param prev
  @param self
  @param auth - Auth object used to make requests
 */
export declare class Links {
    auth?: Auth;
    next?: LinksNext;
    prev?: LinksPrev;
    self?: LinksSelf;
    [key: string]: any;
    constructor({ next, prev, self, ...rest }: {
        next?: LinksNext;
        prev?: LinksPrev;
        self?: LinksSelf;
    }, auth?: Auth);
}
/**
  @param href - Link to the next page of items.
  @param auth - Auth object used to make requests
 */
export declare class LinksNext {
    auth?: Auth;
    href?: string;
    [key: string]: any;
    constructor({ href, ...rest }: {
        href?: string;
    }, auth?: Auth);
}
/**
  @param href - Link to the previous page of items.
  @param auth - Auth object used to make requests
 */
export declare class LinksPrev {
    auth?: Auth;
    href?: string;
    [key: string]: any;
    constructor({ href, ...rest }: {
        href?: string;
    }, auth?: Auth);
}
/**
  @param href - Link to the current page of items.
  @param auth - Auth object used to make requests
 */
export declare class LinksSelf {
    auth?: Auth;
    href?: string;
    [key: string]: any;
    constructor({ href, ...rest }: {
        href?: string;
    }, auth?: Auth);
}
export declare class IdentityProviders {
    auth: Auth;
    config: Config;
    constructor(config: Config | Auth);
    /**    This endpoint retrieves identity providers' metadata.
    Returns identity providers' metadata
  
    */
    getWellKnownMetadataJson(): Promise<object>;
    /**    This endpoint retrieves IdP metadata.
    Returns the active interactive IdP metadata
  
    */
    getMeMeta(): Promise<IDPMeta>;
    /**    This endpoint retrieves the status of IdP configurations. Requires TenantAdmin role.
    Returns the current status of IdP configurations
  
    */
    getStatus(): Promise<IDPsStatus>;
    /**    This endpoint deletes an identity provider from the service. It returns a valid 204 when the IdP is deleted. Only a user with the role of TenantAdmin and tenant access can delete an associated IdP. Edge-auth service can also delete.
    Deletes the IdP with the specified ID
  
      @param id - The identity provider ID.
    */
    delete(id: string): Promise<void>;
    /**    This endpoint is used to retrieve an identity provider from the service. It returns a valid 200 OK response when the IdP exists and the user (TenantAdmin) or service (edge-auth) is authorized to view the contents. Additionally, returns a header "QLIK-IDP-POPTS" (A unique string representing a hash of the current configuration being tested). It returns a 404 Not Found if the criteria is not met.
    Returns the IdP with the specified ID
  
      @param id - The identity provider ID.
    */
    get(id: string): Promise<IDP>;
    /**    This endpoint patches an identity provider from the service. It returns a valid 204 when the IdP is patched. Only an edge-auth service request or a user with the role of TenantAdmin can patch an associated IdP. Partial failure is treated as complete failure and returns an error.
    Updates the IdP with the specified ID
  
      @param id - The identity provider ID.
      @param QLIK-IDP-POPTS-MATCH - A unique string representing a hash that should map to an IdP's hash representation of the current configuration being tested.
      @param data - Attributes that the user wants to patially update for an identity provider resource.
    */
    patch(id: string, data: IDPPatchSchema): Promise<void>;
    /**    This endpoint retrieves one or more identity providers from the service. The tenantID in the JWT will be used to fetch the identity provider.
    Retrieves one or more IdPs for a specified tenantId.
  
      @param active - If provided, filters the results by the active field.
      @param limit - The number of IdP entries to retrieve.
      @param next - The next page cursor.
      @param prev - The previous page cursor.
    */
    getIdentityProviders(queryParams?: {
        active?: boolean;
        limit?: number;
        next?: string;
        prev?: string;
    }): Promise<IDPArray>;
    /**    This endpoint creates an identity provider resource. It returns a 201 Created when creation is successful with a header "QLIK-IDP-POPTS" (A unique string representing a hash of the current configuration being tested), returns a 403 Forbidden for a non TenantAdmin user JWT or if the tenantID in the JWT does not match with any of the tenantIDs in the payload. An IdP can be created with Pending Options or options depending whether the IdP is interactive or not.
    Creates a new IdP
  
      @param data - Attributes that the user wants to set for a new identity provider resource.
    */
    create(data: IDPPostSchema): Promise<IDP>;
}
