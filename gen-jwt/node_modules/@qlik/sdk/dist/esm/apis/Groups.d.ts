/**
This is spectacularly generated code by spectacular v0.13.0 based on
Qlik Cloud Services 0.554.4
*/
import Auth from '../auth/auth.js';
import type { Config } from '../types/types.js';
/**
  represents a Group document
  @param assignedRoles
  @param createdAt - The timestamp for when the group record was created.
  @param id - The unique identifier for the group
  @param idpId - The unique identifier for the source IDP.
  @param lastUpdatedAt - The timestamp for when the group record was last updated.
  @param links - Contains Links for current document
  @param name - The name of the group.
  @param status - The state of the group.
  @param tenantId - The tenant identifier associated with the given group
  @param auth - Auth object used to make requests
 */
export declare class Group {
    auth: Auth;
    assignedRoles?: Array<GroupAssignedRoles>;
    createdAt: string;
    id: string;
    idpId?: string;
    lastUpdatedAt: string;
    links: GroupLinks;
    name: string;
    status: 'active' | 'disabled' | string;
    tenantId: string;
    [key: string]: any;
    constructor({ assignedRoles, createdAt, id, idpId, lastUpdatedAt, links, name, status, tenantId, ...rest }: {
        assignedRoles?: Array<GroupAssignedRoles>;
        createdAt: string;
        id: string;
        idpId?: string;
        lastUpdatedAt: string;
        links: GroupLinks;
        name: string;
        status: 'active' | 'disabled' | string;
        tenantId: string;
    }, auth?: Auth);
    /**
    Delete group by id
  
    */
    delete(): Promise<void>;
}
/**
  An advanced query filter to be used for complex user querying in the tenant.
  @param filter - The advanced filtering to be applied the query. All conditional statements within this query parameter are case insensitive.
  @param auth - Auth object used to make requests
 */
export declare class Filter {
    auth?: Auth;
    filter?: string;
    [key: string]: any;
    constructor({ filter, ...rest }: {
        filter?: string;
    }, auth?: Auth);
}
/**
  represents a role entity to be stored on a Group entity, either default or custom role
  @param id
  @param level
  @param name
  @param permissions
  @param type
  @param auth - Auth object used to make requests
 */
export declare class GroupAssignedRoles {
    auth?: Auth;
    id: string;
    level: 'admin' | 'user' | string;
    name: string;
    permissions: Array<string>;
    type: 'default' | string;
    [key: string]: any;
    constructor({ id, level, name, permissions, type, ...rest }: {
        id: string;
        level: 'admin' | 'user' | string;
        name: string;
        permissions: Array<string>;
        type: 'default' | string;
    }, auth?: Auth);
}
/**
  Contains Links for current document
  @param self
  @param auth - Auth object used to make requests
 */
export declare class GroupLinks {
    auth?: Auth;
    self: GroupLinksSelf;
    [key: string]: any;
    constructor({ self, ...rest }: {
        self: GroupLinksSelf;
    }, auth?: Auth);
}
/**
  @param href - Link to the current group document
  @param auth - Auth object used to make requests
 */
export declare class GroupLinksSelf {
    auth?: Auth;
    href: string;
    [key: string]: any;
    constructor({ href, ...rest }: {
        href: string;
    }, auth?: Auth);
}
/**
  represents a GroupSetting document
  @param autoCreateGroups - Determines if groups should be created on login.
  @param links - Contains Links for current document
  @param syncIdpGroups - Determines if groups should be created on login.
  @param tenantId - The unique tenant identifier.
  @param auth - Auth object used to make requests
 */
export declare class GroupSettings {
    auth?: Auth;
    autoCreateGroups: boolean;
    links: GroupSettingsLinks;
    syncIdpGroups: boolean;
    tenantId: string;
    [key: string]: any;
    constructor({ autoCreateGroups, links, syncIdpGroups, tenantId, ...rest }: {
        autoCreateGroups: boolean;
        links: GroupSettingsLinks;
        syncIdpGroups: boolean;
        tenantId: string;
    }, auth?: Auth);
}
/**
  Contains Links for current document
  @param self
  @param auth - Auth object used to make requests
 */
export declare class GroupSettingsLinks {
    auth?: Auth;
    self: GroupSettingsLinksSelf;
    [key: string]: any;
    constructor({ self, ...rest }: {
        self: GroupSettingsLinksSelf;
    }, auth?: Auth);
}
/**
  @param href - Link to the current group settings document
  @param auth - Auth object used to make requests
 */
export declare class GroupSettingsLinksSelf {
    auth?: Auth;
    href: string;
    [key: string]: any;
    constructor({ href, ...rest }: {
        href: string;
    }, auth?: Auth);
}
/**
  A result object when listing groups.
  @param data - An array of groups.
  @param links
  @param totalResults - Indicates the total number of matching documents. Will only be returned if the query parameter "totalResults" is true.
  @param auth - Auth object used to make requests
 */
export declare class GroupsClass {
    auth?: Auth;
    data?: Array<Group>;
    links?: GroupsLinks;
    totalResults?: number;
    [key: string]: any;
    constructor({ data, links, totalResults, ...rest }: {
        data?: Array<Group>;
        links?: GroupsLinks;
        totalResults?: number;
    }, auth?: Auth);
}
/**
  @param next
  @param prev
  @param self
  @param auth - Auth object used to make requests
 */
export declare class GroupsLinks {
    auth?: Auth;
    next?: GroupsLinksNext;
    prev?: GroupsLinksPrev;
    self: GroupsLinksSelf;
    [key: string]: any;
    constructor({ next, prev, self, ...rest }: {
        next?: GroupsLinksNext;
        prev?: GroupsLinksPrev;
        self: GroupsLinksSelf;
    }, auth?: Auth);
}
/**
  @param href - Link to the next page of items
  @param auth - Auth object used to make requests
 */
export declare class GroupsLinksNext {
    auth?: Auth;
    href: string;
    [key: string]: any;
    constructor({ href, ...rest }: {
        href: string;
    }, auth?: Auth);
}
/**
  @param href - Link to the previous page of items
  @param auth - Auth object used to make requests
 */
export declare class GroupsLinksPrev {
    auth?: Auth;
    href: string;
    [key: string]: any;
    constructor({ href, ...rest }: {
        href: string;
    }, auth?: Auth);
}
/**
  @param href - Link to the current page of items
  @param auth - Auth object used to make requests
 */
export declare class GroupsLinksSelf {
    auth?: Auth;
    href: string;
    [key: string]: any;
    constructor({ href, ...rest }: {
        href: string;
    }, auth?: Auth);
}
/**
  A JSON Patch document as defined in http://tools.ietf.org/html/rfc6902.
  @param op - The operation to be performed.
  @param path - A JSON Pointer.
  @param value - The value to be used for this operation.
  @param auth - Auth object used to make requests
 */
export declare class SettingsPatch {
    auth?: Auth;
    op: 'replace' | string;
    path: '/autoCreateGroups' | '/syncIdpGroups' | string;
    value: boolean;
    [key: string]: any;
    constructor({ op, path, value, ...rest }: {
        op: 'replace' | string;
        path: '/autoCreateGroups' | '/syncIdpGroups' | string;
        value: boolean;
    }, auth?: Auth);
}
/**
  An array of JSON Patches for the groups settings.

  @param auth - Auth object used to make requests
 */
export declare class SettingsPatchSchema extends Array<SettingsPatch> {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor(arr: Array<SettingsPatch>, auth?: Auth);
}
export declare class Groups {
    auth: Auth;
    config: Config;
    constructor(config: Config | Auth);
    /**    Retrieves a list of groups matching the filter using advanced query string.
    Filter groups
  
      @param limit - The number of user entries to retrieve.
      @param next - Get users with IDs that are higher than the target user ID. Cannot be used in conjunction with prev.
      @param prev - Get users with IDs that are lower than the target user ID. Cannot be used in conjunction with next.
      @param sort - The field to sort by, with +/- prefix indicating sort order
      @param data - Will contain the query filter to apply. It shall not contain more than 50 ids.
    */
    filter(data: Filter, queryParams?: {
        limit?: number;
        next?: string;
        prev?: string;
        sort?: 'name' | '+name' | '-name';
    }): Promise<GroupsClass>;
    /**    Returns the active tenant's group settings.
    Get group settings
  
    */
    getSettings(): Promise<GroupSettings>;
    /**
    Update group settings
  
      @param data
    */
    patchSettings(data: SettingsPatchSchema): Promise<void>;
    /**    Returns the requested group.
    Get group by id
  
      @param groupId - The group's unique identifier
    */
    get(groupId: string): Promise<Group>;
    /**    Returns a list of groups with cursor-based pagination.
    List groups.
  
      @param filter - The advanced filtering to use for the query. Refer to RFC 7644 https://datatracker.ietf.org/doc/rfc7644/ for the syntax. Cannot be combined with any of the fields marked as deprecated. All conditional statements within this query parameter are case insensitive.
      @param limit - The number of groups to retrieve.
      @param next - The next page cursor.
      @param prev - The previous page cursor.
      @param sort - Optional resource field name to sort on, eg. name. Can be prefixed with +/- to determine order, defaults to (+) ascending.
      @param totalResults - Whether to return a total match count in the result. Defaults to false.
    */
    getGroups(queryParams?: {
        filter?: string;
        limit?: number;
        next?: string;
        prev?: string;
        sort?: string;
        totalResults?: boolean;
    }): Promise<GroupsClass>;
}
