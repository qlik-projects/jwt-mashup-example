/**
This is spectacularly generated code by spectacular v0.13.0 based on
Qlik Cloud Services 0.554.4
*/
import Auth from '../auth/auth.js';
import type { Config } from '../types/types.js';
/**
  @param createdAt - The timestamp for when the role was created.
  @param description - Descriptive text for the role.
  @param id - The unique identifier for the role.
  @param lastUpdatedAt - The timestamp for when the role was last updated.
  @param level - The level of access associated to the role.
  @param links - Contains links for the role.
  @param name - The name of the role.
  @param permissions - An array of permissions associated with the role.
  @param tenantId - The tenant unique identifier associated with the given Role.
  @param type - The type of role.
  @param auth - Auth object used to make requests
 */
export declare class Role {
    auth?: Auth;
    createdAt: string;
    description: string;
    id: string;
    lastUpdatedAt: string;
    level?: 'admin' | 'user' | string;
    links: RoleLinks;
    name: string;
    permissions?: Array<string>;
    tenantId: string;
    type: 'default' | string;
    [key: string]: any;
    constructor({ createdAt, description, id, lastUpdatedAt, level, links, name, permissions, tenantId, type, ...rest }: {
        createdAt: string;
        description: string;
        id: string;
        lastUpdatedAt: string;
        level?: 'admin' | 'user' | string;
        links: RoleLinks;
        name: string;
        permissions?: Array<string>;
        tenantId: string;
        type: 'default' | string;
    }, auth?: Auth);
}
/**
  Contains pagination links
  @param next - Link to the next page of items
  @param prev - Link to the previous page of items
  @param self - Link to the current page of items
  @param auth - Auth object used to make requests
 */
export declare class Links {
    auth?: Auth;
    next?: LinksNext;
    prev?: LinksPrev;
    self: LinksSelf;
    [key: string]: any;
    constructor({ next, prev, self, ...rest }: {
        next?: LinksNext;
        prev?: LinksPrev;
        self: LinksSelf;
    }, auth?: Auth);
}
/**
  Link to the next page of items
  @param href
  @param auth - Auth object used to make requests
 */
export declare class LinksNext {
    auth?: Auth;
    href: string;
    [key: string]: any;
    constructor({ href, ...rest }: {
        href: string;
    }, auth?: Auth);
}
/**
  Link to the previous page of items
  @param href
  @param auth - Auth object used to make requests
 */
export declare class LinksPrev {
    auth?: Auth;
    href: string;
    [key: string]: any;
    constructor({ href, ...rest }: {
        href: string;
    }, auth?: Auth);
}
/**
  Link to the current page of items
  @param href
  @param auth - Auth object used to make requests
 */
export declare class LinksSelf {
    auth?: Auth;
    href: string;
    [key: string]: any;
    constructor({ href, ...rest }: {
        href: string;
    }, auth?: Auth);
}
/**
  @param data - An array of roles.
  @param links - Contains pagination links
  @param totalResults - Indicates the total number of matching documents. Will only be returned if the query parameter "totalResults" is true.
  @param auth - Auth object used to make requests
 */
export declare class ListRolesResult {
    auth?: Auth;
    data: Array<Role>;
    links: Links;
    totalResults?: number;
    [key: string]: any;
    constructor({ data, links, totalResults, ...rest }: {
        data: Array<Role>;
        links: Links;
        totalResults?: number;
    }, auth?: Auth);
}
/**
  Contains links for the role.
  @param self
  @param auth - Auth object used to make requests
 */
export declare class RoleLinks {
    auth?: Auth;
    self: RoleLinksSelf;
    [key: string]: any;
    constructor({ self, ...rest }: {
        self: RoleLinksSelf;
    }, auth?: Auth);
}
/**
  @param href - Link to the role.
  @param auth - Auth object used to make requests
 */
export declare class RoleLinksSelf {
    auth?: Auth;
    href: string;
    [key: string]: any;
    constructor({ href, ...rest }: {
        href: string;
    }, auth?: Auth);
}
export declare class Roles {
    auth: Auth;
    config: Config;
    constructor(config: Config | Auth);
    /**    Returns the requested role.
    Get role by ID
  
      @param id - The role's unique identifier
    */
    get(id: string): Promise<Role>;
    /**    Returns a list of roles using cursor-based pagination.
    List roles
  
      @param filter - The advanced filtering to use for the query. Refer to RFC 7644 https://datatracker.ietf.org/doc/rfc7644/ for the syntax. All conditional statements within this query parameter are case insensitive.
      @param limit - The number of roles to retrieve.
      @param next - The next page cursor.
      @param prev - The previous page cursor.
      @param sort - Optional resource field name to sort on, eg. name. Can be prefixed with +/- to determine order, defaults to (+) ascending.
      @param totalResults - Determines wether to return a count of the total records matched in the query. Defaults to false.
    */
    getRoles(queryParams?: {
        filter?: string;
        limit?: number;
        next?: string;
        prev?: string;
        sort?: string;
        totalResults?: boolean;
    }): Promise<ListRolesResult>;
}
