import Auth from "../auth/auth.js";
class Role {
  constructor({
    createdAt,
    description,
    id,
    lastUpdatedAt,
    level,
    links,
    name,
    permissions,
    tenantId,
    type,
    ...rest
  }, auth) {
    this.auth = auth;
    this.createdAt = createdAt;
    this.description = description;
    this.id = id;
    this.lastUpdatedAt = lastUpdatedAt;
    this.level = level;
    if (links instanceof RoleLinks) {
      this.links = links;
    } else {
      this.links = new RoleLinks(links, this.auth);
    }
    this.name = name;
    this.permissions = permissions;
    this.tenantId = tenantId;
    this.type = type;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Links {
  constructor({
    next,
    prev,
    self,
    ...rest
  }, auth) {
    this.auth = auth;
    if (next !== void 0 && next !== null) {
      if (next instanceof LinksNext) {
        this.next = next;
      } else {
        this.next = new LinksNext(next, this.auth);
      }
    }
    if (prev !== void 0 && prev !== null) {
      if (prev instanceof LinksPrev) {
        this.prev = prev;
      } else {
        this.prev = new LinksPrev(prev, this.auth);
      }
    }
    if (self instanceof LinksSelf) {
      this.self = self;
    } else {
      this.self = new LinksSelf(self, this.auth);
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class LinksNext {
  constructor({
    href,
    ...rest
  }, auth) {
    this.auth = auth;
    this.href = href;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class LinksPrev {
  constructor({
    href,
    ...rest
  }, auth) {
    this.auth = auth;
    this.href = href;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class LinksSelf {
  constructor({
    href,
    ...rest
  }, auth) {
    this.auth = auth;
    this.href = href;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ListRolesResult {
  constructor({
    data,
    links,
    totalResults,
    ...rest
  }, auth) {
    this.auth = auth;
    if (data.length > 0 && data[0] instanceof Role) {
      this.data = data;
    } else {
      this.data = data.map((element) => new Role(element, this.auth));
    }
    if (links instanceof Links) {
      this.links = links;
    } else {
      this.links = new Links(links, this.auth);
    }
    this.totalResults = totalResults;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class RoleLinks {
  constructor({
    self,
    ...rest
  }, auth) {
    this.auth = auth;
    if (self instanceof RoleLinksSelf) {
      this.self = self;
    } else {
      this.self = new RoleLinksSelf(self, this.auth);
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class RoleLinksSelf {
  constructor({
    href,
    ...rest
  }, auth) {
    this.auth = auth;
    this.href = href;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Roles {
  constructor(config) {
    this.config = config instanceof Auth ? config.config : config;
    this.auth = config instanceof Auth ? config : new Auth(config);
  }
  async get(id) {
    const response = await this.auth.rest(
      "/roles/{id}".replace("{id}", id),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new Role(responseJson, this.auth);
  }
  async getRoles(queryParams = { limit: 20 }) {
    const response = await this.auth.rest(
      `/roles?${Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => `${k}=${v}`).join("&")}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new ListRolesResult(responseJson, this.auth);
  }
}
export {
  Links,
  LinksNext,
  LinksPrev,
  LinksSelf,
  ListRolesResult,
  Role,
  RoleLinks,
  RoleLinksSelf,
  Roles
};
