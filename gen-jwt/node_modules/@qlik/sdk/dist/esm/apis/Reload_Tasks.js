import Auth from "../auth/auth.js";
class Task {
  constructor({
    appId,
    autoReload,
    autoReloadPartial,
    endDateTime,
    partial,
    recurrence,
    startDateTime,
    timeZone,
    fortressId,
    id,
    lastExecutionTime,
    links,
    log,
    nextExecutionTime,
    spaceId,
    state,
    tenantId,
    userId,
    ...rest
  }, auth) {
    this.auth = auth;
    this.appId = appId;
    this.autoReload = autoReload;
    this.autoReloadPartial = autoReloadPartial;
    this.endDateTime = endDateTime;
    this.partial = partial;
    this.recurrence = recurrence;
    this.startDateTime = startDateTime;
    this.timeZone = timeZone;
    this.fortressId = fortressId;
    this.id = id;
    this.lastExecutionTime = lastExecutionTime;
    if (links instanceof SelfLink) {
      this.links = links;
    } else {
      this.links = new SelfLink(links, this.auth);
    }
    this.log = log;
    this.nextExecutionTime = nextExecutionTime;
    this.spaceId = spaceId;
    this.state = state;
    this.tenantId = tenantId;
    this.userId = userId;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
  async delete() {
    await this.auth.rest(
      "/reload-tasks/{taskId}".replace("{taskId}", this.id ?? ""),
      {
        method: "DELETE"
      }
    );
  }
  async set(data) {
    const response = await this.auth.rest(
      "/reload-tasks/{taskId}".replace("{taskId}", this.id ?? ""),
      {
        method: "PUT",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    Object.keys(responseJson).forEach((key) => {
      if (this[key]) {
        this[key] = responseJson[key];
      }
    });
    return this;
  }
}
class Href {
  constructor({
    href,
    ...rest
  }, auth) {
    this.auth = auth;
    this.href = href;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class PaginationLinks {
  constructor({
    self,
    next,
    prev,
    ...rest
  }, auth) {
    this.auth = auth;
    if (self instanceof Href) {
      this.self = self;
    } else {
      this.self = new Href(self, this.auth);
    }
    if (next !== void 0 && next !== null) {
      if (next instanceof Href) {
        this.next = next;
      } else {
        this.next = new Href(next, this.auth);
      }
    }
    if (prev !== void 0 && prev !== null) {
      if (prev instanceof Href) {
        this.prev = prev;
      } else {
        this.prev = new Href(prev, this.auth);
      }
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class PostTaskBody {
  constructor({
    appId,
    autoReload,
    autoReloadPartial,
    endDateTime,
    partial,
    recurrence,
    startDateTime,
    timeZone,
    type,
    ...rest
  }, auth) {
    this.auth = auth;
    this.appId = appId;
    this.autoReload = autoReload;
    this.autoReloadPartial = autoReloadPartial;
    this.endDateTime = endDateTime;
    this.partial = partial;
    this.recurrence = recurrence;
    this.startDateTime = startDateTime;
    this.timeZone = timeZone;
    this.type = type;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class PutTaskBody {
  constructor({
    appId,
    autoReload,
    autoReloadPartial,
    endDateTime,
    partial,
    recurrence,
    startDateTime,
    timeZone,
    state,
    ...rest
  }, auth) {
    this.auth = auth;
    this.appId = appId;
    this.autoReload = autoReload;
    this.autoReloadPartial = autoReloadPartial;
    this.endDateTime = endDateTime;
    this.partial = partial;
    this.recurrence = recurrence;
    this.startDateTime = startDateTime;
    this.timeZone = timeZone;
    this.state = state;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class SelfLink {
  constructor({
    self,
    ...rest
  }, auth) {
    this.auth = auth;
    if (self instanceof Href) {
      this.self = self;
    } else {
      this.self = new Href(self, this.auth);
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Tasks {
  constructor({
    data,
    links,
    ...rest
  }, auth) {
    this.auth = auth;
    if (data.length > 0 && data[0] instanceof Task) {
      this.data = data;
    } else {
      this.data = data.map((element) => new Task(element, this.auth));
    }
    if (links instanceof PaginationLinks) {
      this.links = links;
    } else {
      this.links = new PaginationLinks(links, this.auth);
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class ReloadTasks {
  constructor(config) {
    this.config = config instanceof Auth ? config.config : config;
    this.auth = config instanceof Auth ? config : new Auth(config);
  }
  async get(taskId) {
    const response = await this.auth.rest(
      "/reload-tasks/{taskId}".replace("{taskId}", taskId),
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new Task(responseJson, this.auth);
  }
  async getReloadTasks(queryParams = { limit: 10 }) {
    const response = await this.auth.rest(
      `/reload-tasks?${Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => `${k}=${v}`).join("&")}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new Tasks(responseJson, this.auth);
  }
  async create(data) {
    const response = await this.auth.rest(
      "/reload-tasks",
      {
        method: "POST",
        body: JSON.stringify(data)
      }
    );
    const responseJson = await response.json();
    return new Task(responseJson, this.auth);
  }
}
export {
  Href,
  PaginationLinks,
  PostTaskBody,
  PutTaskBody,
  ReloadTasks,
  SelfLink,
  Task,
  Tasks
};
