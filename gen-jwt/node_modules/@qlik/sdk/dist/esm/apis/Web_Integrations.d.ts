/**
This is spectacularly generated code by spectacular v0.13.0 based on
Qlik Cloud Services 0.554.4
*/
import Auth from '../auth/auth.js';
import type { Config } from '../types/types.js';
/**
  A web integration object.
  @param created - The time the web integration was created at.
  @param createdBy - The user that created the web integration.
  @param id - The unique web integration identifier.
  @param lastUpdated - The time the web integration was last updated at.
  @param name - The name of the web integration.
  @param tenantId - The tenant that the web integration belongs too.
  @param validOrigins - The origins who are allowed to make requests to the tenant.
  @param auth - Auth object used to make requests
 */
export declare class WebIntegration {
    auth: Auth;
    created?: string;
    createdBy?: string;
    id?: string;
    lastUpdated?: string;
    name?: string;
    tenantId?: string;
    validOrigins?: Array<string>;
    [key: string]: any;
    constructor({ created, createdBy, id, lastUpdated, name, tenantId, validOrigins, ...rest }: {
        created?: string;
        createdBy?: string;
        id?: string;
        lastUpdated?: string;
        name?: string;
        tenantId?: string;
        validOrigins?: Array<string>;
    }, auth?: Auth);
    /**    Deletes a single web integration by ID.
    Delete web integration by ID
  
    */
    delete(): Promise<void>;
    /**    Updates a single web integration by ID.
    Update web integration by ID
  
      @param data
    */
    patch(data: WebIntegrationPatchSchema): Promise<void>;
}
/**
  A JSON Patch document as defined in http://tools.ietf.org/html/rfc6902.
  @param op - The operation to be performed.
  @param path - A JSON Pointer.
  @param value - New value to be used for this operation.
  @param auth - Auth object used to make requests
 */
export declare class WebIntegrationPatch {
    auth?: Auth;
    op: 'replace' | string;
    path: '/name' | '/validOrigins' | string;
    value: string;
    [key: string]: any;
    constructor({ op, path, value, ...rest }: {
        op: 'replace' | string;
        path: '/name' | '/validOrigins' | string;
        value: string;
    }, auth?: Auth);
}
export declare class WebIntegrationPatchSchema extends Array<WebIntegrationPatch> {
    data?: any;
    auth?: Auth;
    [key: string]: any;
    constructor(arr: Array<WebIntegrationPatch>, auth?: Auth);
}
/**
  The creation of a web integration response.
  @param created - The time the web integration was created at.
  @param createdBy - The user that created the web integration.
  @param id - The unique web integration identifier.
  @param lastUpdated - The time the web integration was last updated at.
  @param links - Pagination links
  @param name - The name of the newly created web integration.
  @param tenantId - The tenant that the web integration belongs too.
  @param validOrigins - The origins who are allowed to make requests to the tenant.
  @param auth - Auth object used to make requests
 */
export declare class WebIntegrationPost {
    auth?: Auth;
    created?: string;
    createdBy?: string;
    id?: string;
    lastUpdated?: string;
    links?: WebIntegrationPostLinks;
    name?: string;
    tenantId?: string;
    validOrigins?: Array<string>;
    [key: string]: any;
    constructor({ created, createdBy, id, lastUpdated, links, name, tenantId, validOrigins, ...rest }: {
        created?: string;
        createdBy?: string;
        id?: string;
        lastUpdated?: string;
        links?: WebIntegrationPostLinks;
        name?: string;
        tenantId?: string;
        validOrigins?: Array<string>;
    }, auth?: Auth);
}
/**
  Pagination links
  @param self - Link information for current page
  @param auth - Auth object used to make requests
 */
export declare class WebIntegrationPostLinks {
    auth?: Auth;
    self: WebIntegrationPostLinksSelf;
    [key: string]: any;
    constructor({ self, ...rest }: {
        self: WebIntegrationPostLinksSelf;
    }, auth?: Auth);
}
/**
  Link information for current page
  @param href - URL to the current page of records
  @param auth - Auth object used to make requests
 */
export declare class WebIntegrationPostLinksSelf {
    auth?: Auth;
    href: string;
    [key: string]: any;
    constructor({ href, ...rest }: {
        href: string;
    }, auth?: Auth);
}
/**
  @param name - The name of the web integration to create.
  @param validOrigins - The origins who are allowed to make requests to the tenant.
  @param auth - Auth object used to make requests
 */
export declare class WebIntegrationPostSchema {
    auth?: Auth;
    name: string;
    validOrigins?: Array<string>;
    [key: string]: any;
    constructor({ name, validOrigins, ...rest }: {
        name: string;
        validOrigins?: Array<string>;
    }, auth?: Auth);
}
/**
  An array of web integration objects.
  @param data
  @param links - Pagination links
  @param auth - Auth object used to make requests
 */
export declare class WebIntegrationsClass {
    auth?: Auth;
    data?: Array<WebIntegration>;
    links?: WebIntegrationsLinks;
    [key: string]: any;
    constructor({ data, links, ...rest }: {
        data?: Array<WebIntegration>;
        links?: WebIntegrationsLinks;
    }, auth?: Auth);
}
/**
  Pagination links
  @param next - Link information for next page
  @param prev - Link information for previous page
  @param self - Link information for current page
  @param auth - Auth object used to make requests
 */
export declare class WebIntegrationsLinks {
    auth?: Auth;
    next?: WebIntegrationsLinksNext;
    prev?: WebIntegrationsLinksPrev;
    self: WebIntegrationsLinksSelf;
    [key: string]: any;
    constructor({ next, prev, self, ...rest }: {
        next?: WebIntegrationsLinksNext;
        prev?: WebIntegrationsLinksPrev;
        self: WebIntegrationsLinksSelf;
    }, auth?: Auth);
}
/**
  Link information for next page
  @param href - URL to the next page of records
  @param auth - Auth object used to make requests
 */
export declare class WebIntegrationsLinksNext {
    auth?: Auth;
    href: string;
    [key: string]: any;
    constructor({ href, ...rest }: {
        href: string;
    }, auth?: Auth);
}
/**
  Link information for previous page
  @param href - URL to the previous page of records
  @param auth - Auth object used to make requests
 */
export declare class WebIntegrationsLinksPrev {
    auth?: Auth;
    href: string;
    [key: string]: any;
    constructor({ href, ...rest }: {
        href: string;
    }, auth?: Auth);
}
/**
  Link information for current page
  @param href - URL to the current page of records
  @param auth - Auth object used to make requests
 */
export declare class WebIntegrationsLinksSelf {
    auth?: Auth;
    href: string;
    [key: string]: any;
    constructor({ href, ...rest }: {
        href: string;
    }, auth?: Auth);
}
export declare class WebIntegrations {
    auth: Auth;
    config: Config;
    constructor(config: Config | Auth);
    /**    Retrieves a single web integration by ID.
    Get web integration by ID
  
      @param id - The ID of the web integration to retrieve
    */
    get(id: string): Promise<WebIntegration>;
    /**    Retrieves web integrations matching the query.
    List web integrations
  
      @param endingBefore - The target web integration ID to start looking before for web integrations. Cannot be used in conjunction with startingAfter.
      @param limit - The number of web integration entries to retrieve.
      @param sort - The field to sort by. Prefix with +/- to indicate ascending/descending order.
      @param startingAfter - The target web integration ID to start looking after for web integrations. Cannot be used in conjunction with endingBefore.
      @param tenantId - The tenantId to filter by.
    */
    getWebIntegrations(queryParams?: {
        endingBefore?: string;
        limit?: number;
        sort?: 'name' | '+name' | '-name';
        startingAfter?: string;
        tenantId?: string;
    }): Promise<WebIntegrationsClass>;
    /**    Creates a web integration.
    Create web integration
  
      @param data
    */
    create(data: WebIntegrationPostSchema): Promise<WebIntegrationPost>;
}
