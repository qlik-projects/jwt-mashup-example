var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Quotas_exports = {};
__export(Quotas_exports, {
  GetQuotaByIdResult: () => GetQuotaByIdResult,
  GetQuotasResult: () => GetQuotasResult,
  Quota: () => Quota,
  QuotaAttributes: () => QuotaAttributes,
  Quotas: () => Quotas
});
module.exports = __toCommonJS(Quotas_exports);
var import_auth = __toESM(require("../auth/auth.js"));
class GetQuotaByIdResult {
  constructor({
    data,
    ...rest
  }, auth) {
    this.auth = auth;
    if (data.length > 0 && data[0] instanceof Quota) {
      this.data = data;
    } else {
      this.data = data.map((element) => new Quota(element, this.auth));
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class GetQuotasResult {
  constructor({
    data,
    ...rest
  }, auth) {
    this.auth = auth;
    if (data.length > 0 && data[0] instanceof Quota) {
      this.data = data;
    } else {
      this.data = data.map((element) => new Quota(element, this.auth));
    }
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Quota {
  constructor({
    attributes,
    id,
    type,
    ...rest
  }, auth) {
    this.auth = auth;
    if (attributes instanceof QuotaAttributes) {
      this.attributes = attributes;
    } else {
      this.attributes = new QuotaAttributes(attributes, this.auth);
    }
    this.id = id;
    this.type = type;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class QuotaAttributes {
  constructor({
    quota,
    unit,
    usage,
    warningThresholds,
    ...rest
  }, auth) {
    this.auth = auth;
    this.quota = quota;
    this.unit = unit;
    this.usage = usage;
    this.warningThresholds = warningThresholds;
    if (rest) {
      Object.keys(rest).forEach((prop) => {
        this[prop] = rest[prop];
      });
    }
  }
}
class Quotas {
  constructor(config) {
    this.config = config instanceof import_auth.default ? config.config : config;
    this.auth = config instanceof import_auth.default ? config : new import_auth.default(config);
  }
  async gets(id, queryParams = {}) {
    const response = await this.auth.rest(
      `${"/quotas/{id}".replace("{id}", id)}?${Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => `${k}=${v}`).join("&")}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new GetQuotaByIdResult(responseJson, this.auth);
  }
  async getQuotas(queryParams = {}) {
    const response = await this.auth.rest(
      `/quotas?${Object.entries(queryParams).filter(([, v]) => v !== void 0).map(([k, v]) => `${k}=${v}`).join("&")}`,
      {
        method: "GET"
      }
    );
    const responseJson = await response.json();
    return new GetQuotasResult(responseJson, this.auth);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  GetQuotaByIdResult,
  GetQuotasResult,
  Quota,
  QuotaAttributes,
  Quotas
});
