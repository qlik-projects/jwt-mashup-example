/**
This is spectacularly generated code by spectacular v0.13.0 based on
Qlik Cloud Services 0.554.4
*/
import Auth from '../auth/auth.js';
import type { Config } from '../types/types.js';
/**
  @param href - The URL for the link
  @param auth - Auth object used to make requests
 */
export declare class Link {
    auth?: Auth;
    href: string;
    [key: string]: any;
    constructor({ href, ...rest }: {
        href: string;
    }, auth?: Auth);
}
/**
  @param description - The description of the token
  @param deviceType - The type of the user device the authorization token is generated for (Tablet, Phone etc.)
  @param id - The token ID
  @param lastUsed - The last time the token was used
  @param tenantId - The ID of the owning tenant
  @param userId - The ID of the owning user
  @param auth - Auth object used to make requests
 */
export declare class OauthToken {
    auth?: Auth;
    description?: string;
    deviceType?: string;
    id: string;
    lastUsed?: string;
    tenantId: string;
    userId: string;
    [key: string]: any;
    constructor({ description, deviceType, id, lastUsed, tenantId, userId, ...rest }: {
        description?: string;
        deviceType?: string;
        id: string;
        lastUsed?: string;
        tenantId: string;
        userId: string;
    }, auth?: Auth);
}
/**
  @param data
  @param links
  @param auth - Auth object used to make requests
 */
export declare class OauthTokenPage {
    auth?: Auth;
    data: Array<OauthToken>;
    links: OauthTokenPageLinks;
    [key: string]: any;
    constructor({ data, links, ...rest }: {
        data: Array<OauthToken>;
        links: OauthTokenPageLinks;
    }, auth?: Auth);
}
/**
  @param next
  @param prev
  @param self
  @param auth - Auth object used to make requests
 */
export declare class OauthTokenPageLinks {
    auth?: Auth;
    next?: Link;
    prev?: Link;
    self: Link;
    [key: string]: any;
    constructor({ next, prev, self, ...rest }: {
        next?: Link;
        prev?: Link;
        self: Link;
    }, auth?: Auth);
}
export declare class OauthTokens {
    auth: Auth;
    config: Config;
    constructor(config: Config | Auth);
    /**
    Revoke an OAuth token by ID
  
      @param tokenId - The ID of the token to revoke
    */
    delete(tokenId: string): Promise<void>;
    /**
    List OAuth tokens
  
      @param limit - The maximum number of tokens to return
      @param page - The target page
      @param sort - The field to sort by
      @param userId - The ID of the user to limit results to
    */
    getOauthTokens(queryParams?: {
        limit?: number;
        page?: string;
        sort?: 'userId';
        userId?: string;
    }): Promise<OauthTokenPage>;
}
