import { generateRandomString, getUrl } from "./utils.js";
const sha256 = async (message) => {
  const crypTo = false ? (await null).webcrypto : window.crypto;
  const msgBuffer = false ? new (await null).TextEncoder().encode(message) : new TextEncoder().encode(message);
  const hashBuffer = await crypTo.subtle.digest("SHA-256", msgBuffer);
  const hashArray = Array.from(new Uint8Array(hashBuffer));
  const hashBase64 = btoa(hashArray.map((byte) => String.fromCharCode(byte)).join(""));
  return hashBase64.replaceAll(/\+/g, "-").replaceAll(/\//g, "_").replace(/=+$/, "");
};
const generateCodeChallenge = async () => {
  const verifier = generateRandomString(43);
  const challenge = await sha256(verifier);
  return { verifier, challenge };
};
const generateAuthorizationUrl = async (config, state) => {
  const { verifier, challenge: codeChallenge } = await generateCodeChallenge();
  const queryParams = {
    response_type: "code",
    client_id: config.clientId,
    redirect_uri: config.redirectUri,
    scope: config.scopes.join(" "),
    state: state || generateRandomString(7),
    code_challenge: codeChallenge,
    code_challenge_method: "S256"
  };
  const queryParamsKeys = Object.keys(queryParams);
  queryParamsKeys.sort();
  const query = queryParamsKeys.map((k) => `${k}=${queryParams[k]}`).join("&");
  return { url: getUrl(`${config.host.replace(/^https?:/, "")}/oauth/authorize?${query}`, config?.isSecure).href, verifier, state: queryParams.state };
};
export {
  generateAuthorizationUrl
};
